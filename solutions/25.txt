D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (- y 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ (+ 1 x) (+ 1 y)) y) y))
 nr_nodes: 12]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`(- ? ?)`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- (- y 4) 4)))
 nr_nodes: 8]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- y y) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`4`#`#`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ 4 1) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- x 4) x))
 nr_nodes: 6]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (+ y (+ x 4))))
 nr_nodes: 8]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x (+ 4 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (+ (- y 4) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`4`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- x 1) x) (+ (+ x 4) (+ x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x x) (- x 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`x`#`#`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- y (- x x)) 4) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`4`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- 1 4) 4) x))
 nr_nodes: 8]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`1`#`#`4`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (- (- 1 4) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`4`#`#`4`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ (- (- 4 4) y) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`4`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (- y 1)) (+ 4 (- 4 4))))
 nr_nodes: 12]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(- ? ?)`4`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (- 4 x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`(+ ? ?)`4`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 (+ 4 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`(- ? ?)`4`#`#`1`#`#`4`#`#`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 (- 4 1)) 4) (+ 4 (- y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (- x 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`4`#`#`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 4 1) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ y x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ 1 x) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- 4 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`4`#`#`(- ? ?)`x`#`#`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 4) (- x (+ 4 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 1 4))
 nr_nodes: 4]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- y (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`4`#`#`1`#`#`1`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`4`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ (- (- 4 1) 1) (- (+ y y) 4)) 1))
 nr_nodes: 14]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 1 4))
 nr_nodes: 4]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`4`#`#`y`#`#`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ 1 1) (- (- (+ 4 y) x) (- x (+ y x)))))
 nr_nodes: 16]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- 1 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (+ 1 1) (+ (- y y) (+ y x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(- ? ?)`1`#`#`y`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (- 1 y) (- x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- 1 y) (- y y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`(- ? ?)`x`#`#`4`#`#`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (- (- y (- x 4)) (+ (- x 1) x)) 4))
 nr_nodes: 14]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(- ? ?)`x`#`#`4`#`#`(+ ? ?)`4`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (- x 4) (+ 4 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (+ (+ x x) x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 x) x) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x (+ (+ y 4) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`4`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- y 1) (+ 4 y)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 1) (+ y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ y 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- x y) (+ (+ y x) 4)))
 nr_nodes: 10]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ 1 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- x 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`(+ ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (- y 4) (+ 4 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 y) (+ x 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- 1 x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`4`#`#`x`#`#`y`#`#`(+ ? ?)`4`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- 4 x) y) (+ 4 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (+ 1 y)) (- y (+ 4 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`(- ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- (- 1 y) (- 1 1)) (- y x)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y (+ x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ 1 x) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ x y) (+ y x)) (- 1 4)))
 nr_nodes: 12]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ 4 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`4`#`#`(- ? ?)`x`#`#`y`#`#`(- ? ?)`(+ ? ?)`4`#`#`4`#`#`y`#`#`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ 4 (- x y)) (- (+ 4 4) y)) (+ 4 y)))
 nr_nodes: 16]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`1`#`#`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- 1 (+ x (+ 1 y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`x`#`#`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(- ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- 1 (- y 1)) (+ x 4)) (- y (- (- x y) x))))
 nr_nodes: 18]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- 1 (- y y))))
 nr_nodes: 8]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`4`#`#`4`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`4`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 4 4) (+ (- (- 4 1) (- y y)) (+ (- y y) y))))
 nr_nodes: 18]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 1 4))
 nr_nodes: 4]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ x (- x y)) y))
 nr_nodes: 8]
[Generation 0]
[Computing fitness]
[(1.375, 151), (1.25, 94), (1.25, 186), (1.125, 224), (1.125, 299), (1.0, 17), (1.0, 39), (1.0, 49), (1.0, 76), (1.0, 93), (1.0, 116), (1.0, 144), (1.0, 187), (1.0, 191), (1.0, 215), (1.0, 267), (1.0, 278), (0.875, 128), (0.875, 172), (0.75, 115), (0.75, 182), (0.75, 234), (0.75, 244), (0.625, 15), (0.625, 18), (0.625, 21), (0.625, 33), (0.625, 62), (0.625, 89), (0.625, 117), (0.625, 119), (0.625, 126), (0.625, 163), (0.625, 170), (0.625, 194), (0.625, 212), (0.625, 248), (0.625, 272), (0.5416666666666666, 166), (0.5, 6), (0.5, 23), (0.5, 25), (0.5, 35), (0.5, 41), (0.5, 43), (0.5, 47), (0.5, 60), (0.5, 64), (0.5, 80), (0.5, 81), (0.5, 111), (0.5, 141), (0.5, 167), (0.5, 180), (0.5, 190), (0.5, 192), (0.5, 196), (0.5, 205), (0.5, 206), (0.5, 210), (0.5, 225), (0.5, 227), (0.5, 265), (0.5, 281), (0.5, 293), (0.41666666666666663, 174), (0.375, 20), (0.375, 63), (0.375, 90), (0.375, 118), (0.375, 123), (0.375, 152), (0.375, 153), (0.375, 199), (0.375, 219), (0.375, 221), (0.375, 254), (0.375, 261), (0.29166666666666663, 0), (0.29166666666666663, 1), (0.29166666666666663, 3), (0.29166666666666663, 4), (0.29166666666666663, 5), (0.29166666666666663, 7), (0.29166666666666663, 8), (0.29166666666666663, 9), (0.29166666666666663, 10), (0.29166666666666663, 11), (0.29166666666666663, 13), (0.29166666666666663, 14), (0.29166666666666663, 16), (0.29166666666666663, 22), (0.29166666666666663, 24), (0.29166666666666663, 26), (0.29166666666666663, 28), (0.29166666666666663, 29), (0.29166666666666663, 31), (0.29166666666666663, 32), (0.29166666666666663, 34), (0.29166666666666663, 36), (0.29166666666666663, 37), (0.29166666666666663, 38), (0.29166666666666663, 40), (0.29166666666666663, 42), (0.29166666666666663, 44), (0.29166666666666663, 45), (0.29166666666666663, 46), (0.29166666666666663, 48), (0.29166666666666663, 50), (0.29166666666666663, 51), (0.29166666666666663, 55), (0.29166666666666663, 56), (0.29166666666666663, 57), (0.29166666666666663, 58), (0.29166666666666663, 59), (0.29166666666666663, 61), (0.29166666666666663, 65), (0.29166666666666663, 66), (0.29166666666666663, 67), (0.29166666666666663, 68), (0.29166666666666663, 69), (0.29166666666666663, 70), (0.29166666666666663, 71), (0.29166666666666663, 73), (0.29166666666666663, 74), (0.29166666666666663, 77), (0.29166666666666663, 78), (0.29166666666666663, 79), (0.29166666666666663, 82), (0.29166666666666663, 83), (0.29166666666666663, 86), (0.29166666666666663, 87), (0.29166666666666663, 88), (0.29166666666666663, 91), (0.29166666666666663, 92), (0.29166666666666663, 95), (0.29166666666666663, 96), (0.29166666666666663, 97), (0.29166666666666663, 98), (0.29166666666666663, 99), (0.29166666666666663, 104), (0.29166666666666663, 105), (0.29166666666666663, 107), (0.29166666666666663, 110), (0.29166666666666663, 114), (0.29166666666666663, 121), (0.29166666666666663, 124), (0.29166666666666663, 125), (0.29166666666666663, 127), (0.29166666666666663, 129), (0.29166666666666663, 130), (0.29166666666666663, 131), (0.29166666666666663, 135), (0.29166666666666663, 136), (0.29166666666666663, 137), (0.29166666666666663, 139), (0.29166666666666663, 140), (0.29166666666666663, 142), (0.29166666666666663, 143), (0.29166666666666663, 145), (0.29166666666666663, 146), (0.29166666666666663, 147), (0.29166666666666663, 148), (0.29166666666666663, 150), (0.29166666666666663, 157), (0.29166666666666663, 158), (0.29166666666666663, 160), (0.29166666666666663, 162), (0.29166666666666663, 165), (0.29166666666666663, 168), (0.29166666666666663, 173), (0.29166666666666663, 175), (0.29166666666666663, 176), (0.29166666666666663, 178), (0.29166666666666663, 181), (0.29166666666666663, 183), (0.29166666666666663, 184), (0.29166666666666663, 189), (0.29166666666666663, 193), (0.29166666666666663, 195), (0.29166666666666663, 197), (0.29166666666666663, 201), (0.29166666666666663, 203), (0.29166666666666663, 207), (0.29166666666666663, 209), (0.29166666666666663, 211), (0.29166666666666663, 213), (0.29166666666666663, 214), (0.29166666666666663, 216), (0.29166666666666663, 220), (0.29166666666666663, 222), (0.29166666666666663, 231), (0.29166666666666663, 232), (0.29166666666666663, 235), (0.29166666666666663, 236), (0.29166666666666663, 237), (0.29166666666666663, 240), (0.29166666666666663, 241), (0.29166666666666663, 242), (0.29166666666666663, 246), (0.29166666666666663, 250), (0.29166666666666663, 251), (0.29166666666666663, 252), (0.29166666666666663, 253), (0.29166666666666663, 255), (0.29166666666666663, 256), (0.29166666666666663, 258), (0.29166666666666663, 262), (0.29166666666666663, 263), (0.29166666666666663, 264), (0.29166666666666663, 266), (0.29166666666666663, 268), (0.29166666666666663, 269), (0.29166666666666663, 270), (0.29166666666666663, 274), (0.29166666666666663, 276), (0.29166666666666663, 280), (0.29166666666666663, 282), (0.29166666666666663, 284), (0.29166666666666663, 285), (0.29166666666666663, 286), (0.29166666666666663, 287), (0.29166666666666663, 289), (0.29166666666666663, 294), (0.29166666666666663, 295), (0.29166666666666663, 298), (0.25, 12), (0.25, 27), (0.25, 85), (0.25, 103), (0.25, 112), (0.25, 120), (0.25, 132), (0.25, 134), (0.25, 217), (0.25, 226), (0.25, 229), (0.25, 249), (0.25, 288), (0.25, 292), (0.25, 297), (0.16666666666666666, 2), (0.16666666666666666, 19), (0.16666666666666666, 30), (0.16666666666666666, 52), (0.16666666666666666, 53), (0.16666666666666666, 54), (0.16666666666666666, 72), (0.16666666666666666, 75), (0.16666666666666666, 84), (0.16666666666666666, 100), (0.16666666666666666, 101), (0.16666666666666666, 102), (0.16666666666666666, 106), (0.16666666666666666, 108), (0.16666666666666666, 109), (0.16666666666666666, 113), (0.16666666666666666, 122), (0.16666666666666666, 133), (0.16666666666666666, 138), (0.16666666666666666, 149), (0.16666666666666666, 154), (0.16666666666666666, 155), (0.16666666666666666, 156), (0.16666666666666666, 161), (0.16666666666666666, 164), (0.16666666666666666, 169), (0.16666666666666666, 171), (0.16666666666666666, 177), (0.16666666666666666, 179), (0.16666666666666666, 185), (0.16666666666666666, 188), (0.16666666666666666, 198), (0.16666666666666666, 200), (0.16666666666666666, 202), (0.16666666666666666, 204), (0.16666666666666666, 208), (0.16666666666666666, 218), (0.16666666666666666, 223), (0.16666666666666666, 228), (0.16666666666666666, 230), (0.16666666666666666, 233), (0.16666666666666666, 238), (0.16666666666666666, 239), (0.16666666666666666, 243), (0.16666666666666666, 245), (0.16666666666666666, 247), (0.16666666666666666, 257), (0.16666666666666666, 259), (0.16666666666666666, 260), (0.16666666666666666, 273), (0.16666666666666666, 277), (0.16666666666666666, 279), (0.16666666666666666, 283), (0.16666666666666666, 291), (0.16666666666666666, 296), (0.125, 159), (0.125, 271), (0.1, 275), (0.1, 290)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`(+ ? ?)`4`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 (+ 4 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 x) x) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- 1 x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ x (- x y)) y))
 nr_nodes: 8]
[Generation 1]
[Computing fitness]
[(1.375, 151), (1.25, 186), (1.25, 94), (1.125, 224), (1.125, 341), (1.125, 299), (1.125, 303), (1.0, 306), (1.0, 278), (1.0, 39), (1.0, 191), (1.0, 144), (1.0, 267), (1.0, 327), (1.0, 215), (1.0, 300), (1.0, 304), (1.0, 187), (1.0, 49), (1.0, 116), (1.0, 308), (1.0, 76), (1.0, 17), (1.0, 336), (1.0, 317), (1.0, 93), (0.875, 128), (0.875, 172), (0.75, 115), (0.75, 313), (0.75, 234), (0.75, 244), (0.75, 182), (0.75, 312), (0.625, 322), (0.625, 89), (0.625, 272), (0.625, 21), (0.625, 307), (0.625, 62), (0.625, 170), (0.625, 248), (0.625, 15), (0.625, 18), (0.625, 305), (0.625, 163), (0.625, 194), (0.625, 117), (0.625, 347), (0.625, 314), (0.625, 321), (0.625, 33), (0.625, 212), (0.625, 126), (0.625, 119), (0.5416666666666666, 166), (0.5, 339), (0.5, 324), (0.5, 190), (0.5, 310), (0.5, 265), (0.5, 80), (0.5, 180), (0.5, 329), (0.5, 60), (0.5, 206), (0.5, 47), (0.5, 6), (0.5, 141), (0.5, 325), (0.5, 281), (0.5, 196), (0.5, 333), (0.5, 302), (0.5, 35), (0.5, 43), (0.5, 167), (0.5, 331), (0.5, 225), (0.5, 315), (0.5, 205), (0.5, 337), (0.5, 293), (0.5, 210), (0.5, 41), (0.5, 25), (0.5, 330), (0.5, 309), (0.5, 23), (0.5, 334), (0.5, 227), (0.5, 111), (0.5, 192), (0.5, 326), (0.5, 81), (0.5, 64), (0.41666666666666663, 174), (0.375, 332), (0.375, 343), (0.375, 199), (0.375, 254), (0.375, 152), (0.375, 90), (0.375, 118), (0.375, 221), (0.375, 219), (0.375, 123), (0.375, 340), (0.375, 261), (0.375, 345), (0.375, 63), (0.375, 153), (0.375, 20), (0.29166666666666663, 158), (0.29166666666666663, 214), (0.29166666666666663, 145), (0.29166666666666663, 73), (0.29166666666666663, 286), (0.29166666666666663, 189), (0.29166666666666663, 270), (0.29166666666666663, 147), (0.29166666666666663, 373), (0.29166666666666663, 264), (0.29166666666666663, 69), (0.29166666666666663, 393), (0.29166666666666663, 58), (0.29166666666666663, 11), (0.29166666666666663, 285), (0.29166666666666663, 114), (0.29166666666666663, 51), (0.29166666666666663, 356), (0.29166666666666663, 82), (0.29166666666666663, 266), (0.29166666666666663, 361), (0.29166666666666663, 231), (0.29166666666666663, 10), (0.29166666666666663, 294), (0.29166666666666663, 374), (0.29166666666666663, 350), (0.29166666666666663, 176), (0.29166666666666663, 44), (0.29166666666666663, 56), (0.29166666666666663, 105), (0.29166666666666663, 59), (0.29166666666666663, 262), (0.29166666666666663, 13), (0.29166666666666663, 353), (0.29166666666666663, 165), (0.29166666666666663, 79), (0.29166666666666663, 28), (0.29166666666666663, 256), (0.29166666666666663, 211), (0.29166666666666663, 371), (0.29166666666666663, 216), (0.29166666666666663, 178), (0.29166666666666663, 392), (0.29166666666666663, 135), (0.29166666666666663, 8), (0.29166666666666663, 222), (0.29166666666666663, 99), (0.29166666666666663, 181), (0.29166666666666663, 29), (0.29166666666666663, 16), (0.29166666666666663, 83), (0.29166666666666663, 14), (0.29166666666666663, 46), (0.29166666666666663, 150), (0.29166666666666663, 349), (0.29166666666666663, 276), (0.29166666666666663, 36), (0.29166666666666663, 136), (0.29166666666666663, 252), (0.29166666666666663, 78), (0.29166666666666663, 110), (0.29166666666666663, 268), (0.29166666666666663, 207), (0.29166666666666663, 24), (0.29166666666666663, 365), (0.29166666666666663, 255), (0.29166666666666663, 241), (0.29166666666666663, 386), (0.29166666666666663, 295), (0.29166666666666663, 40), (0.29166666666666663, 236), (0.29166666666666663, 232), (0.29166666666666663, 65), (0.29166666666666663, 372), (0.29166666666666663, 363), (0.29166666666666663, 242), (0.29166666666666663, 394), (0.29166666666666663, 377), (0.29166666666666663, 362), (0.29166666666666663, 70), (0.29166666666666663, 92), (0.29166666666666663, 209), (0.29166666666666663, 383), (0.29166666666666663, 193), (0.29166666666666663, 142), (0.29166666666666663, 201), (0.29166666666666663, 38), (0.29166666666666663, 143), (0.29166666666666663, 282), (0.29166666666666663, 121), (0.29166666666666663, 237), (0.29166666666666663, 48), (0.29166666666666663, 31), (0.29166666666666663, 162), (0.29166666666666663, 357), (0.29166666666666663, 173), (0.29166666666666663, 68), (0.29166666666666663, 67), (0.29166666666666663, 284), (0.29166666666666663, 66), (0.29166666666666663, 369), (0.29166666666666663, 57), (0.29166666666666663, 146), (0.29166666666666663, 280), (0.29166666666666663, 137), (0.29166666666666663, 390), (0.29166666666666663, 139), (0.29166666666666663, 253), (0.29166666666666663, 125), (0.29166666666666663, 32), (0.29166666666666663, 168), (0.29166666666666663, 289), (0.29166666666666663, 88), (0.29166666666666663, 389), (0.29166666666666663, 34), (0.29166666666666663, 183), (0.29166666666666663, 380), (0.29166666666666663, 384), (0.29166666666666663, 378), (0.29166666666666663, 148), (0.29166666666666663, 351), (0.29166666666666663, 95), (0.29166666666666663, 157), (0.29166666666666663, 235), (0.29166666666666663, 22), (0.29166666666666663, 203), (0.29166666666666663, 86), (0.29166666666666663, 96), (0.29166666666666663, 1), (0.29166666666666663, 129), (0.29166666666666663, 287), (0.29166666666666663, 37), (0.29166666666666663, 71), (0.29166666666666663, 360), (0.29166666666666663, 258), (0.29166666666666663, 367), (0.29166666666666663, 130), (0.29166666666666663, 213), (0.29166666666666663, 127), (0.29166666666666663, 45), (0.29166666666666663, 379), (0.29166666666666663, 131), (0.29166666666666663, 240), (0.29166666666666663, 0), (0.29166666666666663, 87), (0.29166666666666663, 9), (0.29166666666666663, 269), (0.29166666666666663, 3), (0.29166666666666663, 61), (0.29166666666666663, 4), (0.29166666666666663, 77), (0.29166666666666663, 55), (0.29166666666666663, 358), (0.29166666666666663, 197), (0.29166666666666663, 50), (0.29166666666666663, 160), (0.29166666666666663, 5), (0.29166666666666663, 355), (0.29166666666666663, 251), (0.29166666666666663, 26), (0.29166666666666663, 97), (0.29166666666666663, 107), (0.29166666666666663, 220), (0.29166666666666663, 91), (0.29166666666666663, 7), (0.29166666666666663, 263), (0.29166666666666663, 140), (0.29166666666666663, 184), (0.29166666666666663, 175), (0.29166666666666663, 98), (0.29166666666666663, 364), (0.29166666666666663, 274), (0.29166666666666663, 354), (0.29166666666666663, 42), (0.29166666666666663, 195), (0.29166666666666663, 250), (0.29166666666666663, 387), (0.29166666666666663, 124), (0.29166666666666663, 74), (0.29166666666666663, 382), (0.29166666666666663, 246), (0.29166666666666663, 376), (0.29166666666666663, 104), (0.25, 319), (0.25, 344), (0.25, 323), (0.25, 320)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 x) x) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`(+ ? ?)`4`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 (+ 4 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- 1 x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (- y 1)) 1))
 nr_nodes: 8]
[Generation 2]
[Computing fitness]
[(1.375, 397), (1.375, 395), (1.375, 151), (1.25, 94), (1.25, 186), (1.25, 417), (1.125, 341), (1.125, 458), (1.125, 299), (1.125, 398), (1.125, 224), (1.125, 303), (1.0, 49), (1.0, 402), (1.0, 401), (1.0, 406), (1.0, 187), (1.0, 39), (1.0, 336), (1.0, 424), (1.0, 267), (1.0, 76), (1.0, 308), (1.0, 443), (1.0, 278), (1.0, 306), (1.0, 93), (1.0, 191), (1.0, 300), (1.0, 317), (1.0, 144), (1.0, 215), (1.0, 304), (1.0, 399), (1.0, 327), (1.0, 116), (1.0, 17), (0.875, 172), (0.875, 410), (0.875, 128), (0.75, 182), (0.75, 414), (0.75, 244), (0.75, 437), (0.75, 313), (0.75, 312), (0.75, 115), (0.75, 234), (0.625, 411), (0.625, 126), (0.625, 170), (0.625, 419), (0.625, 62), (0.625, 305), (0.625, 18), (0.625, 248), (0.625, 347), (0.625, 117), (0.625, 428), (0.625, 421), (0.625, 314), (0.625, 15), (0.625, 89), (0.625, 194), (0.625, 422), (0.625, 163), (0.625, 404), (0.625, 322), (0.625, 321), (0.625, 21), (0.625, 452), (0.625, 272), (0.625, 119), (0.625, 212), (0.625, 33), (0.625, 415), (0.625, 307), (0.5416666666666666, 166), (0.5, 6), (0.5, 405), (0.5, 281), (0.5, 339), (0.5, 426), (0.5, 196), (0.5, 326), (0.5, 293), (0.5, 23), (0.5, 441), (0.5, 430), (0.5, 408), (0.5, 25), (0.5, 436), (0.5, 47), (0.5, 449), (0.5, 302), (0.5, 329), (0.5, 210), (0.5, 41), (0.5, 43), (0.5, 448), (0.5, 451), (0.5, 81), (0.5, 205), (0.5, 227), (0.5, 80), (0.5, 315), (0.5, 462), (0.5, 334), (0.5, 265), (0.5, 206), (0.5, 60), (0.5, 225), (0.5, 64), (0.5, 337), (0.5, 409), (0.5, 325), (0.5, 309), (0.5, 192), (0.5, 324), (0.5, 111), (0.5, 445), (0.5, 167), (0.5, 310), (0.5, 429), (0.5, 190), (0.5, 180), (0.5, 442), (0.5, 330), (0.5, 331), (0.5, 439), (0.5, 447), (0.5, 453), (0.5, 333), (0.5, 35), (0.5, 432), (0.5, 141), (0.41666666666666663, 174), (0.41666666666666663, 455), (0.375, 412), (0.375, 463), (0.375, 456), (0.375, 457), (0.375, 254), (0.375, 345), (0.375, 20), (0.375, 343), (0.375, 63), (0.375, 219), (0.375, 340), (0.375, 221), (0.375, 152), (0.375, 332), (0.375, 433), (0.375, 118), (0.375, 199), (0.375, 261), (0.375, 459), (0.375, 123), (0.375, 90), (0.375, 153), (0.375, 461), (0.29166666666666663, 362), (0.29166666666666663, 361), (0.29166666666666663, 56), (0.29166666666666663, 67), (0.29166666666666663, 474), (0.29166666666666663, 68), (0.29166666666666663, 252), (0.29166666666666663, 289), (0.29166666666666663, 8), (0.29166666666666663, 286), (0.29166666666666663, 135), (0.29166666666666663, 284), (0.29166666666666663, 158), (0.29166666666666663, 214), (0.29166666666666663, 66), (0.29166666666666663, 51), (0.29166666666666663, 58), (0.29166666666666663, 231), (0.29166666666666663, 105), (0.29166666666666663, 236), (0.29166666666666663, 295), (0.29166666666666663, 181), (0.29166666666666663, 178), (0.29166666666666663, 136), (0.29166666666666663, 468), (0.29166666666666663, 466), (0.29166666666666663, 487), (0.29166666666666663, 24), (0.29166666666666663, 394), (0.29166666666666663, 222), (0.29166666666666663, 374), (0.29166666666666663, 353), (0.29166666666666663, 139), (0.29166666666666663, 146), (0.29166666666666663, 189), (0.29166666666666663, 193), (0.29166666666666663, 14), (0.29166666666666663, 242), (0.29166666666666663, 282), (0.29166666666666663, 79), (0.29166666666666663, 363), (0.29166666666666663, 70), (0.29166666666666663, 137), (0.29166666666666663, 92), (0.29166666666666663, 31), (0.29166666666666663, 464), (0.29166666666666663, 83), (0.29166666666666663, 356), (0.29166666666666663, 479), (0.29166666666666663, 285), (0.29166666666666663, 372), (0.29166666666666663, 369), (0.29166666666666663, 176), (0.29166666666666663, 201), (0.29166666666666663, 390), (0.29166666666666663, 237), (0.29166666666666663, 270), (0.29166666666666663, 241), (0.29166666666666663, 470), (0.29166666666666663, 386), (0.29166666666666663, 59), (0.29166666666666663, 253), (0.29166666666666663, 216), (0.29166666666666663, 29), (0.29166666666666663, 209), (0.29166666666666663, 392), (0.29166666666666663, 28), (0.29166666666666663, 280), (0.29166666666666663, 211), (0.29166666666666663, 365), (0.29166666666666663, 471), (0.29166666666666663, 121), (0.29166666666666663, 82), (0.29166666666666663, 48), (0.29166666666666663, 46), (0.29166666666666663, 477), (0.29166666666666663, 57), (0.29166666666666663, 357), (0.29166666666666663, 383), (0.29166666666666663, 145), (0.29166666666666663, 73), (0.29166666666666663, 475), (0.29166666666666663, 377), (0.29166666666666663, 484), (0.29166666666666663, 485), (0.29166666666666663, 99), (0.29166666666666663, 478), (0.29166666666666663, 373), (0.29166666666666663, 168), (0.29166666666666663, 40), (0.29166666666666663, 11), (0.29166666666666663, 10), (0.29166666666666663, 65), (0.29166666666666663, 482), (0.29166666666666663, 16), (0.29166666666666663, 469), (0.29166666666666663, 473), (0.29166666666666663, 142), (0.29166666666666663, 36), (0.29166666666666663, 483), (0.29166666666666663, 143), (0.29166666666666663, 349), (0.29166666666666663, 13), (0.29166666666666663, 147), (0.29166666666666663, 150), (0.29166666666666663, 371), (0.29166666666666663, 350), (0.29166666666666663, 480), (0.29166666666666663, 264), (0.29166666666666663, 232), (0.29166666666666663, 266), (0.29166666666666663, 44), (0.29166666666666663, 268), (0.29166666666666663, 256), (0.29166666666666663, 69), (0.29166666666666663, 173), (0.29166666666666663, 262), (0.29166666666666663, 78), (0.29166666666666663, 276), (0.29166666666666663, 162), (0.29166666666666663, 32), (0.29166666666666663, 207), (0.29166666666666663, 467), (0.29166666666666663, 110), (0.29166666666666663, 294), (0.29166666666666663, 38), (0.29166666666666663, 393), (0.29166666666666663, 125), (0.29166666666666663, 255), (0.29166666666666663, 114), (0.29166666666666663, 165), (0.25, 434), (0.25, 425), (0.25, 454), (0.25, 407), (0.25, 440), (0.25, 403), (0.25, 416), (0.25, 418)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`(+ ? ?)`4`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 (+ 4 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 x) x) 1))
 nr_nodes: 8]
[Generation 3]
[Computing fitness]
[(1.375, 395), (1.375, 488), (1.375, 397), (1.375, 151), (1.25, 186), (1.25, 417), (1.25, 94), (1.125, 299), (1.125, 493), (1.125, 398), (1.125, 492), (1.125, 494), (1.125, 224), (1.125, 303), (1.125, 458), (1.125, 341), (1.0, 402), (1.0, 507), (1.0, 304), (1.0, 191), (1.0, 144), (1.0, 215), (1.0, 490), (1.0, 17), (1.0, 508), (1.0, 554), (1.0, 317), (1.0, 401), (1.0, 308), (1.0, 116), (1.0, 267), (1.0, 278), (1.0, 49), (1.0, 424), (1.0, 512), (1.0, 497), (1.0, 443), (1.0, 300), (1.0, 496), (1.0, 327), (1.0, 501), (1.0, 76), (1.0, 187), (1.0, 93), (1.0, 509), (1.0, 306), (1.0, 565), (1.0, 406), (1.0, 399), (1.0, 506), (1.0, 39), (1.0, 500), (1.0, 336), (0.875, 128), (0.875, 529), (0.875, 172), (0.875, 410), (0.75, 182), (0.75, 234), (0.75, 244), (0.75, 414), (0.75, 522), (0.75, 437), (0.75, 115), (0.75, 516), (0.75, 520), (0.75, 312), (0.75, 537), (0.75, 313), (0.625, 404), (0.625, 248), (0.625, 422), (0.625, 421), (0.625, 314), (0.625, 163), (0.625, 117), (0.625, 305), (0.625, 411), (0.625, 527), (0.625, 18), (0.625, 307), (0.625, 322), (0.625, 572), (0.625, 581), (0.625, 428), (0.625, 347), (0.625, 194), (0.625, 33), (0.625, 321), (0.625, 415), (0.625, 62), (0.625, 530), (0.625, 89), (0.625, 170), (0.625, 212), (0.625, 419), (0.625, 539), (0.625, 575), (0.625, 531), (0.625, 15), (0.625, 525), (0.625, 452), (0.625, 21), (0.625, 126), (0.625, 119), (0.625, 272), (0.5416666666666666, 166), (0.5, 167), (0.5, 558), (0.5, 567), (0.5, 584), (0.5, 532), (0.5, 555), (0.5, 445), (0.5, 293), (0.5, 81), (0.5, 426), (0.5, 339), (0.5, 436), (0.5, 580), (0.5, 43), (0.5, 451), (0.5, 560), (0.5, 23), (0.5, 196), (0.5, 309), (0.5, 570), (0.5, 180), (0.5, 47), (0.5, 441), (0.5, 542), (0.5, 190), (0.5, 408), (0.5, 526), (0.5, 111), (0.5, 333), (0.5, 41), (0.5, 315), (0.5, 550), (0.5, 447), (0.5, 192), (0.5, 331), (0.5, 206), (0.5, 25), (0.5, 578), (0.5, 524), (0.5, 562), (0.5, 64), (0.5, 405), (0.5, 548), (0.5, 498), (0.5, 329), (0.5, 141), (0.5, 432), (0.5, 453), (0.5, 409), (0.5, 310), (0.5, 330), (0.5, 205), (0.5, 571), (0.5, 334), (0.5, 60), (0.5, 430), (0.5, 210), (0.5, 281), (0.5, 448), (0.5, 337), (0.5, 576), (0.5, 528), (0.5, 80), (0.5, 462), (0.5, 265), (0.5, 563), (0.5, 449), (0.5, 225), (0.5, 429), (0.5, 505), (0.5, 324), (0.5, 35), (0.5, 533), (0.5, 439), (0.5, 326), (0.5, 547), (0.5, 325), (0.5, 442), (0.5, 6), (0.5, 569), (0.5, 302), (0.5, 552), (0.5, 227), (0.5, 514), (0.41666666666666663, 455), (0.41666666666666663, 582), (0.41666666666666663, 174), (0.375, 221), (0.375, 463), (0.375, 90), (0.375, 219), (0.375, 590), (0.375, 261), (0.375, 535), (0.375, 340), (0.375, 589), (0.375, 199), (0.375, 538), (0.375, 459), (0.375, 63), (0.375, 345), (0.375, 254), (0.375, 153), (0.375, 343), (0.375, 518), (0.375, 152), (0.375, 433), (0.375, 118), (0.375, 587), (0.375, 585), (0.375, 457), (0.375, 412), (0.375, 456), (0.375, 123), (0.375, 556), (0.375, 20), (0.375, 544), (0.375, 332), (0.375, 588), (0.375, 461), (0.29166666666666663, 216), (0.29166666666666663, 282), (0.29166666666666663, 189), (0.29166666666666663, 105), (0.29166666666666663, 79), (0.29166666666666663, 176), (0.29166666666666663, 58), (0.29166666666666663, 353), (0.29166666666666663, 286), (0.29166666666666663, 66), (0.29166666666666663, 137), (0.29166666666666663, 181), (0.29166666666666663, 241), (0.29166666666666663, 231), (0.29166666666666663, 242), (0.29166666666666663, 295), (0.29166666666666663, 51), (0.29166666666666663, 14), (0.29166666666666663, 270), (0.29166666666666663, 289), (0.29166666666666663, 67), (0.29166666666666663, 214), (0.29166666666666663, 56), (0.29166666666666663, 193), (0.29166666666666663, 136), (0.29166666666666663, 362), (0.29166666666666663, 135), (0.29166666666666663, 68), (0.29166666666666663, 59), (0.29166666666666663, 252), (0.29166666666666663, 356), (0.29166666666666663, 470), (0.29166666666666663, 237), (0.29166666666666663, 363), (0.29166666666666663, 146), (0.29166666666666663, 178), (0.29166666666666663, 386), (0.29166666666666663, 139), (0.29166666666666663, 158), (0.29166666666666663, 361), (0.29166666666666663, 253), (0.29166666666666663, 464), (0.29166666666666663, 466), (0.29166666666666663, 201), (0.29166666666666663, 372), (0.29166666666666663, 29), (0.29166666666666663, 31), (0.29166666666666663, 390), (0.29166666666666663, 284), (0.29166666666666663, 487), (0.29166666666666663, 24), (0.29166666666666663, 394), (0.29166666666666663, 222), (0.29166666666666663, 70), (0.29166666666666663, 83), (0.29166666666666663, 8), (0.29166666666666663, 468), (0.29166666666666663, 236), (0.29166666666666663, 92), (0.29166666666666663, 285), (0.29166666666666663, 374), (0.29166666666666663, 369), (0.29166666666666663, 474), (0.29166666666666663, 479), (0.25, 510), (0.25, 545), (0.25, 564), (0.25, 568), (0.25, 503), (0.25, 561), (0.25, 573), (0.25, 513), (0.16666666666666666, 541)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 488
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ 1 x) x) 1))
 nr_nodes: 8]
[Generation 4]
[Computing fitness]
[(1.375, 397), (1.375, 395), (1.375, 488), (1.375, 151), (1.25, 599), (1.25, 94), (1.25, 186), (1.25, 417), (1.125, 594), (1.125, 224), (1.125, 398), (1.125, 303), (1.125, 341), (1.125, 458), (1.125, 492), (1.125, 493), (1.125, 598), (1.125, 494), (1.125, 601), (1.125, 645), (1.125, 299), (1.125, 656), (1.0, 501), (1.0, 676), (1.0, 267), (1.0, 496), (1.0, 187), (1.0, 308), (1.0, 512), (1.0, 508), (1.0, 625), (1.0, 490), (1.0, 509), (1.0, 507), (1.0, 327), (1.0, 613), (1.0, 621), (1.0, 306), (1.0, 595), (1.0, 623), (1.0, 39), (1.0, 336), (1.0, 500), (1.0, 424), (1.0, 618), (1.0, 401), (1.0, 406), (1.0, 144), (1.0, 506), (1.0, 686), (1.0, 497), (1.0, 597), (1.0, 610), (1.0, 215), (1.0, 76), (1.0, 402), (1.0, 399), (1.0, 565), (1.0, 191), (1.0, 603), (1.0, 49), (1.0, 17), (1.0, 300), (1.0, 317), (1.0, 612), (1.0, 554), (1.0, 278), (1.0, 304), (1.0, 605), (1.0, 116), (1.0, 617), (1.0, 93), (1.0, 443), (1.0, 614), (0.875, 651), (0.875, 529), (0.875, 172), (0.875, 410), (0.875, 128), (0.875, 641), (0.75, 522), (0.75, 537), (0.75, 182), (0.75, 437), (0.75, 312), (0.75, 244), (0.75, 520), (0.75, 234), (0.75, 516), (0.75, 313), (0.75, 414), (0.75, 636), (0.75, 672), (0.75, 115), (0.625, 575), (0.625, 314), (0.625, 89), (0.625, 572), (0.625, 15), (0.625, 307), (0.625, 322), (0.625, 33), (0.625, 642), (0.625, 347), (0.625, 422), (0.625, 163), (0.625, 170), (0.625, 305), (0.625, 272), (0.625, 646), (0.625, 673), (0.625, 652), (0.625, 654), (0.625, 248), (0.625, 531), (0.625, 419), (0.625, 539), (0.625, 126), (0.625, 660), (0.625, 321), (0.625, 650), (0.625, 637), (0.625, 452), (0.625, 415), (0.625, 527), (0.625, 411), (0.625, 119), (0.625, 21), (0.625, 404), (0.625, 530), (0.625, 581), (0.625, 638), (0.625, 194), (0.625, 18), (0.625, 525), (0.625, 62), (0.625, 212), (0.625, 117), (0.625, 428), (0.625, 421), (0.625, 628), (0.5416666666666666, 662), (0.5416666666666666, 166), (0.5, 23), (0.5, 429), (0.5, 405), (0.5, 339), (0.5, 526), (0.5, 43), (0.5, 330), (0.5, 667), (0.5, 616), (0.5, 408), (0.5, 447), (0.5, 60), (0.5, 570), (0.5, 675), (0.5, 668), (0.5, 315), (0.5, 333), (0.5, 25), (0.5, 6), (0.5, 666), (0.5, 524), (0.5, 449), (0.5, 567), (0.5, 562), (0.5, 649), (0.5, 111), (0.5, 514), (0.5, 560), (0.5, 293), (0.5, 584), (0.5, 325), (0.5, 671), (0.5, 47), (0.5, 35), (0.5, 167), (0.5, 558), (0.5, 532), (0.5, 206), (0.5, 337), (0.5, 580), (0.5, 604), (0.5, 80), (0.5, 550), (0.5, 334), (0.5, 227), (0.5, 436), (0.5, 462), (0.5, 659), (0.5, 548), (0.5, 498), (0.5, 632), (0.5, 552), (0.5, 685), (0.5, 205), (0.5, 64), (0.5, 563), (0.5, 190), (0.5, 533), (0.5, 445), (0.5, 576), (0.5, 302), (0.5, 141), (0.5, 609), (0.5, 451), (0.5, 329), (0.5, 683), (0.5, 571), (0.5, 643), (0.5, 409), (0.5, 453), (0.5, 674), (0.5, 210), (0.5, 547), (0.5, 505), (0.5, 681), (0.5, 180), (0.5, 633), (0.5, 684), (0.5, 331), (0.5, 430), (0.5, 196), (0.5, 578), (0.5, 81), (0.5, 309), (0.5, 528), (0.5, 448), (0.5, 640), (0.5, 442), (0.5, 192), (0.5, 626), (0.5, 679), (0.5, 634), (0.5, 555), (0.5, 432), (0.5, 265), (0.5, 426), (0.5, 324), (0.5, 441), (0.5, 310), (0.5, 439), (0.5, 281), (0.5, 647), (0.5, 41), (0.5, 569), (0.5, 542), (0.5, 326), (0.5, 225), (0.5, 670), (0.41666666666666663, 174), (0.41666666666666663, 582), (0.41666666666666663, 455), (0.375, 343), (0.375, 678), (0.375, 589), (0.375, 459), (0.375, 587), (0.375, 123), (0.375, 538), (0.375, 254), (0.375, 556), (0.375, 590), (0.375, 463), (0.375, 631), (0.375, 456), (0.375, 152), (0.375, 332), (0.375, 340), (0.375, 221), (0.375, 219), (0.375, 199), (0.375, 118), (0.375, 665), (0.375, 544), (0.375, 63), (0.375, 457), (0.375, 433), (0.375, 591), (0.375, 592), (0.375, 518), (0.375, 20), (0.375, 412), (0.375, 153), (0.375, 535), (0.375, 607), (0.375, 345), (0.375, 90), (0.375, 585), (0.375, 261), (0.25, 620), (0.25, 680), (0.25, 622), (0.25, 663), (0.25, 611), (0.25, 658), (0.25, 669), (0.25, 644), (0.25, 629)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 488
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 599
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`(- ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- x (- x x)) x))
 nr_nodes: 8]
[Generation 5]
[Computing fitness]
[(1.375, 689), (1.375, 397), (1.375, 395), (1.375, 488), (1.375, 151), (1.25, 186), (1.25, 771), (1.25, 94), (1.25, 417), (1.25, 599), (1.125, 696), (1.125, 303), (1.125, 398), (1.125, 492), (1.125, 494), (1.125, 656), (1.125, 594), (1.125, 601), (1.125, 224), (1.125, 695), (1.125, 341), (1.125, 700), (1.125, 645), (1.125, 770), (1.125, 744), (1.125, 493), (1.125, 458), (1.125, 736), (1.125, 724), (1.125, 598), (1.125, 299), (1.0, 625), (1.0, 336), (1.0, 144), (1.0, 614), (1.0, 733), (1.0, 304), (1.0, 618), (1.0, 720), (1.0, 725), (1.0, 501), (1.0, 612), (1.0, 613), (1.0, 267), (1.0, 497), (1.0, 401), (1.0, 191), (1.0, 406), (1.0, 327), (1.0, 496), (1.0, 605), (1.0, 300), (1.0, 306), (1.0, 623), (1.0, 565), (1.0, 490), (1.0, 621), (1.0, 402), (1.0, 726), (1.0, 721), (1.0, 509), (1.0, 399), (1.0, 702), (1.0, 506), (1.0, 707), (1.0, 308), (1.0, 610), (1.0, 49), (1.0, 686), (1.0, 603), (1.0, 512), (1.0, 508), (1.0, 676), (1.0, 17), (1.0, 317), (1.0, 617), (1.0, 507), (1.0, 93), (1.0, 187), (1.0, 278), (1.0, 39), (1.0, 717), (1.0, 727), (1.0, 500), (1.0, 785), (1.0, 595), (1.0, 424), (1.0, 712), (1.0, 718), (1.0, 554), (1.0, 731), (1.0, 215), (1.0, 443), (1.0, 597), (1.0, 116), (1.0, 76), (0.875, 747), (0.875, 738), (0.875, 739), (0.875, 781), (0.875, 128), (0.875, 641), (0.875, 529), (0.875, 651), (0.875, 410), (0.875, 172), (0.75, 522), (0.75, 414), (0.75, 697), (0.75, 729), (0.75, 636), (0.75, 766), (0.75, 312), (0.75, 244), (0.75, 182), (0.75, 520), (0.75, 672), (0.75, 691), (0.75, 313), (0.75, 516), (0.75, 115), (0.75, 745), (0.75, 537), (0.75, 234), (0.75, 735), (0.75, 437), (0.75, 743), (0.625, 248), (0.625, 347), (0.625, 699), (0.625, 654), (0.625, 530), (0.625, 525), (0.625, 539), (0.625, 709), (0.625, 419), (0.625, 693), (0.625, 15), (0.625, 272), (0.625, 163), (0.625, 701), (0.625, 755), (0.625, 119), (0.625, 715), (0.625, 706), (0.625, 722), (0.625, 194), (0.625, 421), (0.625, 777), (0.625, 21), (0.625, 756), (0.625, 307), (0.625, 694), (0.625, 783), (0.625, 33), (0.625, 637), (0.625, 763), (0.625, 18), (0.625, 411), (0.625, 531), (0.625, 660), (0.625, 322), (0.625, 212), (0.625, 572), (0.625, 452), (0.625, 628), (0.625, 575), (0.625, 705), (0.625, 305), (0.625, 62), (0.625, 404), (0.625, 170), (0.625, 773), (0.625, 673), (0.625, 642), (0.625, 652), (0.625, 117), (0.625, 782), (0.625, 779), (0.625, 314), (0.625, 646), (0.625, 415), (0.625, 422), (0.625, 581), (0.625, 126), (0.625, 650), (0.625, 321), (0.625, 527), (0.625, 89), (0.625, 428), (0.625, 638), (0.625, 753), (0.5416666666666666, 662), (0.5416666666666666, 166), (0.5, 43), (0.5, 659), (0.5, 315), (0.5, 758), (0.5, 643), (0.5, 430), (0.5, 550), (0.5, 548), (0.5, 584), (0.5, 526), (0.5, 462), (0.5, 734), (0.5, 334), (0.5, 671), (0.5, 445), (0.5, 616), (0.5, 609), (0.5, 6), (0.5, 683), (0.5, 405), (0.5, 633), (0.5, 429), (0.5, 552), (0.5, 675), (0.5, 47), (0.5, 190), (0.5, 776), (0.5, 580), (0.5, 681), (0.5, 563), (0.5, 337), (0.5, 714), (0.5, 498), (0.5, 302), (0.5, 704), (0.5, 774), (0.5, 447), (0.5, 180), (0.5, 524), (0.5, 684), (0.5, 570), (0.5, 196), (0.5, 578), (0.5, 778), (0.5, 293), (0.5, 436), (0.5, 547), (0.5, 571), (0.5, 451), (0.5, 560), (0.5, 331), (0.5, 685), (0.5, 339), (0.5, 210), (0.5, 532), (0.5, 576), (0.5, 632), (0.5, 790), (0.5, 330), (0.5, 649), (0.5, 751), (0.5, 449), (0.5, 60), (0.5, 205), (0.5, 35), (0.5, 674), (0.5, 604), (0.5, 742), (0.5, 741), (0.5, 562), (0.5, 333), (0.5, 409), (0.5, 789), (0.5, 325), (0.5, 80), (0.5, 786), (0.5, 768), (0.5, 25), (0.5, 667), (0.5, 514), (0.5, 558), (0.5, 141), (0.5, 227), (0.5, 666), (0.5, 167), (0.5, 505), (0.5, 23), (0.5, 453), (0.5, 668), (0.5, 791), (0.5, 64), (0.5, 329), (0.5, 111), (0.5, 533), (0.5, 206), (0.5, 567), (0.5, 408), (0.375, 764), (0.375, 788), (0.375, 787), (0.375, 687), (0.25, 708), (0.25, 711), (0.25, 759), (0.25, 761), (0.16666666666666666, 749)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 689
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 488
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
[Generation 6]
[Computing fitness]
[(1.375, 689), (1.375, 151), (1.375, 792), (1.375, 395), (1.375, 794), (1.375, 488), (1.375, 397), (1.25, 831), (1.25, 805), (1.25, 94), (1.25, 186), (1.25, 417), (1.25, 599), (1.25, 771), (1.125, 821), (1.125, 601), (1.125, 299), (1.125, 341), (1.125, 493), (1.125, 736), (1.125, 700), (1.125, 303), (1.125, 458), (1.125, 807), (1.125, 724), (1.125, 744), (1.125, 656), (1.125, 594), (1.125, 645), (1.125, 818), (1.125, 770), (1.125, 695), (1.125, 598), (1.125, 803), (1.125, 398), (1.125, 696), (1.125, 494), (1.125, 492), (1.125, 224), (1.0, 497), (1.0, 614), (1.0, 605), (1.0, 500), (1.0, 720), (1.0, 809), (1.0, 852), (1.0, 727), (1.0, 733), (1.0, 613), (1.0, 401), (1.0, 785), (1.0, 443), (1.0, 717), (1.0, 17), (1.0, 595), (1.0, 327), (1.0, 617), (1.0, 399), (1.0, 308), (1.0, 191), (1.0, 829), (1.0, 496), (1.0, 509), (1.0, 93), (1.0, 612), (1.0, 490), (1.0, 406), (1.0, 597), (1.0, 304), (1.0, 267), (1.0, 835), (1.0, 841), (1.0, 726), (1.0, 116), (1.0, 718), (1.0, 625), (1.0, 845), (1.0, 506), (1.0, 815), (1.0, 501), (1.0, 49), (1.0, 300), (1.0, 215), (1.0, 402), (1.0, 336), (1.0, 76), (1.0, 187), (1.0, 843), (1.0, 851), (1.0, 278), (1.0, 884), (1.0, 144), (1.0, 853), (1.0, 686), (1.0, 306), (1.0, 508), (1.0, 702), (1.0, 512), (1.0, 610), (1.0, 623), (1.0, 856), (1.0, 424), (1.0, 603), (1.0, 39), (1.0, 621), (1.0, 554), (1.0, 712), (1.0, 721), (1.0, 507), (1.0, 806), (1.0, 828), (1.0, 824), (1.0, 707), (1.0, 814), (1.0, 836), (1.0, 725), (1.0, 848), (1.0, 731), (1.0, 565), (1.0, 830), (1.0, 317), (1.0, 618), (1.0, 676), (0.875, 738), (0.875, 410), (0.875, 747), (0.875, 739), (0.875, 854), (0.875, 859), (0.875, 128), (0.875, 781), (0.875, 641), (0.875, 529), (0.875, 172), (0.875, 651), (0.75, 414), (0.75, 860), (0.75, 869), (0.75, 745), (0.75, 672), (0.75, 437), (0.75, 234), (0.75, 697), (0.75, 743), (0.75, 636), (0.75, 115), (0.75, 864), (0.75, 537), (0.75, 866), (0.75, 522), (0.75, 520), (0.75, 766), (0.75, 729), (0.75, 870), (0.75, 313), (0.75, 735), (0.75, 244), (0.75, 182), (0.75, 516), (0.75, 312), (0.75, 691), (0.625, 715), (0.625, 170), (0.625, 422), (0.625, 305), (0.625, 33), (0.625, 575), (0.625, 62), (0.625, 581), (0.625, 89), (0.625, 415), (0.625, 755), (0.625, 419), (0.625, 673), (0.625, 705), (0.625, 322), (0.625, 753), (0.625, 531), (0.625, 763), (0.625, 212), (0.625, 194), (0.625, 18), (0.625, 21), (0.625, 646), (0.625, 693), (0.625, 248), (0.625, 722), (0.625, 782), (0.625, 539), (0.625, 811), (0.625, 858), (0.625, 530), (0.625, 314), (0.625, 706), (0.625, 15), (0.625, 825), (0.625, 411), (0.625, 650), (0.625, 642), (0.625, 699), (0.625, 879), (0.625, 527), (0.625, 783), (0.625, 756), (0.625, 652), (0.625, 525), (0.625, 694), (0.625, 126), (0.625, 779), (0.625, 307), (0.625, 117), (0.625, 347), (0.625, 421), (0.625, 572), (0.625, 889), (0.625, 404), (0.625, 709), (0.625, 701), (0.625, 773), (0.625, 833), (0.625, 867), (0.625, 808), (0.625, 637), (0.625, 628), (0.625, 777), (0.625, 638), (0.625, 452), (0.625, 321), (0.625, 163), (0.625, 119), (0.625, 272), (0.625, 654), (0.625, 797), (0.625, 844), (0.625, 428), (0.625, 660), (0.625, 799), (0.5416666666666666, 662), (0.5416666666666666, 166), (0.5, 812), (0.5, 861), (0.5, 43), (0.5, 548), (0.5, 6), (0.5, 609), (0.5, 734), (0.5, 865), (0.5, 888), (0.5, 873), (0.5, 877), (0.5, 837), (0.5, 552), (0.5, 826), (0.5, 430), (0.5, 334), (0.5, 616), (0.5, 315), (0.5, 445), (0.5, 823), (0.5, 580), (0.5, 857), (0.5, 584), (0.5, 671), (0.5, 429), (0.5, 776), (0.5, 643), (0.5, 847), (0.5, 550), (0.5, 462), (0.5, 839), (0.5, 337), (0.5, 796), (0.5, 190), (0.5, 675), (0.5, 850), (0.5, 834), (0.5, 758), (0.5, 683), (0.5, 872), (0.5, 405), (0.5, 47), (0.5, 681), (0.5, 659), (0.5, 827), (0.5, 563), (0.5, 526), (0.5, 801), (0.5, 633), (0.5, 881), (0.5, 876), (0.5, 849), (0.5, 838), (0.5, 862), (0.375, 795), (0.375, 874), (0.375, 882), (0.25, 819), (0.25, 883), (0.25, 886), (0.25, 817)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 689
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 792
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 794
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
[Generation 7]
[Computing fitness]
[(1.375, 397), (1.375, 890), (1.375, 794), (1.375, 395), (1.375, 891), (1.375, 892), (1.375, 488), (1.375, 792), (1.375, 151), (1.375, 689), (1.25, 186), (1.25, 771), (1.25, 417), (1.25, 973), (1.25, 831), (1.25, 94), (1.25, 899), (1.25, 599), (1.25, 897), (1.25, 945), (1.25, 805), (1.125, 341), (1.125, 299), (1.125, 770), (1.125, 494), (1.125, 700), (1.125, 911), (1.125, 744), (1.125, 906), (1.125, 493), (1.125, 803), (1.125, 736), (1.125, 398), (1.125, 224), (1.125, 971), (1.125, 912), (1.125, 695), (1.125, 724), (1.125, 594), (1.125, 913), (1.125, 909), (1.125, 903), (1.125, 645), (1.125, 696), (1.125, 941), (1.125, 656), (1.125, 601), (1.125, 807), (1.125, 818), (1.125, 821), (1.125, 907), (1.125, 458), (1.125, 598), (1.125, 303), (1.125, 492), (1.0, 605), (1.0, 930), (1.0, 853), (1.0, 951), (1.0, 814), (1.0, 828), (1.0, 327), (1.0, 921), (1.0, 720), (1.0, 884), (1.0, 144), (1.0, 402), (1.0, 718), (1.0, 915), (1.0, 986), (1.0, 835), (1.0, 617), (1.0, 953), (1.0, 507), (1.0, 187), (1.0, 841), (1.0, 614), (1.0, 399), (1.0, 191), (1.0, 983), (1.0, 508), (1.0, 612), (1.0, 93), (1.0, 497), (1.0, 595), (1.0, 978), (1.0, 424), (1.0, 935), (1.0, 893), (1.0, 726), (1.0, 843), (1.0, 707), (1.0, 686), (1.0, 919), (1.0, 824), (1.0, 501), (1.0, 733), (1.0, 988), (1.0, 848), (1.0, 856), (1.0, 936), (1.0, 955), (1.0, 306), (1.0, 512), (1.0, 623), (1.0, 963), (1.0, 116), (1.0, 625), (1.0, 836), (1.0, 49), (1.0, 304), (1.0, 39), (1.0, 215), (1.0, 676), (1.0, 406), (1.0, 939), (1.0, 603), (1.0, 845), (1.0, 924), (1.0, 731), (1.0, 610), (1.0, 308), (1.0, 317), (1.0, 920), (1.0, 961), (1.0, 947), (1.0, 267), (1.0, 727), (1.0, 712), (1.0, 509), (1.0, 613), (1.0, 852), (1.0, 721), (1.0, 500), (1.0, 932), (1.0, 401), (1.0, 829), (1.0, 806), (1.0, 851), (1.0, 336), (1.0, 785), (1.0, 933), (1.0, 938), (1.0, 910), (1.0, 565), (1.0, 17), (1.0, 300), (1.0, 985), (1.0, 809), (1.0, 597), (1.0, 621), (1.0, 725), (1.0, 895), (1.0, 506), (1.0, 554), (1.0, 815), (1.0, 969), (1.0, 278), (1.0, 618), (1.0, 830), (1.0, 443), (1.0, 490), (1.0, 717), (1.0, 702), (1.0, 76), (1.0, 496), (0.875, 952), (0.875, 651), (0.875, 172), (0.875, 859), (0.875, 854), (0.875, 747), (0.875, 946), (0.875, 410), (0.875, 739), (0.875, 738), (0.875, 128), (0.875, 529), (0.875, 781), (0.875, 968), (0.875, 959), (0.875, 972), (0.875, 976), (0.875, 641), (0.75, 636), (0.75, 870), (0.75, 981), (0.75, 244), (0.75, 516), (0.75, 766), (0.75, 743), (0.75, 520), (0.75, 984), (0.75, 864), (0.75, 691), (0.75, 115), (0.75, 313), (0.75, 948), (0.75, 860), (0.75, 672), (0.75, 437), (0.75, 522), (0.75, 182), (0.75, 866), (0.75, 735), (0.75, 234), (0.75, 745), (0.75, 697), (0.75, 312), (0.75, 414), (0.75, 869), (0.75, 729), (0.75, 537), (0.625, 305), (0.625, 421), (0.625, 15), (0.625, 581), (0.625, 62), (0.625, 722), (0.625, 642), (0.625, 879), (0.625, 825), (0.625, 889), (0.625, 858), (0.625, 709), (0.625, 755), (0.625, 126), (0.625, 763), (0.625, 652), (0.625, 415), (0.625, 701), (0.625, 419), (0.625, 782), (0.625, 833), (0.625, 867), (0.625, 811), (0.625, 650), (0.625, 575), (0.625, 693), (0.625, 715), (0.625, 628), (0.625, 411), (0.625, 646), (0.625, 808), (0.625, 212), (0.625, 917), (0.625, 539), (0.625, 773), (0.625, 705), (0.625, 756), (0.625, 170), (0.625, 89), (0.625, 422), (0.625, 314), (0.625, 194), (0.625, 699), (0.625, 637), (0.625, 530), (0.625, 949), (0.625, 21), (0.625, 307), (0.625, 753), (0.625, 987), (0.625, 527), (0.625, 248), (0.625, 783), (0.625, 694), (0.625, 347), (0.625, 531), (0.625, 404), (0.625, 117), (0.625, 904), (0.625, 525), (0.625, 777), (0.625, 706), (0.625, 18), (0.625, 33), (0.625, 779), (0.625, 572), (0.625, 673), (0.625, 322), (0.5, 957), (0.5, 901), (0.5, 926), (0.5, 928), (0.5, 954), (0.5, 975), (0.5, 927), (0.5, 922), (0.5, 931), (0.375, 943), (0.375, 934), (0.375, 966), (0.25, 962), (0.25, 937), (0.25, 964), (0.25, 950), (0.25, 940), (0.25, 918), (0.125, 980)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 890
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 794
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 891
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
[Generation 8]
[Computing fitness]
[(1.375, 989), (1.375, 892), (1.375, 1038), (1.375, 991), (1.375, 689), (1.375, 395), (1.375, 794), (1.375, 990), (1.375, 792), (1.375, 488), (1.375, 890), (1.375, 151), (1.375, 397), (1.375, 891), (1.25, 998), (1.25, 1002), (1.25, 94), (1.25, 831), (1.25, 897), (1.25, 599), (1.25, 899), (1.25, 805), (1.25, 1000), (1.25, 771), (1.25, 973), (1.25, 1027), (1.25, 945), (1.25, 1069), (1.25, 417), (1.25, 186), (1.125, 656), (1.125, 736), (1.125, 1044), (1.125, 398), (1.125, 724), (1.125, 903), (1.125, 909), (1.125, 493), (1.125, 594), (1.125, 700), (1.125, 1083), (1.125, 906), (1.125, 807), (1.125, 695), (1.125, 645), (1.125, 1022), (1.125, 1020), (1.125, 299), (1.125, 941), (1.125, 303), (1.125, 458), (1.125, 1063), (1.125, 1018), (1.125, 341), (1.125, 598), (1.125, 601), (1.125, 492), (1.125, 971), (1.125, 770), (1.125, 1065), (1.125, 744), (1.125, 913), (1.125, 999), (1.125, 1082), (1.125, 1021), (1.125, 224), (1.125, 1053), (1.125, 818), (1.125, 696), (1.125, 911), (1.125, 821), (1.125, 907), (1.125, 1015), (1.125, 1039), (1.125, 1014), (1.125, 803), (1.125, 494), (1.125, 912), (1.0, 1061), (1.0, 509), (1.0, 824), (1.0, 884), (1.0, 933), (1.0, 336), (1.0, 1033), (1.0, 717), (1.0, 921), (1.0, 930), (1.0, 93), (1.0, 920), (1.0, 424), (1.0, 490), (1.0, 718), (1.0, 595), (1.0, 1052), (1.0, 947), (1.0, 623), (1.0, 565), (1.0, 1076), (1.0, 304), (1.0, 1004), (1.0, 733), (1.0, 617), (1.0, 605), (1.0, 187), (1.0, 814), (1.0, 512), (1.0, 720), (1.0, 1035), (1.0, 554), (1.0, 936), (1.0, 702), (1.0, 893), (1.0, 815), (1.0, 506), (1.0, 621), (1.0, 603), (1.0, 1005), (1.0, 986), (1.0, 721), (1.0, 835), (1.0, 731), (1.0, 625), (1.0, 853), (1.0, 306), (1.0, 406), (1.0, 983), (1.0, 399), (1.0, 1078), (1.0, 686), (1.0, 215), (1.0, 1060), (1.0, 932), (1.0, 443), (1.0, 939), (1.0, 852), (1.0, 919), (1.0, 1009), (1.0, 707), (1.0, 953), (1.0, 618), (1.0, 848), (1.0, 402), (1.0, 144), (1.0, 969), (1.0, 1055), (1.0, 614), (1.0, 1074), (1.0, 1077), (1.0, 915), (1.0, 613), (1.0, 851), (1.0, 17), (1.0, 963), (1.0, 300), (1.0, 830), (1.0, 955), (1.0, 806), (1.0, 725), (1.0, 1045), (1.0, 1001), (1.0, 785), (1.0, 856), (1.0, 1010), (1.0, 267), (1.0, 508), (1.0, 500), (1.0, 308), (1.0, 191), (1.0, 895), (1.0, 1068), (1.0, 610), (1.0, 612), (1.0, 401), (1.0, 507), (1.0, 978), (1.0, 1036), (1.0, 935), (1.0, 727), (1.0, 712), (1.0, 1031), (1.0, 841), (1.0, 809), (1.0, 726), (1.0, 1080), (1.0, 597), (1.0, 828), (1.0, 845), (1.0, 501), (1.0, 327), (1.0, 116), (1.0, 496), (1.0, 836), (1.0, 910), (1.0, 924), (1.0, 843), (1.0, 76), (1.0, 985), (1.0, 1058), (1.0, 39), (1.0, 938), (1.0, 278), (1.0, 951), (1.0, 988), (1.0, 497), (1.0, 829), (1.0, 1050), (1.0, 49), (1.0, 676), (1.0, 961), (1.0, 1072), (1.0, 1056), (1.0, 317), (0.875, 972), (0.875, 410), (0.875, 968), (0.875, 859), (0.875, 976), (0.875, 529), (0.875, 952), (0.875, 959), (0.875, 781), (0.875, 739), (0.875, 651), (0.875, 172), (0.875, 854), (0.875, 996), (0.875, 747), (0.875, 946), (0.875, 128), (0.875, 1043), (0.875, 738), (0.875, 641), (0.75, 516), (0.75, 948), (0.75, 312), (0.75, 437), (0.75, 672), (0.75, 870), (0.75, 414), (0.75, 691), (0.75, 735), (0.75, 697), (0.75, 115), (0.75, 234), (0.75, 745), (0.75, 537), (0.75, 981), (0.75, 766), (0.75, 1048), (0.75, 860), (0.75, 984), (0.75, 866), (0.75, 636), (0.75, 729), (0.75, 743), (0.75, 313), (0.75, 864), (0.75, 244), (0.75, 522), (0.75, 869), (0.75, 520), (0.75, 182), (0.625, 305), (0.625, 1008), (0.625, 62), (0.625, 581), (0.625, 1030), (0.625, 879), (0.625, 825), (0.625, 1003), (0.625, 889), (0.625, 15), (0.625, 722), (0.625, 642), (0.625, 709), (0.625, 993), (0.625, 858), (0.625, 421), (0.625, 1007), (0.5, 1079), (0.5, 1051), (0.5, 1067), (0.5, 1047), (0.5, 1032), (0.5, 1011), (0.5, 1023), (0.5, 1062), (0.5, 1017), (0.5, 1025), (0.25, 1029), (0.25, 1013), (0.25, 1046), (0.25, 1071), (0.25, 1073), (0.25, 1026), (0.25, 994), (0.25, 1041), (0.25, 1040), (0.25, 1054)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 989
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ 1 y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 892
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 1038
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`4`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- 4 x) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 991
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 689
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (+ 1 y)) 1))
 nr_nodes: 8]
[Generation 9]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (- (- (- 4 1) y) x))

Process finished with exit code 0
