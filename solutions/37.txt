D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (* y (* y (* x 3))) 3)))
 nr_nodes: 12]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) 3) y))
 nr_nodes: 8]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`3`#`#`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x y) 3) (* (+ 3 x) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* y (+ y 3)) 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ y (* x 3))))
 nr_nodes: 8]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`3`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) (+ (+ (* y 3) 3) (+ x 3))))
 nr_nodes: 14]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`3`#`#`(* ? ?)`y`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y (* y (+ (+ 3 (* y 3)) 3))))
 nr_nodes: 12]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) (+ 3 (+ 3 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 3 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ x 3) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 (+ 3 y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`3`#`#`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 3 (+ (* y x) (+ 3 y))) 3) x))
 nr_nodes: 14]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`3`#`#`3`#`#`(* ? ?)`y`#`#`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* 3 3) (* y y)) x) 3))
 nr_nodes: 12]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 3 (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 3) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`3`#`#`(+ ? ?)`(* ? ?)`3`#`#`3`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* x (+ (+ 3 y) (* y x))) 3) (+ (* 3 3) 3)) 3))
 nr_nodes: 20]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* y x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* x (+ 3 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ x y)) (* x y)))
 nr_nodes: 10]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y (* x 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`3`#`#`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* y (* (+ x y) y)) 3) (+ (* y (+ x y)) (* 3 x))))
 nr_nodes: 20]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`3`#`#`(* ? ?)`y`#`#`3`#`#`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ (* (+ 3 (* y 3)) (+ (* x 3) (* (+ x y) (* 3 y)))) (+ (* y x) x))))
 nr_nodes: 28]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (+ x (* y x))))
 nr_nodes: 8]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* x 3)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`3`#`#`3`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x (* 3 3)) y) 3))
 nr_nodes: 10]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (+ (+ x x) (+ y (+ (* x y) (+ (* 3 y) x))))))
 nr_nodes: 18]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (* x 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) (* y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`3`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`3`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* 3 (* x (+ y y)))) (+ 3 (+ (* (+ y x) (* x x)) (* 3 (+ x 3))))))
 nr_nodes: 26]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`(* ? ?)`y`#`#`3`#`#`(* ? ?)`3`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 (+ 3 (* y 3))) (* 3 (+ x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (* y (* (+ y x) (+ x y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (+ (+ y x) (* 3 x)) (+ (* 3 y) (+ x y))) 3) x))
 nr_nodes: 20]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ (+ x 3) y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`3`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ (+ x (+ y y)) (* (* x 3) 3)) 3)))
 nr_nodes: 16]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 3 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* x y)) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 3 3) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* x x) (* y (* x 3)))))
 nr_nodes: 12]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`3`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) (+ (* (* x (+ x y)) 3) (+ 3 y))))
 nr_nodes: 16]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`3`#`#`y`#`#`3`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* (* 3 y) 3)) (* (+ (+ y x) y) (+ 3 (* 3 3)))))
 nr_nodes: 20]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`3`#`#`x`#`#`3`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 3 x) 3) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 (* (* (* x y) (+ (+ x 3) (* y x))) y)) x))
 nr_nodes: 18]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ (+ (+ (+ 3 (+ y x)) y) (* x y)) (+ 3 x))))
 nr_nodes: 18]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* x (* y y))))
 nr_nodes: 8]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (* x (* (+ (+ (+ y x) x) (* x (+ 3 x))) 3))))
 nr_nodes: 20]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ (* (* y (* x (* y y))) 3) 3)))
 nr_nodes: 14]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ 3 y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) (* y y)) (* (+ x x) (+ x x))))
 nr_nodes: 16]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ y x)) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (+ x (+ x (* y x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`3`#`#`y`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y 3) y) (+ 3 x)))
 nr_nodes: 10]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`3`#`#`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ 3 (+ y 3))))
 nr_nodes: 8]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 (* (+ x y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ (+ y x) (+ (+ 3 y) (+ x y)))) (* (* x (* y y)) x)))
 nr_nodes: 22]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 y) (+ (* 3 (+ (* x (* 3 x)) (+ 3 x))) 3)))
 nr_nodes: 18]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`(+ ? ?)`x`#`#`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* 3 (+ x (* 3 3)))))
 nr_nodes: 10]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`3`#`#`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y y) (* (* 3 x) x)) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 y) (* 3 y)))
 nr_nodes: 8]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`y`#`#`3`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* (+ 3 y) (+ y x)) y) (+ y 3)) (* 3 x)))
 nr_nodes: 18]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 3 x) x) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 3) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (+ x 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (+ x x) 3) x) 3))
 nr_nodes: 10]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (* y (* y 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (* y y) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`3`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* 3 y) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 (* (+ 3 x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y x) 3) x))
 nr_nodes: 8]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y x) 3) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`3`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 (* 3 y)) (+ y (* 3 (* (+ y x) y)))))
 nr_nodes: 16]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`3`#`#`(+ ? ?)`x`#`#`3`#`#`y`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`3`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 3 (+ x 3)) y) (* (+ (+ y y) (* 3 3)) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (* y (+ (+ y x) (+ x x))) x)) x))
 nr_nodes: 16]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`3`#`#`y`#`#`3`#`#`(+ ? ?)`(+ ? ?)`3`#`#`x`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (+ (+ y (+ x y)) 3) y) 3) (+ (+ 3 x) (* (+ (* x y) (+ x 3)) y))))
 nr_nodes: 26]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* x y)))
 nr_nodes: 10]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`3`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 3) (+ x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 3) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* y x) (* 3 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`3`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`(+ ? ?)`y`#`#`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (* (* (* y 3) (+ x x)) (* (* x y) y)) (+ y 3)) x) 3))
 nr_nodes: 22]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* x (* x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`(+ ? ?)`3`#`#`3`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* (* (+ 3 y) (+ 3 3)) (* x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 (* (* x y) y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`3`#`#`3`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (* x y) y) (+ y (* 3 3))) (+ (* x x) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* 3 (+ (* y x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`y`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ y (* 3 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* y (+ (* (* y (* x x)) 3) 3))))
 nr_nodes: 14]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`3`#`#`3`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (* x 3) 3) (* (* x x) y)) (+ x y)))
 nr_nodes: 16]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`3`#`#`3`#`#`(+ ? ?)`(+ ? ?)`3`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 3 3) (+ (+ 3 (* y y)) (* (+ x x) (+ y y)))))
 nr_nodes: 18]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* y x) 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* y x) 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* x y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`3`#`#`3`#`#`3`#`#`(* ? ?)`(* ? ?)`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 3 3) 3) (* (* y 3) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* x (* x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`x`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* x (+ 3 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x (* 3 (+ (* 3 x) 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`3`#`#`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`3`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* 3 x) x) (+ (+ y 3) y)) (* y y)))
 nr_nodes: 16]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ (* y x) (* y 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`(+ ? ?)`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 (+ y 3)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 (+ (* (* y x) x) (* (* x x) (* y (* 3 y))))) (+ 3 (* 3 x))))
 nr_nodes: 24]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* x x) (* (+ 3 y) (* x 3)))))
 nr_nodes: 14]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 3) x))
 nr_nodes: 6]
[Generation 0]
[Computing fitness]
[(1.5, 112), (1.25, 30), (1.25, 31), (1.25, 43), (1.25, 50), (1.25, 83), (1.25, 100), (1.25, 115), (1.25, 133), (1.25, 134), (1.25, 148), (1.25, 152), (1.25, 183), (1.25, 210), (1.25, 258), (1.25, 260), (1.25, 301), (1.25, 309), (1.25, 326), (1.25, 362), (1.25, 371), (1.125, 4), (1.125, 16), (1.125, 28), (1.125, 47), (1.125, 53), (1.125, 59), (1.125, 80), (1.125, 86), (1.125, 191), (1.125, 193), (1.125, 228), (1.125, 241), (1.125, 257), (1.125, 264), (1.125, 266), (1.125, 313), (1.125, 338), (1.125, 347), (1.125, 348), (1.125, 357), (1.125, 365), (1.125, 386), (1.125, 387), (1.0, 12), (1.0, 163), (1.0, 208), (1.0, 224), (1.0, 273), (1.0, 308), (1.0, 375), (1.0, 376), (0.7083333333333333, 322), (0.5833333333333333, 0), (0.5833333333333333, 23), (0.5833333333333333, 75), (0.5833333333333333, 96), (0.5833333333333333, 117), (0.5833333333333333, 132), (0.5833333333333333, 213), (0.5833333333333333, 312), (0.5833333333333333, 372), (0.5833333333333333, 399), (0.575, 60), (0.575, 70), (0.575, 97), (0.575, 106), (0.575, 221), (0.575, 373), (0.575, 392), (0.4583333333333333, 61), (0.4583333333333333, 64), (0.4583333333333333, 135), (0.4583333333333333, 138), (0.4583333333333333, 140), (0.4583333333333333, 142), (0.4583333333333333, 145), (0.4583333333333333, 172), (0.4583333333333333, 209), (0.4583333333333333, 248), (0.4583333333333333, 250), (0.4583333333333333, 252), (0.4583333333333333, 255), (0.4583333333333333, 261), (0.4583333333333333, 314), (0.4583333333333333, 353), (0.4583333333333333, 368), (0.4583333333333333, 381), (0.45, 99), (0.45, 247), (0.45, 306), (0.45, 360), (0.45, 363), (0.39285714285714285, 1), (0.39285714285714285, 3), (0.39285714285714285, 10), (0.39285714285714285, 17), (0.39285714285714285, 18), (0.39285714285714285, 24), (0.39285714285714285, 25), (0.39285714285714285, 26), (0.39285714285714285, 27), (0.39285714285714285, 32), (0.39285714285714285, 33), (0.39285714285714285, 34), (0.39285714285714285, 37), (0.39285714285714285, 38), (0.39285714285714285, 39), (0.39285714285714285, 41), (0.39285714285714285, 45), (0.39285714285714285, 46), (0.39285714285714285, 48), (0.39285714285714285, 52), (0.39285714285714285, 55), (0.39285714285714285, 57), (0.39285714285714285, 58), (0.39285714285714285, 62), (0.39285714285714285, 66), (0.39285714285714285, 67), (0.39285714285714285, 68), (0.39285714285714285, 72), (0.39285714285714285, 74), (0.39285714285714285, 76), (0.39285714285714285, 77), (0.39285714285714285, 81), (0.39285714285714285, 85), (0.39285714285714285, 98), (0.39285714285714285, 104), (0.39285714285714285, 107), (0.39285714285714285, 111), (0.39285714285714285, 113), (0.39285714285714285, 116), (0.39285714285714285, 118), (0.39285714285714285, 119), (0.39285714285714285, 120), (0.39285714285714285, 122), (0.39285714285714285, 124), (0.39285714285714285, 125), (0.39285714285714285, 126), (0.39285714285714285, 128), (0.39285714285714285, 129), (0.39285714285714285, 131), (0.39285714285714285, 146), (0.39285714285714285, 147), (0.39285714285714285, 151), (0.39285714285714285, 153), (0.39285714285714285, 154), (0.39285714285714285, 155), (0.39285714285714285, 156), (0.39285714285714285, 157), (0.39285714285714285, 161), (0.39285714285714285, 164), (0.39285714285714285, 169), (0.39285714285714285, 171), (0.39285714285714285, 173), (0.39285714285714285, 174), (0.39285714285714285, 175), (0.39285714285714285, 176), (0.39285714285714285, 177), (0.39285714285714285, 178), (0.39285714285714285, 181), (0.39285714285714285, 184), (0.39285714285714285, 185), (0.39285714285714285, 187), (0.39285714285714285, 190), (0.39285714285714285, 194), (0.39285714285714285, 196), (0.39285714285714285, 198), (0.39285714285714285, 200), (0.39285714285714285, 201), (0.39285714285714285, 202), (0.39285714285714285, 204), (0.39285714285714285, 206), (0.39285714285714285, 211), (0.39285714285714285, 212), (0.39285714285714285, 215), (0.39285714285714285, 217), (0.39285714285714285, 219), (0.39285714285714285, 222), (0.39285714285714285, 223), (0.39285714285714285, 225), (0.39285714285714285, 227), (0.39285714285714285, 233), (0.39285714285714285, 234), (0.39285714285714285, 235), (0.39285714285714285, 238), (0.39285714285714285, 239), (0.39285714285714285, 240), (0.39285714285714285, 249), (0.39285714285714285, 251), (0.39285714285714285, 253), (0.39285714285714285, 254), (0.39285714285714285, 256), (0.39285714285714285, 259), (0.39285714285714285, 263), (0.39285714285714285, 265), (0.39285714285714285, 267), (0.39285714285714285, 268), (0.39285714285714285, 271), (0.39285714285714285, 272), (0.39285714285714285, 275), (0.39285714285714285, 276), (0.39285714285714285, 277), (0.39285714285714285, 278), (0.39285714285714285, 281), (0.39285714285714285, 282), (0.39285714285714285, 285), (0.39285714285714285, 290), (0.39285714285714285, 293), (0.39285714285714285, 294), (0.39285714285714285, 296), (0.39285714285714285, 299), (0.39285714285714285, 300), (0.39285714285714285, 302), (0.39285714285714285, 303), (0.39285714285714285, 317), (0.39285714285714285, 320), (0.39285714285714285, 321), (0.39285714285714285, 324), (0.39285714285714285, 329), (0.39285714285714285, 330), (0.39285714285714285, 333), (0.39285714285714285, 339), (0.39285714285714285, 341), (0.39285714285714285, 342), (0.39285714285714285, 350), (0.39285714285714285, 355), (0.39285714285714285, 358), (0.39285714285714285, 359), (0.39285714285714285, 364), (0.39285714285714285, 366), (0.39285714285714285, 367), (0.39285714285714285, 369), (0.39285714285714285, 374), (0.39285714285714285, 377), (0.39285714285714285, 379), (0.39285714285714285, 380), (0.39285714285714285, 383), (0.39285714285714285, 390), (0.39285714285714285, 393), (0.39285714285714285, 395), (0.39285714285714285, 396), (0.3333333333333333, 9), (0.3333333333333333, 29), (0.3333333333333333, 40), (0.3333333333333333, 186), (0.3333333333333333, 244), (0.3333333333333333, 305), (0.325, 7), (0.325, 20), (0.325, 35), (0.325, 44), (0.325, 65), (0.325, 87), (0.325, 90), (0.325, 95), (0.325, 103), (0.325, 165), (0.325, 167), (0.325, 197), (0.325, 205), (0.325, 207), (0.325, 214), (0.325, 226), (0.325, 231), (0.325, 242), (0.325, 243), (0.325, 269), (0.325, 270), (0.325, 284), (0.325, 304), (0.325, 332), (0.325, 334), (0.325, 337), (0.325, 356), (0.325, 382), (0.325, 388), (0.325, 394), (0.26785714285714285, 130), (0.26785714285714285, 136), (0.26785714285714285, 180), (0.26785714285714285, 352), (0.26785714285714285, 378), (0.2361111111111111, 91), (0.2361111111111111, 149), (0.2361111111111111, 220), (0.2361111111111111, 230), (0.2361111111111111, 343), (0.2159090909090909, 49), (0.2159090909090909, 78), (0.2159090909090909, 110), (0.2159090909090909, 137), (0.2159090909090909, 158), (0.2, 2), (0.2, 69), (0.2, 82), (0.2, 88), (0.2, 102), (0.2, 114), (0.2, 123), (0.2, 141), (0.2, 162), (0.2, 179), (0.2, 195), (0.2, 216), (0.2, 229), (0.2, 245), (0.2, 274), (0.2, 280), (0.2, 291), (0.2, 307), (0.2, 318), (0.2, 325), (0.2, 327), (0.2, 328), (0.2, 345), (0.2, 349), (0.19166666666666665, 389), (0.17763157894736842, 79), (0.14285714285714285, 5), (0.14285714285714285, 6), (0.14285714285714285, 8), (0.14285714285714285, 11), (0.14285714285714285, 13), (0.14285714285714285, 14), (0.14285714285714285, 15), (0.14285714285714285, 19), (0.14285714285714285, 21), (0.14285714285714285, 22), (0.14285714285714285, 36), (0.14285714285714285, 42), (0.14285714285714285, 51), (0.14285714285714285, 54), (0.14285714285714285, 56), (0.14285714285714285, 63), (0.14285714285714285, 71), (0.14285714285714285, 73), (0.14285714285714285, 84), (0.14285714285714285, 89), (0.14285714285714285, 92), (0.14285714285714285, 93), (0.14285714285714285, 94), (0.14285714285714285, 105), (0.14285714285714285, 108), (0.14285714285714285, 109), (0.14285714285714285, 121), (0.14285714285714285, 127), (0.14285714285714285, 139), (0.14285714285714285, 143), (0.14285714285714285, 144), (0.14285714285714285, 159), (0.14285714285714285, 160), (0.14285714285714285, 166), (0.14285714285714285, 168), (0.14285714285714285, 170), (0.14285714285714285, 182), (0.14285714285714285, 188), (0.14285714285714285, 189), (0.14285714285714285, 192), (0.14285714285714285, 199), (0.14285714285714285, 203), (0.14285714285714285, 232), (0.14285714285714285, 236), (0.14285714285714285, 237), (0.14285714285714285, 246), (0.14285714285714285, 262), (0.14285714285714285, 279), (0.14285714285714285, 283), (0.14285714285714285, 286), (0.14285714285714285, 287), (0.14285714285714285, 288), (0.14285714285714285, 289), (0.14285714285714285, 295), (0.14285714285714285, 297), (0.14285714285714285, 310), (0.14285714285714285, 311), (0.14285714285714285, 315), (0.14285714285714285, 316), (0.14285714285714285, 323), (0.14285714285714285, 331), (0.14285714285714285, 335), (0.14285714285714285, 336), (0.14285714285714285, 340), (0.14285714285714285, 344), (0.14285714285714285, 346), (0.14285714285714285, 351), (0.14285714285714285, 361), (0.14285714285714285, 370), (0.14285714285714285, 384), (0.14285714285714285, 385), (0.14285714285714285, 391), (0.14285714285714285, 397), (0.14285714285714285, 398), (0.1111111111111111, 150), (0.1111111111111111, 292), (0.1111111111111111, 354), (0.07692307692307693, 218), (0.07692307692307693, 319), (0.058823529411764705, 101), (0.058823529411764705, 298)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ x 3) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 (+ 3 y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 3 (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* y x) y)))
 nr_nodes: 8]
[Generation 1]
[Computing fitness]
[(1.5, 400), (1.5, 112), (1.25, 43), (1.25, 371), (1.25, 301), (1.25, 183), (1.25, 415), (1.25, 50), (1.25, 152), (1.25, 83), (1.25, 133), (1.25, 411), (1.25, 309), (1.25, 425), (1.25, 115), (1.25, 430), (1.25, 30), (1.25, 134), (1.25, 210), (1.25, 409), (1.25, 148), (1.25, 31), (1.25, 260), (1.25, 258), (1.25, 326), (1.25, 362), (1.25, 100), (1.125, 427), (1.125, 80), (1.125, 386), (1.125, 348), (1.125, 407), (1.125, 193), (1.125, 16), (1.125, 266), (1.125, 347), (1.125, 264), (1.125, 449), (1.125, 406), (1.125, 53), (1.125, 446), (1.125, 28), (1.125, 257), (1.125, 86), (1.125, 422), (1.125, 241), (1.125, 423), (1.125, 47), (1.125, 313), (1.125, 4), (1.125, 387), (1.125, 429), (1.125, 228), (1.125, 338), (1.125, 410), (1.125, 191), (1.125, 365), (1.125, 357), (1.125, 59), (1.0, 432), (1.0, 420), (1.0, 208), (1.0, 413), (1.0, 224), (1.0, 376), (1.0, 433), (1.0, 375), (1.0, 308), (1.0, 431), (1.0, 163), (1.0, 273), (1.0, 12), (0.7083333333333333, 416), (0.7083333333333333, 322), (0.5833333333333333, 96), (0.5833333333333333, 405), (0.5833333333333333, 23), (0.5833333333333333, 435), (0.5833333333333333, 439), (0.5833333333333333, 372), (0.5833333333333333, 0), (0.5833333333333333, 399), (0.5833333333333333, 75), (0.5833333333333333, 438), (0.5833333333333333, 213), (0.5833333333333333, 434), (0.5833333333333333, 312), (0.5833333333333333, 444), (0.5833333333333333, 132), (0.5833333333333333, 451), (0.5833333333333333, 117), (0.575, 106), (0.575, 373), (0.575, 443), (0.575, 440), (0.575, 442), (0.575, 392), (0.575, 70), (0.575, 97), (0.575, 403), (0.575, 60), (0.575, 221), (0.4583333333333333, 455), (0.4583333333333333, 142), (0.4583333333333333, 138), (0.4583333333333333, 61), (0.4583333333333333, 453), (0.4583333333333333, 135), (0.4583333333333333, 172), (0.4583333333333333, 353), (0.4583333333333333, 261), (0.4583333333333333, 437), (0.4583333333333333, 209), (0.4583333333333333, 448), (0.4583333333333333, 140), (0.4583333333333333, 447), (0.4583333333333333, 314), (0.4583333333333333, 255), (0.4583333333333333, 248), (0.4583333333333333, 368), (0.4583333333333333, 252), (0.4583333333333333, 64), (0.4583333333333333, 381), (0.4583333333333333, 450), (0.4583333333333333, 250), (0.4583333333333333, 145), (0.45, 418), (0.45, 306), (0.45, 408), (0.45, 360), (0.45, 247), (0.45, 456), (0.45, 363), (0.45, 99), (0.39285714285714285, 263), (0.39285714285714285, 234), (0.39285714285714285, 1), (0.39285714285714285, 200), (0.39285714285714285, 276), (0.39285714285714285, 321), (0.39285714285714285, 116), (0.39285714285714285, 459), (0.39285714285714285, 341), (0.39285714285714285, 76), (0.39285714285714285, 223), (0.39285714285714285, 46), (0.39285714285714285, 299), (0.39285714285714285, 350), (0.39285714285714285, 471), (0.39285714285714285, 184), (0.39285714285714285, 293), (0.39285714285714285, 194), (0.39285714285714285, 489), (0.39285714285714285, 118), (0.39285714285714285, 41), (0.39285714285714285, 52), (0.39285714285714285, 486), (0.39285714285714285, 107), (0.39285714285714285, 68), (0.39285714285714285, 249), (0.39285714285714285, 72), (0.39285714285714285, 157), (0.39285714285714285, 38), (0.39285714285714285, 324), (0.39285714285714285, 147), (0.39285714285714285, 267), (0.39285714285714285, 176), (0.39285714285714285, 151), (0.39285714285714285, 282), (0.39285714285714285, 77), (0.39285714285714285, 120), (0.39285714285714285, 171), (0.39285714285714285, 58), (0.39285714285714285, 129), (0.39285714285714285, 198), (0.39285714285714285, 473), (0.39285714285714285, 156), (0.39285714285714285, 466), (0.39285714285714285, 154), (0.39285714285714285, 3), (0.39285714285714285, 475), (0.39285714285714285, 227), (0.39285714285714285, 296), (0.39285714285714285, 366), (0.39285714285714285, 271), (0.39285714285714285, 380), (0.39285714285714285, 48), (0.39285714285714285, 302), (0.39285714285714285, 239), (0.39285714285714285, 369), (0.39285714285714285, 175), (0.39285714285714285, 342), (0.39285714285714285, 479), (0.39285714285714285, 122), (0.39285714285714285, 173), (0.39285714285714285, 26), (0.39285714285714285, 329), (0.39285714285714285, 268), (0.39285714285714285, 206), (0.39285714285714285, 196), (0.39285714285714285, 278), (0.39285714285714285, 303), (0.39285714285714285, 62), (0.39285714285714285, 32), (0.39285714285714285, 256), (0.39285714285714285, 485), (0.39285714285714285, 281), (0.39285714285714285, 204), (0.39285714285714285, 364), (0.39285714285714285, 265), (0.39285714285714285, 225), (0.39285714285714285, 383), (0.39285714285714285, 146), (0.39285714285714285, 185), (0.39285714285714285, 201), (0.39285714285714285, 253), (0.39285714285714285, 155), (0.39285714285714285, 254), (0.39285714285714285, 33), (0.39285714285714285, 379), (0.39285714285714285, 238), (0.39285714285714285, 333), (0.39285714285714285, 178), (0.39285714285714285, 24), (0.39285714285714285, 57), (0.39285714285714285, 259), (0.39285714285714285, 390), (0.39285714285714285, 174), (0.39285714285714285, 490), (0.39285714285714285, 477), (0.39285714285714285, 294), (0.39285714285714285, 300), (0.39285714285714285, 359), (0.39285714285714285, 317), (0.39285714285714285, 17), (0.39285714285714285, 39), (0.39285714285714285, 10), (0.39285714285714285, 45), (0.39285714285714285, 55), (0.39285714285714285, 126), (0.39285714285714285, 393), (0.39285714285714285, 212), (0.39285714285714285, 219), (0.39285714285714285, 476), (0.39285714285714285, 124), (0.39285714285714285, 468), (0.39285714285714285, 25), (0.39285714285714285, 470), (0.39285714285714285, 463), (0.39285714285714285, 465), (0.39285714285714285, 339), (0.39285714285714285, 98), (0.39285714285714285, 111), (0.39285714285714285, 18), (0.39285714285714285, 104), (0.39285714285714285, 153), (0.39285714285714285, 374), (0.39285714285714285, 458), (0.39285714285714285, 217), (0.39285714285714285, 67), (0.39285714285714285, 187), (0.39285714285714285, 235), (0.39285714285714285, 478), (0.39285714285714285, 113), (0.39285714285714285, 377), (0.39285714285714285, 462), (0.39285714285714285, 190), (0.39285714285714285, 125), (0.39285714285714285, 169), (0.39285714285714285, 320), (0.39285714285714285, 277), (0.39285714285714285, 285), (0.39285714285714285, 74), (0.39285714285714285, 81), (0.39285714285714285, 27), (0.39285714285714285, 240), (0.39285714285714285, 161), (0.39285714285714285, 272), (0.39285714285714285, 131), (0.39285714285714285, 181), (0.39285714285714285, 251), (0.39285714285714285, 461), (0.39285714285714285, 474), (0.39285714285714285, 66), (0.39285714285714285, 85), (0.39285714285714285, 290), (0.39285714285714285, 37), (0.39285714285714285, 215), (0.39285714285714285, 464), (0.39285714285714285, 164), (0.39285714285714285, 177), (0.39285714285714285, 233), (0.39285714285714285, 211), (0.39285714285714285, 482), (0.39285714285714285, 128), (0.39285714285714285, 330), (0.39285714285714285, 492), (0.39285714285714285, 367), (0.39285714285714285, 396), (0.39285714285714285, 480), (0.39285714285714285, 202), (0.39285714285714285, 275), (0.39285714285714285, 34), (0.39285714285714285, 355), (0.39285714285714285, 119), (0.39285714285714285, 487), (0.39285714285714285, 395), (0.39285714285714285, 494), (0.39285714285714285, 222), (0.39285714285714285, 483), (0.39285714285714285, 488), (0.39285714285714285, 358), (0.3333333333333333, 244), (0.3333333333333333, 9), (0.3333333333333333, 29), (0.3333333333333333, 186), (0.3333333333333333, 305), (0.3333333333333333, 40), (0.325, 65), (0.325, 87), (0.325, 207), (0.325, 95), (0.325, 205), (0.325, 441), (0.325, 7), (0.325, 90), (0.325, 226), (0.325, 394), (0.325, 412), (0.325, 337), (0.325, 457), (0.325, 284), (0.325, 20), (0.325, 103), (0.325, 197), (0.325, 243), (0.325, 388), (0.325, 382), (0.325, 332), (0.325, 167), (0.325, 35), (0.325, 270), (0.325, 356), (0.325, 44), (0.325, 165), (0.325, 242), (0.325, 269), (0.325, 402), (0.325, 304), (0.325, 334), (0.325, 214), (0.325, 231), (0.26785714285714285, 352), (0.26785714285714285, 378), (0.26785714285714285, 424), (0.26785714285714285, 136), (0.26785714285714285, 180), (0.26785714285714285, 130), (0.2361111111111111, 149), (0.2361111111111111, 343), (0.2361111111111111, 230), (0.2361111111111111, 220), (0.2361111111111111, 91), (0.2159090909090909, 158), (0.2159090909090909, 137), (0.2159090909090909, 49), (0.2159090909090909, 78), (0.2159090909090909, 110), (0.2, 69), (0.2, 325), (0.2, 216), (0.2, 229), (0.2, 82), (0.2, 327), (0.2, 179), (0.2, 245), (0.2, 345), (0.2, 328), (0.2, 123), (0.2, 88), (0.2, 349), (0.2, 307), (0.2, 195), (0.2, 274), (0.2, 291), (0.2, 2), (0.2, 141), (0.2, 114), (0.2, 102), (0.2, 318), (0.2, 280), (0.2, 162), (0.19166666666666665, 389), (0.17763157894736842, 79), (0.14285714285714285, 11), (0.14285714285714285, 8), (0.14285714285714285, 6), (0.14285714285714285, 5), (0.14285714285714285, 13), (0.14285714285714285, 14)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 3 (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* x (* x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* x y)))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 400), (1.5, 495), (1.5, 112), (1.375, 510), (1.25, 115), (1.25, 515), (1.25, 210), (1.25, 409), (1.25, 502), (1.25, 100), (1.25, 43), (1.25, 520), (1.25, 134), (1.25, 326), (1.25, 371), (1.25, 50), (1.25, 260), (1.25, 362), (1.25, 496), (1.25, 425), (1.25, 83), (1.25, 309), (1.25, 31), (1.25, 540), (1.25, 148), (1.25, 133), (1.25, 430), (1.25, 152), (1.25, 504), (1.25, 258), (1.25, 183), (1.25, 30), (1.25, 513), (1.25, 301), (1.25, 511), (1.25, 537), (1.25, 415), (1.25, 411), (1.125, 264), (1.125, 338), (1.125, 241), (1.125, 387), (1.125, 449), (1.125, 423), (1.125, 313), (1.125, 16), (1.125, 521), (1.125, 536), (1.125, 86), (1.125, 47), (1.125, 516), (1.125, 406), (1.125, 386), (1.125, 530), (1.125, 257), (1.125, 429), (1.125, 407), (1.125, 365), (1.125, 357), (1.125, 193), (1.125, 549), (1.125, 517), (1.125, 28), (1.125, 422), (1.125, 497), (1.125, 507), (1.125, 526), (1.125, 518), (1.125, 348), (1.125, 446), (1.125, 59), (1.125, 525), (1.125, 347), (1.125, 228), (1.125, 191), (1.125, 427), (1.125, 266), (1.125, 53), (1.125, 519), (1.125, 410), (1.125, 80), (1.125, 4), (1.125, 514), (1.0, 522), (1.0, 224), (1.0, 208), (1.0, 531), (1.0, 308), (1.0, 432), (1.0, 503), (1.0, 509), (1.0, 433), (1.0, 534), (1.0, 413), (1.0, 163), (1.0, 12), (1.0, 533), (1.0, 431), (1.0, 420), (1.0, 273), (1.0, 376), (1.0, 375), (1.0, 532), (0.7083333333333333, 416), (0.7083333333333333, 322), (0.5833333333333333, 434), (0.5833333333333333, 132), (0.5833333333333333, 444), (0.5833333333333333, 75), (0.5833333333333333, 96), (0.5833333333333333, 399), (0.5833333333333333, 563), (0.5833333333333333, 565), (0.5833333333333333, 23), (0.5833333333333333, 546), (0.5833333333333333, 564), (0.5833333333333333, 312), (0.5833333333333333, 571), (0.5833333333333333, 451), (0.5833333333333333, 541), (0.5833333333333333, 0), (0.5833333333333333, 438), (0.5833333333333333, 117), (0.5833333333333333, 543), (0.5833333333333333, 372), (0.5833333333333333, 405), (0.5833333333333333, 213), (0.5833333333333333, 435), (0.5833333333333333, 439), (0.575, 558), (0.575, 442), (0.575, 60), (0.575, 403), (0.575, 373), (0.575, 554), (0.575, 392), (0.575, 555), (0.575, 97), (0.575, 106), (0.575, 443), (0.575, 70), (0.575, 440), (0.575, 221), (0.4583333333333333, 455), (0.4583333333333333, 527), (0.4583333333333333, 574), (0.4583333333333333, 252), (0.4583333333333333, 561), (0.4583333333333333, 501), (0.4583333333333333, 140), (0.4583333333333333, 138), (0.4583333333333333, 314), (0.4583333333333333, 381), (0.4583333333333333, 368), (0.4583333333333333, 569), (0.4583333333333333, 145), (0.4583333333333333, 448), (0.4583333333333333, 172), (0.4583333333333333, 437), (0.4583333333333333, 135), (0.4583333333333333, 575), (0.4583333333333333, 560), (0.4583333333333333, 209), (0.4583333333333333, 523), (0.4583333333333333, 450), (0.4583333333333333, 261), (0.4583333333333333, 64), (0.4583333333333333, 447), (0.4583333333333333, 551), (0.4583333333333333, 248), (0.4583333333333333, 61), (0.4583333333333333, 573), (0.4583333333333333, 142), (0.4583333333333333, 453), (0.4583333333333333, 255), (0.4583333333333333, 568), (0.4583333333333333, 353), (0.4583333333333333, 566), (0.4583333333333333, 250), (0.4583333333333333, 499), (0.45, 578), (0.45, 576), (0.45, 581), (0.45, 408), (0.45, 580), (0.45, 418), (0.45, 456), (0.45, 539), (0.45, 247), (0.45, 360), (0.45, 99), (0.45, 306), (0.45, 363), (0.39285714285714285, 475), (0.39285714285714285, 459), (0.39285714285714285, 477), (0.39285714285714285, 276), (0.39285714285714285, 271), (0.39285714285714285, 113), (0.39285714285714285, 293), (0.39285714285714285, 267), (0.39285714285714285, 480), (0.39285714285714285, 470), (0.39285714285714285, 592), (0.39285714285714285, 41), (0.39285714285714285, 342), (0.39285714285714285, 339), (0.39285714285714285, 240), (0.39285714285714285, 222), (0.39285714285714285, 161), (0.39285714285714285, 239), (0.39285714285714285, 277), (0.39285714285714285, 290), (0.39285714285714285, 176), (0.39285714285714285, 111), (0.39285714285714285, 58), (0.39285714285714285, 591), (0.39285714285714285, 259), (0.39285714285714285, 37), (0.39285714285714285, 476), (0.39285714285714285, 128), (0.39285714285714285, 202), (0.39285714285714285, 333), (0.39285714285714285, 125), (0.39285714285714285, 157), (0.39285714285714285, 124), (0.39285714285714285, 17), (0.39285714285714285, 265), (0.39285714285714285, 201), (0.39285714285714285, 464), (0.39285714285714285, 393), (0.39285714285714285, 583), (0.39285714285714285, 471), (0.39285714285714285, 126), (0.39285714285714285, 251), (0.39285714285714285, 324), (0.39285714285714285, 212), (0.39285714285714285, 26), (0.39285714285714285, 98), (0.39285714285714285, 153), (0.39285714285714285, 355), (0.39285714285714285, 24), (0.39285714285714285, 122), (0.39285714285714285, 300), (0.39285714285714285, 268), (0.39285714285714285, 45), (0.39285714285714285, 120), (0.39285714285714285, 227), (0.39285714285714285, 463), (0.39285714285714285, 364), (0.39285714285714285, 296), (0.39285714285714285, 379), (0.39285714285714285, 465), (0.39285714285714285, 341), (0.39285714285714285, 46), (0.39285714285714285, 585), (0.39285714285714285, 33), (0.39285714285714285, 462), (0.39285714285714285, 178), (0.39285714285714285, 57), (0.39285714285714285, 377), (0.39285714285714285, 129), (0.39285714285714285, 187), (0.39285714285714285, 66), (0.39285714285714285, 458), (0.39285714285714285, 217), (0.39285714285714285, 52), (0.39285714285714285, 485), (0.39285714285714285, 483), (0.39285714285714285, 380), (0.39285714285714285, 254), (0.39285714285714285, 169), (0.39285714285714285, 76), (0.39285714285714285, 198), (0.39285714285714285, 350), (0.39285714285714285, 38), (0.39285714285714285, 256), (0.39285714285714285, 278), (0.39285714285714285, 67), (0.39285714285714285, 32), (0.39285714285714285, 330), (0.39285714285714285, 173), (0.39285714285714285, 190), (0.39285714285714285, 119), (0.39285714285714285, 272), (0.39285714285714285, 62), (0.39285714285714285, 25), (0.39285714285714285, 358), (0.39285714285714285, 374), (0.39285714285714285, 55), (0.39285714285714285, 474), (0.39285714285714285, 482), (0.39285714285714285, 223), (0.39285714285714285, 233), (0.39285714285714285, 104), (0.39285714285714285, 366), (0.39285714285714285, 72), (0.39285714285714285, 281), (0.39285714285714285, 154), (0.39285714285714285, 74), (0.39285714285714285, 396), (0.39285714285714285, 282), (0.39285714285714285, 204), (0.39285714285714285, 369), (0.39285714285714285, 263), (0.39285714285714285, 131), (0.39285714285714285, 321), (0.39285714285714285, 3), (0.39285714285714285, 156), (0.39285714285714285, 48), (0.39285714285714285, 359), (0.39285714285714285, 1), (0.39285714285714285, 588), (0.39285714285714285, 171), (0.39285714285714285, 490), (0.39285714285714285, 85), (0.39285714285714285, 390), (0.39285714285714285, 329), (0.39285714285714285, 303), (0.39285714285714285, 466), (0.39285714285714285, 317), (0.39285714285714285, 184), (0.39285714285714285, 235), (0.39285714285714285, 285), (0.39285714285714285, 34), (0.39285714285714285, 196), (0.39285714285714285, 155), (0.39285714285714285, 27), (0.39285714285714285, 234), (0.39285714285714285, 488), (0.39285714285714285, 320), (0.39285714285714285, 492), (0.39285714285714285, 461), (0.39285714285714285, 185), (0.39285714285714285, 494), (0.39285714285714285, 294), (0.39285714285714285, 479), (0.39285714285714285, 151), (0.39285714285714285, 299), (0.39285714285714285, 118), (0.39285714285714285, 175), (0.39285714285714285, 194), (0.39285714285714285, 478), (0.39285714285714285, 367), (0.39285714285714285, 77), (0.39285714285714285, 174), (0.39285714285714285, 146), (0.39285714285714285, 211), (0.39285714285714285, 395), (0.39285714285714285, 587), (0.39285714285714285, 18), (0.39285714285714285, 206), (0.39285714285714285, 486), (0.39285714285714285, 302), (0.39285714285714285, 116), (0.39285714285714285, 238), (0.39285714285714285, 164), (0.39285714285714285, 200), (0.39285714285714285, 215), (0.39285714285714285, 10), (0.39285714285714285, 489), (0.39285714285714285, 473), (0.39285714285714285, 39), (0.39285714285714285, 582), (0.39285714285714285, 68), (0.39285714285714285, 147), (0.39285714285714285, 181), (0.39285714285714285, 107), (0.39285714285714285, 487), (0.39285714285714285, 81), (0.39285714285714285, 253), (0.39285714285714285, 225), (0.39285714285714285, 275), (0.39285714285714285, 590), (0.39285714285714285, 468), (0.39285714285714285, 219), (0.39285714285714285, 249), (0.39285714285714285, 383), (0.39285714285714285, 177), (0.3333333333333333, 40), (0.3333333333333333, 9), (0.3333333333333333, 305), (0.3333333333333333, 29), (0.3333333333333333, 244), (0.3333333333333333, 544), (0.3333333333333333, 186), (0.325, 95), (0.325, 538), (0.325, 556), (0.325, 87), (0.325, 65), (0.325, 441), (0.325, 528), (0.325, 205), (0.325, 559), (0.325, 7), (0.325, 547), (0.325, 207), (0.325, 553), (0.2, 505)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 495
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 510
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) (+ y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ (+ x 3) y)) x))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 112), (1.5, 594), (1.5, 593), (1.5, 495), (1.5, 400), (1.375, 510), (1.25, 258), (1.25, 83), (1.25, 520), (1.25, 515), (1.25, 613), (1.25, 602), (1.25, 30), (1.25, 362), (1.25, 604), (1.25, 148), (1.25, 134), (1.25, 210), (1.25, 616), (1.25, 504), (1.25, 115), (1.25, 260), (1.25, 371), (1.25, 31), (1.25, 603), (1.25, 301), (1.25, 502), (1.25, 152), (1.25, 513), (1.25, 496), (1.25, 511), (1.25, 606), (1.25, 540), (1.25, 183), (1.25, 133), (1.25, 411), (1.25, 621), (1.25, 309), (1.25, 610), (1.25, 430), (1.25, 409), (1.25, 50), (1.25, 326), (1.25, 425), (1.25, 415), (1.25, 537), (1.25, 100), (1.25, 611), (1.25, 43), (1.25, 612), (1.125, 656), (1.125, 28), (1.125, 386), (1.125, 53), (1.125, 620), (1.125, 536), (1.125, 623), (1.125, 525), (1.125, 313), (1.125, 16), (1.125, 637), (1.125, 357), (1.125, 638), (1.125, 347), (1.125, 422), (1.125, 497), (1.125, 517), (1.125, 348), (1.125, 264), (1.125, 86), (1.125, 80), (1.125, 266), (1.125, 191), (1.125, 387), (1.125, 193), (1.125, 521), (1.125, 406), (1.125, 624), (1.125, 228), (1.125, 4), (1.125, 47), (1.125, 514), (1.125, 241), (1.125, 516), (1.125, 427), (1.125, 257), (1.125, 642), (1.125, 507), (1.125, 338), (1.125, 633), (1.125, 627), (1.125, 549), (1.125, 59), (1.125, 615), (1.125, 429), (1.125, 635), (1.125, 446), (1.125, 407), (1.125, 449), (1.125, 519), (1.125, 530), (1.125, 518), (1.125, 629), (1.125, 365), (1.125, 423), (1.125, 599), (1.125, 410), (1.125, 526), (1.0, 533), (1.0, 376), (1.0, 433), (1.0, 431), (1.0, 273), (1.0, 413), (1.0, 509), (1.0, 650), (1.0, 308), (1.0, 522), (1.0, 534), (1.0, 531), (1.0, 12), (1.0, 532), (1.0, 224), (1.0, 645), (1.0, 375), (1.0, 631), (1.0, 420), (1.0, 655), (1.0, 163), (1.0, 626), (1.0, 649), (1.0, 432), (1.0, 503), (1.0, 654), (1.0, 208), (1.0, 651), (0.8333333333333333, 614), (0.7083333333333333, 322), (0.7083333333333333, 416), (0.5833333333333333, 444), (0.5833333333333333, 23), (0.5833333333333333, 435), (0.5833333333333333, 597), (0.5833333333333333, 660), (0.5833333333333333, 563), (0.5833333333333333, 117), (0.5833333333333333, 659), (0.5833333333333333, 669), (0.5833333333333333, 564), (0.5833333333333333, 372), (0.5833333333333333, 96), (0.5833333333333333, 643), (0.5833333333333333, 213), (0.5833333333333333, 664), (0.5833333333333333, 543), (0.5833333333333333, 439), (0.5833333333333333, 571), (0.5833333333333333, 671), (0.5833333333333333, 405), (0.5833333333333333, 668), (0.5833333333333333, 75), (0.5833333333333333, 541), (0.5833333333333333, 399), (0.5833333333333333, 438), (0.5833333333333333, 565), (0.5833333333333333, 678), (0.5833333333333333, 434), (0.5833333333333333, 665), (0.5833333333333333, 312), (0.5833333333333333, 546), (0.5833333333333333, 609), (0.5833333333333333, 451), (0.5833333333333333, 132), (0.5833333333333333, 0), (0.5833333333333333, 607), (0.575, 674), (0.575, 555), (0.575, 373), (0.575, 440), (0.575, 676), (0.575, 443), (0.575, 60), (0.575, 673), (0.575, 392), (0.575, 684), (0.575, 403), (0.575, 442), (0.575, 677), (0.575, 106), (0.575, 221), (0.575, 554), (0.575, 70), (0.575, 97), (0.575, 675), (0.575, 558), (0.4583333333333333, 569), (0.4583333333333333, 250), (0.4583333333333333, 140), (0.4583333333333333, 209), (0.4583333333333333, 573), (0.4583333333333333, 499), (0.4583333333333333, 641), (0.4583333333333333, 447), (0.4583333333333333, 453), (0.4583333333333333, 135), (0.4583333333333333, 527), (0.4583333333333333, 61), (0.4583333333333333, 455), (0.4583333333333333, 368), (0.4583333333333333, 261), (0.4583333333333333, 450), (0.4583333333333333, 64), (0.4583333333333333, 255), (0.4583333333333333, 682), (0.4583333333333333, 619), (0.4583333333333333, 448), (0.4583333333333333, 653), (0.4583333333333333, 142), (0.4583333333333333, 566), (0.4583333333333333, 353), (0.4583333333333333, 551), (0.4583333333333333, 622), (0.4583333333333333, 501), (0.4583333333333333, 381), (0.4583333333333333, 681), (0.4583333333333333, 437), (0.4583333333333333, 601), (0.4583333333333333, 138), (0.4583333333333333, 172), (0.4583333333333333, 574), (0.4583333333333333, 561), (0.4583333333333333, 248), (0.4583333333333333, 575), (0.4583333333333333, 568), (0.4583333333333333, 145), (0.4583333333333333, 252), (0.4583333333333333, 560), (0.4583333333333333, 523), (0.4583333333333333, 314), (0.45, 247), (0.45, 408), (0.45, 576), (0.45, 99), (0.45, 539), (0.45, 581), (0.45, 578), (0.45, 456), (0.45, 306), (0.45, 580), (0.45, 360), (0.45, 418), (0.45, 363), (0.39285714285714285, 482), (0.39285714285714285, 3), (0.39285714285714285, 396), (0.39285714285714285, 465), (0.39285714285714285, 480), (0.39285714285714285, 45), (0.39285714285714285, 55), (0.39285714285714285, 476), (0.39285714285714285, 171), (0.39285714285714285, 282), (0.39285714285714285, 380), (0.39285714285714285, 126), (0.39285714285714285, 285), (0.39285714285714285, 32), (0.39285714285714285, 330), (0.39285714285714285, 198), (0.39285714285714285, 67), (0.39285714285714285, 235), (0.39285714285714285, 74), (0.39285714285714285, 62), (0.39285714285714285, 379), (0.39285714285714285, 350), (0.39285714285714285, 259), (0.39285714285714285, 34), (0.39285714285714285, 227), (0.39285714285714285, 85), (0.39285714285714285, 156), (0.39285714285714285, 364), (0.39285714285714285, 46), (0.39285714285714285, 38), (0.39285714285714285, 212), (0.39285714285714285, 317), (0.39285714285714285, 290), (0.39285714285714285, 113), (0.39285714285714285, 342), (0.39285714285714285, 58), (0.39285714285714285, 48), (0.39285714285714285, 585), (0.39285714285714285, 176), (0.39285714285714285, 263), (0.39285714285714285, 278), (0.39285714285714285, 477), (0.39285714285714285, 359), (0.39285714285714285, 122), (0.39285714285714285, 204), (0.39285714285714285, 24), (0.39285714285714285, 324), (0.39285714285714285, 377), (0.39285714285714285, 591), (0.39285714285714285, 72), (0.39285714285714285, 125), (0.39285714285714285, 161), (0.39285714285714285, 66), (0.39285714285714285, 272), (0.39285714285714285, 256), (0.39285714285714285, 222), (0.39285714285714285, 173), (0.39285714285714285, 26), (0.39285714285714285, 201), (0.39285714285714285, 128), (0.39285714285714285, 239), (0.39285714285714285, 300), (0.39285714285714285, 341), (0.39285714285714285, 458), (0.39285714285714285, 124), (0.39285714285714285, 366), (0.39285714285714285, 265), (0.39285714285714285, 462), (0.39285714285714285, 52), (0.39285714285714285, 583), (0.39285714285714285, 33), (0.39285714285714285, 333), (0.39285714285714285, 339), (0.39285714285714285, 374), (0.39285714285714285, 17), (0.39285714285714285, 296), (0.39285714285714285, 25), (0.39285714285714285, 483), (0.39285714285714285, 329), (0.39285714285714285, 240), (0.39285714285714285, 464), (0.39285714285714285, 154), (0.39285714285714285, 592), (0.39285714285714285, 41), (0.39285714285714285, 268), (0.39285714285714285, 276), (0.39285714285714285, 369), (0.39285714285714285, 153), (0.39285714285714285, 490), (0.39285714285714285, 485), (0.39285714285714285, 390), (0.39285714285714285, 217), (0.39285714285714285, 111), (0.39285714285714285, 358), (0.39285714285714285, 187), (0.39285714285714285, 129), (0.39285714285714285, 267), (0.39285714285714285, 190), (0.39285714285714285, 474), (0.39285714285714285, 293), (0.39285714285714285, 119), (0.39285714285714285, 169), (0.39285714285714285, 98), (0.39285714285714285, 37), (0.39285714285714285, 202), (0.39285714285714285, 271), (0.39285714285714285, 251), (0.39285714285714285, 303), (0.39285714285714285, 1), (0.39285714285714285, 131), (0.39285714285714285, 157), (0.39285714285714285, 471), (0.39285714285714285, 254), (0.39285714285714285, 104), (0.39285714285714285, 393), (0.39285714285714285, 466), (0.39285714285714285, 184), (0.39285714285714285, 321), (0.39285714285714285, 277), (0.39285714285714285, 120), (0.39285714285714285, 475), (0.39285714285714285, 470), (0.39285714285714285, 463), (0.39285714285714285, 233), (0.39285714285714285, 76), (0.39285714285714285, 57), (0.39285714285714285, 588), (0.39285714285714285, 178), (0.39285714285714285, 355), (0.39285714285714285, 459), (0.39285714285714285, 281), (0.39285714285714285, 223), (0.3333333333333333, 628), (0.3333333333333333, 630), (0.3333333333333333, 657), (0.3333333333333333, 639), (0.325, 647), (0.325, 670), (0.325, 679), (0.325, 680), (0.325, 667), (0.325, 596), (0.325, 658), (0.325, 625), (0.325, 661), (0.325, 662), (0.325, 617), (0.2, 644)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 593
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 495
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.625, 754), (1.5, 687), (1.5, 685), (1.5, 594), (1.5, 686), (1.5, 112), (1.5, 400), (1.5, 495), (1.5, 593), (1.375, 692), (1.375, 510), (1.375, 722), (1.25, 134), (1.25, 540), (1.25, 83), (1.25, 613), (1.25, 513), (1.25, 31), (1.25, 612), (1.25, 30), (1.25, 415), (1.25, 610), (1.25, 502), (1.25, 362), (1.25, 616), (1.25, 735), (1.25, 260), (1.25, 621), (1.25, 326), (1.25, 706), (1.25, 309), (1.25, 705), (1.25, 371), (1.25, 701), (1.25, 611), (1.25, 411), (1.25, 258), (1.25, 183), (1.25, 515), (1.25, 690), (1.25, 743), (1.25, 780), (1.25, 148), (1.25, 520), (1.25, 504), (1.25, 602), (1.25, 606), (1.25, 152), (1.25, 699), (1.25, 714), (1.25, 425), (1.25, 511), (1.25, 133), (1.25, 430), (1.25, 537), (1.25, 702), (1.25, 43), (1.25, 696), (1.25, 707), (1.25, 301), (1.25, 100), (1.25, 704), (1.25, 115), (1.25, 210), (1.25, 409), (1.25, 50), (1.25, 496), (1.25, 604), (1.25, 603), (1.125, 530), (1.125, 745), (1.125, 449), (1.125, 638), (1.125, 750), (1.125, 348), (1.125, 717), (1.125, 656), (1.125, 518), (1.125, 762), (1.125, 357), (1.125, 730), (1.125, 264), (1.125, 599), (1.125, 748), (1.125, 727), (1.125, 228), (1.125, 80), (1.125, 709), (1.125, 695), (1.125, 86), (1.125, 338), (1.125, 744), (1.125, 407), (1.125, 623), (1.125, 47), (1.125, 526), (1.125, 191), (1.125, 28), (1.125, 517), (1.125, 313), (1.125, 620), (1.125, 713), (1.125, 266), (1.125, 16), (1.125, 347), (1.125, 525), (1.125, 406), (1.125, 386), (1.125, 698), (1.125, 410), (1.125, 536), (1.125, 725), (1.125, 549), (1.125, 193), (1.125, 635), (1.125, 53), (1.125, 624), (1.125, 629), (1.125, 514), (1.125, 497), (1.125, 427), (1.125, 521), (1.125, 738), (1.125, 637), (1.125, 257), (1.125, 711), (1.125, 736), (1.125, 739), (1.125, 720), (1.125, 59), (1.125, 429), (1.125, 633), (1.125, 387), (1.125, 241), (1.125, 737), (1.125, 746), (1.125, 423), (1.125, 507), (1.125, 740), (1.125, 627), (1.125, 446), (1.125, 615), (1.125, 516), (1.125, 365), (1.125, 519), (1.125, 747), (1.125, 642), (1.125, 422), (1.125, 4), (1.0, 376), (1.0, 651), (1.0, 631), (1.0, 420), (1.0, 533), (1.0, 432), (1.0, 208), (1.0, 626), (1.0, 694), (1.0, 413), (1.0, 375), (1.0, 431), (1.0, 760), (1.0, 768), (1.0, 654), (1.0, 224), (1.0, 308), (1.0, 433), (1.0, 649), (1.0, 766), (1.0, 12), (1.0, 163), (1.0, 757), (1.0, 767), (1.0, 716), (1.0, 509), (1.0, 531), (1.0, 758), (1.0, 645), (1.0, 770), (1.0, 772), (1.0, 522), (1.0, 534), (1.0, 718), (1.0, 273), (1.0, 733), (1.0, 503), (1.0, 771), (1.0, 764), (1.0, 532), (1.0, 655), (1.0, 650), (0.8333333333333333, 773), (0.8333333333333333, 614), (0.7083333333333333, 688), (0.7083333333333333, 416), (0.7083333333333333, 322), (0.5833333333333333, 23), (0.5833333333333333, 565), (0.5833333333333333, 444), (0.5833333333333333, 665), (0.5833333333333333, 434), (0.5833333333333333, 708), (0.5833333333333333, 438), (0.5833333333333333, 372), (0.5833333333333333, 778), (0.5833333333333333, 643), (0.5833333333333333, 609), (0.5833333333333333, 399), (0.5833333333333333, 781), (0.5833333333333333, 607), (0.5833333333333333, 664), (0.5833333333333333, 563), (0.5833333333333333, 439), (0.5833333333333333, 671), (0.5833333333333333, 312), (0.5833333333333333, 405), (0.5833333333333333, 0), (0.5833333333333333, 564), (0.5833333333333333, 659), (0.5833333333333333, 597), (0.5833333333333333, 571), (0.5833333333333333, 668), (0.5833333333333333, 96), (0.5833333333333333, 213), (0.5833333333333333, 132), (0.5833333333333333, 783), (0.5833333333333333, 435), (0.5833333333333333, 669), (0.5833333333333333, 776), (0.5833333333333333, 546), (0.5833333333333333, 660), (0.5833333333333333, 117), (0.5833333333333333, 451), (0.5833333333333333, 75), (0.5833333333333333, 541), (0.5833333333333333, 543), (0.5833333333333333, 678), (0.575, 555), (0.575, 403), (0.575, 677), (0.575, 675), (0.575, 97), (0.575, 443), (0.575, 676), (0.575, 684), (0.575, 392), (0.575, 373), (0.575, 442), (0.575, 70), (0.575, 673), (0.575, 554), (0.575, 60), (0.575, 558), (0.575, 221), (0.575, 440), (0.575, 674), (0.575, 106), (0.4583333333333333, 172), (0.4583333333333333, 566), (0.4583333333333333, 763), (0.4583333333333333, 353), (0.4583333333333333, 145), (0.4583333333333333, 622), (0.4583333333333333, 560), (0.4583333333333333, 561), (0.4583333333333333, 501), (0.4583333333333333, 447), (0.4583333333333333, 499), (0.4583333333333333, 250), (0.4583333333333333, 568), (0.4583333333333333, 775), (0.4583333333333333, 255), (0.4583333333333333, 138), (0.4583333333333333, 314), (0.4583333333333333, 574), (0.4583333333333333, 455), (0.4583333333333333, 448), (0.4583333333333333, 573), (0.4583333333333333, 527), (0.4583333333333333, 381), (0.4583333333333333, 551), (0.4583333333333333, 450), (0.4583333333333333, 719), (0.4583333333333333, 61), (0.4583333333333333, 142), (0.4583333333333333, 248), (0.4583333333333333, 682), (0.4583333333333333, 261), (0.4583333333333333, 641), (0.4583333333333333, 681), (0.4583333333333333, 715), (0.4583333333333333, 569), (0.4583333333333333, 523), (0.4583333333333333, 252), (0.4583333333333333, 437), (0.4583333333333333, 368), (0.4583333333333333, 653), (0.4583333333333333, 752), (0.4583333333333333, 64), (0.4583333333333333, 140), (0.4583333333333333, 601), (0.4583333333333333, 619), (0.4583333333333333, 575), (0.4583333333333333, 723), (0.4583333333333333, 209), (0.4583333333333333, 135), (0.4583333333333333, 453), (0.45, 729), (0.45, 456), (0.45, 581), (0.45, 578), (0.45, 247), (0.45, 408), (0.45, 306), (0.45, 363), (0.45, 360), (0.45, 99), (0.45, 580), (0.45, 576), (0.45, 418), (0.45, 539), (0.39285714285714285, 156), (0.39285714285714285, 66), (0.39285714285714285, 263), (0.39285714285714285, 3), (0.39285714285714285, 359), (0.39285714285714285, 125), (0.39285714285714285, 477), (0.39285714285714285, 85), (0.39285714285714285, 285), (0.39285714285714285, 583), (0.39285714285714285, 204), (0.39285714285714285, 379), (0.39285714285714285, 32), (0.39285714285714285, 265), (0.39285714285714285, 126), (0.39285714285714285, 585), (0.39285714285714285, 462), (0.39285714285714285, 171), (0.39285714285714285, 282), (0.39285714285714285, 161), (0.39285714285714285, 380), (0.39285714285714285, 278), (0.39285714285714285, 465), (0.39285714285714285, 38), (0.39285714285714285, 113), (0.39285714285714285, 122), (0.39285714285714285, 366), (0.39285714285714285, 58), (0.39285714285714285, 124), (0.39285714285714285, 55), (0.39285714285714285, 173), (0.39285714285714285, 212), (0.39285714285714285, 339), (0.39285714285714285, 201), (0.39285714285714285, 239), (0.39285714285714285, 341), (0.39285714285714285, 46), (0.39285714285714285, 272), (0.39285714285714285, 364), (0.39285714285714285, 227), (0.39285714285714285, 45), (0.39285714285714285, 67), (0.39285714285714285, 324), (0.39285714285714285, 476), (0.39285714285714285, 34), (0.39285714285714285, 198), (0.39285714285714285, 317), (0.39285714285714285, 74), (0.39285714285714285, 333), (0.39285714285714285, 72), (0.39285714285714285, 480), (0.39285714285714285, 33), (0.39285714285714285, 259), (0.39285714285714285, 300), (0.39285714285714285, 62), (0.39285714285714285, 256), (0.39285714285714285, 235), (0.39285714285714285, 591), (0.39285714285714285, 176), (0.39285714285714285, 128), (0.39285714285714285, 350), (0.39285714285714285, 222), (0.39285714285714285, 482), (0.39285714285714285, 52), (0.39285714285714285, 26), (0.39285714285714285, 342), (0.39285714285714285, 48), (0.39285714285714285, 458), (0.39285714285714285, 396), (0.39285714285714285, 377), (0.39285714285714285, 24), (0.39285714285714285, 290), (0.39285714285714285, 330), (0.3333333333333333, 755), (0.3333333333333333, 726), (0.3333333333333333, 710), (0.3333333333333333, 761), (0.325, 742), (0.2, 731)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 687
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 685
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 686
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.625, 754), (1.5, 786), (1.5, 687), (1.5, 686), (1.5, 593), (1.5, 112), (1.5, 495), (1.5, 685), (1.5, 594), (1.5, 400), (1.5, 788), (1.375, 804), (1.375, 722), (1.375, 510), (1.375, 812), (1.375, 692), (1.375, 856), (1.25, 873), (1.25, 825), (1.25, 621), (1.25, 843), (1.25, 818), (1.25, 704), (1.25, 701), (1.25, 706), (1.25, 611), (1.25, 50), (1.25, 606), (1.25, 326), (1.25, 815), (1.25, 810), (1.25, 100), (1.25, 796), (1.25, 183), (1.25, 537), (1.25, 415), (1.25, 826), (1.25, 714), (1.25, 613), (1.25, 260), (1.25, 802), (1.25, 210), (1.25, 702), (1.25, 301), (1.25, 797), (1.25, 612), (1.25, 743), (1.25, 258), (1.25, 604), (1.25, 502), (1.25, 409), (1.25, 813), (1.25, 496), (1.25, 152), (1.25, 43), (1.25, 31), (1.25, 696), (1.25, 830), (1.25, 148), (1.25, 83), (1.25, 362), (1.25, 690), (1.25, 602), (1.25, 371), (1.25, 411), (1.25, 30), (1.25, 504), (1.25, 520), (1.25, 610), (1.25, 430), (1.25, 799), (1.25, 823), (1.25, 133), (1.25, 780), (1.25, 705), (1.25, 309), (1.25, 511), (1.25, 616), (1.25, 540), (1.25, 807), (1.25, 513), (1.25, 858), (1.25, 707), (1.25, 790), (1.25, 425), (1.25, 115), (1.25, 835), (1.25, 603), (1.25, 699), (1.25, 822), (1.25, 785), (1.25, 793), (1.25, 515), (1.25, 735), (1.25, 134), (1.125, 530), (1.125, 862), (1.125, 422), (1.125, 798), (1.125, 809), (1.125, 410), (1.125, 624), (1.125, 623), (1.125, 748), (1.125, 817), (1.125, 744), (1.125, 16), (1.125, 446), (1.125, 867), (1.125, 795), (1.125, 840), (1.125, 747), (1.125, 193), (1.125, 874), (1.125, 855), (1.125, 365), (1.125, 497), (1.125, 869), (1.125, 740), (1.125, 507), (1.125, 429), (1.125, 423), (1.125, 266), (1.125, 727), (1.125, 717), (1.125, 872), (1.125, 615), (1.125, 837), (1.125, 846), (1.125, 736), (1.125, 338), (1.125, 386), (1.125, 847), (1.125, 86), (1.125, 633), (1.125, 695), (1.125, 59), (1.125, 517), (1.125, 762), (1.125, 525), (1.125, 865), (1.125, 637), (1.125, 357), (1.125, 620), (1.125, 449), (1.125, 80), (1.125, 866), (1.125, 516), (1.125, 638), (1.125, 745), (1.125, 737), (1.125, 257), (1.125, 711), (1.125, 738), (1.125, 549), (1.125, 28), (1.125, 857), (1.125, 629), (1.125, 656), (1.125, 627), (1.125, 805), (1.125, 599), (1.125, 53), (1.125, 635), (1.125, 642), (1.125, 725), (1.125, 518), (1.125, 228), (1.125, 750), (1.125, 406), (1.125, 820), (1.125, 387), (1.125, 746), (1.125, 850), (1.125, 514), (1.125, 739), (1.125, 191), (1.125, 698), (1.125, 720), (1.125, 519), (1.125, 313), (1.125, 4), (1.125, 828), (1.125, 821), (1.125, 871), (1.125, 839), (1.125, 347), (1.125, 536), (1.125, 47), (1.125, 348), (1.125, 264), (1.125, 521), (1.125, 730), (1.125, 836), (1.125, 875), (1.125, 407), (1.125, 526), (1.125, 427), (1.125, 241), (1.125, 709), (1.125, 713), (1.0, 651), (1.0, 208), (1.0, 420), (1.0, 772), (1.0, 433), (1.0, 273), (1.0, 764), (1.0, 768), (1.0, 770), (1.0, 626), (1.0, 771), (1.0, 308), (1.0, 534), (1.0, 766), (1.0, 718), (1.0, 757), (1.0, 694), (1.0, 431), (1.0, 816), (1.0, 509), (1.0, 432), (1.0, 522), (1.0, 413), (1.0, 654), (1.0, 531), (1.0, 649), (1.0, 533), (1.0, 716), (1.0, 650), (1.0, 163), (1.0, 224), (1.0, 503), (1.0, 12), (1.0, 655), (1.0, 733), (1.0, 645), (1.0, 767), (1.0, 375), (1.0, 758), (1.0, 760), (1.0, 532), (1.0, 376), (1.0, 631), (0.8333333333333333, 773), (0.8333333333333333, 614), (0.7083333333333333, 853), (0.7083333333333333, 861), (0.7083333333333333, 688), (0.7083333333333333, 845), (0.7083333333333333, 322), (0.7083333333333333, 416), (0.5833333333333333, 0), (0.5833333333333333, 678), (0.5833333333333333, 781), (0.5833333333333333, 607), (0.5833333333333333, 664), (0.5833333333333333, 312), (0.5833333333333333, 439), (0.5833333333333333, 665), (0.5833333333333333, 213), (0.5833333333333333, 23), (0.5833333333333333, 372), (0.5833333333333333, 565), (0.5833333333333333, 659), (0.5833333333333333, 671), (0.5833333333333333, 435), (0.5833333333333333, 571), (0.5833333333333333, 660), (0.5833333333333333, 543), (0.5833333333333333, 132), (0.5833333333333333, 783), (0.5833333333333333, 708), (0.5833333333333333, 643), (0.5833333333333333, 434), (0.5833333333333333, 838), (0.5833333333333333, 75), (0.5833333333333333, 541), (0.5833333333333333, 563), (0.5833333333333333, 609), (0.5833333333333333, 776), (0.5833333333333333, 564), (0.5833333333333333, 668), (0.5833333333333333, 405), (0.5833333333333333, 117), (0.5833333333333333, 808), (0.5833333333333333, 444), (0.5833333333333333, 778), (0.5833333333333333, 546), (0.5833333333333333, 669), (0.5833333333333333, 399), (0.5833333333333333, 96), (0.5833333333333333, 451), (0.5833333333333333, 801), (0.5833333333333333, 438), (0.5833333333333333, 597), (0.575, 442), (0.575, 674), (0.575, 403), (0.575, 60), (0.575, 443), (0.575, 554), (0.575, 673), (0.575, 221), (0.575, 677), (0.575, 806), (0.575, 558), (0.575, 70), (0.575, 684), (0.575, 555), (0.575, 106), (0.575, 373), (0.575, 676), (0.575, 440), (0.575, 392), (0.575, 675), (0.575, 97), (0.4583333333333333, 142), (0.4583333333333333, 763), (0.4583333333333333, 437), (0.4583333333333333, 574), (0.4583333333333333, 448), (0.4583333333333333, 447), (0.4583333333333333, 752), (0.4583333333333333, 255), (0.4583333333333333, 209), (0.4583333333333333, 140), (0.4583333333333333, 819), (0.4583333333333333, 450), (0.4583333333333333, 569), (0.4583333333333333, 248), (0.4583333333333333, 575), (0.4583333333333333, 601), (0.4583333333333333, 172), (0.4583333333333333, 527), (0.4583333333333333, 723), (0.4583333333333333, 455), (0.4583333333333333, 314), (0.4583333333333333, 61), (0.4583333333333333, 849), (0.4583333333333333, 261), (0.4583333333333333, 353), (0.4583333333333333, 619), (0.4583333333333333, 852), (0.4583333333333333, 682), (0.4583333333333333, 568), (0.4583333333333333, 501), (0.4583333333333333, 499), (0.4583333333333333, 811), (0.4583333333333333, 851), (0.4583333333333333, 681), (0.4583333333333333, 368), (0.4583333333333333, 864), (0.4583333333333333, 64), (0.4583333333333333, 622), (0.4583333333333333, 653), (0.4583333333333333, 145), (0.4583333333333333, 381), (0.4583333333333333, 834), (0.4583333333333333, 250), (0.4583333333333333, 715), (0.4583333333333333, 561), (0.4583333333333333, 138), (0.4583333333333333, 252), (0.4583333333333333, 775), (0.4583333333333333, 523), (0.4583333333333333, 832), (0.4583333333333333, 859), (0.4583333333333333, 719), (0.4583333333333333, 800), (0.4583333333333333, 641), (0.4583333333333333, 560), (0.4583333333333333, 551), (0.4583333333333333, 573), (0.4583333333333333, 566), (0.4583333333333333, 453), (0.4583333333333333, 135), (0.45, 360), (0.45, 306), (0.45, 581), (0.45, 580), (0.45, 247), (0.45, 729), (0.45, 363), (0.45, 539), (0.45, 408), (0.45, 456), (0.45, 578), (0.45, 576), (0.45, 99), (0.45, 418), (0.39285714285714285, 66), (0.39285714285714285, 263), (0.39285714285714285, 156), (0.39285714285714285, 3), (0.3333333333333333, 863), (0.325, 841), (0.325, 792), (0.2, 870), (0.2, 876)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 687
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 686
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 593
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.625, 877), (1.625, 754), (1.5, 495), (1.5, 786), (1.5, 594), (1.5, 686), (1.5, 788), (1.5, 883), (1.5, 112), (1.5, 593), (1.5, 884), (1.5, 400), (1.5, 685), (1.5, 687), (1.5, 879), (1.5, 881), (1.5, 882), (1.375, 510), (1.375, 945), (1.375, 812), (1.375, 856), (1.375, 909), (1.375, 804), (1.375, 894), (1.375, 722), (1.375, 692), (1.25, 696), (1.25, 537), (1.25, 961), (1.25, 148), (1.25, 415), (1.25, 931), (1.25, 892), (1.25, 83), (1.25, 899), (1.25, 802), (1.25, 830), (1.25, 606), (1.25, 826), (1.25, 301), (1.25, 540), (1.25, 699), (1.25, 411), (1.25, 134), (1.25, 896), (1.25, 743), (1.25, 935), (1.25, 898), (1.25, 972), (1.25, 612), (1.25, 702), (1.25, 889), (1.25, 210), (1.25, 735), (1.25, 825), (1.25, 690), (1.25, 362), (1.25, 43), (1.25, 799), (1.25, 813), (1.25, 911), (1.25, 823), (1.25, 258), (1.25, 602), (1.25, 425), (1.25, 613), (1.25, 790), (1.25, 610), (1.25, 326), (1.25, 50), (1.25, 793), (1.25, 910), (1.25, 900), (1.25, 133), (1.25, 706), (1.25, 796), (1.25, 785), (1.25, 843), (1.25, 835), (1.25, 409), (1.25, 115), (1.25, 891), (1.25, 810), (1.25, 309), (1.25, 815), (1.25, 886), (1.25, 183), (1.25, 502), (1.25, 515), (1.25, 520), (1.25, 604), (1.25, 818), (1.25, 260), (1.25, 822), (1.25, 780), (1.25, 100), (1.25, 905), (1.25, 858), (1.25, 707), (1.25, 873), (1.25, 504), (1.25, 31), (1.25, 371), (1.25, 705), (1.25, 30), (1.25, 513), (1.25, 922), (1.25, 611), (1.25, 621), (1.25, 797), (1.25, 704), (1.25, 714), (1.25, 616), (1.25, 496), (1.25, 511), (1.25, 152), (1.25, 807), (1.25, 603), (1.25, 903), (1.25, 921), (1.25, 701), (1.25, 927), (1.25, 430), (1.125, 257), (1.125, 855), (1.125, 656), (1.125, 847), (1.125, 530), (1.125, 850), (1.125, 918), (1.125, 901), (1.125, 446), (1.125, 519), (1.125, 407), (1.125, 762), (1.125, 836), (1.125, 963), (1.125, 599), (1.125, 633), (1.125, 615), (1.125, 638), (1.125, 241), (1.125, 86), (1.125, 623), (1.125, 936), (1.125, 869), (1.125, 828), (1.125, 629), (1.125, 948), (1.125, 711), (1.125, 80), (1.125, 4), (1.125, 747), (1.125, 695), (1.125, 973), (1.125, 748), (1.125, 795), (1.125, 53), (1.125, 746), (1.125, 525), (1.125, 338), (1.125, 627), (1.125, 738), (1.125, 423), (1.125, 47), (1.125, 867), (1.125, 962), (1.125, 809), (1.125, 348), (1.125, 745), (1.125, 28), (1.125, 837), (1.125, 890), (1.125, 970), (1.125, 624), (1.125, 713), (1.125, 387), (1.125, 720), (1.125, 904), (1.125, 932), (1.125, 959), (1.125, 897), (1.125, 264), (1.125, 365), (1.125, 960), (1.125, 642), (1.125, 739), (1.125, 16), (1.125, 821), (1.125, 968), (1.125, 313), (1.125, 839), (1.125, 871), (1.125, 266), (1.125, 514), (1.125, 874), (1.125, 798), (1.125, 429), (1.125, 820), (1.125, 944), (1.125, 725), (1.125, 635), (1.125, 872), (1.125, 866), (1.125, 865), (1.125, 949), (1.125, 698), (1.125, 449), (1.125, 637), (1.125, 805), (1.125, 526), (1.125, 817), (1.125, 840), (1.125, 427), (1.125, 744), (1.125, 410), (1.125, 620), (1.125, 857), (1.125, 516), (1.125, 750), (1.125, 521), (1.125, 730), (1.125, 536), (1.125, 736), (1.125, 59), (1.125, 924), (1.125, 193), (1.125, 862), (1.125, 228), (1.125, 740), (1.125, 422), (1.125, 846), (1.125, 406), (1.125, 737), (1.125, 727), (1.125, 942), (1.125, 347), (1.125, 549), (1.125, 518), (1.125, 497), (1.125, 709), (1.125, 191), (1.125, 717), (1.125, 386), (1.125, 517), (1.125, 956), (1.125, 875), (1.125, 507), (1.125, 923), (1.125, 357), (1.125, 913), (1.0, 375), (1.0, 420), (1.0, 649), (1.0, 733), (1.0, 766), (1.0, 651), (1.0, 655), (1.0, 224), (1.0, 432), (1.0, 631), (1.0, 757), (1.0, 503), (1.0, 772), (1.0, 413), (1.0, 626), (1.0, 208), (1.0, 534), (1.0, 768), (1.0, 694), (1.0, 816), (1.0, 645), (1.0, 718), (1.0, 12), (1.0, 716), (1.0, 431), (1.0, 764), (1.0, 654), (1.0, 533), (1.0, 376), (1.0, 532), (1.0, 308), (1.0, 760), (1.0, 273), (1.0, 941), (1.0, 771), (1.0, 531), (1.0, 509), (1.0, 522), (1.0, 767), (1.0, 758), (1.0, 433), (1.0, 770), (1.0, 650), (1.0, 163), (0.8333333333333333, 773), (0.8333333333333333, 614), (0.7083333333333333, 688), (0.7083333333333333, 861), (0.7083333333333333, 853), (0.7083333333333333, 416), (0.7083333333333333, 845), (0.7083333333333333, 322), (0.7083333333333333, 914), (0.5833333333333333, 668), (0.5833333333333333, 312), (0.5833333333333333, 541), (0.5833333333333333, 75), (0.5833333333333333, 659), (0.5833333333333333, 96), (0.5833333333333333, 665), (0.5833333333333333, 776), (0.5833333333333333, 117), (0.5833333333333333, 564), (0.5833333333333333, 571), (0.5833333333333333, 908), (0.5833333333333333, 372), (0.5833333333333333, 607), (0.5833333333333333, 781), (0.5833333333333333, 563), (0.5833333333333333, 939), (0.5833333333333333, 405), (0.5833333333333333, 643), (0.5833333333333333, 399), (0.5833333333333333, 434), (0.5833333333333333, 937), (0.5833333333333333, 671), (0.5833333333333333, 920), (0.5833333333333333, 546), (0.5833333333333333, 940), (0.5833333333333333, 664), (0.5833333333333333, 660), (0.5833333333333333, 888), (0.5833333333333333, 669), (0.5833333333333333, 838), (0.5833333333333333, 435), (0.5833333333333333, 543), (0.5833333333333333, 778), (0.5833333333333333, 678), (0.5833333333333333, 132), (0.5833333333333333, 925), (0.5833333333333333, 916), (0.5833333333333333, 708), (0.5833333333333333, 565), (0.5833333333333333, 444), (0.5833333333333333, 213), (0.5833333333333333, 438), (0.5833333333333333, 783), (0.5833333333333333, 439), (0.5833333333333333, 0), (0.5833333333333333, 451), (0.5833333333333333, 23), (0.5833333333333333, 808), (0.5833333333333333, 801), (0.5833333333333333, 609), (0.5833333333333333, 597), (0.5833333333333333, 907), (0.575, 554), (0.575, 673), (0.575, 106), (0.575, 675), (0.575, 403), (0.575, 60), (0.575, 442), (0.575, 70), (0.575, 373), (0.575, 440), (0.575, 674), (0.575, 443), (0.575, 555), (0.575, 806), (0.575, 677), (0.575, 558), (0.575, 684), (0.575, 392), (0.575, 676), (0.575, 221), (0.575, 97), (0.4583333333333333, 966), (0.4583333333333333, 437), (0.4583333333333333, 955), (0.4583333333333333, 448), (0.4583333333333333, 971), (0.4583333333333333, 255), (0.4583333333333333, 574), (0.4583333333333333, 951), (0.4583333333333333, 974), (0.4583333333333333, 928), (0.4583333333333333, 763), (0.4583333333333333, 967), (0.4583333333333333, 447), (0.4583333333333333, 958), (0.4583333333333333, 752), (0.4583333333333333, 142), (0.45, 947), (0.3333333333333333, 953), (0.325, 933), (0.325, 965), (0.26785714285714285, 964), (0.2, 930)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 495
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.625, 975), (1.625, 877), (1.625, 754), (1.5, 1017), (1.5, 882), (1.5, 979), (1.5, 977), (1.5, 786), (1.5, 983), (1.5, 686), (1.5, 980), (1.5, 788), (1.5, 976), (1.5, 685), (1.5, 593), (1.5, 495), (1.5, 879), (1.5, 978), (1.5, 112), (1.5, 883), (1.5, 884), (1.5, 881), (1.5, 594), (1.5, 400), (1.5, 687), (1.375, 812), (1.375, 894), (1.375, 1014), (1.375, 1040), (1.375, 804), (1.375, 998), (1.375, 692), (1.375, 988), (1.375, 722), (1.375, 945), (1.375, 909), (1.375, 856), (1.375, 510), (1.375, 1011), (1.25, 797), (1.25, 911), (1.25, 1019), (1.25, 790), (1.25, 1032), (1.25, 886), (1.25, 873), (1.25, 1029), (1.25, 415), (1.25, 813), (1.25, 889), (1.25, 1041), (1.25, 892), (1.25, 815), (1.25, 504), (1.25, 31), (1.25, 982), (1.25, 1062), (1.25, 1052), (1.25, 621), (1.25, 326), (1.25, 301), (1.25, 1045), (1.25, 30), (1.25, 690), (1.25, 100), (1.25, 785), (1.25, 701), (1.25, 134), (1.25, 699), (1.25, 537), (1.25, 133), (1.25, 1047), (1.25, 148), (1.25, 858), (1.25, 1018), (1.25, 714), (1.25, 707), (1.25, 822), (1.25, 602), (1.25, 1013), (1.25, 610), (1.25, 972), (1.25, 540), (1.25, 927), (1.25, 611), (1.25, 835), (1.25, 1030), (1.25, 696), (1.25, 905), (1.25, 825), (1.25, 810), (1.25, 796), (1.25, 843), (1.25, 735), (1.25, 910), (1.25, 425), (1.25, 1039), (1.25, 430), (1.25, 612), (1.25, 371), (1.25, 496), (1.25, 520), (1.25, 935), (1.25, 823), (1.25, 309), (1.25, 802), (1.25, 793), (1.25, 705), (1.25, 152), (1.25, 1015), (1.25, 604), (1.25, 891), (1.25, 362), (1.25, 743), (1.25, 826), (1.25, 995), (1.25, 1049), (1.25, 515), (1.25, 50), (1.25, 1034), (1.25, 513), (1.25, 83), (1.25, 258), (1.25, 43), (1.25, 903), (1.25, 898), (1.25, 1046), (1.25, 899), (1.25, 603), (1.25, 830), (1.25, 704), (1.25, 807), (1.25, 616), (1.25, 409), (1.25, 511), (1.25, 606), (1.25, 260), (1.25, 1012), (1.25, 210), (1.25, 818), (1.25, 931), (1.25, 706), (1.25, 183), (1.25, 961), (1.25, 702), (1.25, 900), (1.25, 922), (1.25, 613), (1.25, 780), (1.25, 896), (1.25, 1007), (1.25, 502), (1.25, 411), (1.25, 799), (1.25, 115), (1.25, 921), (1.125, 4), (1.125, 228), (1.125, 410), (1.125, 53), (1.125, 711), (1.125, 429), (1.125, 313), (1.125, 1063), (1.125, 1005), (1.125, 820), (1.125, 840), (1.125, 944), (1.125, 497), (1.125, 47), (1.125, 962), (1.125, 16), (1.125, 865), (1.125, 973), (1.125, 338), (1.125, 709), (1.125, 257), (1.125, 1057), (1.125, 623), (1.125, 519), (1.125, 530), (1.125, 624), (1.125, 737), (1.125, 86), (1.125, 627), (1.125, 846), (1.125, 446), (1.125, 923), (1.125, 857), (1.125, 736), (1.125, 874), (1.125, 1056), (1.125, 357), (1.125, 638), (1.125, 740), (1.125, 817), (1.125, 347), (1.125, 918), (1.125, 516), (1.125, 744), (1.125, 637), (1.125, 992), (1.125, 739), (1.125, 949), (1.125, 727), (1.125, 970), (1.125, 805), (1.125, 264), (1.125, 713), (1.125, 1050), (1.125, 28), (1.125, 615), (1.125, 837), (1.125, 266), (1.125, 795), (1.125, 1064), (1.125, 730), (1.125, 839), (1.125, 423), (1.125, 866), (1.125, 1003), (1.125, 1059), (1.125, 746), (1.125, 80), (1.125, 747), (1.125, 193), (1.125, 924), (1.125, 517), (1.125, 1035), (1.125, 720), (1.125, 963), (1.125, 956), (1.125, 635), (1.125, 449), (1.125, 695), (1.125, 932), (1.125, 855), (1.125, 959), (1.125, 525), (1.125, 948), (1.125, 59), (1.125, 407), (1.125, 991), (1.125, 890), (1.125, 968), (1.125, 821), (1.125, 620), (1.125, 521), (1.125, 633), (1.125, 642), (1.125, 809), (1.125, 875), (1.125, 738), (1.125, 507), (1.125, 989), (1.125, 365), (1.125, 656), (1.125, 1043), (1.125, 871), (1.125, 536), (1.125, 599), (1.125, 901), (1.125, 847), (1.125, 717), (1.125, 936), (1.125, 725), (1.125, 526), (1.125, 1028), (1.125, 960), (1.125, 191), (1.125, 867), (1.125, 836), (1.125, 549), (1.125, 987), (1.125, 1036), (1.125, 241), (1.125, 942), (1.125, 427), (1.125, 798), (1.125, 828), (1.125, 762), (1.125, 386), (1.125, 897), (1.125, 514), (1.125, 850), (1.125, 745), (1.125, 1021), (1.125, 869), (1.125, 406), (1.125, 348), (1.125, 750), (1.125, 387), (1.125, 629), (1.125, 904), (1.125, 872), (1.125, 518), (1.125, 913), (1.125, 698), (1.125, 862), (1.125, 422), (1.125, 748), (1.0, 433), (1.0, 694), (1.0, 531), (1.0, 208), (1.0, 626), (1.0, 990), (1.0, 631), (1.0, 768), (1.0, 420), (1.0, 650), (1.0, 273), (1.0, 772), (1.0, 376), (1.0, 757), (1.0, 941), (1.0, 651), (1.0, 12), (1.0, 770), (1.0, 816), (1.0, 432), (1.0, 503), (1.0, 1042), (1.0, 655), (1.0, 758), (1.0, 654), (1.0, 533), (1.0, 718), (1.0, 431), (1.0, 163), (1.0, 767), (1.0, 764), (1.0, 522), (1.0, 645), (1.0, 649), (1.0, 733), (1.0, 534), (1.0, 760), (1.0, 716), (1.0, 308), (1.0, 771), (1.0, 413), (1.0, 375), (1.0, 532), (1.0, 1038), (1.0, 509), (1.0, 766), (1.0, 1053), (1.0, 224), (0.8333333333333333, 773), (0.8333333333333333, 614), (0.7083333333333333, 914), (0.7083333333333333, 322), (0.7083333333333333, 1024), (0.7083333333333333, 688), (0.7083333333333333, 845), (0.7083333333333333, 416), (0.7083333333333333, 853), (0.7083333333333333, 861), (0.5833333333333333, 665), (0.5833333333333333, 571), (0.5833333333333333, 668), (0.5833333333333333, 75), (0.5833333333333333, 1068), (0.5833333333333333, 399), (0.5833333333333333, 96), (0.5833333333333333, 776), (0.5833333333333333, 405), (0.5833333333333333, 781), (0.5833333333333333, 564), (0.5833333333333333, 659), (0.5833333333333333, 117), (0.5833333333333333, 986), (0.5833333333333333, 984), (0.5833333333333333, 908), (0.5833333333333333, 372), (0.5833333333333333, 312), (0.5833333333333333, 1002), (0.5833333333333333, 563), (0.5833333333333333, 541), (0.5833333333333333, 996), (0.5833333333333333, 939), (0.5833333333333333, 643), (0.5833333333333333, 434), (0.5833333333333333, 607), (0.5833333333333333, 1025), (0.4583333333333333, 1065), (0.4583333333333333, 1037), (0.4583333333333333, 997), (0.4583333333333333, 1009), (0.4583333333333333, 994), (0.4583333333333333, 1023), (0.4583333333333333, 1067), (0.45, 1055), (0.45, 1070), (0.3333333333333333, 1061), (0.3333333333333333, 1027), (0.325, 1000), (0.325, 1051), (0.2, 999)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 975
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1017
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 3 x) (+ x y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 882
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.625, 975), (1.625, 1071), (1.625, 877), (1.625, 754), (1.5, 686), (1.5, 495), (1.5, 978), (1.5, 788), (1.5, 882), (1.5, 1077), (1.5, 883), (1.5, 977), (1.5, 112), (1.5, 1078), (1.5, 881), (1.5, 685), (1.5, 1073), (1.5, 1075), (1.5, 976), (1.5, 983), (1.5, 1017), (1.5, 884), (1.5, 879), (1.5, 1108), (1.5, 594), (1.5, 1080), (1.5, 979), (1.5, 786), (1.5, 593), (1.5, 687), (1.5, 1081), (1.5, 1085), (1.5, 1138), (1.5, 400), (1.5, 980), (1.5, 1076), (1.5, 1074), (1.375, 510), (1.375, 1014), (1.375, 945), (1.375, 1163), (1.375, 998), (1.375, 1125), (1.375, 1094), (1.375, 856), (1.375, 804), (1.375, 894), (1.375, 692), (1.375, 1011), (1.375, 1040), (1.375, 1157), (1.375, 909), (1.375, 988), (1.375, 812), (1.375, 722), (1.25, 537), (1.25, 905), (1.25, 1152), (1.25, 823), (1.25, 982), (1.25, 701), (1.25, 152), (1.25, 1012), (1.25, 815), (1.25, 1141), (1.25, 796), (1.25, 504), (1.25, 1019), (1.25, 511), (1.25, 896), (1.25, 210), (1.25, 610), (1.25, 961), (1.25, 1110), (1.25, 1120), (1.25, 699), (1.25, 1099), (1.25, 931), (1.25, 1062), (1.25, 1098), (1.25, 1150), (1.25, 892), (1.25, 30), (1.25, 696), (1.25, 1104), (1.25, 411), (1.25, 1052), (1.25, 309), (1.25, 972), (1.25, 1083), (1.25, 133), (1.25, 900), (1.25, 502), (1.25, 409), (1.25, 301), (1.25, 1123), (1.25, 1136), (1.25, 602), (1.25, 1121), (1.25, 822), (1.25, 31), (1.25, 1007), (1.25, 183), (1.25, 690), (1.25, 705), (1.25, 515), (1.25, 825), (1.25, 735), (1.25, 612), (1.25, 910), (1.25, 1168), (1.25, 743), (1.25, 1032), (1.25, 1093), (1.25, 613), (1.25, 430), (1.25, 1045), (1.25, 818), (1.25, 371), (1.25, 1103), (1.25, 927), (1.25, 1106), (1.25, 1029), (1.25, 415), (1.25, 520), (1.25, 797), (1.25, 858), (1.25, 810), (1.25, 496), (1.25, 100), (1.25, 1140), (1.25, 604), (1.25, 1030), (1.25, 603), (1.25, 707), (1.25, 1126), (1.25, 1131), (1.25, 922), (1.25, 258), (1.25, 1127), (1.25, 1154), (1.25, 903), (1.25, 793), (1.25, 1072), (1.25, 540), (1.25, 899), (1.25, 1041), (1.25, 826), (1.25, 802), (1.25, 115), (1.25, 780), (1.25, 1039), (1.25, 50), (1.25, 134), (1.25, 935), (1.25, 1049), (1.25, 921), (1.25, 911), (1.25, 1151), (1.25, 621), (1.25, 704), (1.25, 1119), (1.25, 362), (1.25, 706), (1.25, 830), (1.25, 148), (1.25, 326), (1.25, 1013), (1.25, 611), (1.25, 891), (1.25, 995), (1.25, 790), (1.25, 1135), (1.25, 889), (1.25, 714), (1.25, 813), (1.25, 886), (1.25, 898), (1.25, 835), (1.25, 702), (1.25, 616), (1.25, 785), (1.25, 606), (1.25, 1146), (1.25, 513), (1.25, 260), (1.25, 425), (1.25, 1034), (1.25, 1047), (1.25, 1018), (1.25, 1107), (1.25, 873), (1.25, 1096), (1.25, 83), (1.25, 799), (1.25, 1046), (1.25, 1087), (1.25, 1015), (1.25, 807), (1.25, 43), (1.25, 1097), (1.25, 1133), (1.25, 843), (1.25, 1113), (1.125, 410), (1.125, 730), (1.125, 635), (1.125, 348), (1.125, 805), (1.125, 629), (1.125, 904), (1.125, 956), (1.125, 798), (1.125, 516), (1.125, 449), (1.125, 918), (1.125, 656), (1.125, 599), (1.125, 875), (1.125, 942), (1.125, 1137), (1.125, 821), (1.125, 257), (1.125, 536), (1.125, 949), (1.125, 497), (1.125, 713), (1.125, 365), (1.125, 266), (1.125, 1064), (1.125, 1021), (1.125, 698), (1.125, 1101), (1.125, 874), (1.125, 241), (1.125, 637), (1.125, 991), (1.125, 866), (1.125, 809), (1.125, 738), (1.125, 407), (1.125, 862), (1.125, 936), (1.125, 923), (1.125, 620), (1.125, 1059), (1.125, 817), (1.125, 633), (1.125, 750), (1.125, 932), (1.125, 16), (1.125, 193), (1.125, 970), (1.125, 530), (1.125, 962), (1.125, 720), (1.125, 1035), (1.125, 944), (1.125, 623), (1.125, 901), (1.125, 828), (1.125, 897), (1.125, 711), (1.125, 1139), (1.125, 1036), (1.125, 1115), (1.125, 987), (1.125, 869), (1.125, 80), (1.125, 762), (1.125, 736), (1.125, 517), (1.125, 855), (1.125, 1057), (1.125, 521), (1.125, 963), (1.125, 519), (1.125, 1003), (1.125, 423), (1.125, 1148), (1.125, 717), (1.125, 727), (1.125, 740), (1.125, 948), (1.125, 1167), (1.125, 59), (1.125, 959), (1.125, 406), (1.125, 913), (1.125, 836), (1.125, 747), (1.125, 924), (1.125, 514), (1.125, 973), (1.125, 86), (1.125, 525), (1.125, 624), (1.125, 313), (1.125, 1043), (1.125, 1155), (1.125, 746), (1.125, 725), (1.125, 338), (1.125, 1050), (1.125, 1005), (1.125, 387), (1.125, 357), (1.125, 191), (1.125, 615), (1.125, 857), (1.125, 867), (1.125, 1063), (1.125, 865), (1.125, 1143), (1.125, 837), (1.125, 642), (1.125, 53), (1.125, 422), (1.125, 264), (1.125, 840), (1.125, 846), (1.125, 709), (1.125, 526), (1.125, 518), (1.125, 695), (1.125, 992), (1.125, 890), (1.125, 347), (1.125, 1028), (1.125, 871), (1.125, 28), (1.125, 47), (1.125, 507), (1.125, 549), (1.125, 795), (1.125, 820), (1.125, 745), (1.125, 228), (1.125, 429), (1.125, 850), (1.125, 839), (1.125, 968), (1.125, 446), (1.125, 427), (1.125, 872), (1.125, 737), (1.125, 989), (1.125, 960), (1.125, 847), (1.125, 638), (1.125, 4), (1.125, 748), (1.125, 386), (1.125, 1134), (1.125, 627), (1.125, 1056), (1.125, 744), (1.125, 739), (1.0, 531), (1.0, 990), (1.0, 433), (1.0, 503), (1.0, 772), (1.0, 626), (1.0, 631), (1.0, 1042), (1.0, 757), (1.0, 758), (1.0, 768), (1.0, 941), (1.0, 12), (1.0, 432), (1.0, 694), (1.0, 650), (1.0, 208), (1.0, 655), (1.0, 816), (1.0, 770), (1.0, 420), (1.0, 651), (1.0, 273), (1.0, 376), (0.7083333333333333, 1124), (0.7083333333333333, 1129), (0.7083333333333333, 1091), (0.5833333333333333, 1166), (0.5833333333333333, 1089), (0.4583333333333333, 1102), (0.4583333333333333, 1149), (0.4583333333333333, 1142), (0.4583333333333333, 1109), (0.4583333333333333, 1144), (0.4583333333333333, 1161), (0.4583333333333333, 1117), (0.4583333333333333, 1153), (0.45, 1086), (0.325, 1164), (0.325, 1112), (0.325, 1159), (0.325, 1100)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 975
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 686
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ y (+ x y))) y))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.625, 1169), (1.625, 975), (1.625, 754), (1.625, 1071), (1.625, 1170), (1.625, 877), (1.5, 1193), (1.5, 1187), (1.5, 1017), (1.5, 1185), (1.5, 1075), (1.5, 400), (1.5, 686), (1.5, 788), (1.5, 1074), (1.5, 1108), (1.5, 594), (1.5, 980), (1.5, 1078), (1.5, 593), (1.5, 883), (1.5, 1189), (1.5, 977), (1.5, 884), (1.5, 1181), (1.5, 879), (1.5, 979), (1.5, 1172), (1.5, 495), (1.5, 786), (1.5, 1077), (1.5, 882), (1.5, 687), (1.5, 1138), (1.5, 685), (1.5, 1073), (1.5, 1085), (1.5, 1081), (1.5, 978), (1.5, 112), (1.5, 1180), (1.5, 1174), (1.5, 1076), (1.5, 1182), (1.5, 1175), (1.5, 1190), (1.5, 983), (1.5, 1186), (1.5, 976), (1.5, 1080), (1.5, 881), (1.375, 1201), (1.375, 1210), (1.375, 1198), (1.375, 1163), (1.375, 722), (1.375, 988), (1.375, 856), (1.375, 692), (1.375, 1199), (1.375, 998), (1.375, 1094), (1.375, 894), (1.375, 1220), (1.375, 909), (1.375, 1125), (1.375, 510), (1.375, 1040), (1.375, 812), (1.375, 1014), (1.375, 945), (1.375, 804), (1.375, 1203), (1.375, 1011), (1.375, 1157), (1.25, 1120), (1.25, 1136), (1.25, 1039), (1.25, 982), (1.25, 603), (1.25, 705), (1.25, 1224), (1.25, 515), (1.25, 1093), (1.25, 810), (1.25, 1233), (1.25, 152), (1.25, 134), (1.25, 931), (1.25, 961), (1.25, 210), (1.25, 886), (1.25, 1127), (1.25, 415), (1.25, 604), (1.25, 1146), (1.25, 793), (1.25, 825), (1.25, 1221), (1.25, 610), (1.25, 735), (1.25, 260), (1.25, 31), (1.25, 1052), (1.25, 411), (1.25, 621), (1.25, 613), (1.25, 1012), (1.25, 1015), (1.25, 1047), (1.25, 707), (1.25, 921), (1.25, 1062), (1.25, 797), (1.25, 1236), (1.25, 1007), (1.25, 1213), (1.25, 1110), (1.25, 892), (1.25, 1214), (1.25, 891), (1.25, 911), (1.25, 696), (1.25, 1097), (1.25, 1041), (1.25, 50), (1.25, 425), (1.25, 1256), (1.25, 83), (1.25, 1106), (1.25, 1131), (1.25, 927), (1.25, 520), (1.25, 699), (1.25, 826), (1.25, 611), (1.25, 704), (1.25, 258), (1.25, 835), (1.25, 1248), (1.25, 690), (1.25, 1151), (1.25, 1238), (1.25, 807), (1.25, 496), (1.25, 813), (1.25, 900), (1.25, 1154), (1.25, 899), (1.25, 1267), (1.25, 430), (1.25, 1119), (1.25, 1231), (1.25, 995), (1.25, 1049), (1.25, 1168), (1.25, 743), (1.25, 706), (1.25, 133), (1.25, 1207), (1.25, 1029), (1.25, 701), (1.25, 115), (1.25, 1179), (1.25, 1126), (1.25, 1034), (1.25, 1103), (1.25, 796), (1.25, 148), (1.25, 972), (1.25, 1083), (1.25, 1018), (1.25, 1141), (1.25, 823), (1.25, 612), (1.25, 1046), (1.25, 1087), (1.25, 858), (1.25, 409), (1.25, 1121), (1.25, 1098), (1.25, 504), (1.25, 1107), (1.25, 1196), (1.25, 616), (1.25, 896), (1.25, 362), (1.25, 1206), (1.25, 1140), (1.25, 183), (1.25, 309), (1.25, 1152), (1.25, 889), (1.25, 1019), (1.25, 1235), (1.25, 1230), (1.25, 714), (1.25, 1217), (1.25, 301), (1.25, 790), (1.25, 43), (1.25, 1261), (1.25, 1032), (1.25, 1245), (1.25, 602), (1.25, 371), (1.25, 100), (1.25, 799), (1.25, 540), (1.25, 1177), (1.25, 1030), (1.25, 830), (1.25, 873), (1.25, 1099), (1.25, 30), (1.25, 511), (1.25, 1072), (1.25, 537), (1.25, 1135), (1.25, 822), (1.25, 1237), (1.25, 502), (1.25, 922), (1.25, 818), (1.25, 935), (1.25, 780), (1.25, 1150), (1.25, 1123), (1.25, 905), (1.25, 326), (1.25, 1205), (1.25, 910), (1.25, 1239), (1.25, 898), (1.25, 1113), (1.25, 802), (1.25, 843), (1.25, 1096), (1.25, 1045), (1.25, 702), (1.25, 1104), (1.25, 815), (1.25, 513), (1.25, 1013), (1.25, 1262), (1.25, 1133), (1.25, 903), (1.25, 1264), (1.25, 606), (1.25, 785), (1.125, 1240), (1.125, 615), (1.125, 1137), (1.125, 942), (1.125, 962), (1.125, 1064), (1.125, 422), (1.125, 623), (1.125, 406), (1.125, 519), (1.125, 762), (1.125, 913), (1.125, 637), (1.125, 698), (1.125, 809), (1.125, 1216), (1.125, 944), (1.125, 191), (1.125, 525), (1.125, 313), (1.125, 717), (1.125, 1143), (1.125, 241), (1.125, 266), (1.125, 725), (1.125, 1167), (1.125, 695), (1.125, 516), (1.125, 923), (1.125, 633), (1.125, 1036), (1.125, 897), (1.125, 904), (1.125, 620), (1.125, 973), (1.125, 857), (1.125, 1155), (1.125, 936), (1.125, 840), (1.125, 970), (1.125, 449), (1.125, 828), (1.125, 959), (1.125, 629), (1.125, 642), (1.125, 656), (1.125, 991), (1.125, 862), (1.125, 1101), (1.125, 1249), (1.125, 635), (1.125, 536), (1.125, 805), (1.125, 59), (1.125, 1223), (1.125, 932), (1.125, 1063), (1.125, 365), (1.125, 410), (1.125, 86), (1.125, 837), (1.125, 387), (1.125, 709), (1.125, 80), (1.125, 747), (1.125, 736), (1.125, 867), (1.125, 16), (1.125, 750), (1.125, 1005), (1.125, 730), (1.125, 1183), (1.125, 407), (1.125, 517), (1.125, 497), (1.125, 338), (1.125, 720), (1.125, 1035), (1.125, 846), (1.125, 1139), (1.125, 257), (1.125, 901), (1.125, 855), (1.125, 1222), (1.125, 836), (1.125, 518), (1.125, 264), (1.125, 193), (1.125, 866), (1.125, 1148), (1.125, 987), (1.125, 798), (1.125, 624), (1.125, 357), (1.125, 727), (1.125, 738), (1.125, 713), (1.125, 348), (1.125, 746), (1.125, 526), (1.125, 1211), (1.125, 1043), (1.125, 711), (1.125, 1059), (1.125, 963), (1.125, 740), (1.125, 869), (1.125, 821), (1.125, 918), (1.125, 948), (1.125, 53), (1.125, 956), (1.125, 1200), (1.125, 514), (1.125, 817), (1.125, 530), (1.125, 423), (1.125, 1115), (1.125, 865), (1.125, 1003), (1.125, 1021), (1.125, 599), (1.125, 1057), (1.125, 874), (1.125, 1228), (1.125, 521), (1.125, 875), (1.125, 949), (1.125, 924), (1.125, 1050), (1.0, 1242), (0.7083333333333333, 1197), (0.5833333333333333, 1194), (0.5833333333333333, 1218), (0.5833333333333333, 1263), (0.5833333333333333, 1225), (0.4583333333333333, 1195), (0.4583333333333333, 1215), (0.4583333333333333, 1252), (0.4583333333333333, 1254), (0.4583333333333333, 1266), (0.4583333333333333, 1232), (0.4583333333333333, 1259), (0.4583333333333333, 1227), (0.3333333333333333, 1244), (0.325, 1251), (0.325, 1208), (0.325, 1247), (0.26785714285714285, 1191), (0.2, 1257)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1169
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 975
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1170
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.625, 877), (1.625, 1169), (1.625, 754), (1.625, 1268), (1.625, 1270), (1.625, 1271), (1.625, 975), (1.625, 1170), (1.625, 1071), (1.5, 1291), (1.5, 1285), (1.5, 978), (1.5, 1080), (1.5, 879), (1.5, 685), (1.5, 1181), (1.5, 1075), (1.5, 1292), (1.5, 1273), (1.5, 1294), (1.5, 1081), (1.5, 1272), (1.5, 1185), (1.5, 1298), (1.5, 881), (1.5, 1076), (1.5, 1296), (1.5, 1288), (1.5, 1277), (1.5, 1283), (1.5, 686), (1.5, 1282), (1.5, 400), (1.5, 1186), (1.5, 1074), (1.5, 786), (1.5, 1073), (1.5, 976), (1.5, 1189), (1.5, 1275), (1.5, 1299), (1.5, 1193), (1.5, 1182), (1.5, 977), (1.5, 788), (1.5, 495), (1.5, 1138), (1.5, 1287), (1.5, 882), (1.5, 980), (1.5, 1281), (1.5, 1174), (1.5, 1274), (1.5, 1279), (1.5, 1108), (1.5, 594), (1.5, 1187), (1.5, 884), (1.5, 883), (1.5, 1190), (1.5, 1078), (1.5, 1280), (1.5, 1286), (1.5, 983), (1.5, 593), (1.5, 1180), (1.5, 1017), (1.5, 1175), (1.5, 687), (1.5, 1172), (1.5, 112), (1.5, 1289), (1.5, 1085), (1.5, 1319), (1.5, 1077), (1.5, 979), (1.5, 1284), (1.375, 692), (1.375, 1094), (1.375, 1011), (1.375, 1163), (1.375, 856), (1.375, 1198), (1.375, 909), (1.375, 1014), (1.375, 1203), (1.375, 988), (1.375, 1201), (1.375, 1220), (1.375, 945), (1.375, 804), (1.375, 894), (1.375, 1157), (1.375, 1304), (1.375, 998), (1.375, 722), (1.375, 1344), (1.375, 1199), (1.375, 1040), (1.375, 812), (1.375, 1210), (1.375, 510), (1.375, 1125), (1.25, 931), (1.25, 1062), (1.25, 835), (1.25, 802), (1.25, 1110), (1.25, 1353), (1.25, 690), (1.25, 797), (1.25, 1087), (1.25, 799), (1.25, 911), (1.25, 1047), (1.25, 891), (1.25, 1302), (1.25, 326), (1.25, 1365), (1.25, 1177), (1.25, 886), (1.25, 148), (1.25, 611), (1.25, 602), (1.25, 50), (1.25, 610), (1.25, 982), (1.25, 927), (1.25, 31), (1.25, 1221), (1.25, 1264), (1.25, 613), (1.25, 1313), (1.25, 115), (1.25, 1018), (1.25, 704), (1.25, 1356), (1.25, 1248), (1.25, 826), (1.25, 1151), (1.25, 1013), (1.25, 1238), (1.25, 1098), (1.25, 889), (1.25, 309), (1.25, 83), (1.25, 905), (1.25, 301), (1.25, 100), (1.25, 515), (1.25, 735), (1.25, 1041), (1.25, 1230), (1.25, 705), (1.25, 415), (1.25, 612), (1.25, 411), (1.25, 502), (1.25, 995), (1.25, 430), (1.25, 1214), (1.25, 1107), (1.25, 743), (1.25, 1121), (1.25, 504), (1.25, 1350), (1.25, 1325), (1.25, 1135), (1.25, 1366), (1.25, 892), (1.25, 1119), (1.25, 1359), (1.25, 790), (1.25, 961), (1.25, 1262), (1.25, 1140), (1.25, 1239), (1.25, 873), (1.25, 1213), (1.25, 807), (1.25, 152), (1.25, 1237), (1.25, 1030), (1.25, 1126), (1.25, 1206), (1.25, 1317), (1.25, 1256), (1.25, 1052), (1.25, 1007), (1.25, 537), (1.25, 616), (1.25, 603), (1.25, 134), (1.25, 1096), (1.25, 900), (1.25, 1097), (1.25, 1015), (1.25, 1233), (1.25, 1231), (1.25, 511), (1.25, 1141), (1.25, 1123), (1.25, 818), (1.25, 1368), (1.25, 1168), (1.25, 496), (1.25, 972), (1.25, 1339), (1.25, 1363), (1.25, 1113), (1.25, 1072), (1.25, 1360), (1.25, 1106), (1.25, 696), (1.25, 604), (1.25, 793), (1.25, 921), (1.25, 183), (1.25, 702), (1.25, 362), (1.25, 1236), (1.25, 1039), (1.25, 371), (1.25, 1120), (1.25, 409), (1.25, 796), (1.25, 1261), (1.25, 513), (1.25, 1019), (1.25, 898), (1.25, 1131), (1.25, 258), (1.25, 1217), (1.25, 1099), (1.25, 260), (1.25, 706), (1.25, 1093), (1.25, 935), (1.25, 1146), (1.25, 896), (1.25, 425), (1.25, 606), (1.25, 1343), (1.25, 822), (1.25, 780), (1.25, 1205), (1.25, 1103), (1.25, 621), (1.25, 899), (1.25, 1245), (1.25, 30), (1.25, 830), (1.25, 810), (1.25, 1104), (1.25, 858), (1.25, 1267), (1.25, 1034), (1.25, 1224), (1.25, 1046), (1.25, 699), (1.25, 1012), (1.25, 843), (1.25, 1361), (1.25, 1235), (1.25, 903), (1.25, 825), (1.25, 1133), (1.25, 1335), (1.25, 133), (1.25, 1326), (1.25, 813), (1.25, 43), (1.25, 701), (1.25, 1032), (1.25, 1333), (1.25, 1179), (1.25, 210), (1.25, 520), (1.25, 785), (1.25, 922), (1.25, 1127), (1.25, 1207), (1.25, 815), (1.25, 910), (1.25, 1154), (1.25, 1152), (1.25, 1136), (1.25, 1196), (1.25, 823), (1.25, 540), (1.25, 1045), (1.25, 1083), (1.25, 714), (1.25, 1049), (1.25, 1315), (1.25, 1331), (1.25, 707), (1.25, 1029), (1.25, 1150), (1.125, 1348), (1.125, 897), (1.125, 962), (1.125, 698), (1.125, 942), (1.125, 80), (1.125, 16), (1.125, 857), (1.125, 1303), (1.125, 623), (1.125, 959), (1.125, 736), (1.125, 642), (1.125, 762), (1.125, 517), (1.125, 637), (1.125, 747), (1.125, 1005), (1.125, 805), (1.125, 828), (1.125, 266), (1.125, 809), (1.125, 620), (1.125, 730), (1.125, 1342), (1.125, 387), (1.125, 1036), (1.125, 365), (1.125, 936), (1.125, 1101), (1.125, 422), (1.125, 59), (1.125, 717), (1.125, 633), (1.125, 1143), (1.125, 944), (1.125, 695), (1.125, 991), (1.125, 241), (1.125, 867), (1.125, 615), (1.125, 1249), (1.125, 1063), (1.125, 410), (1.125, 86), (1.125, 862), (1.125, 1155), (1.125, 1137), (1.125, 1183), (1.125, 313), (1.125, 1223), (1.125, 904), (1.125, 629), (1.125, 497), (1.125, 750), (1.125, 1216), (1.125, 191), (1.125, 1307), (1.125, 709), (1.125, 913), (1.125, 406), (1.125, 725), (1.125, 1167), (1.125, 1309), (1.125, 1240), (1.125, 837), (1.125, 840), (1.125, 923), (1.125, 932), (1.125, 525), (1.125, 536), (1.125, 970), (1.125, 973), (1.125, 407), (1.125, 516), (1.125, 1354), (1.125, 449), (1.125, 656), (1.125, 1064), (1.125, 635), (1.125, 519), (1.0, 1369), (0.7083333333333333, 1310), (0.7083333333333333, 1328), (0.5833333333333333, 1336), (0.5833333333333333, 1321), (0.5833333333333333, 1323), (0.5833333333333333, 1351), (0.5833333333333333, 1312), (0.5833333333333333, 1349), (0.5833333333333333, 1306), (0.575, 1329), (0.5178571428571428, 1300), (0.4583333333333333, 1357), (0.4583333333333333, 1346), (0.4583333333333333, 1352), (0.4583333333333333, 1362), (0.4583333333333333, 1355), (0.45, 1341), (0.3333333333333333, 1337), (0.3333333333333333, 1330)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1169
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1268
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1270
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.625, 1071), (1.625, 1374), (1.625, 754), (1.625, 877), (1.625, 1372), (1.625, 1169), (1.625, 1268), (1.625, 1170), (1.625, 1373), (1.625, 1271), (1.625, 1270), (1.625, 975), (1.5, 1193), (1.5, 1382), (1.5, 882), (1.5, 1281), (1.5, 1415), (1.5, 1286), (1.5, 1077), (1.5, 1410), (1.5, 977), (1.5, 1292), (1.5, 1180), (1.5, 1285), (1.5, 1381), (1.5, 593), (1.5, 1282), (1.5, 1174), (1.5, 1407), (1.5, 1379), (1.5, 1387), (1.5, 1398), (1.5, 883), (1.5, 1298), (1.5, 1289), (1.5, 1187), (1.5, 495), (1.5, 400), (1.5, 1391), (1.5, 1190), (1.5, 685), (1.5, 976), (1.5, 1404), (1.5, 1283), (1.5, 1294), (1.5, 1108), (1.5, 1299), (1.5, 1279), (1.5, 879), (1.5, 1291), (1.5, 1412), (1.5, 884), (1.5, 1280), (1.5, 1277), (1.5, 1081), (1.5, 1406), (1.5, 1411), (1.5, 1085), (1.5, 1185), (1.5, 594), (1.5, 1073), (1.5, 1385), (1.5, 978), (1.5, 1172), (1.5, 1378), (1.5, 1272), (1.5, 1396), (1.5, 1288), (1.5, 980), (1.5, 881), (1.5, 1388), (1.5, 1078), (1.5, 1182), (1.5, 1296), (1.5, 979), (1.5, 1408), (1.5, 1284), (1.5, 1275), (1.5, 1076), (1.5, 1386), (1.5, 1175), (1.5, 1186), (1.5, 1075), (1.5, 1274), (1.5, 1375), (1.5, 1376), (1.5, 1189), (1.5, 788), (1.5, 1405), (1.5, 687), (1.5, 686), (1.5, 1080), (1.5, 1287), (1.5, 1414), (1.5, 1383), (1.5, 1377), (1.5, 112), (1.5, 1138), (1.5, 1074), (1.5, 1273), (1.5, 1390), (1.5, 786), (1.5, 983), (1.5, 1319), (1.5, 1389), (1.5, 1393), (1.5, 1017), (1.5, 1181), (1.375, 1426), (1.375, 1014), (1.375, 894), (1.375, 1163), (1.375, 909), (1.375, 1344), (1.375, 1011), (1.375, 1040), (1.375, 1125), (1.375, 1157), (1.375, 1199), (1.375, 988), (1.375, 1198), (1.375, 1094), (1.375, 998), (1.375, 1203), (1.375, 856), (1.375, 1201), (1.375, 722), (1.375, 945), (1.375, 1210), (1.375, 510), (1.375, 692), (1.375, 1304), (1.375, 804), (1.375, 1416), (1.375, 1422), (1.375, 812), (1.375, 1220), (1.25, 910), (1.25, 707), (1.25, 610), (1.25, 1041), (1.25, 1267), (1.25, 891), (1.25, 1013), (1.25, 83), (1.25, 1313), (1.25, 1239), (1.25, 613), (1.25, 892), (1.25, 823), (1.25, 1146), (1.25, 1261), (1.25, 1052), (1.25, 780), (1.25, 430), (1.25, 1126), (1.25, 1150), (1.25, 43), (1.25, 1236), (1.25, 1233), (1.25, 1196), (1.25, 1029), (1.25, 1083), (1.25, 813), (1.25, 815), (1.25, 1461), (1.25, 1141), (1.25, 830), (1.25, 612), (1.25, 802), (1.25, 905), (1.25, 30), (1.25, 961), (1.25, 1099), (1.25, 1325), (1.25, 1333), (1.25, 1152), (1.25, 210), (1.25, 1120), (1.25, 513), (1.25, 409), (1.25, 1107), (1.25, 148), (1.25, 1007), (1.25, 1425), (1.25, 115), (1.25, 1248), (1.25, 1214), (1.25, 1019), (1.25, 1217), (1.25, 1087), (1.25, 1207), (1.25, 972), (1.25, 1097), (1.25, 927), (1.25, 1110), (1.25, 793), (1.25, 520), (1.25, 1350), (1.25, 1136), (1.25, 1104), (1.25, 889), (1.25, 326), (1.25, 1256), (1.25, 1151), (1.25, 714), (1.25, 1302), (1.25, 1062), (1.25, 822), (1.25, 1402), (1.25, 911), (1.25, 1335), (1.25, 701), (1.25, 825), (1.25, 258), (1.25, 1034), (1.25, 702), (1.25, 699), (1.25, 1315), (1.25, 1462), (1.25, 982), (1.25, 1135), (1.25, 1262), (1.25, 1123), (1.25, 818), (1.25, 785), (1.25, 810), (1.25, 896), (1.25, 371), (1.25, 843), (1.25, 995), (1.25, 690), (1.25, 1235), (1.25, 1047), (1.25, 790), (1.25, 903), (1.25, 900), (1.25, 616), (1.25, 1213), (1.25, 496), (1.25, 31), (1.25, 1429), (1.25, 1356), (1.25, 611), (1.25, 537), (1.25, 922), (1.25, 1395), (1.25, 1339), (1.25, 1455), (1.25, 183), (1.25, 796), (1.25, 826), (1.25, 886), (1.25, 1361), (1.25, 935), (1.25, 1046), (1.25, 425), (1.25, 1093), (1.25, 1353), (1.25, 1365), (1.25, 1444), (1.25, 1359), (1.25, 511), (1.25, 899), (1.25, 1103), (1.25, 1441), (1.25, 706), (1.25, 133), (1.25, 1343), (1.25, 1264), (1.25, 606), (1.25, 309), (1.25, 1045), (1.25, 1119), (1.25, 873), (1.25, 1438), (1.25, 604), (1.25, 411), (1.25, 1098), (1.25, 1018), (1.25, 1427), (1.25, 1177), (1.25, 260), (1.25, 100), (1.25, 931), (1.25, 1224), (1.25, 1245), (1.25, 799), (1.25, 415), (1.25, 621), (1.25, 743), (1.25, 858), (1.25, 152), (1.25, 704), (1.25, 1230), (1.25, 1326), (1.25, 1015), (1.25, 1231), (1.25, 1121), (1.25, 1317), (1.25, 134), (1.25, 1106), (1.25, 1238), (1.25, 1113), (1.25, 1432), (1.25, 540), (1.25, 1206), (1.25, 1205), (1.25, 1032), (1.25, 602), (1.25, 50), (1.25, 1366), (1.25, 1368), (1.25, 1451), (1.25, 1363), (1.25, 515), (1.25, 301), (1.25, 835), (1.25, 1096), (1.25, 1454), (1.25, 1221), (1.25, 1435), (1.25, 1131), (1.25, 1072), (1.25, 1012), (1.25, 1030), (1.25, 696), (1.25, 1039), (1.25, 1179), (1.25, 1237), (1.25, 1133), (1.25, 1127), (1.25, 1140), (1.25, 502), (1.25, 1154), (1.25, 797), (1.25, 705), (1.25, 898), (1.25, 921), (1.25, 1049), (1.25, 603), (1.25, 807), (1.25, 362), (1.25, 1331), (1.25, 504), (1.25, 1360), (1.25, 1400), (1.25, 1168), (1.25, 735), (1.125, 762), (1.125, 747), (1.125, 1457), (1.125, 962), (1.125, 1348), (1.125, 1303), (1.125, 1442), (1.125, 80), (1.125, 1437), (1.125, 959), (1.125, 642), (1.125, 828), (1.125, 730), (1.125, 1459), (1.125, 387), (1.125, 1434), (1.125, 805), (1.125, 942), (1.125, 517), (1.125, 1460), (1.125, 1440), (1.125, 623), (1.125, 698), (1.125, 1428), (1.125, 809), (1.125, 736), (1.125, 1342), (1.125, 16), (1.125, 1413), (1.125, 1463), (1.125, 1436), (1.125, 1005), (1.125, 897), (1.125, 1423), (1.125, 637), (1.125, 266), (1.125, 1420), (1.125, 620), (1.125, 1380), (1.125, 857), (0.7, 1443), (0.5833333333333333, 1446), (0.5833333333333333, 1449), (0.5833333333333333, 1431), (0.5833333333333333, 1447), (0.4583333333333333, 1452), (0.45, 1456), (0.325, 1418), (0.325, 1403), (0.26785714285714285, 1397), (0.2, 1371)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1372
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.625, 1372), (1.625, 1169), (1.625, 1268), (1.625, 1071), (1.625, 1466), (1.625, 1465), (1.625, 1170), (1.625, 1467), (1.625, 877), (1.625, 1469), (1.625, 1468), (1.625, 754), (1.625, 975), (1.625, 1464), (1.625, 1374), (1.625, 1373), (1.625, 1270), (1.625, 1271), (1.5, 884), (1.5, 1528), (1.5, 1076), (1.5, 1287), (1.5, 1273), (1.5, 1078), (1.5, 593), (1.5, 1471), (1.5, 1497), (1.5, 1414), (1.5, 1479), (1.5, 1492), (1.5, 1299), (1.5, 1075), (1.5, 879), (1.5, 1080), (1.5, 1074), (1.5, 1275), (1.5, 1186), (1.5, 1375), (1.5, 1396), (1.5, 1506), (1.5, 1407), (1.5, 1477), (1.5, 1385), (1.5, 685), (1.5, 1181), (1.5, 1077), (1.5, 1504), (1.5, 979), (1.5, 1284), (1.5, 1525), (1.5, 112), (1.5, 1478), (1.5, 1073), (1.5, 1277), (1.5, 687), (1.5, 1280), (1.5, 983), (1.5, 1511), (1.5, 1285), (1.5, 1484), (1.5, 881), (1.5, 1383), (1.5, 1190), (1.5, 1175), (1.5, 1473), (1.5, 1272), (1.5, 1289), (1.5, 1017), (1.5, 1404), (1.5, 1294), (1.5, 977), (1.5, 1495), (1.5, 1412), (1.5, 1187), (1.5, 1378), (1.5, 1377), (1.5, 1503), (1.5, 1085), (1.5, 786), (1.5, 1174), (1.5, 495), (1.5, 1108), (1.5, 1386), (1.5, 1510), (1.5, 882), (1.5, 1502), (1.5, 1518), (1.5, 1482), (1.5, 1519), (1.5, 1286), (1.5, 1405), (1.5, 1288), (1.5, 883), (1.5, 1516), (1.5, 1509), (1.5, 1298), (1.5, 1138), (1.5, 1408), (1.5, 1415), (1.5, 1498), (1.5, 1388), (1.5, 976), (1.5, 1081), (1.5, 1382), (1.5, 1182), (1.5, 686), (1.5, 978), (1.5, 1406), (1.5, 1508), (1.5, 1485), (1.5, 1193), (1.5, 1523), (1.5, 400), (1.5, 1507), (1.5, 1398), (1.5, 1292), (1.5, 1483), (1.5, 1291), (1.5, 1488), (1.5, 1389), (1.5, 1476), (1.5, 1390), (1.5, 1319), (1.5, 1489), (1.5, 1515), (1.5, 1499), (1.5, 1283), (1.5, 1279), (1.5, 1505), (1.5, 594), (1.5, 1513), (1.5, 1410), (1.5, 1185), (1.5, 1281), (1.5, 1296), (1.5, 1376), (1.5, 1381), (1.5, 1411), (1.5, 1391), (1.5, 1282), (1.5, 1274), (1.5, 1189), (1.5, 1517), (1.5, 1387), (1.5, 1172), (1.5, 1521), (1.5, 1379), (1.5, 788), (1.5, 1514), (1.5, 980), (1.5, 1393), (1.5, 1180), (1.375, 1011), (1.375, 1199), (1.375, 945), (1.375, 998), (1.375, 1201), (1.375, 856), (1.375, 1304), (1.375, 1014), (1.375, 510), (1.375, 804), (1.375, 1220), (1.375, 1416), (1.375, 1203), (1.375, 1422), (1.375, 909), (1.375, 692), (1.375, 1539), (1.375, 1094), (1.375, 1198), (1.375, 1534), (1.375, 988), (1.375, 1157), (1.375, 1210), (1.375, 894), (1.375, 722), (1.375, 1344), (1.375, 1163), (1.375, 1543), (1.375, 1040), (1.375, 1531), (1.375, 1125), (1.375, 812), (1.375, 1530), (1.375, 1426), (1.25, 699), (1.25, 1103), (1.25, 927), (1.25, 1217), (1.25, 1230), (1.25, 1096), (1.25, 613), (1.25, 823), (1.25, 802), (1.25, 1494), (1.25, 1325), (1.25, 1123), (1.25, 511), (1.25, 796), (1.25, 540), (1.25, 1461), (1.25, 1146), (1.25, 1315), (1.25, 1537), (1.25, 134), (1.25, 1097), (1.25, 515), (1.25, 1236), (1.25, 701), (1.25, 1245), (1.25, 702), (1.25, 1213), (1.25, 1152), (1.25, 30), (1.25, 935), (1.25, 1150), (1.25, 1356), (1.25, 1093), (1.25, 896), (1.25, 1361), (1.25, 1104), (1.25, 258), (1.25, 1205), (1.25, 260), (1.25, 606), (1.25, 1432), (1.25, 1235), (1.25, 1335), (1.25, 903), (1.25, 743), (1.25, 1264), (1.25, 612), (1.25, 1451), (1.25, 210), (1.25, 1177), (1.25, 707), (1.25, 995), (1.25, 1553), (1.25, 910), (1.25, 982), (1.25, 1136), (1.25, 1099), (1.25, 799), (1.25, 1343), (1.25, 1481), (1.25, 825), (1.25, 1438), (1.25, 1013), (1.25, 1206), (1.25, 1113), (1.25, 133), (1.25, 785), (1.25, 810), (1.25, 889), (1.25, 892), (1.25, 1110), (1.25, 1402), (1.25, 604), (1.25, 415), (1.25, 301), (1.25, 1248), (1.25, 1224), (1.25, 1034), (1.25, 610), (1.25, 1098), (1.25, 31), (1.25, 835), (1.25, 1262), (1.25, 790), (1.25, 1326), (1.25, 1435), (1.25, 822), (1.25, 621), (1.25, 780), (1.25, 1454), (1.25, 183), (1.25, 616), (1.25, 50), (1.25, 1368), (1.25, 1019), (1.25, 1441), (1.25, 1120), (1.25, 972), (1.25, 1007), (1.25, 1131), (1.25, 425), (1.25, 1052), (1.25, 1196), (1.25, 1046), (1.25, 409), (1.25, 830), (1.25, 611), (1.25, 1221), (1.25, 1119), (1.25, 1141), (1.25, 911), (1.25, 931), (1.25, 1121), (1.25, 1487), (1.25, 115), (1.25, 1359), (1.25, 886), (1.25, 1041), (1.25, 1238), (1.25, 513), (1.25, 1231), (1.25, 1256), (1.25, 496), (1.25, 1302), (1.25, 1350), (1.25, 1339), (1.25, 1429), (1.25, 826), (1.25, 1549), (1.25, 1087), (1.25, 1365), (1.25, 1233), (1.25, 1455), (1.25, 1207), (1.25, 858), (1.25, 1047), (1.25, 899), (1.25, 1333), (1.25, 371), (1.25, 309), (1.25, 873), (1.25, 1151), (1.25, 1425), (1.25, 1029), (1.25, 1317), (1.25, 1239), (1.25, 1083), (1.25, 1395), (1.25, 1532), (1.25, 900), (1.25, 1015), (1.25, 922), (1.25, 1427), (1.25, 430), (1.25, 1540), (1.25, 1045), (1.25, 961), (1.25, 1062), (1.25, 1444), (1.25, 1032), (1.25, 100), (1.25, 1542), (1.25, 1012), (1.25, 1106), (1.25, 83), (1.25, 891), (1.25, 1363), (1.25, 690), (1.25, 813), (1.25, 704), (1.25, 1267), (1.25, 1135), (1.25, 152), (1.25, 43), (1.25, 537), (1.25, 1366), (1.25, 843), (1.25, 326), (1.25, 602), (1.25, 1214), (1.25, 520), (1.25, 1072), (1.25, 905), (1.25, 815), (1.25, 714), (1.25, 1107), (1.25, 706), (1.25, 1353), (1.25, 1261), (1.25, 1462), (1.25, 818), (1.25, 793), (1.25, 148), (1.25, 1126), (1.25, 411), (1.25, 1018), (1.25, 1313), (1.125, 1546), (1.125, 1533), (1.125, 1551), (1.125, 1544), (1.125, 1475), (1.125, 1547), (1.125, 1555), (1.0, 1545), (0.7083333333333333, 1552), (0.5833333333333333, 1536), (0.5833333333333333, 1529), (0.575, 1470), (0.4583333333333333, 1541), (0.4583333333333333, 1524), (0.325, 1491), (0.325, 1526), (0.325, 1501)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1372
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1169
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1268
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1466
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.625, 1559), (1.625, 1374), (1.625, 1271), (1.625, 1561), (1.625, 1071), (1.625, 1564), (1.625, 1563), (1.625, 1557), (1.625, 975), (1.625, 1469), (1.625, 1562), (1.625, 1467), (1.625, 1169), (1.625, 1464), (1.625, 1468), (1.625, 1170), (1.625, 1270), (1.625, 1465), (1.625, 1560), (1.625, 1556), (1.625, 1558), (1.625, 1372), (1.625, 1268), (1.625, 754), (1.625, 1466), (1.625, 877), (1.625, 1373), (1.5, 1510), (1.5, 980), (1.5, 1525), (1.5, 1611), (1.5, 983), (1.5, 1478), (1.5, 1190), (1.5, 1285), (1.5, 882), (1.5, 1381), (1.5, 1615), (1.5, 687), (1.5, 1281), (1.5, 1584), (1.5, 1602), (1.5, 879), (1.5, 1637), (1.5, 1579), (1.5, 1180), (1.5, 1085), (1.5, 1492), (1.5, 1504), (1.5, 1189), (1.5, 1292), (1.5, 1411), (1.5, 1389), (1.5, 1516), (1.5, 1503), (1.5, 1614), (1.5, 1627), (1.5, 1288), (1.5, 1646), (1.5, 1624), (1.5, 1375), (1.5, 1597), (1.5, 1291), (1.5, 1387), (1.5, 1477), (1.5, 1377), (1.5, 1578), (1.5, 1569), (1.5, 1319), (1.5, 594), (1.5, 1412), (1.5, 1565), (1.5, 1390), (1.5, 1583), (1.5, 1649), (1.5, 977), (1.5, 1631), (1.5, 883), (1.5, 1407), (1.5, 1648), (1.5, 1507), (1.5, 1077), (1.5, 1590), (1.5, 1172), (1.5, 1414), (1.5, 1078), (1.5, 1613), (1.5, 1279), (1.5, 1589), (1.5, 1108), (1.5, 1289), (1.5, 1277), (1.5, 1283), (1.5, 1398), (1.5, 686), (1.5, 1396), (1.5, 1499), (1.5, 1573), (1.5, 1488), (1.5, 788), (1.5, 1587), (1.5, 1647), (1.5, 1498), (1.5, 1484), (1.5, 1193), (1.5, 1186), (1.5, 1509), (1.5, 1523), (1.5, 1495), (1.5, 1521), (1.5, 1280), (1.5, 786), (1.5, 1502), (1.5, 1515), (1.5, 1187), (1.5, 1404), (1.5, 1644), (1.5, 1181), (1.5, 1585), (1.5, 1497), (1.5, 1514), (1.5, 1598), (1.5, 1017), (1.5, 1632), (1.5, 1567), (1.5, 1645), (1.5, 1479), (1.5, 1406), (1.5, 1388), (1.5, 1617), (1.5, 1619), (1.5, 1081), (1.5, 976), (1.5, 1299), (1.5, 1282), (1.5, 1505), (1.5, 1588), (1.5, 1393), (1.5, 979), (1.5, 1595), (1.5, 1386), (1.5, 1635), (1.5, 1415), (1.5, 1294), (1.5, 1080), (1.5, 1634), (1.5, 1473), (1.5, 1599), (1.5, 1593), (1.5, 1076), (1.5, 1508), (1.5, 1640), (1.5, 1625), (1.5, 400), (1.5, 1382), (1.5, 1296), (1.5, 1643), (1.5, 1074), (1.5, 1073), (1.5, 1528), (1.5, 1174), (1.5, 1511), (1.5, 1182), (1.5, 1405), (1.5, 1489), (1.5, 1284), (1.5, 1376), (1.5, 1608), (1.5, 1575), (1.5, 1483), (1.5, 1379), (1.5, 1274), (1.5, 685), (1.5, 1408), (1.5, 1482), (1.5, 1622), (1.5, 1272), (1.5, 1378), (1.5, 1506), (1.5, 495), (1.5, 1641), (1.5, 1275), (1.5, 1391), (1.5, 881), (1.5, 1591), (1.5, 1075), (1.5, 1298), (1.5, 1185), (1.5, 1175), (1.5, 1513), (1.5, 1580), (1.5, 1586), (1.5, 1574), (1.5, 1623), (1.5, 1287), (1.5, 1286), (1.5, 1476), (1.5, 1628), (1.5, 1385), (1.5, 593), (1.5, 1582), (1.5, 1518), (1.5, 1485), (1.5, 884), (1.5, 1519), (1.5, 978), (1.5, 1603), (1.5, 112), (1.5, 1273), (1.5, 1517), (1.5, 1471), (1.5, 1383), (1.5, 1138), (1.5, 1410), (1.375, 692), (1.375, 1416), (1.375, 1201), (1.375, 812), (1.375, 1040), (1.375, 804), (1.375, 909), (1.375, 1304), (1.375, 510), (1.375, 894), (1.375, 1531), (1.375, 1543), (1.375, 1422), (1.375, 1210), (1.375, 998), (1.375, 1199), (1.375, 1011), (1.375, 1203), (1.375, 1198), (1.375, 856), (1.375, 945), (1.375, 1534), (1.375, 1014), (1.375, 1125), (1.375, 1344), (1.375, 1530), (1.375, 1157), (1.375, 1539), (1.375, 1220), (1.375, 988), (1.375, 1094), (1.375, 1426), (1.375, 1596), (1.375, 1568), (1.375, 1163), (1.375, 722), (1.25, 699), (1.25, 1494), (1.25, 1350), (1.25, 1097), (1.25, 1121), (1.25, 1607), (1.25, 1441), (1.25, 1461), (1.25, 896), (1.25, 611), (1.25, 1034), (1.25, 810), (1.25, 1435), (1.25, 1205), (1.25, 1123), (1.25, 1007), (1.25, 1335), (1.25, 790), (1.25, 1224), (1.25, 1141), (1.25, 301), (1.25, 931), (1.25, 1256), (1.25, 31), (1.25, 886), (1.25, 835), (1.25, 743), (1.25, 1315), (1.25, 702), (1.25, 1601), (1.25, 1013), (1.25, 50), (1.25, 134), (1.25, 822), (1.25, 1365), (1.25, 1047), (1.25, 1451), (1.25, 1206), (1.25, 1046), (1.25, 606), (1.25, 513), (1.25, 1146), (1.25, 260), (1.25, 780), (1.25, 1019), (1.25, 1230), (1.25, 1248), (1.25, 1221), (1.25, 1110), (1.25, 785), (1.25, 1343), (1.25, 825), (1.25, 604), (1.25, 1368), (1.25, 935), (1.25, 1213), (1.25, 1087), (1.25, 1481), (1.25, 927), (1.25, 1438), (1.25, 1113), (1.25, 1103), (1.25, 707), (1.25, 1196), (1.25, 858), (1.25, 616), (1.25, 1119), (1.25, 1356), (1.25, 425), (1.25, 1325), (1.25, 911), (1.25, 1177), (1.25, 115), (1.25, 1571), (1.25, 1233), (1.25, 1217), (1.25, 415), (1.25, 1096), (1.25, 1238), (1.25, 1041), (1.25, 830), (1.25, 1333), (1.25, 1262), (1.25, 889), (1.25, 621), (1.25, 1339), (1.25, 1429), (1.25, 899), (1.25, 982), (1.25, 1052), (1.25, 1432), (1.25, 1098), (1.25, 1610), (1.25, 1245), (1.25, 1104), (1.25, 799), (1.25, 1359), (1.25, 1487), (1.25, 1402), (1.25, 1454), (1.25, 1235), (1.25, 1152), (1.25, 826), (1.25, 995), (1.25, 1150), (1.25, 515), (1.25, 1120), (1.25, 1131), (1.25, 183), (1.25, 258), (1.25, 1549), (1.25, 892), (1.25, 1455), (1.25, 972), (1.25, 1537), (1.25, 133), (1.25, 409), (1.25, 612), (1.25, 1326), (1.25, 1231), (1.25, 540), (1.25, 1264), (1.25, 613), (1.25, 910), (1.25, 511), (1.25, 610), (1.25, 1553), (1.25, 802), (1.25, 796), (1.25, 903), (1.25, 823), (1.25, 1136), (1.25, 1099), (1.25, 210), (1.25, 1093), (1.25, 1577), (1.25, 496), (1.25, 1207), (1.25, 30), (1.25, 1361), (1.25, 1302), (1.25, 1630), (1.25, 371), (1.25, 701), (1.25, 1236), (0.45, 1633), (0.3333333333333333, 1638), (0.325, 1616), (0.325, 1620), (0.325, 1605)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1559
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1561
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
[(1.625, 1651), (1.625, 1374), (1.625, 1071), (1.625, 1655), (1.625, 975), (1.625, 1562), (1.625, 1466), (1.625, 1464), (1.625, 1170), (1.625, 1665), (1.625, 1663), (1.625, 1666), (1.625, 1561), (1.625, 1664), (1.625, 754), (1.625, 1372), (1.625, 1559), (1.625, 1564), (1.625, 877), (1.625, 1558), (1.625, 1563), (1.625, 1557), (1.625, 1271), (1.625, 1560), (1.625, 1660), (1.625, 1653), (1.625, 1652), (1.625, 1657), (1.625, 1169), (1.625, 1659), (1.625, 1467), (1.625, 1465), (1.625, 1556), (1.625, 1373), (1.625, 1268), (1.625, 1656), (1.625, 1469), (1.625, 1468), (1.625, 1662), (1.625, 1270), (1.5, 1281), (1.5, 1677), (1.5, 1078), (1.5, 1504), (1.5, 1567), (1.5, 1589), (1.5, 1476), (1.5, 1506), (1.5, 1569), (1.5, 1702), (1.5, 1280), (1.5, 1299), (1.5, 1523), (1.5, 882), (1.5, 1645), (1.5, 1492), (1.5, 1282), (1.5, 1585), (1.5, 1385), (1.5, 1670), (1.5, 1489), (1.5, 1700), (1.5, 1641), (1.5, 1509), (1.5, 1675), (1.5, 1181), (1.5, 495), (1.5, 1703), (1.5, 1574), (1.5, 1586), (1.5, 976), (1.5, 686), (1.5, 1389), (1.5, 1495), (1.5, 1726), (1.5, 1649), (1.5, 1272), (1.5, 1479), (1.5, 1743), (1.5, 1296), (1.5, 1414), (1.5, 1741), (1.5, 1412), (1.5, 1508), (1.5, 1482), (1.5, 1680), (1.5, 1287), (1.5, 1627), (1.5, 879), (1.5, 1406), (1.5, 1614), (1.5, 1690), (1.5, 1717), (1.5, 1274), (1.5, 1713), (1.5, 1681), (1.5, 1289), (1.5, 1407), (1.5, 983), (1.5, 1635), (1.5, 1615), (1.5, 1017), (1.5, 1709), (1.5, 1294), (1.5, 1599), (1.5, 1507), (1.5, 1565), (1.5, 1640), (1.5, 1588), (1.5, 1622), (1.5, 1398), (1.5, 1598), (1.5, 1695), (1.5, 881), (1.5, 1477), (1.5, 980), (1.5, 786), (1.5, 1376), (1.5, 1396), (1.5, 1735), (1.5, 1742), (1.5, 1378), (1.5, 1617), (1.5, 1387), (1.5, 1579), (1.5, 1721), (1.5, 1590), (1.5, 1187), (1.5, 1725), (1.5, 1182), (1.5, 1408), (1.5, 1631), (1.5, 1582), (1.5, 1291), (1.5, 1473), (1.5, 1286), (1.5, 1488), (1.5, 1275), (1.5, 1514), (1.5, 1528), (1.5, 1701), (1.5, 1404), (1.5, 1678), (1.5, 1706), (1.5, 1410), (1.5, 400), (1.5, 1608), (1.5, 1292), (1.5, 1393), (1.5, 593), (1.5, 1074), (1.5, 1085), (1.5, 883), (1.5, 1285), (1.5, 1497), (1.5, 1382), (1.5, 1381), (1.5, 1591), (1.5, 1643), (1.5, 1319), (1.5, 594), (1.5, 1685), (1.5, 1707), (1.5, 1515), (1.5, 1471), (1.5, 1375), (1.5, 1584), (1.5, 1377), (1.5, 1583), (1.5, 1733), (1.5, 1518), (1.5, 1505), (1.5, 1279), (1.5, 1712), (1.5, 1273), (1.5, 1625), (1.5, 1277), (1.5, 1611), (1.5, 1623), (1.5, 1108), (1.5, 1731), (1.5, 884), (1.5, 1597), (1.5, 1175), (1.5, 1478), (1.5, 1081), (1.5, 1180), (1.5, 1634), (1.5, 1714), (1.5, 1691), (1.5, 1578), (1.5, 1719), (1.5, 1686), (1.5, 1503), (1.5, 1687), (1.5, 1283), (1.5, 1193), (1.5, 1080), (1.5, 1138), (1.5, 1484), (1.5, 1708), (1.5, 1738), (1.5, 1298), (1.5, 1747), (1.5, 1513), (1.5, 1172), (1.5, 1411), (1.5, 1587), (1.5, 1075), (1.5, 112), (1.5, 1729), (1.5, 977), (1.5, 1602), (1.5, 1174), (1.5, 1388), (1.5, 1740), (1.5, 1619), (1.5, 1288), (1.5, 1521), (1.5, 685), (1.5, 1698), (1.5, 1710), (1.5, 1511), (1.5, 1737), (1.5, 687), (1.5, 979), (1.5, 1704), (1.5, 1613), (1.5, 1516), (1.5, 1647), (1.5, 1379), (1.5, 1684), (1.5, 1190), (1.5, 1580), (1.5, 1390), (1.5, 1646), (1.5, 1499), (1.5, 1573), (1.5, 1189), (1.5, 1679), (1.5, 1693), (1.5, 1671), (1.5, 1745), (1.5, 1383), (1.5, 1672), (1.5, 1405), (1.5, 1510), (1.5, 1683), (1.5, 978), (1.5, 1391), (1.5, 1386), (1.5, 1284), (1.5, 1637), (1.5, 1730), (1.5, 1668), (1.5, 1502), (1.5, 1525), (1.5, 1483), (1.5, 1415), (1.5, 1595), (1.5, 1485), (1.5, 1077), (1.5, 1632), (1.5, 1519), (1.5, 1185), (1.5, 1603), (1.5, 1186), (1.5, 1076), (1.5, 1732), (1.5, 1624), (1.5, 1575), (1.5, 1073), (1.5, 788), (1.5, 1628), (1.5, 1517), (1.5, 1746), (1.5, 1648), (1.5, 1498), (1.5, 1644), (1.5, 1593), (1.375, 1539), (1.375, 1220), (1.375, 804), (1.375, 812), (1.375, 1344), (1.375, 1422), (1.375, 722), (1.375, 1163), (1.375, 945), (1.375, 1426), (1.375, 894), (1.375, 1094), (1.375, 1596), (1.375, 1568), (1.375, 1011), (1.375, 1157), (1.375, 998), (1.375, 1040), (1.375, 909), (1.375, 1543), (1.375, 1201), (1.375, 1534), (1.375, 692), (1.375, 1416), (1.375, 1125), (1.375, 510), (1.375, 856), (1.375, 1014), (1.375, 1304), (1.375, 1531), (1.375, 1199), (1.375, 988), (1.375, 1198), (1.375, 1530), (1.375, 1203), (1.375, 1210), (1.25, 1177), (1.25, 790), (1.25, 1315), (1.25, 1438), (1.25, 260), (1.25, 425), (1.25, 1451), (1.25, 1728), (1.25, 1103), (1.25, 1697), (1.25, 115), (1.25, 1087), (1.25, 1461), (1.25, 699), (1.25, 1335), (1.25, 825), (1.25, 1723), (1.25, 1046), (1.25, 1441), (1.25, 1233), (1.25, 1350), (1.25, 1034), (1.25, 1019), (1.25, 606), (1.25, 780), (1.25, 810), (1.25, 1206), (1.25, 1571), (1.25, 31), (1.25, 1356), (1.25, 702), (1.25, 1494), (1.25, 1689), (1.25, 785), (1.25, 1196), (1.25, 1343), (1.25, 1141), (1.25, 927), (1.25, 1256), (1.25, 513), (1.25, 1121), (1.25, 935), (1.25, 911), (1.25, 1097), (1.25, 1481), (1.25, 822), (1.25, 301), (1.25, 1435), (1.25, 1146), (1.25, 604), (1.25, 743), (1.25, 1368), (1.25, 1047), (1.25, 50), (1.25, 134), (1.25, 1113), (1.25, 1205), (1.25, 1119), (1.25, 1674), (1.25, 1007), (1.25, 835), (1.25, 931), (1.25, 1110), (1.25, 1230), (1.25, 1607), (1.25, 1601), (1.25, 1224), (1.25, 1213), (1.25, 1325), (1.25, 616), (1.25, 611), (1.25, 1716), (1.25, 1013), (1.25, 896), (1.25, 1365), (1.25, 1221), (1.25, 858), (1.25, 886), (1.25, 1248), (1.25, 1123), (1.25, 707), (1.125, 1694), (0.5833333333333333, 1667), (0.26785714285714285, 1718)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1651
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1655
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 975
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 15]
[Computing fitness]
[(1.625, 1564), (1.625, 877), (1.625, 1769), (1.625, 1268), (1.625, 1270), (1.625, 1768), (1.625, 1469), (1.625, 1755), (1.625, 1660), (1.625, 1653), (1.625, 1761), (1.625, 1754), (1.625, 1752), (1.625, 1464), (1.625, 1756), (1.625, 1657), (1.625, 1759), (1.625, 1750), (1.625, 975), (1.625, 1169), (1.625, 1662), (1.625, 1766), (1.625, 1562), (1.625, 1757), (1.625, 1468), (1.625, 1770), (1.625, 1763), (1.625, 1651), (1.625, 1652), (1.625, 1665), (1.625, 1373), (1.625, 1753), (1.625, 1467), (1.625, 1659), (1.625, 1664), (1.625, 1556), (1.625, 1374), (1.625, 1560), (1.625, 1760), (1.625, 1561), (1.625, 1372), (1.625, 1271), (1.625, 1656), (1.625, 1071), (1.625, 1559), (1.625, 1170), (1.625, 1666), (1.625, 1767), (1.625, 1663), (1.625, 1563), (1.625, 1465), (1.625, 754), (1.625, 1466), (1.625, 1558), (1.625, 1557), (1.625, 1655), (1.5, 1189), (1.5, 1668), (1.5, 1714), (1.5, 1515), (1.5, 1588), (1.5, 1108), (1.5, 1507), (1.5, 1080), (1.5, 1625), (1.5, 881), (1.5, 1608), (1.5, 1489), (1.5, 1517), (1.5, 977), (1.5, 786), (1.5, 1412), (1.5, 1579), (1.5, 1813), (1.5, 1077), (1.5, 1675), (1.5, 1778), (1.5, 1819), (1.5, 1391), (1.5, 1389), (1.5, 1298), (1.5, 1181), (1.5, 980), (1.5, 1745), (1.5, 1741), (1.5, 1180), (1.5, 1746), (1.5, 1411), (1.5, 1284), (1.5, 1272), (1.5, 1737), (1.5, 1634), (1.5, 1518), (1.5, 1585), (1.5, 1193), (1.5, 1492), (1.5, 1280), (1.5, 1502), (1.5, 1282), (1.5, 1595), (1.5, 1623), (1.5, 1614), (1.5, 1396), (1.5, 1775), (1.5, 1703), (1.5, 1523), (1.5, 1387), (1.5, 1631), (1.5, 1807), (1.5, 1710), (1.5, 1138), (1.5, 1528), (1.5, 400), (1.5, 1288), (1.5, 1680), (1.5, 1842), (1.5, 1783), (1.5, 1511), (1.5, 1793), (1.5, 1414), (1.5, 1299), (1.5, 1510), (1.5, 1174), (1.5, 1190), (1.5, 1383), (1.5, 1175), (1.5, 1619), (1.5, 1635), (1.5, 1800), (1.5, 1477), (1.5, 976), (1.5, 1286), (1.5, 1624), (1.5, 1407), (1.5, 1691), (1.5, 1695), (1.5, 1499), (1.5, 1509), (1.5, 1684), (1.5, 1589), (1.5, 1698), (1.5, 1785), (1.5, 1506), (1.5, 1627), (1.5, 1582), (1.5, 1291), (1.5, 1809), (1.5, 1519), (1.5, 1647), (1.5, 1786), (1.5, 112), (1.5, 879), (1.5, 1274), (1.5, 1643), (1.5, 1672), (1.5, 1587), (1.5, 1580), (1.5, 1685), (1.5, 1569), (1.5, 1565), (1.5, 1381), (1.5, 1185), (1.5, 1281), (1.5, 1410), (1.5, 1687), (1.5, 1713), (1.5, 1289), (1.5, 1285), (1.5, 1602), (1.5, 1743), (1.5, 1513), (1.5, 1182), (1.5, 788), (1.5, 495), (1.5, 1376), (1.5, 1504), (1.5, 1733), (1.5, 1388), (1.5, 1826), (1.5, 1732), (1.5, 1573), (1.5, 1074), (1.5, 1473), (1.5, 1375), (1.5, 685), (1.5, 1085), (1.5, 883), (1.5, 1717), (1.5, 983), (1.5, 1076), (1.5, 1586), (1.5, 1498), (1.5, 1837), (1.5, 884), (1.5, 1172), (1.5, 1597), (1.5, 978), (1.5, 1738), (1.5, 1709), (1.5, 1617), (1.5, 1645), (1.5, 1740), (1.5, 1521), (1.5, 1834), (1.5, 1815), (1.5, 1781), (1.5, 1073), (1.5, 1729), (1.5, 1479), (1.5, 1641), (1.5, 1406), (1.5, 1719), (1.5, 1790), (1.5, 1693), (1.5, 1378), (1.5, 1747), (1.5, 1393), (1.5, 1615), (1.5, 1377), (1.5, 1471), (1.5, 1808), (1.5, 1805), (1.5, 1485), (1.5, 686), (1.5, 1677), (1.5, 882), (1.5, 1712), (1.5, 1078), (1.5, 1385), (1.5, 1681), (1.5, 1649), (1.5, 1591), (1.5, 1497), (1.5, 1792), (1.5, 1836), (1.5, 1503), (1.5, 1583), (1.5, 1791), (1.5, 1574), (1.5, 1835), (1.5, 1405), (1.5, 1484), (1.5, 979), (1.5, 1816), (1.5, 1277), (1.5, 594), (1.5, 1702), (1.5, 1525), (1.5, 1721), (1.5, 1811), (1.5, 1415), (1.5, 1508), (1.5, 1731), (1.5, 1187), (1.5, 1283), (1.5, 1599), (1.5, 1812), (1.5, 1700), (1.5, 1701), (1.5, 1578), (1.5, 1796), (1.5, 1735), (1.5, 1829), (1.5, 1398), (1.5, 1782), (1.5, 1273), (1.5, 1801), (1.5, 1831), (1.5, 1075), (1.5, 1476), (1.5, 1386), (1.5, 1644), (1.5, 1822), (1.5, 1611), (1.5, 1779), (1.5, 1081), (1.5, 1628), (1.5, 1707), (1.5, 1613), (1.5, 1483), (1.5, 1797), (1.5, 1726), (1.5, 1725), (1.5, 1382), (1.5, 1478), (1.5, 1590), (1.5, 1788), (1.5, 1482), (1.5, 593), (1.5, 1683), (1.5, 1708), (1.5, 1186), (1.5, 1841), (1.5, 1287), (1.5, 1637), (1.5, 1279), (1.5, 1505), (1.5, 1802), (1.5, 1593), (1.5, 1686), (1.5, 1292), (1.5, 1598), (1.5, 1799), (1.5, 1379), (1.5, 1567), (1.5, 1017), (1.5, 1632), (1.5, 1704), (1.5, 1296), (1.5, 1404), (1.5, 1294), (1.5, 1603), (1.5, 1516), (1.5, 1670), (1.5, 687), (1.5, 1798), (1.5, 1319), (1.5, 1390), (1.5, 1742), (1.5, 1646), (1.5, 1622), (1.5, 1804), (1.5, 1825), (1.5, 1776), (1.5, 1706), (1.5, 1690), (1.5, 1789), (1.5, 1514), (1.5, 1488), (1.5, 1584), (1.5, 1495), (1.5, 1678), (1.5, 1787), (1.5, 1820), (1.5, 1814), (1.5, 1671), (1.5, 1275), (1.5, 1408), (1.5, 1730), (1.5, 1679), (1.5, 1640), (1.5, 1806), (1.5, 1575), (1.5, 1648), (1.375, 1304), (1.375, 1157), (1.375, 1220), (1.375, 510), (1.375, 1199), (1.375, 988), (1.375, 692), (1.375, 856), (1.375, 909), (1.375, 1416), (1.375, 1014), (1.375, 945), (1.375, 1539), (1.375, 1125), (1.375, 1201), (1.375, 1094), (1.375, 1534), (1.375, 1426), (1.375, 1530), (1.375, 812), (1.375, 804), (1.375, 1596), (1.375, 1203), (1.375, 1344), (1.375, 1210), (1.375, 1040), (1.375, 1531), (1.375, 1543), (1.375, 722), (1.375, 998), (1.375, 1422), (1.375, 1568), (1.375, 894), (1.375, 1163), (1.375, 1011), (1.375, 1198), (1.25, 1177), (1.25, 1810), (1.25, 1315), (1.25, 1795), (1.25, 425), (1.25, 1103), (1.25, 260), (1.25, 1828), (1.25, 1824), (1.25, 790), (1.25, 1438), (1.25, 1818), (1.25, 1833), (1.25, 1451), (1.25, 1728), (1.125, 1749), (1.125, 1774), (0.9583333333333333, 1839), (0.2, 1765), (0.2, 1772)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1564
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1769
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1268
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1270
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 16]
[Computing fitness]
[(1.625, 1753), (1.625, 1373), (1.625, 1666), (1.625, 1754), (1.625, 1755), (1.625, 1848), (1.625, 1867), (1.625, 1846), (1.625, 1469), (1.625, 1558), (1.625, 1767), (1.625, 1556), (1.625, 1854), (1.625, 1653), (1.625, 1761), (1.625, 1468), (1.625, 1465), (1.625, 754), (1.625, 1268), (1.625, 1857), (1.625, 1864), (1.625, 1561), (1.625, 1851), (1.625, 1866), (1.625, 1557), (1.625, 1656), (1.625, 1763), (1.625, 1847), (1.625, 1853), (1.625, 1563), (1.625, 1750), (1.625, 1863), (1.625, 1856), (1.625, 1665), (1.625, 1875), (1.625, 1873), (1.625, 1843), (1.625, 1855), (1.625, 1752), (1.625, 1872), (1.625, 1662), (1.625, 1651), (1.625, 1858), (1.625, 1874), (1.625, 1757), (1.625, 1769), (1.625, 1467), (1.625, 1876), (1.625, 1652), (1.625, 1871), (1.625, 1071), (1.625, 1657), (1.625, 1849), (1.625, 1768), (1.625, 1464), (1.625, 1770), (1.625, 1372), (1.625, 1170), (1.625, 1759), (1.625, 1374), (1.625, 1560), (1.625, 1270), (1.625, 1559), (1.625, 1870), (1.625, 1877), (1.625, 1845), (1.625, 1659), (1.625, 1868), (1.625, 1663), (1.625, 1660), (1.625, 1760), (1.625, 877), (1.625, 1564), (1.625, 1466), (1.625, 1859), (1.625, 1655), (1.625, 1169), (1.625, 1664), (1.625, 1562), (1.625, 1766), (1.625, 975), (1.625, 1271), (1.625, 1756), (1.5, 1381), (1.5, 1797), (1.5, 1282), (1.5, 1376), (1.5, 1615), (1.5, 1726), (1.5, 1073), (1.5, 1185), (1.5, 1517), (1.5, 1923), (1.5, 1935), (1.5, 1172), (1.5, 1499), (1.5, 1826), (1.5, 1283), (1.5, 1393), (1.5, 1518), (1.5, 1835), (1.5, 1375), (1.5, 1732), (1.5, 1693), (1.5, 1684), (1.5, 1489), (1.5, 1598), (1.5, 1377), (1.5, 1913), (1.5, 1731), (1.5, 883), (1.5, 495), (1.5, 1279), (1.5, 1825), (1.5, 1505), (1.5, 594), (1.5, 1790), (1.5, 1299), (1.5, 1580), (1.5, 1647), (1.5, 1574), (1.5, 1289), (1.5, 1805), (1.5, 1286), (1.5, 1740), (1.5, 1565), (1.5, 1896), (1.5, 1899), (1.5, 1296), (1.5, 1842), (1.5, 1895), (1.5, 1525), (1.5, 1189), (1.5, 593), (1.5, 1595), (1.5, 1785), (1.5, 1085), (1.5, 1519), (1.5, 1702), (1.5, 1602), (1.5, 1599), (1.5, 1478), (1.5, 1906), (1.5, 1668), (1.5, 1625), (1.5, 1586), (1.5, 1627), (1.5, 1078), (1.5, 1924), (1.5, 978), (1.5, 1508), (1.5, 1507), (1.5, 1804), (1.5, 1590), (1.5, 1801), (1.5, 1414), (1.5, 1510), (1.5, 786), (1.5, 1294), (1.5, 1707), (1.5, 1644), (1.5, 1743), (1.5, 1807), (1.5, 1473), (1.5, 1778), (1.5, 1285), (1.5, 979), (1.5, 1921), (1.5, 1808), (1.5, 1735), (1.5, 1890), (1.5, 1779), (1.5, 1588), (1.5, 1515), (1.5, 1506), (1.5, 1815), (1.5, 1193), (1.5, 1788), (1.5, 1691), (1.5, 1186), (1.5, 1670), (1.5, 1081), (1.5, 1077), (1.5, 1900), (1.5, 1634), (1.5, 788), (1.5, 1934), (1.5, 1680), (1.5, 1892), (1.5, 1074), (1.5, 1831), (1.5, 1479), (1.5, 1498), (1.5, 1737), (1.5, 1386), (1.5, 1781), (1.5, 1175), (1.5, 1700), (1.5, 1710), (1.5, 1672), (1.5, 1291), (1.5, 1645), (1.5, 1484), (1.5, 1382), (1.5, 1891), (1.5, 1885), (1.5, 1729), (1.5, 1292), (1.5, 1482), (1.5, 1404), (1.5, 1628), (1.5, 1528), (1.5, 1714), (1.5, 1893), (1.5, 1567), (1.5, 1786), (1.5, 1407), (1.5, 1819), (1.5, 1937), (1.5, 1611), (1.5, 1492), (1.5, 1698), (1.5, 1017), (1.5, 1822), (1.5, 1717), (1.5, 1733), (1.5, 1080), (1.5, 882), (1.5, 1745), (1.5, 1932), (1.5, 1513), (1.5, 1398), (1.5, 1485), (1.5, 1712), (1.5, 1385), (1.5, 1708), (1.5, 1405), (1.5, 1792), (1.5, 1798), (1.5, 1516), (1.5, 1273), (1.5, 1597), (1.5, 1783), (1.5, 1641), (1.5, 1802), (1.5, 1406), (1.5, 1706), (1.5, 1686), (1.5, 980), (1.5, 1589), (1.5, 1880), (1.5, 1796), (1.5, 1390), (1.5, 1742), (1.5, 1713), (1.5, 1389), (1.5, 1637), (1.5, 1776), (1.5, 1793), (1.5, 1396), (1.5, 1180), (1.5, 1933), (1.5, 1897), (1.5, 1841), (1.5, 1582), (1.5, 1775), (1.5, 1782), (1.5, 1504), (1.5, 1388), (1.5, 1903), (1.5, 1836), (1.5, 1624), (1.5, 1383), (1.5, 1719), (1.5, 1503), (1.5, 1583), (1.5, 1284), (1.5, 687), (1.5, 1174), (1.5, 112), (1.5, 1298), (1.5, 1619), (1.5, 1288), (1.5, 983), (1.5, 1894), (1.5, 1411), (1.5, 1888), (1.5, 1281), (1.5, 1182), (1.5, 1603), (1.5, 1721), (1.5, 976), (1.5, 1608), (1.5, 1477), (1.5, 1319), (1.5, 1813), (1.5, 1909), (1.5, 1569), (1.5, 685), (1.5, 1138), (1.5, 1613), (1.5, 1882), (1.5, 1649), (1.5, 1687), (1.5, 1837), (1.5, 1391), (1.5, 1587), (1.5, 1685), (1.5, 1816), (1.5, 1701), (1.5, 1681), (1.5, 1646), (1.5, 1415), (1.5, 1931), (1.5, 1746), (1.5, 1926), (1.5, 1738), (1.5, 1272), (1.5, 1800), (1.5, 1190), (1.5, 1274), (1.5, 1898), (1.5, 1725), (1.5, 1902), (1.5, 1573), (1.5, 1632), (1.5, 1410), (1.5, 1643), (1.5, 1378), (1.5, 1277), (1.5, 1905), (1.5, 1591), (1.5, 1509), (1.5, 1187), (1.5, 1521), (1.5, 1811), (1.5, 1578), (1.5, 1704), (1.5, 1523), (1.5, 1677), (1.5, 1912), (1.5, 1614), (1.5, 1683), (1.5, 1631), (1.5, 1623), (1.5, 1709), (1.5, 1108), (1.5, 1483), (1.5, 1579), (1.5, 1910), (1.5, 1497), (1.5, 1812), (1.5, 1280), (1.5, 1379), (1.5, 1593), (1.5, 1635), (1.5, 1938), (1.5, 1412), (1.5, 1287), (1.5, 1791), (1.5, 1075), (1.5, 884), (1.5, 1622), (1.5, 1747), (1.5, 1703), (1.5, 1076), (1.5, 1471), (1.5, 1918), (1.5, 400), (1.5, 1585), (1.5, 1834), (1.5, 1617), (1.5, 686), (1.5, 1511), (1.5, 1675), (1.5, 881), (1.5, 1829), (1.5, 1920), (1.5, 1741), (1.5, 1502), (1.5, 1799), (1.5, 977), (1.5, 1904), (1.5, 1387), (1.5, 879), (1.5, 1476), (1.5, 1181), (1.5, 1809), (1.5, 1695), (1.25, 1887), (1.25, 1928), (1.25, 1930), (1.25, 1917), (1.25, 1915), (1.25, 1879), (1.125, 1861), (0.45, 1908), (0.325, 1911), (0.325, 1881), (0.26785714285714285, 1884)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1753
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1373
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1666
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1754
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1755
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 17]
[Computing fitness]
[(1.625, 1761), (1.625, 877), (1.625, 1656), (1.625, 1557), (1.625, 1964), (1.625, 1651), (1.625, 1372), (1.625, 1876), (1.625, 1867), (1.625, 1985), (1.625, 754), (1.625, 1863), (1.625, 1955), (1.625, 1965), (1.625, 1659), (1.625, 1977), (1.625, 1945), (1.625, 1980), (1.625, 1373), (1.625, 1870), (1.625, 1978), (1.625, 1877), (1.625, 1469), (1.625, 1846), (1.625, 1956), (1.625, 1752), (1.625, 1864), (1.625, 1655), (1.625, 1960), (1.625, 1750), (1.625, 975), (1.625, 1973), (1.625, 1855), (1.625, 1562), (1.625, 1556), (1.625, 1969), (1.625, 1958), (1.625, 1874), (1.625, 1757), (1.625, 1979), (1.625, 1270), (1.625, 1983), (1.625, 1970), (1.625, 1871), (1.625, 1559), (1.625, 1866), (1.625, 1991), (1.625, 1856), (1.625, 1653), (1.625, 1563), (1.625, 1665), (1.625, 1374), (1.625, 1652), (1.625, 1975), (1.625, 1170), (1.625, 1268), (1.625, 1971), (1.625, 1868), (1.625, 1854), (1.625, 1851), (1.625, 1847), (1.625, 1858), (1.625, 1660), (1.625, 1466), (1.625, 1755), (1.625, 1953), (1.625, 1990), (1.625, 1271), (1.625, 1558), (1.625, 1873), (1.625, 1763), (1.625, 1756), (1.625, 1768), (1.625, 1843), (1.625, 1859), (1.625, 1169), (1.625, 1467), (1.625, 1963), (1.625, 1769), (1.625, 1760), (1.625, 1988), (1.625, 1766), (1.625, 1754), (1.625, 1071), (1.625, 1664), (1.625, 1663), (1.625, 1561), (1.625, 1464), (1.625, 1853), (1.625, 1948), (1.625, 1845), (1.625, 1954), (1.625, 1753), (1.625, 1662), (1.625, 1770), (1.625, 1947), (1.625, 1976), (1.625, 1560), (1.625, 1949), (1.625, 1767), (1.625, 1666), (1.625, 1875), (1.625, 1759), (1.625, 1944), (1.625, 1981), (1.625, 1848), (1.625, 1986), (1.625, 1984), (1.625, 1564), (1.625, 1657), (1.625, 1468), (1.625, 1872), (1.625, 1849), (1.625, 1465), (1.625, 1946), (1.625, 1857), (1.625, 1982), (1.625, 1959), (1.625, 1989), (1.5, 1085), (1.5, 1933), (1.5, 1573), (1.5, 1389), (1.5, 1714), (1.5, 1712), (1.5, 1792), (1.5, 593), (1.5, 1274), (1.5, 1731), (1.5, 1298), (1.5, 1288), (1.5, 2023), (1.5, 1587), (1.5, 1386), (1.5, 1647), (1.5, 1742), (1.5, 1281), (1.5, 1580), (1.5, 1597), (1.5, 1996), (1.5, 1285), (1.5, 1390), (1.5, 1193), (1.5, 1737), (1.5, 1924), (1.5, 1837), (1.5, 1172), (1.5, 1902), (1.5, 1186), (1.5, 1586), (1.5, 1798), (1.5, 1892), (1.5, 1286), (1.5, 1687), (1.5, 1508), (1.5, 1391), (1.5, 1504), (1.5, 2016), (1.5, 1411), (1.5, 1608), (1.5, 1888), (1.5, 1735), (1.5, 1779), (1.5, 1637), (1.5, 1668), (1.5, 2019), (1.5, 1935), (1.5, 1708), (1.5, 2021), (1.5, 1822), (1.5, 1781), (1.5, 1081), (1.5, 978), (1.5, 112), (1.5, 1807), (1.5, 1931), (1.5, 1680), (1.5, 1778), (1.5, 1138), (1.5, 1619), (1.5, 1717), (1.5, 1894), (1.5, 687), (1.5, 1825), (1.5, 1624), (1.5, 1615), (1.5, 2007), (1.5, 2018), (1.5, 1835), (1.5, 1485), (1.5, 788), (1.5, 1786), (1.5, 1185), (1.5, 1738), (1.5, 1706), (1.5, 1583), (1.5, 1503), (1.5, 1921), (1.5, 2013), (1.5, 1994), (1.5, 1934), (1.5, 1517), (1.5, 1813), (1.5, 1569), (1.5, 1788), (1.5, 1923), (1.5, 1890), (1.5, 1740), (1.5, 1078), (1.5, 1785), (1.5, 1932), (1.5, 1377), (1.5, 1808), (1.5, 2026), (1.5, 1995), (1.5, 1686), (1.5, 1174), (1.5, 1283), (1.5, 2011), (1.5, 786), (1.5, 1826), (1.5, 1319), (1.5, 1272), (1.5, 1492), (1.5, 1613), (1.5, 1498), (1.5, 1805), (1.5, 1406), (1.5, 1725), (1.5, 2005), (1.5, 882), (1.5, 1782), (1.5, 1700), (1.5, 1895), (1.5, 495), (1.5, 1506), (1.5, 1396), (1.5, 1685), (1.5, 1375), (1.5, 2004), (1.5, 2006), (1.5, 1590), (1.5, 1284), (1.5, 1515), (1.5, 1603), (1.5, 1793), (1.5, 1670), (1.5, 1376), (1.5, 1713), (1.5, 1836), (1.5, 1841), (1.5, 2032), (1.5, 1415), (1.5, 1407), (1.5, 1625), (1.5, 1404), (1.5, 1588), (1.5, 1882), (1.5, 2002), (1.5, 1381), (1.5, 2033), (1.5, 1393), (1.5, 1567), (1.5, 1707), (1.5, 2003), (1.5, 1746), (1.5, 1681), (1.5, 2020), (1.5, 2022), (1.5, 1477), (1.5, 883), (1.5, 1783), (1.5, 1080), (1.5, 1385), (1.5, 1519), (1.5, 2025), (1.5, 1602), (1.5, 1175), (1.5, 1299), (1.5, 1897), (1.5, 1804), (1.5, 1733), (1.5, 1073), (1.5, 1885), (1.5, 1598), (1.5, 1906), (1.5, 1180), (1.5, 1880), (1.5, 1516), (1.5, 1719), (1.5, 983), (1.5, 1478), (1.5, 1903), (1.5, 1589), (1.5, 1646), (1.5, 1649), (1.5, 1796), (1.5, 1900), (1.5, 1190), (1.5, 2027), (1.5, 1473), (1.5, 1998), (1.5, 1691), (1.5, 1710), (1.5, 1398), (1.5, 1405), (1.5, 1729), (1.5, 1831), (1.5, 1913), (1.5, 1484), (1.5, 1702), (1.5, 1896), (1.5, 1518), (1.5, 1599), (1.5, 1898), (1.5, 1726), (1.5, 1893), (1.5, 1582), (1.5, 1017), (1.5, 1525), (1.5, 1189), (1.5, 1291), (1.5, 1815), (1.5, 1382), (1.5, 1499), (1.5, 2029), (1.5, 1273), (1.5, 1909), (1.5, 594), (1.5, 1899), (1.5, 1513), (1.5, 1292), (1.5, 1816), (1.5, 1732), (1.5, 1634), (1.5, 1595), (1.5, 1507), (1.5, 1745), (1.5, 1672), (1.5, 1693), (1.5, 1574), (1.5, 1701), (1.5, 980), (1.5, 1482), (1.5, 1842), (1.5, 1775), (1.5, 1510), (1.5, 2031), (1.5, 1489), (1.5, 2015), (1.5, 1388), (1.5, 1383), (1.5, 1528), (1.5, 2014), (1.5, 1790), (1.5, 1074), (1.5, 2010), (1.5, 1294), (1.5, 1891), (1.5, 1926), (1.5, 1414), (1.5, 1182), (1.5, 976), (1.5, 1776), (1.5, 1802), (1.5, 1628), (1.5, 1721), (1.5, 1077), (1.5, 1279), (1.5, 1797), (1.5, 1611), (1.5, 1282), (1.5, 1296), (1.5, 1937), (1.5, 1479), (1.5, 1645), (1.5, 979), (1.5, 1627), (1.5, 1565), (1.5, 1644), (1.5, 2001), (1.5, 1505), (1.5, 1801), (1.5, 685), (1.5, 1698), (1.5, 1289), (1.5, 1743), (1.5, 1684), (1.5, 1819), (1.5, 1800), (1.5, 1641), (1.375, 1993), (1.25, 2009), (1.25, 2000), (1.125, 1940), (1.125, 1962), (1.125, 1942), (0.575, 1997), (0.2, 1951), (0.2, 1967)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1761
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 877
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1656
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1557
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1964
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 18]
[Computing fitness]
[(1.625, 1977), (1.625, 2093), (1.625, 1559), (1.625, 2036), (1.625, 2049), (1.625, 1856), (1.625, 1858), (1.625, 1770), (1.625, 1846), (1.625, 1556), (1.625, 1560), (1.625, 1466), (1.625, 1373), (1.625, 1756), (1.625, 2085), (1.625, 1973), (1.625, 2079), (1.625, 1944), (1.625, 2098), (1.625, 1268), (1.625, 1761), (1.625, 2052), (1.625, 2047), (1.625, 2055), (1.625, 1467), (1.625, 1663), (1.625, 1760), (1.625, 1847), (1.625, 1270), (1.625, 1979), (1.625, 1071), (1.625, 1955), (1.625, 1876), (1.625, 1666), (1.625, 1991), (1.625, 2073), (1.625, 1963), (1.625, 1170), (1.625, 1984), (1.625, 1557), (1.625, 2102), (1.625, 1960), (1.625, 1874), (1.625, 2090), (1.625, 2054), (1.625, 1651), (1.625, 2042), (1.625, 1990), (1.625, 1969), (1.625, 1169), (1.625, 2040), (1.625, 1989), (1.625, 2080), (1.625, 1660), (1.625, 1558), (1.625, 1848), (1.625, 2045), (1.625, 1873), (1.625, 1766), (1.625, 2063), (1.625, 2108), (1.625, 1757), (1.625, 2086), (1.625, 1769), (1.625, 1657), (1.625, 1946), (1.625, 1947), (1.625, 1983), (1.625, 1866), (1.625, 1652), (1.625, 1959), (1.625, 2111), (1.625, 2110), (1.625, 975), (1.625, 2044), (1.625, 1970), (1.625, 1867), (1.625, 1956), (1.625, 1374), (1.625, 1753), (1.625, 1859), (1.625, 1980), (1.625, 1662), (1.625, 1465), (1.625, 2112), (1.625, 1854), (1.625, 2092), (1.625, 1948), (1.625, 1868), (1.625, 2081), (1.625, 2075), (1.625, 1871), (1.625, 2083), (1.625, 1750), (1.625, 2068), (1.625, 877), (1.625, 2088), (1.625, 1872), (1.625, 1562), (1.625, 1945), (1.625, 1767), (1.625, 1763), (1.625, 2066), (1.625, 2113), (1.625, 2109), (1.625, 1752), (1.625, 2057), (1.625, 1271), (1.625, 2071), (1.625, 1659), (1.625, 1656), (1.625, 1843), (1.625, 2074), (1.625, 2084), (1.625, 1468), (1.625, 2038), (1.625, 2061), (1.625, 1953), (1.625, 1851), (1.625, 2103), (1.625, 2104), (1.625, 1759), (1.625, 1982), (1.625, 1976), (1.625, 1975), (1.625, 1653), (1.625, 1988), (1.625, 1964), (1.625, 1863), (1.625, 754), (1.625, 1971), (1.625, 1958), (1.625, 1949), (1.625, 1665), (1.625, 1768), (1.625, 2087), (1.625, 1864), (1.625, 1845), (1.625, 1464), (1.625, 2034), (1.625, 1564), (1.625, 1954), (1.625, 1849), (1.625, 2051), (1.625, 1372), (1.625, 2101), (1.625, 2050), (1.625, 1965), (1.625, 2070), (1.625, 1855), (1.625, 2060), (1.625, 2035), (1.625, 1978), (1.625, 1754), (1.625, 2072), (1.625, 1857), (1.625, 2065), (1.625, 1870), (1.625, 1986), (1.625, 2094), (1.625, 1877), (1.625, 1469), (1.625, 1755), (1.625, 2082), (1.625, 1981), (1.625, 2106), (1.625, 2095), (1.625, 2100), (1.625, 1853), (1.625, 1664), (1.625, 1875), (1.625, 1561), (1.625, 1655), (1.625, 1985), (1.625, 2077), (1.625, 1563), (1.5, 1896), (1.5, 1931), (1.5, 1933), (1.5, 1779), (1.5, 978), (1.5, 1406), (1.5, 1603), (1.5, 1906), (1.5, 1272), (1.5, 1894), (1.5, 1782), (1.5, 1073), (1.5, 786), (1.5, 2006), (1.5, 2026), (1.5, 1841), (1.5, 1903), (1.5, 1624), (1.5, 1882), (1.5, 983), (1.5, 1180), (1.5, 1573), (1.5, 2004), (1.5, 1707), (1.5, 1710), (1.5, 882), (1.5, 1923), (1.5, 2022), (1.5, 1382), (1.5, 2130), (1.5, 2033), (1.5, 1714), (1.5, 2025), (1.5, 1729), (1.5, 1913), (1.5, 2125), (1.5, 1598), (1.5, 1897), (1.5, 1778), (1.5, 1706), (1.5, 1731), (1.5, 1637), (1.5, 2019), (1.5, 2021), (1.5, 1646), (1.5, 1291), (1.5, 1713), (1.5, 1685), (1.5, 1892), (1.5, 1597), (1.5, 2007), (1.5, 1691), (1.5, 2121), (1.5, 1081), (1.5, 1602), (1.5, 1299), (1.5, 1274), (1.5, 2118), (1.5, 1735), (1.5, 1174), (1.5, 1880), (1.5, 2120), (1.5, 1668), (1.5, 1805), (1.5, 1515), (1.5, 1492), (1.5, 1415), (1.5, 1478), (1.5, 1740), (1.5, 2126), (1.5, 1807), (1.5, 1567), (1.5, 788), (1.5, 1826), (1.5, 1389), (1.5, 1284), (1.5, 1825), (1.5, 1281), (1.5, 1670), (1.5, 1498), (1.5, 1477), (1.5, 1900), (1.5, 1519), (1.5, 1625), (1.5, 1411), (1.5, 1608), (1.5, 2005), (1.5, 1746), (1.5, 1393), (1.5, 1885), (1.5, 1085), (1.5, 1484), (1.5, 1518), (1.5, 1717), (1.5, 2123), (1.5, 1808), (1.5, 1288), (1.5, 1702), (1.5, 2003), (1.5, 1935), (1.5, 1726), (1.5, 2127), (1.5, 1407), (1.5, 1186), (1.5, 1283), (1.5, 1503), (1.5, 1792), (1.5, 1613), (1.5, 1619), (1.5, 1738), (1.5, 2124), (1.5, 1934), (1.5, 2018), (1.5, 1172), (1.5, 2128), (1.5, 1742), (1.5, 1404), (1.5, 1895), (1.5, 1286), (1.5, 1525), (1.5, 1319), (1.5, 2132), (1.5, 1589), (1.5, 1786), (1.5, 1504), (1.5, 1285), (1.5, 1924), (1.5, 1138), (1.5, 593), (1.5, 1649), (1.5, 1890), (1.5, 1587), (1.5, 1385), (1.5, 1298), (1.5, 2013), (1.5, 1813), (1.5, 112), (1.5, 1921), (1.5, 1804), (1.5, 1391), (1.5, 1193), (1.5, 883), (1.5, 1506), (1.5, 1647), (1.5, 1712), (1.5, 2011), (1.5, 1586), (1.5, 1569), (1.5, 1377), (1.5, 1783), (1.5, 1793), (1.5, 1405), (1.5, 1189), (1.5, 2020), (1.5, 1017), (1.5, 2116), (1.5, 1785), (1.5, 1994), (1.5, 1996), (1.5, 1599), (1.5, 1381), (1.5, 1796), (1.5, 1788), (1.5, 1781), (1.5, 1190), (1.5, 2133), (1.5, 1396), (1.5, 1175), (1.5, 1080), (1.5, 1516), (1.5, 1835), (1.5, 1902), (1.5, 1582), (1.5, 1888), (1.5, 1725), (1.5, 1837), (1.5, 1719), (1.5, 1893), (1.5, 1815), (1.5, 1588), (1.5, 2122), (1.5, 1831), (1.5, 2016), (1.5, 1686), (1.5, 1583), (1.5, 1708), (1.5, 1932), (1.5, 1681), (1.5, 1687), (1.5, 1836), (1.5, 1473), (1.5, 1700), (1.5, 1580), (1.5, 1998), (1.5, 2027), (1.5, 1798), (1.5, 1398), (1.5, 1499), (1.5, 1898), (1.5, 2117), (1.5, 1078), (1.5, 1375), (1.5, 2023), (1.5, 1822), (1.5, 1733), (1.5, 2032), (1.5, 1590), (1.5, 1376), (1.5, 1485), (1.5, 1185), (1.5, 1680), (1.5, 495), (1.5, 1508), (1.5, 1737), (1.5, 1390), (1.5, 687), (1.5, 2002), (1.5, 1386), (1.5, 1517), (1.5, 1615), (1.5, 1995), (1.25, 2115), (0.2, 2059), (0.2, 2097)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1977
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2093
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1559
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2036
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2049
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 19]
[Computing fitness]
[(1.625, 1990), (1.625, 2057), (1.625, 2094), (1.625, 1756), (1.625, 2077), (1.625, 2162), (1.625, 1965), (1.625, 2063), (1.625, 2104), (1.625, 1973), (1.625, 1989), (1.625, 1971), (1.625, 1945), (1.625, 2047), (1.625, 2158), (1.625, 2148), (1.625, 2193), (1.625, 2196), (1.625, 1560), (1.625, 1757), (1.625, 1071), (1.625, 877), (1.625, 1978), (1.625, 1665), (1.625, 1956), (1.625, 1766), (1.625, 1652), (1.625, 1983), (1.625, 1467), (1.625, 2060), (1.625, 1760), (1.625, 1653), (1.625, 2197), (1.625, 1270), (1.625, 2065), (1.625, 1873), (1.625, 2168), (1.625, 1979), (1.625, 2103), (1.625, 2181), (1.625, 2200), (1.625, 2212), (1.625, 1868), (1.625, 2045), (1.625, 2222), (1.625, 1847), (1.625, 1853), (1.625, 1666), (1.625, 2090), (1.625, 1752), (1.625, 1959), (1.625, 2210), (1.625, 2141), (1.625, 1761), (1.625, 1991), (1.625, 1863), (1.625, 2088), (1.625, 2084), (1.625, 2161), (1.625, 2188), (1.625, 2180), (1.625, 1843), (1.625, 2153), (1.625, 2098), (1.625, 1656), (1.625, 1960), (1.625, 1465), (1.625, 2144), (1.625, 2177), (1.625, 2143), (1.625, 1864), (1.625, 1557), (1.625, 1876), (1.625, 1849), (1.625, 1857), (1.625, 2083), (1.625, 1872), (1.625, 1769), (1.625, 1946), (1.625, 2068), (1.625, 2147), (1.625, 1170), (1.625, 2038), (1.625, 2080), (1.625, 2220), (1.625, 2154), (1.625, 1561), (1.625, 2139), (1.625, 2079), (1.625, 1559), (1.625, 1655), (1.625, 2170), (1.625, 1855), (1.625, 1753), (1.625, 2219), (1.625, 2178), (1.625, 2100), (1.625, 2176), (1.625, 2152), (1.625, 2206), (1.625, 1662), (1.625, 1759), (1.625, 2044), (1.625, 1947), (1.625, 2138), (1.625, 1562), (1.625, 2199), (1.625, 2224), (1.625, 1969), (1.625, 1464), (1.625, 1875), (1.625, 2213), (1.625, 2146), (1.625, 2186), (1.625, 1984), (1.625, 2155), (1.625, 2082), (1.625, 1663), (1.625, 1949), (1.625, 2227), (1.625, 1975), (1.625, 1977), (1.625, 2112), (1.625, 1659), (1.625, 1767), (1.625, 2202), (1.625, 1982), (1.625, 1373), (1.625, 2171), (1.625, 2226), (1.625, 1563), (1.625, 2136), (1.625, 2035), (1.625, 2151), (1.625, 2040), (1.625, 2214), (1.625, 1874), (1.625, 2174), (1.625, 1754), (1.625, 1955), (1.625, 2223), (1.625, 2184), (1.625, 2173), (1.625, 2081), (1.625, 1986), (1.625, 1866), (1.625, 2049), (1.625, 2167), (1.625, 2231), (1.625, 2108), (1.625, 2101), (1.625, 1556), (1.625, 1851), (1.625, 1988), (1.625, 2036), (1.625, 1877), (1.625, 2110), (1.625, 2093), (1.625, 2228), (1.625, 1858), (1.625, 1271), (1.625, 1948), (1.625, 1848), (1.625, 2113), (1.625, 2052), (1.625, 2229), (1.625, 2189), (1.625, 1981), (1.625, 975), (1.625, 2085), (1.625, 2211), (1.625, 2198), (1.625, 1755), (1.625, 2054), (1.625, 1763), (1.625, 2149), (1.625, 1372), (1.625, 2111), (1.625, 2191), (1.625, 1468), (1.625, 2095), (1.625, 1958), (1.625, 1867), (1.625, 1845), (1.625, 2055), (1.625, 1954), (1.625, 2051), (1.625, 2195), (1.625, 1664), (1.625, 2208), (1.625, 1944), (1.625, 2086), (1.625, 2204), (1.625, 2087), (1.625, 1846), (1.625, 2071), (1.625, 1859), (1.625, 1870), (1.625, 1768), (1.625, 1469), (1.625, 1374), (1.625, 1976), (1.625, 1970), (1.625, 1169), (1.625, 2187), (1.625, 2072), (1.625, 2092), (1.625, 1980), (1.625, 2075), (1.625, 1657), (1.625, 1964), (1.625, 2042), (1.625, 2140), (1.625, 2073), (1.625, 2157), (1.625, 2074), (1.625, 2217), (1.625, 2050), (1.625, 1953), (1.625, 1770), (1.625, 1963), (1.625, 1466), (1.625, 1871), (1.625, 2109), (1.625, 2066), (1.625, 1856), (1.625, 2172), (1.625, 2061), (1.625, 1660), (1.625, 1564), (1.625, 1750), (1.625, 2190), (1.625, 2165), (1.625, 2034), (1.625, 1558), (1.625, 2142), (1.625, 2156), (1.625, 2164), (1.625, 2106), (1.625, 754), (1.625, 2230), (1.625, 1651), (1.625, 1985), (1.625, 2102), (1.625, 1854), (1.625, 2159), (1.625, 1268), (1.625, 2070), (1.5, 983), (1.5, 1393), (1.5, 1589), (1.5, 1804), (1.5, 1587), (1.5, 1892), (1.5, 1913), (1.5, 2033), (1.5, 1299), (1.5, 1492), (1.5, 1484), (1.5, 1073), (1.5, 1477), (1.5, 2118), (1.5, 1710), (1.5, 1712), (1.5, 1624), (1.5, 2005), (1.5, 1391), (1.5, 1625), (1.5, 1923), (1.5, 1573), (1.5, 1180), (1.5, 2019), (1.5, 1933), (1.5, 1284), (1.5, 1903), (1.5, 2123), (1.5, 1882), (1.5, 788), (1.5, 1808), (1.5, 1515), (1.5, 2021), (1.5, 1895), (1.5, 1726), (1.5, 1525), (1.5, 1382), (1.5, 1778), (1.5, 1586), (1.5, 2007), (1.5, 1731), (1.5, 1598), (1.5, 1900), (1.5, 1519), (1.5, 1411), (1.5, 1285), (1.5, 1174), (1.5, 1685), (1.5, 1646), (1.5, 786), (1.5, 1897), (1.5, 1407), (1.5, 1714), (1.5, 1389), (1.5, 1081), (1.5, 1385), (1.5, 1805), (1.5, 1319), (1.5, 1619), (1.5, 1569), (1.5, 1597), (1.5, 1713), (1.5, 2011), (1.5, 1740), (1.5, 2121), (1.5, 1782), (1.5, 2130), (1.5, 1406), (1.5, 1670), (1.5, 2127), (1.5, 1503), (1.5, 1779), (1.5, 2132), (1.5, 1274), (1.5, 1288), (1.5, 1272), (1.5, 2128), (1.5, 1890), (1.5, 2126), (1.5, 1567), (1.5, 1602), (1.5, 1717), (1.5, 2026), (1.5, 1735), (1.5, 1649), (1.5, 2003), (1.5, 1742), (1.5, 1186), (1.5, 1193), (1.5, 593), (1.5, 1298), (1.5, 1894), (1.5, 978), (1.5, 1738), (1.5, 1172), (1.5, 1504), (1.5, 1518), (1.5, 1478), (1.5, 1807), (1.5, 1603), (1.5, 2006), (1.5, 2125), (1.5, 1931), (1.5, 1841), (1.5, 2124), (1.5, 882), (1.5, 1291), (1.5, 2013), (1.5, 2120), (1.5, 1935), (1.5, 1613), (1.5, 1506), (1.5, 1608), (1.5, 2004), (1.5, 1934), (1.5, 1707), (1.5, 2018), (1.5, 112), (1.5, 1924), (1.5, 1281), (1.5, 1668), (1.5, 1498), (1.5, 1702), (1.5, 1138), (1.5, 1885), (1.5, 1813), (1.5, 1921), (1.5, 1377), (1.5, 1826), (1.5, 1880), (1.5, 1415), (1.5, 1792), (1.5, 1729), (1.5, 1896), (1.5, 1906), (1.5, 1404), (1.5, 1786), (1.5, 2022), (1.5, 1085), (1.5, 1691), (1.5, 1825), (1.5, 1637), (1.5, 883), (1.5, 1286), (1.5, 2025), (1.5, 1706), (1.5, 1283), (1.5, 1647), (1.5, 1746), (1.125, 2216), (0.2, 2183), (0.2, 2135)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1990
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2057
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2094
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1756
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2077
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 20]
[Computing fitness]
[(1.625, 2171), (1.625, 2187), (1.625, 2314), (1.625, 2072), (1.625, 2153), (1.625, 2319), (1.625, 2085), (1.625, 1985), (1.625, 1469), (1.625, 2092), (1.625, 2111), (1.625, 2244), (1.625, 2210), (1.625, 2263), (1.625, 2060), (1.625, 1858), (1.625, 1373), (1.625, 2235), (1.625, 2265), (1.625, 2317), (1.625, 2199), (1.625, 1663), (1.625, 2313), (1.625, 1761), (1.625, 2310), (1.625, 2252), (1.625, 1979), (1.625, 2320), (1.625, 1466), (1.625, 2273), (1.625, 2068), (1.625, 2158), (1.625, 2071), (1.625, 2251), (1.625, 2229), (1.625, 1945), (1.625, 1976), (1.625, 2243), (1.625, 2241), (1.625, 1750), (1.625, 2267), (1.625, 2095), (1.625, 1854), (1.625, 2101), (1.625, 2049), (1.625, 2211), (1.625, 1874), (1.625, 2073), (1.625, 1666), (1.625, 1870), (1.625, 2144), (1.625, 1876), (1.625, 2108), (1.625, 2093), (1.625, 1867), (1.625, 2174), (1.625, 2278), (1.625, 1986), (1.625, 1868), (1.625, 2102), (1.625, 1978), (1.625, 2257), (1.625, 1845), (1.625, 2110), (1.625, 2087), (1.625, 2184), (1.625, 1657), (1.625, 1563), (1.625, 1958), (1.625, 2238), (1.625, 2044), (1.625, 1756), (1.625, 2224), (1.625, 1964), (1.625, 1877), (1.625, 1271), (1.625, 2040), (1.625, 2237), (1.625, 2284), (1.625, 1759), (1.625, 2247), (1.625, 2264), (1.625, 2281), (1.625, 1856), (1.625, 2155), (1.625, 2226), (1.625, 2233), (1.625, 2178), (1.625, 1973), (1.625, 2197), (1.625, 2103), (1.625, 1562), (1.625, 2270), (1.625, 2271), (1.625, 1559), (1.625, 2109), (1.625, 1766), (1.625, 1558), (1.625, 2291), (1.625, 1872), (1.625, 2159), (1.625, 1965), (1.625, 2220), (1.625, 2315), (1.625, 1757), (1.625, 2181), (1.625, 2189), (1.625, 2036), (1.625, 2193), (1.625, 2100), (1.625, 2141), (1.625, 1977), (1.625, 1652), (1.625, 1752), (1.625, 1955), (1.625, 1467), (1.625, 2086), (1.625, 2234), (1.625, 2035), (1.625, 2146), (1.625, 1560), (1.625, 1855), (1.625, 1991), (1.625, 1848), (1.625, 2034), (1.625, 1971), (1.625, 2212), (1.625, 1944), (1.625, 2112), (1.625, 2104), (1.625, 2219), (1.625, 2316), (1.625, 2143), (1.625, 1268), (1.625, 1959), (1.625, 877), (1.625, 975), (1.625, 1270), (1.625, 2075), (1.625, 2322), (1.625, 1980), (1.625, 2204), (1.625, 2268), (1.625, 2151), (1.625, 1843), (1.625, 2280), (1.625, 1853), (1.625, 2191), (1.625, 2318), (1.625, 2245), (1.625, 2190), (1.625, 2080), (1.625, 2217), (1.625, 2311), (1.625, 1651), (1.625, 2293), (1.625, 2165), (1.625, 1982), (1.625, 1871), (1.625, 1556), (1.625, 2149), (1.625, 1664), (1.625, 1873), (1.625, 2253), (1.625, 2231), (1.625, 1374), (1.625, 2301), (1.625, 2228), (1.625, 1851), (1.625, 2138), (1.625, 2286), (1.625, 2255), (1.625, 1864), (1.625, 2055), (1.625, 2256), (1.625, 1847), (1.625, 2079), (1.625, 2042), (1.625, 2051), (1.625, 2274), (1.625, 2164), (1.625, 1988), (1.625, 2227), (1.625, 2140), (1.625, 1655), (1.625, 2081), (1.625, 2052), (1.625, 2173), (1.625, 1947), (1.625, 1963), (1.625, 2260), (1.625, 1753), (1.625, 2213), (1.625, 1984), (1.625, 2196), (1.625, 2304), (1.625, 2299), (1.625, 2276), (1.625, 1981), (1.625, 2180), (1.625, 2154), (1.625, 2172), (1.625, 1561), (1.625, 2306), (1.625, 2287), (1.625, 2195), (1.625, 1170), (1.625, 2088), (1.625, 1989), (1.625, 2242), (1.625, 1755), (1.625, 1975), (1.625, 1767), (1.625, 2139), (1.625, 2065), (1.625, 2106), (1.625, 2167), (1.625, 2066), (1.625, 2296), (1.625, 2074), (1.625, 2176), (1.625, 2282), (1.625, 2156), (1.625, 2303), (1.625, 2162), (1.625, 1760), (1.625, 2084), (1.625, 2309), (1.625, 2279), (1.625, 2323), (1.625, 2057), (1.625, 1662), (1.625, 2230), (1.625, 1665), (1.625, 1754), (1.625, 2054), (1.625, 2136), (1.625, 2152), (1.625, 1846), (1.625, 2188), (1.625, 1372), (1.625, 2202), (1.625, 2147), (1.625, 1468), (1.625, 1949), (1.625, 2223), (1.625, 2083), (1.625, 1866), (1.625, 1769), (1.625, 1946), (1.625, 2170), (1.625, 2200), (1.625, 2142), (1.625, 754), (1.625, 2070), (1.625, 2283), (1.625, 1849), (1.625, 1859), (1.625, 2198), (1.625, 2186), (1.625, 1653), (1.625, 2113), (1.625, 2305), (1.625, 2266), (1.625, 2098), (1.625, 2214), (1.625, 2307), (1.625, 1557), (1.625, 1768), (1.625, 2246), (1.625, 1465), (1.625, 2177), (1.625, 2275), (1.625, 1071), (1.625, 1863), (1.625, 2239), (1.625, 2148), (1.625, 1969), (1.625, 1464), (1.625, 1875), (1.625, 2045), (1.625, 1660), (1.625, 1983), (1.625, 2168), (1.625, 1656), (1.625, 1169), (1.625, 1564), (1.625, 2289), (1.625, 2222), (1.625, 2290), (1.625, 2061), (1.625, 2236), (1.625, 2321), (1.625, 2038), (1.625, 1954), (1.625, 2047), (1.625, 2272), (1.625, 2077), (1.625, 1960), (1.625, 2161), (1.625, 2208), (1.625, 2090), (1.625, 1659), (1.625, 1953), (1.625, 1763), (1.625, 2206), (1.625, 2050), (1.625, 1948), (1.625, 1857), (1.625, 1970), (1.625, 1770), (1.625, 2082), (1.625, 2094), (1.625, 1956), (1.625, 1990), (1.625, 2298), (1.625, 2157), (1.625, 2063), (1.5, 1882), (1.5, 1573), (1.5, 1586), (1.5, 1892), (1.5, 2118), (1.5, 1782), (1.5, 1299), (1.5, 1670), (1.5, 1895), (1.5, 1274), (1.5, 1519), (1.5, 2123), (1.5, 1779), (1.5, 1382), (1.5, 788), (1.5, 1740), (1.5, 1731), (1.5, 1713), (1.5, 1808), (1.5, 1515), (1.5, 2127), (1.5, 1288), (1.5, 1710), (1.5, 1597), (1.5, 1624), (1.5, 1778), (1.5, 1319), (1.5, 1900), (1.5, 2128), (1.5, 1714), (1.5, 1805), (1.5, 1477), (1.5, 1174), (1.5, 2007), (1.5, 1525), (1.5, 1081), (1.5, 1393), (1.5, 1897), (1.5, 1406), (1.5, 1180), (1.5, 1492), (1.5, 1389), (1.5, 1587), (1.5, 1804), (1.5, 1285), (1.5, 1484), (1.5, 983), (1.5, 1685), (1.5, 1726), (1.5, 1646), (1.5, 786), (1.5, 1913), (1.5, 1625), (1.5, 1598), (1.5, 1407), (1.5, 1073), (1.5, 1933), (1.5, 2021), (1.5, 1923), (1.5, 2121), (1.5, 2011), (1.5, 1712), (1.5, 1284), (1.5, 1903), (1.5, 1569), (1.5, 1385), (1.5, 1272), (1.5, 1503), (1.5, 2132), (1.5, 1589), (1.5, 1411), (1.5, 1391), (1.5, 2019), (1.5, 2005), (1.5, 1619), (1.5, 2033), (1.5, 2130), (1.125, 2262), (1.125, 2249), (1.125, 2295), (0.2, 2259), (0.0, 2308)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2171
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2187
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2314
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2072
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2153
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 21]
[Computing fitness]
[(1.625, 2327), (1.625, 2272), (1.625, 1871), (1.625, 2256), (1.625, 2184), (1.625, 1769), (1.625, 2034), (1.625, 2283), (1.625, 1867), (1.625, 2071), (1.625, 2197), (1.625, 1465), (1.625, 1271), (1.625, 1564), (1.625, 2247), (1.625, 2284), (1.625, 2350), (1.625, 2155), (1.625, 1855), (1.625, 1270), (1.625, 2068), (1.625, 2109), (1.625, 877), (1.625, 1960), (1.625, 1965), (1.625, 2171), (1.625, 2369), (1.625, 2330), (1.625, 2361), (1.625, 2051), (1.625, 2299), (1.625, 1557), (1.625, 975), (1.625, 1372), (1.625, 1759), (1.625, 1949), (1.625, 1466), (1.625, 2257), (1.625, 2303), (1.625, 2416), (1.625, 1653), (1.625, 1662), (1.625, 2264), (1.625, 2282), (1.625, 2190), (1.625, 2101), (1.625, 2214), (1.625, 2045), (1.625, 1977), (1.625, 2208), (1.625, 2100), (1.625, 1467), (1.625, 2161), (1.625, 2346), (1.625, 2204), (1.625, 2075), (1.625, 1973), (1.625, 2138), (1.625, 1954), (1.625, 2253), (1.625, 2335), (1.625, 2106), (1.625, 2198), (1.625, 2156), (1.625, 1756), (1.625, 2271), (1.625, 2174), (1.625, 2243), (1.625, 1665), (1.625, 1760), (1.625, 2050), (1.625, 1767), (1.625, 1268), (1.625, 2378), (1.625, 2400), (1.625, 1953), (1.625, 1875), (1.625, 2311), (1.625, 2146), (1.625, 1859), (1.625, 2094), (1.625, 2326), (1.625, 2343), (1.625, 2417), (1.625, 2241), (1.625, 1757), (1.625, 1849), (1.625, 1979), (1.625, 2170), (1.625, 2367), (1.625, 1843), (1.625, 2321), (1.625, 2147), (1.625, 2186), (1.625, 2340), (1.625, 2291), (1.625, 2196), (1.625, 1858), (1.625, 2081), (1.625, 2224), (1.625, 2217), (1.625, 2399), (1.625, 2199), (1.625, 2234), (1.625, 2266), (1.625, 2301), (1.625, 2152), (1.625, 2319), (1.625, 1970), (1.625, 1986), (1.625, 1868), (1.625, 2305), (1.625, 2324), (1.625, 2309), (1.625, 2220), (1.625, 2255), (1.625, 1752), (1.625, 1846), (1.625, 2036), (1.625, 1651), (1.625, 2176), (1.625, 2157), (1.625, 2317), (1.625, 2371), (1.625, 1664), (1.625, 2102), (1.625, 2151), (1.625, 2359), (1.625, 2085), (1.625, 1981), (1.625, 2354), (1.625, 1866), (1.625, 2212), (1.625, 2391), (1.625, 2187), (1.625, 2418), (1.625, 1770), (1.625, 2352), (1.625, 2103), (1.625, 2195), (1.625, 1655), (1.625, 1464), (1.625, 1991), (1.625, 2231), (1.625, 1170), (1.625, 2235), (1.625, 2108), (1.625, 1983), (1.625, 1853), (1.625, 2063), (1.625, 2143), (1.625, 2054), (1.625, 1963), (1.625, 754), (1.625, 2180), (1.625, 2363), (1.625, 2287), (1.625, 2206), (1.625, 2057), (1.625, 2149), (1.625, 1863), (1.625, 2298), (1.625, 2316), (1.625, 2237), (1.625, 2223), (1.625, 1877), (1.625, 1959), (1.625, 2090), (1.625, 2342), (1.625, 2193), (1.625, 1955), (1.625, 2178), (1.625, 2280), (1.625, 2229), (1.625, 2154), (1.625, 2066), (1.625, 2140), (1.625, 2113), (1.625, 1851), (1.625, 2110), (1.625, 2245), (1.625, 2141), (1.625, 1990), (1.625, 2405), (1.625, 2358), (1.625, 2314), (1.625, 2333), (1.625, 2086), (1.625, 2388), (1.625, 2401), (1.625, 2038), (1.625, 1761), (1.625, 2040), (1.625, 2394), (1.625, 1975), (1.625, 2322), (1.625, 2293), (1.625, 1857), (1.625, 2136), (1.625, 2188), (1.625, 1856), (1.625, 2370), (1.625, 2060), (1.625, 2274), (1.625, 2397), (1.625, 1657), (1.625, 2165), (1.625, 2072), (1.625, 1560), (1.625, 2360), (1.625, 1984), (1.625, 2379), (1.625, 2098), (1.625, 2202), (1.625, 2389), (1.625, 2239), (1.625, 2337), (1.625, 1374), (1.625, 2074), (1.625, 2079), (1.625, 2073), (1.625, 2267), (1.625, 2246), (1.625, 2344), (1.625, 2281), (1.625, 1864), (1.625, 2226), (1.625, 1964), (1.625, 2395), (1.625, 2385), (1.625, 2111), (1.625, 2289), (1.625, 2341), (1.625, 2093), (1.625, 2092), (1.625, 2338), (1.625, 1763), (1.625, 1946), (1.625, 1945), (1.625, 1845), (1.625, 2265), (1.625, 2278), (1.625, 2164), (1.625, 2351), (1.625, 1978), (1.625, 2318), (1.625, 2084), (1.625, 2279), (1.625, 2104), (1.625, 2172), (1.625, 2251), (1.625, 2323), (1.625, 2228), (1.625, 2052), (1.625, 1559), (1.625, 1976), (1.625, 1663), (1.625, 1373), (1.625, 2412), (1.625, 2083), (1.625, 2329), (1.625, 1848), (1.625, 2080), (1.625, 2210), (1.625, 2070), (1.625, 2375), (1.625, 1754), (1.625, 1562), (1.625, 2077), (1.625, 2373), (1.625, 2270), (1.625, 2320), (1.625, 2211), (1.625, 2357), (1.625, 1873), (1.625, 2213), (1.625, 2296), (1.625, 1969), (1.625, 2384), (1.625, 2167), (1.625, 1847), (1.625, 1659), (1.625, 1768), (1.625, 2268), (1.625, 2347), (1.625, 2310), (1.625, 2222), (1.625, 2065), (1.625, 1947), (1.625, 2082), (1.625, 2275), (1.625, 2313), (1.625, 2047), (1.625, 1750), (1.625, 1558), (1.625, 2087), (1.625, 2336), (1.625, 2189), (1.625, 2380), (1.625, 2049), (1.625, 2112), (1.625, 2339), (1.625, 1666), (1.625, 2139), (1.625, 2236), (1.625, 1169), (1.625, 1766), (1.625, 2325), (1.625, 2345), (1.625, 2219), (1.625, 2159), (1.625, 2362), (1.625, 1556), (1.625, 2398), (1.625, 1071), (1.625, 2306), (1.625, 2055), (1.625, 1988), (1.625, 2419), (1.625, 1854), (1.625, 2142), (1.625, 2315), (1.625, 1652), (1.625, 2044), (1.625, 1563), (1.625, 1956), (1.625, 2200), (1.625, 2177), (1.625, 2095), (1.625, 2227), (1.625, 2252), (1.625, 2191), (1.625, 2230), (1.625, 2355), (1.625, 1971), (1.625, 2244), (1.625, 2348), (1.625, 1872), (1.625, 1944), (1.625, 1660), (1.625, 1753), (1.625, 2381), (1.625, 2286), (1.625, 2233), (1.625, 1980), (1.625, 2332), (1.625, 1469), (1.625, 2173), (1.625, 2181), (1.625, 1755), (1.625, 2042), (1.625, 2377), (1.625, 2035), (1.625, 2061), (1.625, 2406), (1.625, 2304), (1.625, 2168), (1.625, 1468), (1.625, 2158), (1.625, 2242), (1.625, 2273), (1.625, 1948), (1.625, 1982), (1.625, 1561), (1.625, 2153), (1.625, 1656), (1.625, 2383), (1.625, 2356), (1.625, 2238), (1.625, 1874), (1.625, 2290), (1.625, 2144), (1.625, 2307), (1.625, 2411), (1.625, 2364), (1.625, 1870), (1.625, 2276), (1.625, 2088), (1.625, 2260), (1.625, 1989), (1.625, 1958), (1.625, 2263), (1.625, 2148), (1.625, 1876), (1.625, 2162), (1.625, 1985), (1.5, 1573), (1.5, 1782), (1.5, 1882), (1.5, 1586), (1.5, 1299), (1.5, 2118), (1.5, 1892), (1.125, 2408), (1.125, 2393), (1.125, 2410), (0.2, 2403), (0.2, 2414), (0.2, 2366), (0.2, 2387)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2327
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2272
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2256
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 22]
[Computing fitness]
[(1.625, 2471), (1.625, 2495), (1.625, 1988), (1.625, 2303), (1.625, 1464), (1.625, 2223), (1.625, 1868), (1.625, 2083), (1.625, 1271), (1.625, 1372), (1.625, 2476), (1.625, 2079), (1.625, 2466), (1.625, 1756), (1.625, 2315), (1.625, 2199), (1.625, 2501), (1.625, 2282), (1.625, 2112), (1.625, 1970), (1.625, 1855), (1.625, 2231), (1.625, 2438), (1.625, 2141), (1.625, 2434), (1.625, 2499), (1.625, 2113), (1.625, 2152), (1.625, 1979), (1.625, 1467), (1.625, 2389), (1.625, 2333), (1.625, 2243), (1.625, 2473), (1.625, 2463), (1.625, 2147), (1.625, 2378), (1.625, 2235), (1.625, 2357), (1.625, 1760), (1.625, 2279), (1.625, 1657), (1.625, 2325), (1.625, 2086), (1.625, 2296), (1.625, 2239), (1.625, 1847), (1.625, 2493), (1.625, 2186), (1.625, 2433), (1.625, 2195), (1.625, 2036), (1.625, 2342), (1.625, 2309), (1.625, 2313), (1.625, 1854), (1.625, 2338), (1.625, 2340), (1.625, 2171), (1.625, 2429), (1.625, 2346), (1.625, 2050), (1.625, 2417), (1.625, 2188), (1.625, 2082), (1.625, 2226), (1.625, 2359), (1.625, 2326), (1.625, 2063), (1.625, 1853), (1.625, 2164), (1.625, 2450), (1.625, 2467), (1.625, 2228), (1.625, 2187), (1.625, 1954), (1.625, 2497), (1.625, 2400), (1.625, 2435), (1.625, 1848), (1.625, 2156), (1.625, 1945), (1.625, 2172), (1.625, 2155), (1.625, 2094), (1.625, 2324), (1.625, 2369), (1.625, 1754), (1.625, 1960), (1.625, 2371), (1.625, 2057), (1.625, 2109), (1.625, 2314), (1.625, 2245), (1.625, 1268), (1.625, 2102), (1.625, 2211), (1.625, 2319), (1.625, 2255), (1.625, 2073), (1.625, 2084), (1.625, 2038), (1.625, 2380), (1.625, 2146), (1.625, 1864), (1.625, 2431), (1.625, 2268), (1.625, 2515), (1.625, 2253), (1.625, 2513), (1.625, 1750), (1.625, 1947), (1.625, 1564), (1.625, 754), (1.625, 1866), (1.625, 2100), (1.625, 2301), (1.625, 1767), (1.625, 2424), (1.625, 2081), (1.625, 2289), (1.625, 2367), (1.625, 2452), (1.625, 2136), (1.625, 2401), (1.625, 2444), (1.625, 2202), (1.625, 2462), (1.625, 2208), (1.625, 1270), (1.625, 2184), (1.625, 2494), (1.625, 2469), (1.625, 1556), (1.625, 1845), (1.625, 2161), (1.625, 2176), (1.625, 1560), (1.625, 2284), (1.625, 2460), (1.625, 2395), (1.625, 1374), (1.625, 2456), (1.625, 1557), (1.625, 2070), (1.625, 2345), (1.625, 2212), (1.625, 2352), (1.625, 2455), (1.625, 2391), (1.625, 2446), (1.625, 2110), (1.625, 2316), (1.625, 1071), (1.625, 2327), (1.625, 1662), (1.625, 1757), (1.625, 2045), (1.625, 2170), (1.625, 2281), (1.625, 2341), (1.625, 2474), (1.625, 2511), (1.625, 2265), (1.625, 2154), (1.625, 1983), (1.625, 2256), (1.625, 1969), (1.625, 975), (1.625, 2204), (1.625, 2486), (1.625, 2234), (1.625, 2060), (1.625, 1766), (1.625, 2351), (1.625, 1846), (1.625, 2077), (1.625, 2320), (1.625, 2104), (1.625, 2213), (1.625, 2339), (1.625, 2416), (1.625, 2092), (1.625, 1768), (1.625, 2311), (1.625, 2421), (1.625, 2489), (1.625, 1562), (1.625, 1991), (1.625, 2206), (1.625, 2375), (1.625, 1986), (1.625, 2488), (1.625, 2085), (1.625, 2358), (1.625, 2222), (1.625, 2412), (1.625, 2189), (1.625, 2283), (1.625, 2478), (1.625, 2180), (1.625, 2500), (1.625, 1373), (1.625, 2361), (1.625, 2159), (1.625, 2465), (1.625, 2422), (1.625, 2443), (1.625, 2139), (1.625, 1981), (1.625, 2080), (1.625, 2224), (1.625, 2472), (1.625, 2305), (1.625, 2280), (1.625, 1851), (1.625, 1867), (1.625, 2423), (1.625, 2397), (1.625, 2506), (1.625, 1877), (1.625, 2257), (1.625, 2516), (1.625, 2111), (1.625, 2106), (1.625, 2143), (1.625, 2485), (1.625, 1990), (1.625, 2068), (1.625, 2219), (1.625, 2419), (1.625, 1763), (1.625, 2287), (1.625, 1959), (1.625, 2047), (1.625, 2090), (1.625, 2178), (1.625, 2321), (1.625, 2052), (1.625, 2398), (1.625, 2054), (1.625, 2165), (1.625, 2512), (1.625, 2306), (1.625, 2337), (1.625, 1655), (1.625, 1666), (1.625, 1664), (1.625, 2193), (1.625, 2098), (1.625, 2267), (1.625, 1665), (1.625, 2071), (1.625, 2385), (1.625, 2251), (1.625, 2103), (1.625, 2505), (1.625, 1843), (1.625, 1752), (1.625, 2310), (1.625, 2468), (1.625, 1975), (1.625, 2384), (1.625, 2454), (1.625, 2405), (1.625, 1466), (1.625, 2236), (1.625, 2138), (1.625, 2237), (1.625, 2051), (1.625, 2335), (1.625, 2370), (1.625, 2142), (1.625, 2360), (1.625, 2322), (1.625, 1946), (1.625, 2498), (1.625, 2458), (1.625, 2507), (1.625, 2442), (1.625, 2270), (1.625, 1973), (1.625, 1976), (1.625, 2065), (1.625, 2347), (1.625, 1170), (1.625, 2504), (1.625, 2336), (1.625, 1857), (1.625, 2074), (1.625, 2388), (1.625, 2040), (1.625, 2317), (1.625, 2044), (1.625, 1465), (1.625, 2343), (1.625, 2362), (1.625, 1761), (1.625, 2229), (1.625, 2436), (1.625, 2241), (1.625, 2510), (1.625, 1559), (1.625, 2274), (1.625, 2291), (1.625, 1875), (1.625, 2157), (1.625, 1964), (1.625, 2373), (1.625, 2214), (1.625, 2318), (1.625, 2198), (1.625, 1953), (1.625, 1978), (1.625, 2167), (1.625, 2149), (1.625, 2329), (1.625, 2247), (1.625, 1955), (1.625, 1873), (1.625, 1169), (1.625, 2140), (1.625, 2354), (1.625, 1652), (1.625, 2093), (1.625, 2210), (1.625, 1659), (1.625, 2451), (1.625, 2344), (1.625, 2449), (1.625, 2440), (1.625, 1949), (1.625, 2481), (1.625, 2196), (1.625, 2445), (1.625, 2502), (1.625, 2075), (1.625, 2034), (1.625, 1663), (1.625, 1858), (1.625, 2350), (1.625, 1859), (1.625, 2298), (1.625, 2151), (1.625, 2275), (1.625, 2487), (1.625, 1871), (1.625, 2049), (1.625, 877), (1.625, 2299), (1.625, 2174), (1.625, 2418), (1.625, 2197), (1.625, 2425), (1.625, 2323), (1.625, 2437), (1.625, 2264), (1.625, 2220), (1.625, 2087), (1.625, 1759), (1.625, 1963), (1.625, 1563), (1.625, 1977), (1.625, 1653), (1.625, 2399), (1.625, 2066), (1.625, 2271), (1.625, 1965), (1.625, 2293), (1.625, 2278), (1.625, 1863), (1.625, 1769), (1.625, 1849), (1.625, 2055), (1.625, 2101), (1.625, 2394), (1.625, 2217), (1.625, 2479), (1.625, 2190), (1.625, 1651), (1.625, 2430), (1.625, 1558), (1.625, 2272), (1.625, 1856), (1.625, 1770), (1.625, 2266), (1.625, 1984), (1.625, 2363), (1.625, 2477), (1.625, 2108), (1.625, 2441), (1.625, 2483), (1.625, 2072), (1.625, 2379), (1.625, 2246), (1.625, 2330), (1.125, 2491), (1.125, 2448), (1.125, 2509), (1.125, 2427)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2471
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2495
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1988
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2303
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1464
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 23]
[Computing fitness]
[(1.625, 2143), (1.625, 2370), (1.625, 2606), (1.625, 2369), (1.625, 2371), (1.625, 2138), (1.625, 2274), (1.625, 2224), (1.625, 2518), (1.625, 2211), (1.625, 2552), (1.625, 2079), (1.625, 2400), (1.625, 2385), (1.625, 2442), (1.625, 1857), (1.625, 2568), (1.625, 2613), (1.625, 2342), (1.625, 2361), (1.625, 2236), (1.625, 2522), (1.625, 1662), (1.625, 2193), (1.625, 2436), (1.625, 2422), (1.625, 1959), (1.625, 2243), (1.625, 2054), (1.625, 1954), (1.625, 2270), (1.625, 1973), (1.625, 1373), (1.625, 1750), (1.625, 2542), (1.625, 1557), (1.625, 2343), (1.625, 2599), (1.625, 2367), (1.625, 1866), (1.625, 2315), (1.625, 2208), (1.625, 2324), (1.625, 2471), (1.625, 1976), (1.625, 2572), (1.625, 2486), (1.625, 2417), (1.625, 2594), (1.625, 2346), (1.625, 2433), (1.625, 2171), (1.625, 1960), (1.625, 2544), (1.625, 2467), (1.625, 2077), (1.625, 2401), (1.625, 2318), (1.625, 2257), (1.625, 1988), (1.625, 1564), (1.625, 2335), (1.625, 2577), (1.625, 2566), (1.625, 2550), (1.625, 1969), (1.625, 2074), (1.625, 1979), (1.625, 2583), (1.625, 2388), (1.625, 2186), (1.625, 2296), (1.625, 1986), (1.625, 2213), (1.625, 2047), (1.625, 2529), (1.625, 2339), (1.625, 1848), (1.625, 2511), (1.625, 2395), (1.625, 1767), (1.625, 2070), (1.625, 2068), (1.625, 2073), (1.625, 2531), (1.625, 2212), (1.625, 2354), (1.625, 2156), (1.625, 2326), (1.625, 2532), (1.625, 2204), (1.625, 2458), (1.625, 2540), (1.625, 2178), (1.625, 1846), (1.625, 2199), (1.625, 2267), (1.625, 2351), (1.625, 2525), (1.625, 2589), (1.625, 2528), (1.625, 2462), (1.625, 2603), (1.625, 1464), (1.625, 1763), (1.625, 2090), (1.625, 2337), (1.625, 2265), (1.625, 1655), (1.625, 2545), (1.625, 2065), (1.625, 2157), (1.625, 2098), (1.625, 2045), (1.625, 1271), (1.625, 2329), (1.625, 1970), (1.625, 2610), (1.625, 2586), (1.625, 2222), (1.625, 2506), (1.625, 1666), (1.625, 2237), (1.625, 2229), (1.625, 2612), (1.625, 2112), (1.625, 2561), (1.625, 2184), (1.625, 1562), (1.625, 1757), (1.625, 2452), (1.625, 2412), (1.625, 2573), (1.625, 1845), (1.625, 2521), (1.625, 1268), (1.625, 2347), (1.625, 2423), (1.625, 1947), (1.625, 2416), (1.625, 2052), (1.625, 1466), (1.625, 2289), (1.625, 2562), (1.625, 2405), (1.625, 2050), (1.625, 2111), (1.625, 1990), (1.625, 2443), (1.625, 1560), (1.625, 2291), (1.625, 2198), (1.625, 2234), (1.625, 2202), (1.625, 2378), (1.625, 2268), (1.625, 2282), (1.625, 2576), (1.625, 1955), (1.625, 2541), (1.625, 2102), (1.625, 2460), (1.625, 2164), (1.625, 2476), (1.625, 2559), (1.625, 1752), (1.625, 2504), (1.625, 2188), (1.625, 2438), (1.625, 2571), (1.625, 2152), (1.625, 2493), (1.625, 2167), (1.625, 2499), (1.625, 1760), (1.625, 2608), (1.625, 2384), (1.625, 2321), (1.625, 2082), (1.625, 2206), (1.625, 2241), (1.625, 2140), (1.625, 2615), (1.625, 2591), (1.625, 1270), (1.625, 2310), (1.625, 2063), (1.625, 1372), (1.625, 2535), (1.625, 2578), (1.625, 1071), (1.625, 2219), (1.625, 2530), (1.625, 2510), (1.625, 2358), (1.625, 2450), (1.625, 2463), (1.625, 1754), (1.625, 1855), (1.625, 2489), (1.625, 1946), (1.625, 2093), (1.625, 2581), (1.625, 1981), (1.625, 2551), (1.625, 754), (1.625, 2579), (1.625, 2567), (1.625, 2352), (1.625, 2375), (1.625, 1766), (1.625, 2103), (1.625, 2141), (1.625, 1867), (1.625, 2106), (1.625, 2582), (1.625, 2513), (1.625, 2231), (1.625, 2485), (1.625, 2548), (1.625, 1983), (1.625, 2585), (1.625, 1843), (1.625, 2154), (1.625, 2421), (1.625, 1851), (1.625, 2569), (1.625, 2284), (1.625, 2553), (1.625, 2512), (1.625, 2142), (1.625, 2327), (1.625, 2341), (1.625, 2319), (1.625, 2071), (1.625, 2495), (1.625, 1854), (1.625, 1467), (1.625, 2165), (1.625, 1756), (1.625, 2517), (1.625, 2279), (1.625, 2500), (1.625, 1169), (1.625, 2180), (1.625, 1873), (1.625, 2534), (1.625, 2444), (1.625, 2187), (1.625, 2038), (1.625, 2136), (1.625, 2281), (1.625, 2397), (1.625, 2498), (1.625, 2146), (1.625, 2547), (1.625, 2226), (1.625, 1978), (1.625, 2614), (1.625, 2515), (1.625, 2446), (1.625, 2505), (1.625, 2256), (1.625, 2161), (1.625, 2424), (1.625, 2306), (1.625, 2469), (1.625, 2214), (1.625, 2592), (1.625, 975), (1.625, 1170), (1.625, 2537), (1.625, 2172), (1.625, 2473), (1.625, 2587), (1.625, 1664), (1.625, 2325), (1.625, 2223), (1.625, 2303), (1.625, 2104), (1.625, 2036), (1.625, 2456), (1.625, 2195), (1.625, 1953), (1.625, 2488), (1.625, 2391), (1.625, 2311), (1.625, 2465), (1.625, 2189), (1.625, 2176), (1.625, 2527), (1.625, 1847), (1.625, 2357), (1.625, 2398), (1.625, 2314), (1.625, 2283), (1.625, 2110), (1.625, 2060), (1.625, 1975), (1.625, 1868), (1.625, 2317), (1.625, 2083), (1.625, 2455), (1.625, 2287), (1.625, 2389), (1.625, 2170), (1.625, 2316), (1.625, 2084), (1.625, 2051), (1.625, 2109), (1.625, 2609), (1.625, 2149), (1.625, 2539), (1.625, 2494), (1.625, 2139), (1.625, 1877), (1.625, 2094), (1.625, 2313), (1.625, 2253), (1.625, 1761), (1.625, 2570), (1.625, 1559), (1.625, 2155), (1.625, 2466), (1.625, 2320), (1.625, 2604), (1.625, 2345), (1.625, 2113), (1.625, 2564), (1.625, 2501), (1.625, 2340), (1.625, 2080), (1.625, 2309), (1.625, 2305), (1.625, 2280), (1.625, 2590), (1.625, 2085), (1.625, 1945), (1.625, 2301), (1.625, 2247), (1.625, 2081), (1.625, 1864), (1.625, 2434), (1.625, 1964), (1.625, 1556), (1.625, 2560), (1.625, 2338), (1.625, 1853), (1.625, 2435), (1.625, 2497), (1.625, 2040), (1.625, 2557), (1.625, 2245), (1.625, 2251), (1.625, 2472), (1.625, 2159), (1.625, 2044), (1.625, 1991), (1.625, 2429), (1.625, 2454), (1.625, 2057), (1.625, 2597), (1.625, 1768), (1.625, 1665), (1.625, 2380), (1.625, 2554), (1.625, 2100), (1.625, 2601), (1.625, 2524), (1.625, 2362), (1.625, 2086), (1.625, 1657), (1.625, 2147), (1.625, 2359), (1.625, 2333), (1.625, 2431), (1.625, 2322), (1.625, 2092), (1.625, 2507), (1.625, 2235), (1.625, 2360), (1.625, 2373), (1.625, 2468), (1.625, 2239), (1.625, 2555), (1.625, 2575), (1.625, 1875), (1.625, 1374), (1.625, 2255), (1.625, 2516), (1.625, 2474), (1.625, 2607), (1.625, 2478), (1.625, 2336), (1.625, 1652), (1.625, 2228), (1.625, 2419), (1.625, 1465), (1.125, 2596), (0.2, 2520)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2143
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2370
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2606
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2369
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2371
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 24]
[Computing fitness]
[(1.625, 2654), (1.625, 1761), (1.625, 2384), (1.625, 2314), (1.625, 1981), (1.625, 2583), (1.625, 2500), (1.625, 2572), (1.625, 2552), (1.625, 1988), (1.625, 2610), (1.625, 2592), (1.625, 2164), (1.625, 2397), (1.625, 2138), (1.625, 2274), (1.625, 2695), (1.625, 2585), (1.625, 2547), (1.625, 2296), (1.625, 2700), (1.625, 2224), (1.625, 2586), (1.625, 2612), (1.625, 2310), (1.625, 2213), (1.625, 2591), (1.625, 2422), (1.625, 2068), (1.625, 2388), (1.625, 2465), (1.625, 2616), (1.625, 2708), (1.625, 2522), (1.625, 1662), (1.625, 2684), (1.625, 2222), (1.625, 2391), (1.625, 2149), (1.625, 2237), (1.625, 2303), (1.625, 2155), (1.625, 2456), (1.625, 1973), (1.625, 1071), (1.625, 2532), (1.625, 2486), (1.625, 1877), (1.625, 2663), (1.625, 2505), (1.625, 2518), (1.625, 1754), (1.625, 2186), (1.625, 2466), (1.625, 2325), (1.625, 2038), (1.625, 2112), (1.625, 2077), (1.625, 1959), (1.625, 1467), (1.625, 2450), (1.625, 2313), (1.625, 2544), (1.625, 1752), (1.625, 2270), (1.625, 2156), (1.625, 2165), (1.625, 2110), (1.625, 1868), (1.625, 2531), (1.625, 2455), (1.625, 2707), (1.625, 2551), (1.625, 2400), (1.625, 2051), (1.625, 2476), (1.625, 1766), (1.625, 2257), (1.625, 2541), (1.625, 1979), (1.625, 2339), (1.625, 2570), (1.625, 2140), (1.625, 2587), (1.625, 2265), (1.625, 2189), (1.625, 2343), (1.625, 2710), (1.625, 1845), (1.625, 1955), (1.625, 2542), (1.625, 2589), (1.625, 2715), (1.625, 2471), (1.625, 2060), (1.625, 2398), (1.625, 1562), (1.625, 2195), (1.625, 2395), (1.625, 2688), (1.625, 2082), (1.625, 2528), (1.625, 1763), (1.625, 2488), (1.625, 2371), (1.625, 2644), (1.625, 2623), (1.625, 2495), (1.625, 2109), (1.625, 1843), (1.625, 2628), (1.625, 2566), (1.625, 2335), (1.625, 2327), (1.625, 2433), (1.625, 2063), (1.625, 2071), (1.625, 2636), (1.625, 2682), (1.625, 1373), (1.625, 2234), (1.625, 2690), (1.625, 2713), (1.625, 2141), (1.625, 2562), (1.625, 2157), (1.625, 2651), (1.625, 2442), (1.625, 2074), (1.625, 2657), (1.625, 2469), (1.625, 2084), (1.625, 2633), (1.625, 2438), (1.625, 2315), (1.625, 2152), (1.625, 2341), (1.625, 2146), (1.625, 2467), (1.625, 2567), (1.625, 1270), (1.625, 2614), (1.625, 2423), (1.625, 2530), (1.625, 2229), (1.625, 2599), (1.625, 2178), (1.625, 2320), (1.625, 2318), (1.625, 1848), (1.625, 2136), (1.625, 2093), (1.625, 2319), (1.625, 2417), (1.625, 1946), (1.625, 2416), (1.625, 2204), (1.625, 2369), (1.625, 2306), (1.625, 2642), (1.625, 2578), (1.625, 2576), (1.625, 2646), (1.625, 2619), (1.625, 2098), (1.625, 2494), (1.625, 2506), (1.625, 2687), (1.625, 2699), (1.625, 2705), (1.625, 2513), (1.625, 2704), (1.625, 1978), (1.625, 2473), (1.625, 2346), (1.625, 2559), (1.625, 2511), (1.625, 2512), (1.625, 2211), (1.625, 1866), (1.625, 2104), (1.625, 2613), (1.625, 2111), (1.625, 2337), (1.625, 2180), (1.625, 2539), (1.625, 2626), (1.625, 2629), (1.625, 2324), (1.625, 2655), (1.625, 2321), (1.625, 2167), (1.625, 2378), (1.625, 2645), (1.625, 2527), (1.625, 1857), (1.625, 2090), (1.625, 2326), (1.625, 2499), (1.625, 2485), (1.625, 1666), (1.625, 1851), (1.625, 2693), (1.625, 2184), (1.625, 2102), (1.625, 2462), (1.625, 2351), (1.625, 2444), (1.625, 2664), (1.625, 2036), (1.625, 2676), (1.625, 2412), (1.625, 2553), (1.625, 2594), (1.625, 2375), (1.625, 2253), (1.625, 2316), (1.625, 1268), (1.625, 2550), (1.625, 2370), (1.625, 2281), (1.625, 2289), (1.625, 2548), (1.625, 2653), (1.625, 2446), (1.625, 2632), (1.625, 2537), (1.625, 1560), (1.625, 2367), (1.625, 2672), (1.625, 1564), (1.625, 2208), (1.625, 1750), (1.625, 2458), (1.625, 2358), (1.625, 2354), (1.625, 2535), (1.625, 2647), (1.625, 2573), (1.625, 2660), (1.625, 1757), (1.625, 2317), (1.625, 2389), (1.625, 2212), (1.625, 2640), (1.625, 2287), (1.625, 1976), (1.625, 2701), (1.625, 2094), (1.625, 2231), (1.625, 2073), (1.625, 2571), (1.625, 2615), (1.625, 1969), (1.625, 1983), (1.625, 2608), (1.625, 2083), (1.625, 2154), (1.625, 1960), (1.625, 2678), (1.625, 1664), (1.625, 2686), (1.625, 1760), (1.625, 2631), (1.625, 2050), (1.625, 2198), (1.625, 2172), (1.625, 1655), (1.625, 2510), (1.625, 2525), (1.625, 2268), (1.625, 2267), (1.625, 2498), (1.625, 2291), (1.625, 1855), (1.625, 2493), (1.625, 2143), (1.625, 2463), (1.625, 2515), (1.625, 2223), (1.625, 2714), (1.625, 2618), (1.625, 2329), (1.625, 2577), (1.625, 2187), (1.625, 1756), (1.625, 2424), (1.625, 1953), (1.625, 2680), (1.625, 2694), (1.625, 2569), (1.625, 2637), (1.625, 1854), (1.625, 2709), (1.625, 2421), (1.625, 2534), (1.625, 2352), (1.625, 2342), (1.625, 2282), (1.625, 1990), (1.625, 2679), (1.625, 2106), (1.625, 1846), (1.625, 1170), (1.625, 2606), (1.625, 1559), (1.625, 2689), (1.625, 1466), (1.625, 2193), (1.625, 2696), (1.625, 1867), (1.625, 1847), (1.625, 2620), (1.625, 2047), (1.625, 2054), (1.625, 2659), (1.625, 2649), (1.625, 1464), (1.625, 2347), (1.625, 2712), (1.625, 1970), (1.625, 2206), (1.625, 2452), (1.625, 2170), (1.625, 2504), (1.625, 1557), (1.625, 2202), (1.625, 2639), (1.625, 2489), (1.625, 2161), (1.625, 2529), (1.625, 2243), (1.625, 1372), (1.625, 2070), (1.625, 2460), (1.625, 2142), (1.625, 975), (1.625, 2692), (1.625, 2219), (1.625, 2361), (1.625, 2401), (1.625, 2279), (1.625, 1767), (1.625, 2545), (1.625, 2582), (1.625, 2045), (1.625, 1986), (1.625, 2311), (1.625, 1271), (1.625, 1975), (1.625, 2065), (1.625, 2176), (1.625, 2603), (1.625, 2706), (1.625, 2079), (1.625, 2103), (1.625, 2385), (1.625, 2517), (1.625, 754), (1.625, 1954), (1.625, 2711), (1.625, 1169), (1.625, 2357), (1.625, 2188), (1.625, 2052), (1.625, 2241), (1.625, 2638), (1.625, 2521), (1.625, 2443), (1.625, 2214), (1.625, 2666), (1.625, 1873), (1.625, 2674), (1.625, 2199), (1.625, 2171), (1.625, 2568), (1.625, 2284), (1.625, 2650), (1.625, 2697), (1.625, 2673), (1.625, 2236), (1.625, 2139), (1.625, 2256), (1.625, 2283), (1.625, 2405), (1.625, 2436), (1.625, 2670), (1.625, 2540), (1.625, 2668), (1.625, 2609), (1.625, 2561), (1.625, 2581), (1.625, 2226), (1.625, 1947), (1.625, 2579), (1.125, 2622), (1.125, 2635), (0.2, 2703), (0.2, 2625), (0.2, 2662)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2654
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1761
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2384
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2314
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1981
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 25]
[Computing fitness]
[(1.625, 2206), (1.625, 2047), (1.625, 2779), (1.625, 2094), (1.625, 2499), (1.625, 2651), (1.625, 2212), (1.625, 2606), (1.625, 2291), (1.625, 2485), (1.625, 2068), (1.625, 2224), (1.625, 1946), (1.625, 2073), (1.625, 2725), (1.625, 2186), (1.625, 2486), (1.625, 2799), (1.625, 2282), (1.625, 2511), (1.625, 2371), (1.625, 2577), (1.625, 2452), (1.625, 2620), (1.625, 1867), (1.625, 2802), (1.625, 2754), (1.625, 2329), (1.625, 1766), (1.625, 2098), (1.625, 2417), (1.625, 2412), (1.625, 2471), (1.625, 2653), (1.625, 2787), (1.625, 2152), (1.625, 2618), (1.625, 2084), (1.625, 2317), (1.625, 2800), (1.625, 2796), (1.625, 2518), (1.625, 2743), (1.625, 2715), (1.625, 2231), (1.625, 2319), (1.625, 2785), (1.625, 2051), (1.625, 2723), (1.625, 2599), (1.625, 2423), (1.625, 2712), (1.625, 2763), (1.625, 1666), (1.625, 1754), (1.625, 1560), (1.625, 2054), (1.625, 2270), (1.625, 2093), (1.625, 2720), (1.625, 2645), (1.625, 2798), (1.625, 2213), (1.625, 2071), (1.625, 2664), (1.625, 2576), (1.625, 2716), (1.625, 2455), (1.625, 2388), (1.625, 2807), (1.625, 1866), (1.625, 2710), (1.625, 1845), (1.625, 2633), (1.625, 2636), (1.625, 2742), (1.625, 2608), (1.625, 2663), (1.625, 2695), (1.625, 1848), (1.625, 2548), (1.625, 2187), (1.625, 2494), (1.625, 2316), (1.625, 2689), (1.625, 2456), (1.625, 2149), (1.625, 2036), (1.625, 2512), (1.625, 1979), (1.625, 2473), (1.625, 2741), (1.625, 2707), (1.625, 2569), (1.625, 2746), (1.625, 2060), (1.625, 1562), (1.625, 2063), (1.625, 2395), (1.625, 2289), (1.625, 2649), (1.625, 2165), (1.625, 2570), (1.625, 2751), (1.625, 2074), (1.625, 1854), (1.625, 2184), (1.625, 2790), (1.625, 1467), (1.625, 2660), (1.625, 2752), (1.625, 2619), (1.625, 2109), (1.625, 2749), (1.625, 2325), (1.625, 2375), (1.625, 2806), (1.625, 2539), (1.625, 2367), (1.625, 2678), (1.625, 2510), (1.625, 2156), (1.625, 2198), (1.625, 2504), (1.625, 2347), (1.625, 2281), (1.625, 1857), (1.625, 1071), (1.625, 2583), (1.625, 2730), (1.625, 1464), (1.625, 1981), (1.625, 2469), (1.625, 2764), (1.625, 2211), (1.625, 2082), (1.625, 2614), (1.625, 2164), (1.625, 2505), (1.625, 2623), (1.625, 2672), (1.625, 1970), (1.625, 2654), (1.625, 2531), (1.625, 2515), (1.625, 2335), (1.625, 2513), (1.625, 2112), (1.625, 2547), (1.625, 2718), (1.625, 2713), (1.625, 2592), (1.625, 2444), (1.625, 2102), (1.625, 1973), (1.625, 2038), (1.625, 2757), (1.625, 2676), (1.625, 2682), (1.625, 2628), (1.625, 2442), (1.625, 2180), (1.625, 2789), (1.625, 2644), (1.625, 2726), (1.625, 2795), (1.625, 1990), (1.625, 1877), (1.625, 2400), (1.625, 2337), (1.625, 2542), (1.625, 2772), (1.625, 2631), (1.625, 2346), (1.625, 2781), (1.625, 1662), (1.625, 1988), (1.625, 2104), (1.625, 2326), (1.625, 2642), (1.625, 2794), (1.625, 2655), (1.625, 1373), (1.625, 2693), (1.625, 2369), (1.625, 2647), (1.625, 2637), (1.625, 1846), (1.625, 2450), (1.625, 2766), (1.625, 2433), (1.625, 2629), (1.625, 2522), (1.625, 2193), (1.625, 1270), (1.625, 2810), (1.625, 2167), (1.625, 1756), (1.625, 2690), (1.625, 2391), (1.625, 2358), (1.625, 2686), (1.625, 2567), (1.625, 2684), (1.625, 2694), (1.625, 2421), (1.625, 2615), (1.625, 2354), (1.625, 2083), (1.625, 2699), (1.625, 2535), (1.625, 2140), (1.625, 2463), (1.625, 2327), (1.625, 2705), (1.625, 2506), (1.625, 1983), (1.625, 2773), (1.625, 2740), (1.625, 2571), (1.625, 2500), (1.625, 2458), (1.625, 2731), (1.625, 2803), (1.625, 2774), (1.625, 2342), (1.625, 2572), (1.625, 2141), (1.625, 2234), (1.625, 2679), (1.625, 2310), (1.625, 2446), (1.625, 2204), (1.625, 2265), (1.625, 2378), (1.625, 1752), (1.625, 1868), (1.625, 2701), (1.625, 2111), (1.625, 2223), (1.625, 2351), (1.625, 2465), (1.625, 2397), (1.625, 2745), (1.625, 2136), (1.625, 2591), (1.625, 2090), (1.625, 2534), (1.625, 2719), (1.625, 1170), (1.625, 2704), (1.625, 2775), (1.625, 2767), (1.625, 2157), (1.625, 2610), (1.625, 2229), (1.625, 2793), (1.625, 1466), (1.625, 2632), (1.625, 2612), (1.625, 2700), (1.625, 2306), (1.625, 2640), (1.625, 2050), (1.625, 1851), (1.625, 2587), (1.625, 2541), (1.625, 1953), (1.625, 2646), (1.625, 2195), (1.625, 1757), (1.625, 2761), (1.625, 2553), (1.625, 2765), (1.625, 2722), (1.625, 1760), (1.625, 2744), (1.625, 2729), (1.625, 2528), (1.625, 1750), (1.625, 2585), (1.625, 2680), (1.625, 1559), (1.625, 2106), (1.625, 2257), (1.625, 2253), (1.625, 2739), (1.625, 2321), (1.625, 2573), (1.625, 2274), (1.625, 2370), (1.625, 2189), (1.625, 2352), (1.625, 2313), (1.625, 2077), (1.625, 2318), (1.625, 2797), (1.625, 2267), (1.625, 2688), (1.625, 1843), (1.625, 1847), (1.625, 2320), (1.625, 2498), (1.625, 2562), (1.625, 2783), (1.625, 2724), (1.625, 2551), (1.625, 2110), (1.625, 2778), (1.625, 2714), (1.625, 2268), (1.625, 2613), (1.625, 2493), (1.625, 2527), (1.625, 2384), (1.625, 2756), (1.625, 1976), (1.625, 2315), (1.625, 2733), (1.625, 2287), (1.625, 2462), (1.625, 2762), (1.625, 2769), (1.625, 2586), (1.625, 2530), (1.625, 2324), (1.625, 2709), (1.625, 2422), (1.625, 2525), (1.625, 2771), (1.625, 2314), (1.625, 2552), (1.625, 2737), (1.625, 2343), (1.625, 2178), (1.625, 2296), (1.625, 2537), (1.625, 2170), (1.625, 2578), (1.625, 2208), (1.625, 2708), (1.625, 2237), (1.625, 2339), (1.625, 2566), (1.625, 2476), (1.625, 2389), (1.625, 2544), (1.625, 1268), (1.625, 2734), (1.625, 1763), (1.625, 2154), (1.625, 1564), (1.625, 2172), (1.625, 2589), (1.625, 1761), (1.625, 2416), (1.625, 2696), (1.625, 2398), (1.625, 2616), (1.625, 2155), (1.625, 1855), (1.625, 2467), (1.625, 2222), (1.625, 2626), (1.625, 2550), (1.625, 1664), (1.625, 2303), (1.625, 1969), (1.625, 1959), (1.625, 2717), (1.625, 2728), (1.625, 1655), (1.625, 2146), (1.625, 2559), (1.625, 2532), (1.625, 2495), (1.625, 2594), (1.625, 2687), (1.625, 1955), (1.625, 1978), (1.625, 2138), (1.625, 2488), (1.625, 2424), (1.625, 2341), (1.625, 2732), (1.625, 2659), (1.625, 1960), (1.625, 2466), (1.625, 2750), (1.625, 2735), (1.625, 2143), (1.625, 2438), (1.625, 2657), (1.625, 2721), (1.125, 2759), (1.125, 2792), (1.125, 2809), (0.2, 2748), (0.2, 2805), (0.2, 2777)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2206
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2047
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2779
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2094
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2499
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 26]
[Computing fitness]
[(1.625, 2868), (1.625, 2375), (1.625, 2653), (1.625, 2833), (1.625, 2193), (1.625, 2184), (1.625, 2102), (1.625, 2789), (1.625, 2534), (1.625, 2400), (1.625, 2570), (1.625, 2060), (1.625, 2897), (1.625, 2872), (1.625, 2866), (1.625, 2773), (1.625, 2752), (1.625, 2761), (1.625, 2462), (1.625, 2329), (1.625, 2870), (1.625, 2450), (1.625, 2680), (1.625, 2714), (1.625, 2642), (1.625, 2433), (1.625, 2790), (1.625, 2689), (1.625, 2710), (1.625, 2731), (1.625, 2769), (1.625, 1843), (1.625, 2629), (1.625, 2620), (1.625, 2843), (1.625, 2265), (1.625, 2618), (1.625, 2378), (1.625, 2093), (1.625, 1766), (1.625, 2106), (1.625, 2140), (1.625, 2743), (1.625, 2860), (1.625, 1562), (1.625, 1877), (1.625, 2068), (1.625, 2442), (1.625, 2623), (1.625, 2287), (1.625, 2644), (1.625, 2633), (1.625, 2883), (1.625, 2647), (1.625, 2591), (1.625, 2800), (1.625, 2530), (1.625, 2862), (1.625, 2902), (1.625, 1467), (1.625, 2850), (1.625, 2879), (1.625, 2054), (1.625, 1988), (1.625, 1170), (1.625, 1981), (1.625, 2136), (1.625, 2167), (1.625, 2896), (1.625, 2806), (1.625, 2367), (1.625, 2494), (1.625, 2486), (1.625, 1979), (1.625, 2767), (1.625, 2567), (1.625, 2317), (1.625, 2421), (1.625, 2211), (1.625, 2724), (1.625, 1464), (1.625, 2762), (1.625, 2606), (1.625, 2152), (1.625, 2745), (1.625, 2346), (1.625, 2885), (1.625, 2212), (1.625, 2828), (1.625, 2180), (1.625, 2319), (1.625, 1750), (1.625, 2901), (1.625, 2315), (1.625, 2686), (1.625, 2268), (1.625, 2751), (1.625, 1560), (1.625, 2699), (1.625, 2456), (1.625, 2722), (1.625, 2094), (1.625, 2452), (1.625, 2719), (1.625, 2845), (1.625, 2612), (1.625, 1559), (1.625, 2074), (1.625, 2423), (1.625, 1845), (1.625, 2816), (1.625, 2890), (1.625, 2038), (1.625, 1970), (1.625, 2587), (1.625, 2712), (1.625, 2744), (1.625, 2802), (1.625, 2253), (1.625, 2756), (1.625, 2282), (1.625, 2628), (1.625, 2678), (1.625, 2165), (1.625, 2778), (1.625, 1662), (1.625, 2164), (1.625, 2047), (1.625, 2740), (1.625, 2651), (1.625, 2528), (1.625, 1990), (1.625, 2700), (1.625, 2723), (1.625, 2231), (1.625, 2693), (1.625, 2583), (1.625, 1666), (1.625, 2796), (1.625, 2562), (1.625, 1976), (1.625, 2485), (1.625, 2371), (1.625, 1868), (1.625, 2369), (1.625, 2506), (1.625, 2878), (1.625, 2793), (1.625, 2321), (1.625, 2613), (1.625, 2795), (1.625, 2234), (1.625, 2718), (1.625, 2109), (1.625, 2531), (1.625, 2861), (1.625, 2757), (1.625, 2515), (1.625, 2646), (1.625, 2186), (1.625, 2082), (1.625, 2636), (1.625, 2469), (1.625, 2825), (1.625, 2090), (1.625, 2884), (1.625, 2783), (1.625, 2110), (1.625, 2391), (1.625, 1373), (1.625, 1466), (1.625, 2141), (1.625, 2548), (1.625, 2522), (1.625, 2036), (1.625, 2083), (1.625, 2326), (1.625, 2599), (1.625, 2586), (1.625, 2654), (1.625, 2660), (1.625, 2863), (1.625, 2818), (1.625, 2458), (1.625, 2906), (1.625, 2676), (1.625, 2417), (1.625, 2071), (1.625, 2637), (1.625, 2505), (1.625, 2539), (1.625, 2764), (1.625, 2337), (1.625, 2852), (1.625, 2313), (1.625, 2073), (1.625, 2224), (1.625, 2384), (1.625, 2781), (1.625, 2726), (1.625, 2358), (1.625, 2571), (1.625, 2880), (1.625, 2882), (1.625, 2891), (1.625, 2688), (1.625, 2877), (1.625, 2856), (1.625, 2640), (1.625, 2498), (1.625, 2826), (1.625, 2739), (1.625, 2766), (1.625, 2765), (1.625, 1847), (1.625, 2871), (1.625, 2619), (1.625, 1757), (1.625, 2592), (1.625, 2547), (1.625, 2572), (1.625, 2649), (1.625, 2444), (1.625, 2274), (1.625, 2632), (1.625, 1946), (1.625, 2157), (1.625, 2608), (1.625, 2281), (1.625, 2553), (1.625, 2518), (1.625, 2847), (1.625, 2112), (1.625, 2787), (1.625, 2206), (1.625, 2512), (1.625, 1754), (1.625, 2541), (1.625, 2187), (1.625, 2679), (1.625, 2820), (1.625, 2320), (1.625, 2306), (1.625, 2810), (1.625, 2213), (1.625, 2832), (1.625, 2342), (1.625, 2851), (1.625, 2749), (1.625, 2576), (1.625, 2716), (1.625, 2835), (1.625, 2873), (1.625, 2223), (1.625, 2799), (1.625, 2291), (1.625, 2471), (1.625, 1983), (1.625, 2655), (1.625, 1071), (1.625, 2077), (1.625, 2713), (1.625, 2050), (1.625, 2615), (1.625, 2664), (1.625, 2569), (1.625, 2733), (1.625, 1270), (1.625, 2663), (1.625, 2098), (1.625, 2898), (1.625, 2729), (1.625, 2397), (1.625, 2631), (1.625, 1756), (1.625, 1760), (1.625, 2797), (1.625, 2189), (1.625, 2695), (1.625, 2813), (1.625, 2500), (1.625, 2270), (1.625, 2715), (1.625, 2289), (1.625, 2354), (1.625, 2370), (1.625, 1848), (1.625, 2149), (1.625, 2704), (1.625, 2672), (1.625, 2351), (1.625, 2198), (1.625, 2854), (1.625, 2195), (1.625, 1866), (1.625, 2807), (1.625, 2701), (1.625, 2610), (1.625, 2446), (1.625, 1953), (1.625, 2614), (1.625, 2772), (1.625, 2798), (1.625, 2682), (1.625, 2853), (1.625, 2730), (1.625, 2903), (1.625, 2875), (1.625, 2542), (1.625, 2111), (1.625, 2763), (1.625, 2352), (1.625, 2645), (1.625, 2855), (1.625, 1851), (1.625, 2746), (1.625, 2869), (1.625, 2720), (1.625, 2513), (1.625, 2310), (1.625, 2104), (1.625, 2754), (1.625, 2335), (1.625, 2694), (1.625, 2499), (1.625, 1752), (1.625, 2742), (1.625, 2257), (1.625, 2904), (1.625, 2493), (1.625, 2395), (1.625, 2473), (1.625, 2465), (1.625, 2794), (1.625, 2084), (1.625, 2535), (1.625, 2051), (1.625, 2063), (1.625, 2907), (1.625, 1854), (1.625, 2585), (1.625, 2504), (1.625, 2779), (1.625, 2837), (1.625, 2894), (1.625, 2829), (1.625, 2865), (1.625, 2774), (1.625, 2899), (1.625, 2267), (1.625, 2881), (1.625, 2707), (1.625, 2325), (1.625, 2577), (1.625, 2156), (1.625, 2830), (1.625, 2684), (1.625, 2803), (1.625, 2551), (1.625, 2775), (1.625, 2822), (1.625, 1867), (1.625, 2900), (1.625, 2573), (1.625, 2318), (1.625, 2527), (1.625, 2511), (1.625, 2327), (1.625, 2725), (1.625, 2785), (1.625, 2741), (1.625, 2229), (1.625, 2347), (1.625, 2841), (1.625, 1846), (1.625, 2905), (1.625, 2814), (1.625, 2463), (1.625, 2412), (1.625, 2690), (1.625, 2204), (1.625, 2705), (1.625, 2388), (1.625, 2510), (1.625, 2316), (1.625, 2834), (1.625, 1973), (1.625, 1857), (1.625, 2876), (1.625, 2838), (1.625, 2836), (1.625, 2455), (0.2, 2858), (0.2, 2812), (0.2, 2887), (0.2, 2893), (0.2, 2889), (0.2, 2840), (0.2, 2824), (0.2, 2849)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2868
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2375
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2653
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2833
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 27]
[Computing fitness]
[(1.625, 2637), (1.625, 2614), (1.625, 2140), (1.625, 2746), (1.625, 2825), (1.625, 2571), (1.625, 2743), (1.625, 2433), (1.625, 2500), (1.625, 2632), (1.625, 2676), (1.625, 2486), (1.625, 2877), (1.625, 2606), (1.625, 2198), (1.625, 2813), (1.625, 2985), (1.625, 2093), (1.625, 2335), (1.625, 2818), (1.625, 2572), (1.625, 2948), (1.625, 2391), (1.625, 2850), (1.625, 2816), (1.625, 2739), (1.625, 1466), (1.625, 2714), (1.625, 2313), (1.625, 2149), (1.625, 2820), (1.625, 2924), (1.625, 2798), (1.625, 2715), (1.625, 2417), (1.625, 2567), (1.625, 2195), (1.625, 2856), (1.625, 2618), (1.625, 2903), (1.625, 2310), (1.625, 1750), (1.625, 2423), (1.625, 2751), (1.625, 2265), (1.625, 2073), (1.625, 1662), (1.625, 2446), (1.625, 2754), (1.625, 2761), (1.625, 2701), (1.625, 2872), (1.625, 2921), (1.625, 2104), (1.625, 2647), (1.625, 2592), (1.625, 2505), (1.625, 2695), (1.625, 1666), (1.625, 2729), (1.625, 2868), (1.625, 2515), (1.625, 2931), (1.625, 2869), (1.625, 2636), (1.625, 2512), (1.625, 2852), (1.625, 2375), (1.625, 2587), (1.625, 2074), (1.625, 2576), (1.625, 2193), (1.625, 2619), (1.625, 2542), (1.625, 2954), (1.625, 3002), (1.625, 2870), (1.625, 2933), (1.625, 2268), (1.625, 2110), (1.625, 2851), (1.625, 2998), (1.625, 2369), (1.625, 2828), (1.625, 2902), (1.625, 2932), (1.625, 2914), (1.625, 2591), (1.625, 2882), (1.625, 2989), (1.625, 2628), (1.625, 2962), (1.625, 2730), (1.625, 2942), (1.625, 2699), (1.625, 2984), (1.625, 2458), (1.625, 2077), (1.625, 3001), (1.625, 2531), (1.625, 1845), (1.625, 1560), (1.625, 2570), (1.625, 2700), (1.625, 2958), (1.625, 2165), (1.625, 1559), (1.625, 2757), (1.625, 2987), (1.625, 2847), (1.625, 2710), (1.625, 2975), (1.625, 2957), (1.625, 2911), (1.625, 2320), (1.625, 2950), (1.625, 2141), (1.625, 2896), (1.625, 2050), (1.625, 2082), (1.625, 1848), (1.625, 2790), (1.625, 2925), (1.625, 2352), (1.625, 1988), (1.625, 2157), (1.625, 2317), (1.625, 2930), (1.625, 2781), (1.625, 2326), (1.625, 2927), (1.625, 2672), (1.625, 2649), (1.625, 2506), (1.625, 2941), (1.625, 2291), (1.625, 1373), (1.625, 2854), (1.625, 2885), (1.625, 2184), (1.625, 2688), (1.625, 2680), (1.625, 2928), (1.625, 2946), (1.625, 2797), (1.625, 2036), (1.625, 2653), (1.625, 1562), (1.625, 2090), (1.625, 2723), (1.625, 2810), (1.625, 2733), (1.625, 2608), (1.625, 2682), (1.625, 2915), (1.625, 2469), (1.625, 2282), (1.625, 2879), (1.625, 2866), (1.625, 2745), (1.625, 2274), (1.625, 2855), (1.625, 2704), (1.625, 2612), (1.625, 2871), (1.625, 2213), (1.625, 2995), (1.625, 2106), (1.625, 2539), (1.625, 1981), (1.625, 2712), (1.625, 2378), (1.625, 2996), (1.625, 2102), (1.625, 2224), (1.625, 2787), (1.625, 2663), (1.625, 1756), (1.625, 2234), (1.625, 2843), (1.625, 2724), (1.625, 2485), (1.625, 2452), (1.625, 2640), (1.625, 2444), (1.625, 2471), (1.625, 2883), (1.625, 2945), (1.625, 2346), (1.625, 2494), (1.625, 2756), (1.625, 2189), (1.625, 2613), (1.625, 2990), (1.625, 1464), (1.625, 2772), (1.625, 2548), (1.625, 2833), (1.625, 2253), (1.625, 2109), (1.625, 2586), (1.625, 1071), (1.625, 2287), (1.625, 2740), (1.625, 2660), (1.625, 2583), (1.625, 2835), (1.625, 2450), (1.625, 2541), (1.625, 2693), (1.625, 2513), (1.625, 2530), (1.625, 2713), (1.625, 2054), (1.625, 2993), (1.625, 2764), (1.625, 2678), (1.625, 2807), (1.625, 2832), (1.625, 2749), (1.625, 1766), (1.625, 2112), (1.625, 2863), (1.625, 2981), (1.625, 2929), (1.625, 1877), (1.625, 2978), (1.625, 2400), (1.625, 2845), (1.625, 2547), (1.625, 2694), (1.625, 2799), (1.625, 2223), (1.625, 2970), (1.625, 2456), (1.625, 2186), (1.625, 2083), (1.625, 3004), (1.625, 2206), (1.625, 2522), (1.625, 2060), (1.625, 2499), (1.625, 2642), (1.625, 2912), (1.625, 1847), (1.625, 3005), (1.625, 2935), (1.625, 2397), (1.625, 2992), (1.625, 2321), (1.625, 2351), (1.625, 2553), (1.625, 2167), (1.625, 2880), (1.625, 2337), (1.625, 2329), (1.625, 2528), (1.625, 2719), (1.625, 2773), (1.625, 2977), (1.625, 2959), (1.625, 2722), (1.625, 2562), (1.625, 2766), (1.625, 2726), (1.625, 2906), (1.625, 2762), (1.625, 1983), (1.625, 2187), (1.625, 2891), (1.625, 2498), (1.625, 2983), (1.625, 1979), (1.625, 2354), (1.625, 2901), (1.625, 1270), (1.625, 2610), (1.625, 2180), (1.625, 2384), (1.625, 2765), (1.625, 2462), (1.625, 2371), (1.625, 2358), (1.625, 2211), (1.625, 2979), (1.625, 2806), (1.625, 1866), (1.625, 1953), (1.625, 2306), (1.625, 1976), (1.625, 2655), (1.625, 2623), (1.625, 2421), (1.625, 2988), (1.625, 2599), (1.625, 3000), (1.625, 2752), (1.625, 2796), (1.625, 2793), (1.625, 2615), (1.625, 2910), (1.625, 2315), (1.625, 2038), (1.625, 2967), (1.625, 2518), (1.625, 2968), (1.625, 2686), (1.625, 2620), (1.625, 2644), (1.625, 1760), (1.625, 2972), (1.625, 2718), (1.625, 2071), (1.625, 2111), (1.625, 1990), (1.625, 2878), (1.625, 2651), (1.625, 1170), (1.625, 1467), (1.625, 2270), (1.625, 2853), (1.625, 2534), (1.625, 2716), (1.625, 1851), (1.625, 2720), (1.625, 2231), (1.625, 2763), (1.625, 1754), (1.625, 2873), (1.625, 2629), (1.625, 2645), (1.625, 2098), (1.625, 2963), (1.625, 2654), (1.625, 2289), (1.625, 2370), (1.625, 2783), (1.625, 2744), (1.625, 2965), (1.625, 2951), (1.625, 2862), (1.625, 2664), (1.625, 2646), (1.625, 2631), (1.625, 2367), (1.625, 2960), (1.625, 2991), (1.625, 2800), (1.625, 2890), (1.625, 2164), (1.625, 2767), (1.625, 2974), (1.625, 1843), (1.625, 2068), (1.625, 2922), (1.625, 2947), (1.625, 2778), (1.625, 2281), (1.625, 1757), (1.625, 2569), (1.625, 2861), (1.625, 2994), (1.625, 2884), (1.625, 2689), (1.625, 2769), (1.625, 2442), (1.625, 2986), (1.625, 1970), (1.625, 2789), (1.625, 2731), (1.625, 2633), (1.625, 2342), (1.625, 2795), (1.625, 3006), (1.625, 2679), (1.625, 2982), (1.625, 1946), (1.625, 2319), (1.625, 2997), (1.625, 2152), (1.625, 2094), (1.625, 2897), (1.625, 2047), (1.625, 2875), (1.625, 2920), (1.625, 1868), (1.625, 2898), (1.625, 2826), (1.625, 2212), (1.625, 2136), (1.625, 2802), (1.625, 2860), (1.125, 2944), (1.125, 2956), (1.125, 2909), (1.125, 2919), (0.2, 2917), (0.2, 2953), (0.2, 2939), (0.2, 2937)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2637
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2614
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2140
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2746
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2825
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 28]
[Computing fitness]
[(1.625, 2320), (1.625, 3049), (1.625, 2988), (1.625, 2548), (1.625, 1560), (1.625, 3026), (1.625, 2384), (1.625, 2486), (1.625, 2724), (1.625, 2825), (1.625, 2642), (1.625, 2515), (1.625, 2712), (1.625, 2512), (1.625, 2975), (1.625, 2628), (1.625, 2866), (1.625, 3056), (1.625, 3082), (1.625, 1847), (1.625, 2586), (1.625, 3041), (1.625, 2843), (1.625, 2880), (1.625, 2619), (1.625, 2764), (1.625, 2469), (1.625, 2883), (1.625, 2931), (1.625, 2612), (1.625, 2863), (1.625, 2224), (1.625, 2911), (1.625, 2193), (1.625, 2682), (1.625, 3040), (1.625, 2912), (1.625, 3085), (1.625, 2713), (1.625, 1466), (1.625, 1464), (1.625, 2180), (1.625, 2686), (1.625, 2358), (1.625, 1976), (1.625, 3004), (1.625, 2663), (1.625, 3007), (1.625, 2754), (1.625, 2855), (1.625, 2637), (1.625, 2321), (1.625, 2458), (1.625, 3005), (1.625, 2090), (1.625, 1559), (1.625, 2853), (1.625, 3076), (1.625, 2371), (1.625, 2572), (1.625, 2882), (1.625, 2528), (1.625, 2417), (1.625, 2781), (1.625, 3051), (1.625, 2613), (1.625, 2378), (1.625, 2287), (1.625, 3092), (1.625, 2761), (1.625, 2186), (1.625, 2074), (1.625, 1071), (1.625, 2816), (1.625, 2833), (1.625, 2959), (1.625, 2189), (1.625, 2981), (1.625, 2726), (1.625, 2615), (1.625, 2274), (1.625, 2265), (1.625, 2672), (1.625, 2978), (1.625, 1766), (1.625, 2958), (1.625, 2106), (1.625, 2223), (1.625, 3070), (1.625, 3024), (1.625, 3071), (1.625, 3022), (1.625, 2793), (1.625, 2640), (1.625, 2820), (1.625, 2653), (1.625, 2456), (1.625, 2620), (1.625, 3043), (1.625, 2268), (1.625, 2211), (1.625, 2950), (1.625, 3034), (1.625, 2513), (1.625, 2140), (1.625, 3062), (1.625, 2570), (1.625, 2910), (1.625, 2397), (1.625, 2716), (1.625, 1760), (1.625, 2346), (1.625, 2505), (1.625, 2614), (1.625, 2499), (1.625, 2733), (1.625, 2583), (1.625, 2730), (1.625, 2680), (1.625, 2885), (1.625, 2082), (1.625, 2946), (1.625, 3055), (1.625, 2928), (1.625, 2433), (1.625, 2450), (1.625, 2644), (1.625, 2914), (1.625, 2921), (1.625, 2253), (1.625, 2891), (1.625, 2818), (1.625, 3091), (1.625, 2995), (1.625, 2234), (1.625, 2869), (1.625, 2790), (1.625, 2462), (1.625, 2104), (1.625, 2925), (1.625, 2291), (1.625, 2167), (1.625, 3079), (1.625, 3017), (1.625, 2531), (1.625, 2941), (1.625, 1845), (1.625, 2077), (1.625, 2751), (1.625, 2660), (1.625, 3086), (1.625, 2485), (1.625, 2740), (1.625, 2810), (1.625, 2772), (1.625, 2317), (1.625, 2141), (1.625, 2310), (1.625, 2083), (1.625, 2444), (1.625, 2856), (1.625, 3032), (1.625, 3066), (1.625, 3052), (1.625, 2354), (1.625, 2375), (1.625, 3050), (1.625, 2749), (1.625, 2993), (1.625, 2962), (1.625, 1270), (1.625, 2906), (1.625, 2694), (1.625, 2351), (1.625, 3068), (1.625, 2935), (1.625, 3090), (1.625, 2924), (1.625, 2710), (1.625, 2704), (1.625, 3000), (1.625, 2655), (1.625, 2729), (1.625, 1750), (1.625, 1373), (1.625, 2967), (1.625, 3064), (1.625, 2651), (1.625, 2050), (1.625, 2813), (1.625, 2739), (1.625, 2870), (1.625, 2498), (1.625, 3088), (1.625, 3077), (1.625, 2562), (1.625, 2743), (1.625, 2102), (1.625, 2542), (1.625, 2587), (1.625, 2757), (1.625, 3044), (1.625, 1467), (1.625, 2695), (1.625, 2606), (1.625, 2979), (1.625, 3054), (1.625, 2676), (1.625, 2112), (1.625, 2828), (1.625, 2983), (1.625, 3012), (1.625, 1756), (1.625, 2073), (1.625, 2871), (1.625, 2852), (1.625, 2187), (1.625, 2608), (1.625, 2868), (1.625, 2599), (1.625, 3029), (1.625, 2109), (1.625, 3037), (1.625, 3042), (1.625, 3046), (1.625, 2722), (1.625, 2765), (1.625, 2534), (1.625, 2835), (1.625, 2878), (1.625, 2701), (1.625, 2879), (1.625, 2165), (1.625, 2719), (1.625, 2985), (1.625, 2806), (1.625, 2915), (1.625, 2929), (1.625, 1979), (1.625, 3021), (1.625, 3094), (1.625, 3047), (1.625, 2421), (1.625, 1851), (1.625, 2213), (1.625, 2927), (1.625, 2902), (1.625, 2093), (1.625, 2471), (1.625, 2930), (1.625, 2984), (1.625, 2996), (1.625, 2391), (1.625, 2592), (1.625, 3098), (1.625, 2198), (1.625, 1988), (1.625, 1983), (1.625, 3002), (1.625, 2990), (1.625, 2623), (1.625, 2423), (1.625, 2718), (1.625, 3038), (1.625, 2992), (1.625, 3018), (1.625, 2506), (1.625, 2553), (1.625, 2720), (1.625, 2807), (1.625, 2933), (1.625, 2329), (1.625, 2618), (1.625, 2798), (1.625, 2500), (1.625, 3080), (1.625, 3035), (1.625, 2206), (1.625, 2649), (1.625, 3087), (1.625, 1981), (1.625, 3063), (1.625, 3031), (1.625, 2054), (1.625, 2038), (1.625, 2610), (1.625, 2184), (1.625, 3001), (1.625, 2335), (1.625, 2932), (1.625, 1662), (1.625, 2060), (1.625, 2111), (1.625, 1990), (1.625, 3057), (1.625, 2518), (1.625, 2352), (1.625, 2942), (1.625, 2851), (1.625, 2636), (1.625, 3039), (1.625, 3059), (1.625, 2715), (1.625, 2688), (1.625, 2714), (1.625, 2723), (1.625, 1953), (1.625, 2157), (1.625, 3028), (1.625, 2752), (1.625, 2036), (1.625, 2400), (1.625, 3081), (1.625, 2678), (1.625, 2854), (1.625, 2446), (1.625, 3014), (1.625, 2369), (1.625, 2071), (1.625, 2987), (1.625, 2901), (1.625, 3096), (1.625, 2494), (1.625, 2957), (1.625, 2313), (1.625, 2989), (1.625, 2337), (1.625, 2326), (1.625, 2547), (1.625, 2270), (1.625, 2762), (1.625, 3075), (1.625, 3016), (1.625, 2796), (1.625, 2977), (1.625, 2756), (1.625, 2896), (1.625, 1866), (1.625, 1170), (1.625, 2948), (1.625, 2954), (1.625, 2766), (1.625, 2773), (1.625, 2306), (1.625, 2799), (1.625, 1877), (1.625, 3083), (1.625, 3053), (1.625, 2872), (1.625, 2522), (1.625, 2700), (1.625, 2998), (1.625, 2745), (1.625, 2591), (1.625, 2970), (1.625, 3025), (1.625, 2972), (1.625, 2787), (1.625, 2832), (1.625, 2877), (1.625, 1666), (1.625, 3008), (1.625, 3020), (1.625, 3013), (1.625, 2945), (1.625, 3072), (1.625, 2571), (1.625, 2567), (1.625, 2968), (1.625, 3100), (1.625, 2110), (1.625, 1562), (1.625, 2845), (1.625, 3067), (1.625, 2746), (1.625, 2576), (1.625, 2693), (1.625, 2452), (1.625, 2195), (1.625, 2699), (1.625, 3065), (1.625, 2315), (1.625, 3030), (1.625, 1848), (1.625, 2903), (1.625, 2530), (1.625, 2632), (1.625, 2282), (1.625, 2539), (1.625, 2647), (1.625, 2847), (1.625, 3093), (1.625, 2149), (1.625, 2541), (1.625, 2850), (1.625, 2797), (1.625, 3058), (1.125, 3061), (0.2, 3010), (0.2, 3074)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2320
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3049
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2988
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2548
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1560
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 29]
[Computing fitness]
[(1.625, 2975), (1.625, 3037), (1.625, 2878), (1.625, 3193), (1.625, 3064), (1.625, 2835), (1.625, 3103), (1.625, 2843), (1.625, 3062), (1.625, 2772), (1.625, 2915), (1.625, 2211), (1.625, 3096), (1.625, 2637), (1.625, 2959), (1.625, 3129), (1.625, 3163), (1.625, 3091), (1.625, 2754), (1.625, 3176), (1.625, 2984), (1.625, 2083), (1.625, 3094), (1.625, 1373), (1.625, 3017), (1.625, 2093), (1.625, 2935), (1.625, 3070), (1.625, 2193), (1.625, 3052), (1.625, 2757), (1.625, 3150), (1.625, 2421), (1.625, 2914), (1.625, 2730), (1.625, 3161), (1.625, 2384), (1.625, 2186), (1.625, 2612), (1.625, 2287), (1.625, 2184), (1.625, 2933), (1.625, 2927), (1.625, 2599), (1.625, 2485), (1.625, 2614), (1.625, 3068), (1.625, 2140), (1.625, 2925), (1.625, 2856), (1.625, 3195), (1.625, 3088), (1.625, 2583), (1.625, 2761), (1.625, 2990), (1.625, 3162), (1.625, 3196), (1.625, 3026), (1.625, 2958), (1.625, 2531), (1.625, 3190), (1.625, 2879), (1.625, 2450), (1.625, 2941), (1.625, 2615), (1.625, 3057), (1.625, 2851), (1.625, 2764), (1.625, 2542), (1.625, 2313), (1.625, 2726), (1.625, 3050), (1.625, 1560), (1.625, 3087), (1.625, 2950), (1.625, 2274), (1.625, 2798), (1.625, 3123), (1.625, 3046), (1.625, 2869), (1.625, 2978), (1.625, 3002), (1.625, 3172), (1.625, 3029), (1.625, 2946), (1.625, 3102), (1.625, 3056), (1.625, 3066), (1.625, 3077), (1.625, 2548), (1.625, 3181), (1.625, 2613), (1.625, 3081), (1.625, 3147), (1.625, 3076), (1.625, 2515), (1.625, 3122), (1.625, 3051), (1.625, 2198), (1.625, 3120), (1.625, 1953), (1.625, 3042), (1.625, 3187), (1.625, 3124), (1.625, 2570), (1.625, 2863), (1.625, 3038), (1.625, 2854), (1.625, 3047), (1.625, 3189), (1.625, 3141), (1.625, 2983), (1.625, 1662), (1.625, 2157), (1.625, 2469), (1.625, 2187), (1.625, 2723), (1.625, 2931), (1.625, 3044), (1.625, 2740), (1.625, 2807), (1.625, 3000), (1.625, 2512), (1.625, 1466), (1.625, 3152), (1.625, 2060), (1.625, 2620), (1.625, 1467), (1.625, 2291), (1.625, 3092), (1.625, 2375), (1.625, 2606), (1.625, 2871), (1.625, 1976), (1.625, 3043), (1.625, 1983), (1.625, 3063), (1.625, 2649), (1.625, 2868), (1.625, 3118), (1.625, 2911), (1.625, 3149), (1.625, 2678), (1.625, 3108), (1.625, 2090), (1.625, 1979), (1.625, 2924), (1.625, 3157), (1.625, 2653), (1.625, 2371), (1.625, 3113), (1.625, 2806), (1.625, 2957), (1.625, 3182), (1.625, 2981), (1.625, 2506), (1.625, 2781), (1.625, 2902), (1.625, 2906), (1.625, 2206), (1.625, 3140), (1.625, 3022), (1.625, 2694), (1.625, 2189), (1.625, 2369), (1.625, 2825), (1.625, 2320), (1.625, 3155), (1.625, 2642), (1.625, 2891), (1.625, 3104), (1.625, 2321), (1.625, 2471), (1.625, 2930), (1.625, 2106), (1.625, 2071), (1.625, 2310), (1.625, 3127), (1.625, 3041), (1.625, 2073), (1.625, 2513), (1.625, 2458), (1.625, 3197), (1.625, 2036), (1.625, 2223), (1.625, 2993), (1.625, 1071), (1.625, 2749), (1.625, 2932), (1.625, 3035), (1.625, 3126), (1.625, 2224), (1.625, 3071), (1.625, 2810), (1.625, 2494), (1.625, 2739), (1.625, 2528), (1.625, 1990), (1.625, 2180), (1.625, 2553), (1.625, 2921), (1.625, 2880), (1.625, 3183), (1.625, 3115), (1.625, 2910), (1.625, 3148), (1.625, 2109), (1.625, 3175), (1.625, 2870), (1.625, 2534), (1.625, 2317), (1.625, 2695), (1.625, 2586), (1.625, 2883), (1.625, 2082), (1.625, 2729), (1.625, 2720), (1.625, 2335), (1.625, 2077), (1.625, 2719), (1.625, 2715), (1.625, 2716), (1.625, 2688), (1.625, 2929), (1.625, 2572), (1.625, 2562), (1.625, 2765), (1.625, 2686), (1.625, 2352), (1.625, 2996), (1.625, 2444), (1.625, 3005), (1.625, 3001), (1.625, 2619), (1.625, 3156), (1.625, 2852), (1.625, 2074), (1.625, 3192), (1.625, 2724), (1.625, 3134), (1.625, 3117), (1.625, 2833), (1.625, 3049), (1.625, 3018), (1.625, 3184), (1.625, 2618), (1.625, 3188), (1.625, 3032), (1.625, 2505), (1.625, 2752), (1.625, 2423), (1.625, 2710), (1.625, 2234), (1.625, 2499), (1.625, 2623), (1.625, 1845), (1.625, 2456), (1.625, 3144), (1.625, 2111), (1.625, 3007), (1.625, 3133), (1.625, 2882), (1.625, 1847), (1.625, 3169), (1.625, 2141), (1.625, 3059), (1.625, 2987), (1.625, 2704), (1.625, 3079), (1.625, 3034), (1.625, 3012), (1.625, 1851), (1.625, 2346), (1.625, 3167), (1.625, 3031), (1.625, 2751), (1.625, 2417), (1.625, 3154), (1.625, 3165), (1.625, 2912), (1.625, 2682), (1.625, 3090), (1.625, 2714), (1.625, 2054), (1.625, 2718), (1.625, 3098), (1.625, 2400), (1.625, 1750), (1.625, 2855), (1.625, 2988), (1.625, 3130), (1.625, 2701), (1.625, 2268), (1.625, 3158), (1.625, 3054), (1.625, 3116), (1.625, 2866), (1.625, 2592), (1.625, 2660), (1.625, 2433), (1.625, 2640), (1.625, 2608), (1.625, 3086), (1.625, 2213), (1.625, 2167), (1.625, 3112), (1.625, 2050), (1.625, 2928), (1.625, 3159), (1.625, 2885), (1.625, 2995), (1.625, 3040), (1.625, 3101), (1.625, 2712), (1.625, 3191), (1.625, 2354), (1.625, 2713), (1.625, 2992), (1.625, 1464), (1.625, 2500), (1.625, 1988), (1.625, 2655), (1.625, 3055), (1.625, 2358), (1.625, 3146), (1.625, 2628), (1.625, 1981), (1.625, 2942), (1.625, 2587), (1.625, 2378), (1.625, 2486), (1.625, 3024), (1.625, 3137), (1.625, 3014), (1.625, 2979), (1.625, 2790), (1.625, 2498), (1.625, 3171), (1.625, 3170), (1.625, 2672), (1.625, 2644), (1.625, 2462), (1.625, 2853), (1.625, 1766), (1.625, 1559), (1.625, 2793), (1.625, 2253), (1.625, 3082), (1.625, 2733), (1.625, 2518), (1.625, 2265), (1.625, 2636), (1.625, 2038), (1.625, 2676), (1.625, 2391), (1.625, 1270), (1.625, 2329), (1.625, 3186), (1.625, 2112), (1.625, 1760), (1.625, 2818), (1.625, 2651), (1.625, 3153), (1.625, 2967), (1.625, 2102), (1.625, 3107), (1.625, 3028), (1.625, 2985), (1.625, 2722), (1.625, 2663), (1.625, 2680), (1.625, 3021), (1.625, 2901), (1.625, 2820), (1.625, 2351), (1.625, 3138), (1.625, 2813), (1.625, 3177), (1.625, 2104), (1.625, 2816), (1.625, 2610), (1.625, 3173), (1.625, 2962), (1.625, 3004), (1.625, 2828), (1.625, 3142), (1.625, 3105), (1.625, 3164), (1.625, 2446), (1.625, 1756), (1.625, 3136), (1.625, 3039), (1.625, 3110), (1.625, 2397), (1.625, 2165), (1.625, 3085), (1.625, 3080), (1.625, 2743), (1.125, 3179), (0.2, 3132)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2975
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3037
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2878
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3064
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 30]
[Computing fitness]
[(1.625, 2810), (1.625, 3274), (1.625, 3117), (1.625, 3266), (1.625, 2469), (1.625, 3262), (1.625, 3288), (1.625, 3192), (1.625, 3146), (1.625, 2352), (1.625, 3103), (1.625, 2871), (1.625, 3130), (1.625, 3233), (1.625, 2751), (1.625, 2234), (1.625, 2036), (1.625, 3255), (1.625, 3150), (1.625, 2620), (1.625, 3124), (1.625, 2835), (1.625, 3077), (1.625, 2421), (1.625, 2761), (1.625, 3254), (1.625, 2111), (1.625, 3191), (1.625, 3257), (1.625, 2729), (1.625, 3283), (1.625, 3034), (1.625, 3158), (1.625, 3248), (1.625, 2719), (1.625, 3196), (1.625, 3152), (1.625, 2765), (1.625, 3202), (1.625, 3050), (1.625, 2213), (1.625, 2915), (1.625, 2990), (1.625, 3187), (1.625, 3259), (1.625, 2534), (1.625, 2570), (1.625, 2513), (1.625, 2450), (1.625, 3066), (1.625, 3162), (1.625, 2996), (1.625, 2187), (1.625, 3159), (1.625, 2710), (1.625, 3195), (1.625, 3140), (1.625, 2224), (1.625, 3261), (1.625, 1464), (1.625, 3129), (1.625, 3071), (1.625, 3268), (1.625, 1373), (1.625, 3054), (1.625, 3042), (1.625, 1851), (1.625, 2757), (1.625, 3037), (1.625, 2090), (1.625, 3189), (1.625, 2071), (1.625, 1976), (1.625, 2106), (1.625, 3018), (1.625, 3017), (1.625, 3076), (1.625, 2720), (1.625, 2400), (1.625, 3214), (1.625, 3232), (1.625, 3243), (1.625, 2988), (1.625, 2211), (1.625, 3203), (1.625, 2606), (1.625, 3038), (1.625, 2694), (1.625, 2704), (1.625, 2653), (1.625, 3208), (1.625, 2444), (1.625, 2485), (1.625, 3029), (1.625, 3293), (1.625, 2869), (1.625, 2623), (1.625, 2471), (1.625, 3165), (1.625, 3032), (1.625, 2592), (1.625, 2660), (1.625, 2193), (1.625, 2724), (1.625, 2060), (1.625, 3219), (1.625, 2946), (1.625, 3235), (1.625, 2189), (1.625, 3116), (1.625, 2935), (1.625, 2833), (1.625, 2678), (1.625, 3155), (1.625, 3108), (1.625, 3289), (1.625, 3070), (1.625, 2701), (1.625, 2614), (1.625, 3057), (1.625, 3279), (1.625, 2726), (1.625, 1467), (1.625, 3190), (1.625, 2957), (1.625, 3231), (1.625, 2714), (1.625, 2268), (1.625, 2995), (1.625, 3134), (1.625, 2586), (1.625, 2713), (1.625, 3133), (1.625, 3012), (1.625, 2749), (1.625, 2879), (1.625, 3236), (1.625, 3127), (1.625, 2494), (1.625, 3157), (1.625, 2074), (1.625, 3126), (1.625, 2320), (1.625, 2528), (1.625, 2371), (1.625, 2975), (1.625, 3184), (1.625, 2868), (1.625, 2500), (1.625, 2198), (1.625, 2798), (1.625, 3148), (1.625, 2515), (1.625, 3040), (1.625, 3280), (1.625, 2054), (1.625, 3049), (1.625, 2642), (1.625, 2931), (1.625, 3221), (1.625, 2317), (1.625, 3086), (1.625, 2854), (1.625, 2077), (1.625, 3161), (1.625, 3056), (1.625, 3287), (1.625, 3294), (1.625, 3123), (1.625, 3290), (1.625, 3226), (1.625, 2856), (1.625, 3063), (1.625, 2346), (1.625, 3055), (1.625, 3277), (1.625, 3156), (1.625, 3096), (1.625, 3001), (1.625, 2572), (1.625, 3213), (1.625, 2910), (1.625, 1847), (1.625, 2921), (1.625, 2932), (1.625, 3068), (1.625, 3122), (1.625, 2384), (1.625, 3211), (1.625, 1983), (1.625, 2612), (1.625, 3175), (1.625, 3198), (1.625, 3044), (1.625, 3220), (1.625, 3092), (1.625, 3197), (1.625, 3176), (1.625, 3271), (1.625, 2548), (1.625, 2562), (1.625, 2619), (1.625, 3022), (1.625, 3252), (1.625, 2715), (1.625, 3062), (1.625, 2375), (1.625, 2781), (1.625, 2083), (1.625, 2927), (1.625, 3270), (1.625, 2499), (1.625, 1979), (1.625, 1560), (1.625, 3101), (1.625, 3206), (1.625, 3163), (1.625, 3052), (1.625, 3201), (1.625, 2613), (1.625, 2930), (1.625, 3002), (1.625, 2615), (1.625, 2754), (1.625, 2073), (1.625, 3216), (1.625, 3205), (1.625, 3026), (1.625, 1750), (1.625, 3276), (1.625, 3264), (1.625, 2082), (1.625, 2093), (1.625, 2050), (1.625, 3081), (1.625, 2310), (1.625, 3188), (1.625, 2723), (1.625, 2959), (1.625, 1988), (1.625, 3120), (1.625, 2978), (1.625, 3047), (1.625, 3147), (1.625, 2718), (1.625, 1845), (1.625, 3041), (1.625, 2987), (1.625, 3225), (1.625, 3051), (1.625, 2458), (1.625, 3238), (1.625, 2167), (1.625, 2688), (1.625, 2843), (1.625, 3149), (1.625, 3094), (1.625, 3167), (1.625, 3183), (1.625, 3181), (1.625, 3046), (1.625, 2369), (1.625, 2925), (1.625, 2637), (1.625, 2772), (1.625, 2902), (1.625, 3239), (1.625, 2608), (1.625, 2730), (1.625, 2928), (1.625, 3104), (1.625, 3281), (1.625, 3088), (1.625, 2206), (1.625, 1662), (1.625, 3087), (1.625, 2752), (1.625, 2599), (1.625, 2912), (1.625, 2682), (1.625, 2506), (1.625, 2906), (1.625, 3199), (1.625, 3144), (1.625, 2417), (1.625, 2640), (1.625, 3059), (1.625, 2291), (1.625, 2992), (1.625, 3090), (1.625, 3222), (1.625, 2335), (1.625, 2914), (1.625, 2712), (1.625, 2880), (1.625, 3285), (1.625, 3102), (1.625, 2321), (1.625, 2505), (1.625, 2180), (1.625, 3098), (1.625, 2456), (1.625, 3141), (1.625, 3230), (1.625, 2739), (1.625, 3244), (1.625, 2354), (1.625, 3079), (1.625, 2686), (1.625, 2184), (1.625, 2531), (1.625, 3005), (1.625, 2433), (1.625, 2553), (1.625, 3113), (1.625, 3253), (1.625, 3212), (1.625, 2984), (1.625, 2929), (1.625, 3256), (1.625, 3064), (1.625, 3249), (1.625, 3007), (1.625, 2157), (1.625, 2358), (1.625, 3112), (1.625, 3224), (1.625, 1953), (1.625, 3172), (1.625, 2423), (1.625, 3269), (1.625, 3200), (1.625, 1990), (1.625, 2993), (1.625, 2891), (1.625, 2866), (1.625, 2863), (1.625, 3182), (1.625, 2274), (1.625, 2883), (1.625, 2950), (1.625, 3000), (1.625, 3240), (1.625, 3263), (1.625, 2981), (1.625, 2958), (1.625, 2109), (1.625, 3267), (1.625, 2186), (1.625, 2223), (1.625, 2141), (1.625, 2716), (1.625, 3215), (1.625, 3251), (1.625, 3169), (1.625, 3242), (1.625, 2870), (1.625, 2882), (1.625, 2695), (1.625, 2655), (1.625, 2825), (1.625, 2911), (1.625, 2649), (1.625, 2885), (1.625, 2983), (1.625, 3031), (1.625, 2852), (1.625, 2542), (1.625, 3193), (1.625, 2806), (1.625, 3043), (1.625, 3272), (1.625, 3291), (1.625, 3118), (1.625, 2287), (1.625, 2855), (1.625, 2851), (1.625, 3228), (1.625, 3035), (1.625, 3218), (1.625, 2924), (1.625, 2740), (1.625, 2313), (1.625, 2941), (1.625, 3091), (1.625, 2140), (1.625, 2878), (1.625, 2764), (1.625, 2512), (1.625, 2583), (1.625, 1071), (1.625, 2933), (1.625, 3273), (1.625, 1466), (1.625, 3154), (1.625, 2618), (1.625, 3115), (1.625, 2807), (1.125, 3210), (0.2, 3246)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2810
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3117
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3266
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2469
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 31]
[Computing fitness]
[(1.625, 3157), (1.625, 1979), (1.625, 2421), (1.625, 2765), (1.625, 2686), (1.625, 2910), (1.625, 2077), (1.625, 3295), (1.625, 3144), (1.625, 3344), (1.625, 3102), (1.625, 2073), (1.625, 3294), (1.625, 3123), (1.625, 3214), (1.625, 2752), (1.625, 2640), (1.625, 3012), (1.625, 3116), (1.625, 2772), (1.625, 3108), (1.625, 2879), (1.625, 3261), (1.625, 3264), (1.625, 2925), (1.625, 3002), (1.625, 2093), (1.625, 3329), (1.625, 3032), (1.625, 2433), (1.625, 1560), (1.625, 2036), (1.625, 3184), (1.625, 3063), (1.625, 3332), (1.625, 2710), (1.625, 3259), (1.625, 2211), (1.625, 1464), (1.625, 3318), (1.625, 2871), (1.625, 3338), (1.625, 2975), (1.625, 3155), (1.625, 3386), (1.625, 2978), (1.625, 3304), (1.625, 2921), (1.625, 2932), (1.625, 2931), (1.625, 2354), (1.625, 3195), (1.625, 2321), (1.625, 2291), (1.625, 3231), (1.625, 3096), (1.625, 3159), (1.625, 2915), (1.625, 3158), (1.625, 2193), (1.625, 3117), (1.625, 3328), (1.625, 2494), (1.625, 3330), (1.625, 3253), (1.625, 3192), (1.625, 3337), (1.625, 3090), (1.625, 2724), (1.625, 3326), (1.625, 2798), (1.625, 3372), (1.625, 2206), (1.625, 3161), (1.625, 2572), (1.625, 2268), (1.625, 1662), (1.625, 3347), (1.625, 3049), (1.625, 3325), (1.625, 3077), (1.625, 3367), (1.625, 2513), (1.625, 3323), (1.625, 3310), (1.625, 3175), (1.625, 3243), (1.625, 2106), (1.625, 3199), (1.625, 3208), (1.625, 2224), (1.625, 2660), (1.625, 2990), (1.625, 2310), (1.625, 3064), (1.625, 2642), (1.625, 2400), (1.625, 2880), (1.625, 2781), (1.625, 3051), (1.625, 2515), (1.625, 2553), (1.625, 2619), (1.625, 3309), (1.625, 1750), (1.625, 3293), (1.625, 3149), (1.625, 3364), (1.625, 3221), (1.625, 3239), (1.625, 3341), (1.625, 3360), (1.625, 3122), (1.625, 2843), (1.625, 3212), (1.625, 2927), (1.625, 2854), (1.625, 2719), (1.625, 3156), (1.625, 2959), (1.625, 3190), (1.625, 2928), (1.625, 3197), (1.625, 3320), (1.625, 3225), (1.625, 2167), (1.625, 2180), (1.625, 3268), (1.625, 2050), (1.625, 2713), (1.625, 3297), (1.625, 2586), (1.625, 2570), (1.625, 3298), (1.625, 3289), (1.625, 3317), (1.625, 3130), (1.625, 3288), (1.625, 2906), (1.625, 3355), (1.625, 2739), (1.625, 3222), (1.625, 3026), (1.625, 3086), (1.625, 3070), (1.625, 2715), (1.625, 2234), (1.625, 3257), (1.625, 3140), (1.625, 3092), (1.625, 2358), (1.625, 3314), (1.625, 3387), (1.625, 3203), (1.625, 2471), (1.625, 2729), (1.625, 3307), (1.625, 3211), (1.625, 2835), (1.625, 3236), (1.625, 3238), (1.625, 3312), (1.625, 3365), (1.625, 3037), (1.625, 2833), (1.625, 3226), (1.625, 3321), (1.625, 3336), (1.625, 2562), (1.625, 3068), (1.625, 3357), (1.625, 3076), (1.625, 2456), (1.625, 3319), (1.625, 3127), (1.625, 3041), (1.625, 2749), (1.625, 3290), (1.625, 3378), (1.625, 3300), (1.625, 2369), (1.625, 2637), (1.625, 3382), (1.625, 3042), (1.625, 3141), (1.625, 3183), (1.625, 3198), (1.625, 3079), (1.625, 2754), (1.625, 3280), (1.625, 2723), (1.625, 2957), (1.625, 3370), (1.625, 3262), (1.625, 3296), (1.625, 2623), (1.625, 3147), (1.625, 3271), (1.625, 3188), (1.625, 3366), (1.625, 2608), (1.625, 2987), (1.625, 3375), (1.625, 3303), (1.625, 3098), (1.625, 3301), (1.625, 2071), (1.625, 3255), (1.625, 3018), (1.625, 2929), (1.625, 3124), (1.625, 2810), (1.625, 3054), (1.625, 2548), (1.625, 2184), (1.625, 2506), (1.625, 3305), (1.625, 3148), (1.625, 2054), (1.625, 3324), (1.625, 2704), (1.625, 2984), (1.625, 2995), (1.625, 2613), (1.625, 2914), (1.625, 3248), (1.625, 2317), (1.625, 3005), (1.625, 2718), (1.625, 2620), (1.625, 3202), (1.625, 3146), (1.625, 2720), (1.625, 1847), (1.625, 2157), (1.625, 3201), (1.625, 3055), (1.625, 2528), (1.625, 3362), (1.625, 3062), (1.625, 2335), (1.625, 3313), (1.625, 3017), (1.625, 2371), (1.625, 3163), (1.625, 2726), (1.625, 2375), (1.625, 2111), (1.625, 2213), (1.625, 3029), (1.625, 2701), (1.625, 3196), (1.625, 3276), (1.625, 3256), (1.625, 3379), (1.625, 2198), (1.625, 2444), (1.625, 2592), (1.625, 3206), (1.625, 3165), (1.625, 1845), (1.625, 3034), (1.625, 3038), (1.625, 2946), (1.625, 3050), (1.625, 3281), (1.625, 3277), (1.625, 2614), (1.625, 2935), (1.625, 3316), (1.625, 3101), (1.625, 3377), (1.625, 3266), (1.625, 3348), (1.625, 3283), (1.625, 3220), (1.625, 2384), (1.625, 2912), (1.625, 2417), (1.625, 2534), (1.625, 3213), (1.625, 2714), (1.625, 1851), (1.625, 3134), (1.625, 2499), (1.625, 3129), (1.625, 2712), (1.625, 3052), (1.625, 2902), (1.625, 3181), (1.625, 2352), (1.625, 2730), (1.625, 3103), (1.625, 2606), (1.625, 3044), (1.625, 2082), (1.625, 2500), (1.625, 3113), (1.625, 3219), (1.625, 3176), (1.625, 3150), (1.625, 3287), (1.625, 3374), (1.625, 2615), (1.625, 3361), (1.625, 3059), (1.625, 3335), (1.625, 3352), (1.625, 3047), (1.625, 2469), (1.625, 1976), (1.625, 3167), (1.625, 3252), (1.625, 3244), (1.625, 1467), (1.625, 2757), (1.625, 2869), (1.625, 3094), (1.625, 3066), (1.625, 3371), (1.625, 3345), (1.625, 3358), (1.625, 3285), (1.625, 3235), (1.625, 2682), (1.625, 2458), (1.625, 3007), (1.625, 2346), (1.625, 1373), (1.625, 3071), (1.625, 1988), (1.625, 2992), (1.625, 3385), (1.625, 3057), (1.625, 3306), (1.625, 2694), (1.625, 2450), (1.625, 3230), (1.625, 3162), (1.625, 2612), (1.625, 2189), (1.625, 2678), (1.625, 3232), (1.625, 3040), (1.625, 3356), (1.625, 2060), (1.625, 3233), (1.625, 3104), (1.625, 3353), (1.625, 3189), (1.625, 3191), (1.625, 3133), (1.625, 3350), (1.625, 2531), (1.625, 2930), (1.625, 3343), (1.625, 3022), (1.625, 3334), (1.625, 2988), (1.625, 2074), (1.625, 2856), (1.625, 2751), (1.625, 3120), (1.625, 2761), (1.625, 3351), (1.625, 3368), (1.625, 3274), (1.625, 3216), (1.625, 3349), (1.625, 2653), (1.625, 3001), (1.625, 2320), (1.625, 2868), (1.625, 3126), (1.625, 1983), (1.625, 2505), (1.625, 2485), (1.625, 2996), (1.625, 3088), (1.625, 3205), (1.625, 2083), (1.625, 3354), (1.625, 3270), (1.625, 3087), (1.625, 3384), (1.625, 2187), (1.625, 3249), (1.625, 3056), (1.625, 3081), (1.625, 2599), (1.625, 3333), (1.625, 3254), (1.625, 2090), (1.625, 3152), (1.625, 2688), (1.625, 3187), (1.625, 3046), (1.625, 3279), (1.125, 3381), (0.2, 3340)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 1979
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2421
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2765
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2686
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 32]
[Computing fitness]
[(1.625, 3038), (1.625, 3271), (1.625, 3365), (1.625, 2417), (1.625, 3466), (1.625, 3201), (1.625, 3077), (1.625, 3433), (1.625, 2798), (1.625, 3416), (1.625, 2224), (1.625, 3435), (1.625, 3195), (1.625, 3476), (1.625, 3357), (1.625, 3108), (1.625, 3405), (1.625, 3338), (1.625, 2592), (1.625, 2572), (1.625, 3002), (1.625, 3239), (1.625, 3150), (1.625, 3453), (1.625, 3211), (1.625, 3403), (1.625, 3417), (1.625, 3429), (1.625, 2715), (1.625, 3362), (1.625, 3360), (1.625, 3266), (1.625, 3226), (1.625, 2726), (1.625, 1464), (1.625, 2871), (1.625, 2111), (1.625, 3261), (1.625, 3341), (1.625, 3444), (1.625, 3432), (1.625, 3421), (1.625, 3005), (1.625, 3144), (1.625, 3345), (1.625, 3456), (1.625, 3096), (1.625, 2354), (1.625, 3113), (1.625, 3197), (1.625, 3458), (1.625, 1750), (1.625, 3231), (1.625, 3469), (1.625, 3321), (1.625, 2931), (1.625, 3103), (1.625, 3175), (1.625, 3355), (1.625, 3117), (1.625, 3475), (1.625, 3424), (1.625, 3149), (1.625, 3326), (1.625, 3441), (1.625, 3372), (1.625, 3419), (1.625, 2499), (1.625, 3044), (1.625, 3332), (1.625, 2384), (1.625, 3330), (1.625, 3409), (1.625, 2928), (1.625, 3146), (1.625, 3159), (1.625, 3192), (1.625, 3328), (1.625, 2073), (1.625, 2704), (1.625, 3298), (1.625, 3086), (1.625, 2729), (1.625, 1845), (1.625, 3042), (1.625, 2456), (1.625, 2157), (1.625, 3155), (1.625, 3285), (1.625, 2036), (1.625, 1847), (1.625, 2528), (1.625, 3147), (1.625, 3461), (1.625, 2810), (1.625, 3335), (1.625, 3059), (1.625, 2833), (1.625, 3406), (1.625, 2765), (1.625, 3248), (1.625, 3486), (1.625, 2946), (1.625, 3337), (1.625, 2206), (1.625, 2959), (1.625, 3055), (1.625, 3034), (1.625, 3399), (1.625, 3102), (1.625, 2781), (1.625, 3307), (1.625, 2757), (1.625, 2375), (1.625, 2718), (1.625, 3401), (1.625, 3268), (1.625, 3140), (1.625, 2184), (1.625, 3348), (1.625, 3471), (1.625, 3329), (1.625, 3290), (1.625, 2879), (1.625, 3488), (1.625, 3293), (1.625, 3130), (1.625, 2213), (1.625, 3436), (1.625, 2906), (1.625, 3415), (1.625, 3483), (1.625, 2640), (1.625, 3183), (1.625, 2515), (1.625, 2623), (1.625, 2534), (1.625, 3134), (1.625, 3092), (1.625, 3371), (1.625, 2608), (1.625, 2606), (1.625, 2978), (1.625, 3289), (1.625, 2619), (1.625, 3402), (1.625, 2637), (1.625, 2752), (1.625, 3129), (1.625, 3203), (1.625, 3190), (1.625, 3400), (1.625, 2050), (1.625, 3012), (1.625, 3442), (1.625, 3467), (1.625, 2990), (1.625, 3303), (1.625, 3018), (1.625, 2912), (1.625, 2754), (1.625, 2724), (1.625, 2723), (1.625, 2739), (1.625, 2321), (1.625, 3361), (1.625, 3127), (1.625, 3305), (1.625, 3323), (1.625, 3280), (1.625, 3375), (1.625, 3287), (1.625, 2712), (1.625, 3066), (1.625, 2921), (1.625, 2935), (1.625, 3392), (1.625, 2660), (1.625, 3094), (1.625, 2054), (1.625, 3288), (1.625, 2317), (1.625, 3017), (1.625, 3264), (1.625, 3438), (1.625, 3220), (1.625, 2335), (1.625, 2620), (1.625, 2701), (1.625, 3212), (1.625, 3253), (1.625, 3465), (1.625, 3158), (1.625, 2843), (1.625, 2553), (1.625, 3427), (1.625, 1976), (1.625, 3454), (1.625, 3098), (1.625, 3188), (1.625, 2720), (1.625, 3477), (1.625, 3358), (1.625, 3156), (1.625, 3184), (1.625, 3070), (1.625, 2730), (1.625, 3295), (1.625, 2749), (1.625, 2106), (1.625, 3029), (1.625, 3213), (1.625, 3165), (1.625, 2854), (1.625, 3176), (1.625, 3198), (1.625, 3382), (1.625, 3101), (1.625, 2869), (1.625, 3364), (1.625, 3116), (1.625, 3052), (1.625, 2310), (1.625, 3377), (1.625, 2358), (1.625, 2914), (1.625, 3214), (1.625, 3167), (1.625, 3418), (1.625, 3259), (1.625, 2910), (1.625, 3064), (1.625, 3325), (1.625, 2082), (1.625, 2772), (1.625, 3412), (1.625, 3485), (1.625, 3394), (1.625, 3294), (1.625, 3396), (1.625, 3202), (1.625, 3255), (1.625, 3206), (1.625, 3300), (1.625, 2957), (1.625, 2198), (1.625, 2444), (1.625, 3037), (1.625, 3243), (1.625, 3157), (1.625, 3238), (1.625, 3452), (1.625, 3252), (1.625, 3222), (1.625, 2548), (1.625, 2291), (1.625, 3487), (1.625, 3032), (1.625, 2642), (1.625, 1662), (1.625, 3314), (1.625, 3320), (1.625, 2995), (1.625, 2932), (1.625, 2234), (1.625, 2400), (1.625, 3318), (1.625, 3455), (1.625, 2471), (1.625, 2167), (1.625, 3123), (1.625, 3297), (1.625, 3464), (1.625, 3124), (1.625, 3122), (1.625, 3219), (1.625, 3257), (1.625, 3481), (1.625, 3410), (1.625, 2180), (1.625, 2193), (1.625, 2614), (1.625, 3276), (1.625, 3196), (1.625, 2352), (1.625, 2500), (1.625, 2880), (1.625, 2915), (1.625, 2615), (1.625, 3199), (1.625, 2433), (1.625, 2586), (1.625, 3324), (1.625, 3447), (1.625, 2719), (1.625, 2494), (1.625, 3283), (1.625, 3386), (1.625, 3181), (1.625, 3449), (1.625, 3296), (1.625, 3041), (1.625, 3050), (1.625, 3388), (1.625, 3235), (1.625, 3312), (1.625, 2093), (1.625, 3221), (1.625, 2929), (1.625, 1979), (1.625, 3225), (1.625, 3367), (1.625, 3379), (1.625, 2925), (1.625, 3047), (1.625, 3051), (1.625, 3450), (1.625, 3262), (1.625, 3316), (1.625, 3148), (1.625, 2686), (1.625, 3370), (1.625, 2927), (1.625, 2268), (1.625, 3208), (1.625, 3445), (1.625, 2469), (1.625, 3141), (1.625, 3076), (1.625, 3079), (1.625, 3163), (1.625, 3366), (1.625, 3277), (1.625, 3026), (1.625, 3344), (1.625, 3378), (1.625, 2570), (1.625, 3054), (1.625, 3301), (1.625, 3352), (1.625, 2714), (1.625, 2371), (1.625, 3317), (1.625, 2902), (1.625, 3161), (1.625, 3404), (1.625, 2984), (1.625, 2071), (1.625, 1560), (1.625, 3309), (1.625, 2211), (1.625, 3256), (1.625, 1851), (1.625, 2513), (1.625, 3347), (1.625, 2077), (1.625, 3281), (1.625, 3374), (1.625, 2987), (1.625, 3439), (1.625, 1467), (1.625, 2421), (1.625, 3310), (1.625, 3387), (1.625, 3391), (1.625, 3426), (1.625, 2835), (1.625, 3313), (1.625, 2562), (1.625, 3049), (1.625, 2506), (1.625, 3411), (1.625, 2710), (1.625, 3408), (1.625, 3068), (1.625, 3336), (1.625, 2713), (1.625, 3468), (1.625, 2682), (1.625, 3473), (1.625, 3063), (1.625, 3062), (1.625, 3090), (1.625, 3236), (1.625, 3304), (1.625, 3463), (1.625, 2369), (1.625, 3425), (1.625, 3413), (1.625, 3319), (1.625, 3443), (1.625, 2975), (1.625, 3244), (1.625, 2613), (1.125, 3431), (1.125, 3398), (1.125, 3460), (1.125, 3390), (0.2, 3479), (0.2, 3423)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3038
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3365
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2417
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3466
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 33]
[Computing fitness]
[(1.625, 3491), (1.625, 3498), (1.625, 2534), (1.625, 3184), (1.625, 3037), (1.625, 2193), (1.625, 2720), (1.625, 3199), (1.625, 3190), (1.625, 3557), (1.625, 3567), (1.625, 2213), (1.625, 3214), (1.625, 3386), (1.625, 3506), (1.625, 3488), (1.625, 3329), (1.625, 3002), (1.625, 3483), (1.625, 3461), (1.625, 3371), (1.625, 3130), (1.625, 3123), (1.625, 2772), (1.625, 3348), (1.625, 3059), (1.625, 3261), (1.625, 3094), (1.625, 3515), (1.625, 3144), (1.625, 3220), (1.625, 3465), (1.625, 2400), (1.625, 3167), (1.625, 3560), (1.625, 2726), (1.625, 3355), (1.625, 3401), (1.625, 3528), (1.625, 3512), (1.625, 3511), (1.625, 2765), (1.625, 2929), (1.625, 2880), (1.625, 3573), (1.625, 3086), (1.625, 3392), (1.625, 3565), (1.625, 3388), (1.625, 3149), (1.625, 3403), (1.625, 3044), (1.625, 3271), (1.625, 3157), (1.625, 3469), (1.625, 3134), (1.625, 3471), (1.625, 3495), (1.625, 3042), (1.625, 3505), (1.625, 3578), (1.625, 3312), (1.625, 3534), (1.625, 3419), (1.625, 2310), (1.625, 3418), (1.625, 3147), (1.625, 3116), (1.625, 3513), (1.625, 2833), (1.625, 2910), (1.625, 3248), (1.625, 2224), (1.625, 3257), (1.625, 3296), (1.625, 3124), (1.625, 3394), (1.625, 3481), (1.625, 2995), (1.625, 3289), (1.625, 3364), (1.625, 3464), (1.625, 3226), (1.625, 3449), (1.625, 3427), (1.625, 3103), (1.625, 3321), (1.625, 3066), (1.625, 3409), (1.625, 2456), (1.625, 3429), (1.625, 3176), (1.625, 2082), (1.625, 2935), (1.625, 2925), (1.625, 2234), (1.625, 2869), (1.625, 3146), (1.625, 2843), (1.625, 3047), (1.625, 3316), (1.625, 3208), (1.625, 3531), (1.625, 2291), (1.625, 3307), (1.625, 3432), (1.625, 2384), (1.625, 2417), (1.625, 2500), (1.625, 3041), (1.625, 2358), (1.625, 2471), (1.625, 3441), (1.625, 3113), (1.625, 3524), (1.625, 2614), (1.625, 3581), (1.625, 3542), (1.625, 3433), (1.625, 3438), (1.625, 3324), (1.625, 3293), (1.625, 3252), (1.625, 3530), (1.625, 2206), (1.625, 3580), (1.625, 3442), (1.625, 3494), (1.625, 3148), (1.625, 2553), (1.625, 2620), (1.625, 2798), (1.625, 3399), (1.625, 3222), (1.625, 3559), (1.625, 3238), (1.625, 3231), (1.625, 3197), (1.625, 3357), (1.625, 2739), (1.625, 2317), (1.625, 2073), (1.625, 3532), (1.625, 1750), (1.625, 2444), (1.625, 2660), (1.625, 3285), (1.625, 3496), (1.625, 2757), (1.625, 3203), (1.625, 2036), (1.625, 3266), (1.625, 3034), (1.625, 3032), (1.625, 2615), (1.625, 2054), (1.625, 3017), (1.625, 3338), (1.625, 3070), (1.625, 3555), (1.625, 3050), (1.625, 3447), (1.625, 3196), (1.625, 3155), (1.625, 3370), (1.625, 2180), (1.625, 3206), (1.625, 2921), (1.625, 3548), (1.625, 2548), (1.625, 3502), (1.625, 3159), (1.625, 3406), (1.625, 2912), (1.625, 2715), (1.625, 3450), (1.625, 3562), (1.625, 3192), (1.625, 2749), (1.625, 3558), (1.625, 3221), (1.625, 3276), (1.625, 3497), (1.625, 3475), (1.625, 3405), (1.625, 3444), (1.625, 2730), (1.625, 2375), (1.625, 3547), (1.625, 3552), (1.625, 3064), (1.625, 3544), (1.625, 3509), (1.625, 3554), (1.625, 2927), (1.625, 2321), (1.625, 2198), (1.625, 1845), (1.625, 3424), (1.625, 2433), (1.625, 3412), (1.625, 2572), (1.625, 3536), (1.625, 2915), (1.625, 2640), (1.625, 3415), (1.625, 3587), (1.625, 3158), (1.625, 2931), (1.625, 3537), (1.625, 3183), (1.625, 3365), (1.625, 3288), (1.625, 3213), (1.625, 3466), (1.625, 3298), (1.625, 2106), (1.625, 3493), (1.625, 3335), (1.625, 3417), (1.625, 3377), (1.625, 1464), (1.625, 3522), (1.625, 3122), (1.625, 3402), (1.625, 3268), (1.625, 3556), (1.625, 3005), (1.625, 3540), (1.625, 3453), (1.625, 3235), (1.625, 3435), (1.625, 3410), (1.625, 2990), (1.625, 3538), (1.625, 3345), (1.625, 3452), (1.625, 1979), (1.625, 2111), (1.625, 3328), (1.625, 3577), (1.625, 2050), (1.625, 2906), (1.625, 3140), (1.625, 3098), (1.625, 3195), (1.625, 3264), (1.625, 1976), (1.625, 3303), (1.625, 3510), (1.625, 2704), (1.625, 3362), (1.625, 3332), (1.625, 3330), (1.625, 2623), (1.625, 3323), (1.625, 3360), (1.625, 3400), (1.625, 3337), (1.625, 3219), (1.625, 3507), (1.625, 3458), (1.625, 3253), (1.625, 2718), (1.625, 3175), (1.625, 3529), (1.625, 1847), (1.625, 3525), (1.625, 3454), (1.625, 3574), (1.625, 2608), (1.625, 3416), (1.625, 3361), (1.625, 2184), (1.625, 2719), (1.625, 2854), (1.625, 3280), (1.625, 2959), (1.625, 2499), (1.625, 3150), (1.625, 3297), (1.625, 3202), (1.625, 3239), (1.625, 3546), (1.625, 3165), (1.625, 3102), (1.625, 3294), (1.625, 3485), (1.625, 2723), (1.625, 2978), (1.625, 2928), (1.625, 3382), (1.625, 3518), (1.625, 3570), (1.625, 3476), (1.625, 3096), (1.625, 2701), (1.625, 2957), (1.625, 2619), (1.625, 3571), (1.625, 3012), (1.625, 3300), (1.625, 2932), (1.625, 3549), (1.625, 3318), (1.625, 3287), (1.625, 2167), (1.625, 3421), (1.625, 3259), (1.625, 3201), (1.625, 2729), (1.625, 2268), (1.625, 2946), (1.625, 3326), (1.625, 2528), (1.625, 3564), (1.625, 2157), (1.625, 2712), (1.625, 2093), (1.625, 3489), (1.625, 3198), (1.625, 3052), (1.625, 3129), (1.625, 3584), (1.625, 3455), (1.625, 3576), (1.625, 2494), (1.625, 3553), (1.625, 3486), (1.625, 3212), (1.625, 2914), (1.625, 2637), (1.625, 2871), (1.625, 3396), (1.625, 3211), (1.625, 2335), (1.625, 3320), (1.625, 2724), (1.625, 3467), (1.625, 3255), (1.625, 3379), (1.625, 1662), (1.625, 3516), (1.625, 2879), (1.625, 3018), (1.625, 3487), (1.625, 3341), (1.625, 2586), (1.625, 2781), (1.625, 3367), (1.625, 3243), (1.625, 3504), (1.625, 3283), (1.625, 3585), (1.625, 3372), (1.625, 3456), (1.625, 2352), (1.625, 3225), (1.625, 3108), (1.625, 3314), (1.625, 3520), (1.625, 3572), (1.625, 2606), (1.625, 2752), (1.625, 3181), (1.625, 3029), (1.625, 3092), (1.625, 3156), (1.625, 3077), (1.625, 3358), (1.625, 3535), (1.625, 3375), (1.625, 3055), (1.625, 3526), (1.625, 3188), (1.625, 3117), (1.625, 2592), (1.625, 3101), (1.625, 3550), (1.625, 3290), (1.625, 3519), (1.625, 2515), (1.625, 2810), (1.625, 2686), (1.625, 2754), (1.625, 3325), (1.625, 3568), (1.625, 3436), (1.625, 3038), (1.625, 3295), (1.625, 3477), (1.625, 2354), (1.625, 3262), (1.625, 3514), (1.625, 3305), (1.625, 3127), (1.625, 2642), (1.625, 3582), (1.625, 3051), (0.2, 3500)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3491
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2534
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3037
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Generation 34]
[Computing fitness]
[(1.625, 3259), (1.625, 2715), (1.625, 3449), (1.625, 3271), (1.625, 3454), (1.625, 3562), (1.625, 2054), (1.625, 2798), (1.625, 3017), (1.625, 3495), (1.625, 3636), (1.625, 3289), (1.625, 2499), (1.625, 2050), (1.625, 3444), (1.625, 2444), (1.625, 3609), (1.625, 2224), (1.625, 3294), (1.625, 3614), (1.625, 3656), (1.625, 3213), (1.625, 3466), (1.625, 3175), (1.625, 3122), (1.625, 3264), (1.625, 2712), (1.625, 3610), (1.625, 2925), (1.625, 3673), (1.625, 3329), (1.625, 3644), (1.625, 3584), (1.625, 2321), (1.625, 2620), (1.625, 3409), (1.625, 3418), (1.625, 3355), (1.625, 3032), (1.625, 3146), (1.625, 3041), (1.625, 3597), (1.625, 3498), (1.625, 3633), (1.625, 2500), (1.625, 3589), (1.625, 2723), (1.625, 3235), (1.625, 3464), (1.625, 3525), (1.625, 3491), (1.625, 3453), (1.625, 2548), (1.625, 3671), (1.625, 3488), (1.625, 3565), (1.625, 3203), (1.625, 3307), (1.625, 3538), (1.625, 3047), (1.625, 3510), (1.625, 2910), (1.625, 2995), (1.625, 2106), (1.625, 3328), (1.625, 1847), (1.625, 3518), (1.625, 3532), (1.625, 3672), (1.625, 2932), (1.625, 3400), (1.625, 3668), (1.625, 3626), (1.625, 3630), (1.625, 2093), (1.625, 3201), (1.625, 2765), (1.625, 3239), (1.625, 3669), (1.625, 2906), (1.625, 3573), (1.625, 2929), (1.625, 3012), (1.625, 3627), (1.625, 3197), (1.625, 3658), (1.625, 3534), (1.625, 3604), (1.625, 3394), (1.625, 2375), (1.625, 3202), (1.625, 3660), (1.625, 3556), (1.625, 2730), (1.625, 3098), (1.625, 3165), (1.625, 3438), (1.625, 2931), (1.625, 3542), (1.625, 3296), (1.625, 3682), (1.625, 2927), (1.625, 3417), (1.625, 3410), (1.625, 3316), (1.625, 3362), (1.625, 3388), (1.625, 2757), (1.625, 3183), (1.625, 2534), (1.625, 3634), (1.625, 3559), (1.625, 3293), (1.625, 3620), (1.625, 2572), (1.625, 2749), (1.625, 3252), (1.625, 3220), (1.625, 3469), (1.625, 2701), (1.625, 2456), (1.625, 2935), (1.625, 3681), (1.625, 2623), (1.625, 3102), (1.625, 2310), (1.625, 3662), (1.625, 3424), (1.625, 3613), (1.625, 2946), (1.625, 3588), (1.625, 3268), (1.625, 2915), (1.625, 3594), (1.625, 3679), (1.625, 3157), (1.625, 2384), (1.625, 3593), (1.625, 3377), (1.625, 3324), (1.625, 3608), (1.625, 3312), (1.625, 2912), (1.625, 3196), (1.625, 3558), (1.625, 3515), (1.625, 2206), (1.625, 2660), (1.625, 3199), (1.625, 3547), (1.625, 3399), (1.625, 3222), (1.625, 3005), (1.625, 3421), (1.625, 3511), (1.625, 3680), (1.625, 3580), (1.625, 2291), (1.625, 2615), (1.625, 3502), (1.625, 3546), (1.625, 3617), (1.625, 3461), (1.625, 3144), (1.625, 2400), (1.625, 3195), (1.625, 3318), (1.625, 3548), (1.625, 2528), (1.625, 3129), (1.625, 3337), (1.625, 3159), (1.625, 2729), (1.625, 3287), (1.625, 3632), (1.625, 3402), (1.625, 3113), (1.625, 3528), (1.625, 2471), (1.625, 3683), (1.625, 3261), (1.625, 2268), (1.625, 3524), (1.625, 2358), (1.625, 3096), (1.625, 3403), (1.625, 3147), (1.625, 3130), (1.625, 3618), (1.625, 3257), (1.625, 3458), (1.625, 1464), (1.625, 3616), (1.625, 3332), (1.625, 3455), (1.625, 3670), (1.625, 3357), (1.625, 2719), (1.625, 3522), (1.625, 3442), (1.625, 3476), (1.625, 2193), (1.625, 3574), (1.625, 3303), (1.625, 3288), (1.625, 2880), (1.625, 3592), (1.625, 3506), (1.625, 3103), (1.625, 3540), (1.625, 3675), (1.625, 3599), (1.625, 3419), (1.625, 3386), (1.625, 3622), (1.625, 2608), (1.625, 2843), (1.625, 3238), (1.625, 3226), (1.625, 3465), (1.625, 3549), (1.625, 3371), (1.625, 2167), (1.625, 3485), (1.625, 3654), (1.625, 3198), (1.625, 3416), (1.625, 3489), (1.625, 3149), (1.625, 3150), (1.625, 3330), (1.625, 3412), (1.625, 3647), (1.625, 3531), (1.625, 3231), (1.625, 3323), (1.625, 3280), (1.625, 3471), (1.625, 3450), (1.625, 3481), (1.625, 3578), (1.625, 3116), (1.625, 2854), (1.625, 3552), (1.625, 3155), (1.625, 2184), (1.625, 3285), (1.625, 3297), (1.625, 3392), (1.625, 3382), (1.625, 3208), (1.625, 3564), (1.625, 3176), (1.625, 2036), (1.625, 3624), (1.625, 3598), (1.625, 2619), (1.625, 3158), (1.625, 3684), (1.625, 3190), (1.625, 3148), (1.625, 3555), (1.625, 2833), (1.625, 2990), (1.625, 3635), (1.625, 3587), (1.625, 3266), (1.625, 1976), (1.625, 3615), (1.625, 3441), (1.625, 3512), (1.625, 3086), (1.625, 3214), (1.625, 3560), (1.625, 3070), (1.625, 3253), (1.625, 3497), (1.625, 2082), (1.625, 1979), (1.625, 3659), (1.625, 3433), (1.625, 2772), (1.625, 3631), (1.625, 2704), (1.625, 2718), (1.625, 3505), (1.625, 3509), (1.625, 3037), (1.625, 3044), (1.625, 3365), (1.625, 3652), (1.625, 3405), (1.625, 3570), (1.625, 2417), (1.625, 3401), (1.625, 3621), (1.625, 2928), (1.625, 3192), (1.625, 3052), (1.625, 3640), (1.625, 3361), (1.625, 3059), (1.625, 3435), (1.625, 2739), (1.625, 2614), (1.625, 3554), (1.625, 3452), (1.625, 2959), (1.625, 3184), (1.625, 3042), (1.625, 3447), (1.625, 3513), (1.625, 3124), (1.625, 3496), (1.625, 3034), (1.625, 3321), (1.625, 3276), (1.625, 2180), (1.625, 2198), (1.625, 1845), (1.625, 3094), (1.625, 3493), (1.625, 3348), (1.625, 3300), (1.625, 3612), (1.625, 2157), (1.625, 3676), (1.625, 3571), (1.625, 3345), (1.625, 3649), (1.625, 3066), (1.625, 3002), (1.625, 2433), (1.625, 2640), (1.625, 2726), (1.625, 2921), (1.625, 3123), (1.625, 3219), (1.625, 3429), (1.625, 3364), (1.625, 3483), (1.625, 3628), (1.625, 3415), (1.625, 3645), (1.625, 2978), (1.625, 3650), (1.625, 3602), (1.625, 3248), (1.625, 3167), (1.625, 3370), (1.625, 3536), (1.625, 2317), (1.625, 3646), (1.625, 3298), (1.625, 3667), (1.625, 3134), (1.625, 2553), (1.625, 3581), (1.625, 3406), (1.625, 3663), (1.625, 2957), (1.625, 3064), (1.625, 3661), (1.625, 3050), (1.625, 2111), (1.625, 3544), (1.625, 3432), (1.625, 2869), (1.625, 3338), (1.625, 3601), (1.625, 3360), (1.625, 3206), (1.625, 2213), (1.625, 3326), (1.625, 3567), (1.625, 3537), (1.625, 3335), (1.625, 3600), (1.625, 2073), (1.625, 3475), (1.625, 1750), (1.625, 3494), (1.625, 3221), (1.625, 3596), (1.625, 3557), (1.625, 3678), (1.625, 2720), (1.625, 2234), (1.625, 3507), (1.625, 3530), (1.625, 3140), (1.625, 3577), (1.625, 3529), (1.625, 3427), (1.625, 3629), (1.125, 3591), (0.2, 3606), (0.2, 3665), (0.2, 3642), (0.2, 3638)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3259
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 2715
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3449
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 3454
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y x)) (* y 3)))
 nr_nodes: 10]
[Algorithm end]
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* y x)) (* (* 3 y) (+ 3 x))))
 nr_nodes: 14]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (+ (* x 3) (+ 3 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* 3 y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`3`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* x (+ (* (* x 3) y) 3))))
 nr_nodes: 12]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 y) (+ x 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`3`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 3 3) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x y) (* x y)) (+ x 3)))
 nr_nodes: 12]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (+ y (* x y))) (* (+ 3 y) y)) y))
 nr_nodes: 16]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`(* ? ?)`3`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* x (+ 3 (* 3 (* 3 x))))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 y) (+ (+ 3 y) (* y (* x x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* 3 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ 3 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`3`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (+ (+ 3 3) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ 3 x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`3`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ 3 x)) (* x (* y x))))
 nr_nodes: 12]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 3) (* y 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 y) (+ (* y (* (+ y x) (* y 3))) y)))
 nr_nodes: 16]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`3`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y 3) (* (* (+ x y) y) x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ (+ x 3) 3)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 3) (* (* (* (* x y) (+ y y)) 3) 3)))
 nr_nodes: 16]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ x 3)) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`3`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* 3 (* 3 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y x) (* x y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 x) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`3`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`3`#`#`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 3 x) (* x (* (+ (+ 3 3) (+ 3 x)) y))))
 nr_nodes: 16]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* 3 y)) (+ y (* (* (* x y) (+ x 3)) 3))))
 nr_nodes: 18]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`3`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* 3 3)) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`y`#`#`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (+ 3 y) 3) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 3 x) (* (+ y (* y 3)) x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 3 y) x) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) y) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 3 y) x) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x 3))
 nr_nodes: 4]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`3`#`#`(+ ? ?)`(* ? ?)`3`#`#`x`#`#`x`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (+ (* y y) (+ y 3)) (+ (* 3 x) x)) x) 3))
 nr_nodes: 18]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`3`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 3 x) (+ 3 (+ y (* x x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 3) 3))
 nr_nodes: 6]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* x 3) (+ y 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`(+ ? ?)`y`#`#`3`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (+ x 3) (+ y 3)) x) x))
 nr_nodes: 12]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`3`#`#`3`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 3 3) (* x y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (* 3 x) (+ x 3))))
 nr_nodes: 10]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`3`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 3 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* y 3)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y 3) y))
 nr_nodes: 6]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`y`#`#`3`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 3 (+ y 3)) 3) x))
 nr_nodes: 10]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`3`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* 3 (+ 3 y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 (* 3 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`3`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ (+ 3 y) 3) y)) y))
 nr_nodes: 12]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* y y) y) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* y y)) (+ (* y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* (* x x) (* x x)) x) y) y))
 nr_nodes: 14]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`3`#`#`(* ? ?)`3`#`#`(+ ? ?)`3`#`#`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`3`#`#`3`#`#`3`#`#`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 3 (* 3 (+ 3 x))) (+ y (* (+ (* 3 3) 3) (+ y (+ y 3)))))))
 nr_nodes: 24]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(+ ? ?)`y`#`#`3`#`#`(+ ? ?)`(+ ? ?)`y`#`#`3`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* (* 3 y) (+ y 3)) (+ (+ y 3) (* x x)))))
 nr_nodes: 18]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (+ 3 (+ y (* x (+ y 3))))))
 nr_nodes: 14]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 3 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ x 3)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ 3 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ 3 (+ 3 y))) x))
 nr_nodes: 10]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 3) (* y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`3`#`#`(+ ? ?)`(* ? ?)`y`#`#`3`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) 3) (+ (* y 3) (* x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`3`#`#`(+ ? ?)`3`#`#`x`#`#`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 3 (+ 3 x)) (+ y 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ y (* (+ y 3) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 3) y))
 nr_nodes: 6]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`3`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x 3) x) x))
 nr_nodes: 8]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`3`#`#`y`#`#`(* ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* x (* (* 3 y) (* 3 x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`3`#`#`y`#`#`(* ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (+ 3 y)) (* y 3)))
 nr_nodes: 12]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* 3 x) 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`3`#`#`(+ ? ?)`(* ? ?)`3`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* 3 (+ (* 3 (+ (* 3 (+ x x)) (+ y (+ y y)))) (+ x (* x 3)))))
 nr_nodes: 22]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* y (* x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ 3 3))
 nr_nodes: 4]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`3`#`#`3`#`#`(* ? ?)`3`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ (+ (* x (* 3 3)) (* 3 x)) (+ (+ (* y x) x) 3))) x))
 nr_nodes: 22]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ y 3))
 nr_nodes: 4]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 3 3)))
 nr_nodes: 6]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`3`#`#`#
 s_expr: (defun my_func (x y) 3)
 nr_nodes: 2]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 3 y))
 nr_nodes: 4]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 3) (+ 3 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 3) x))
 nr_nodes: 6]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`3`#`#`(* ? ?)`x`#`#`3`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* 3 (* x 3)) 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`(+ ? ?)`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 3 x))
 nr_nodes: 4]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`3`#`#`(* ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* (+ x 3) (* 3 x))) y))
 nr_nodes: 12]
[Generation 0]
[Computing fitness]
[(1.375, 264), (1.25, 42), (1.25, 72), (1.25, 90), (1.25, 184), (1.25, 185), (1.25, 299), (1.25, 358), (1.25, 371), (1.125, 18), (1.125, 27), (1.125, 28), (1.125, 58), (1.125, 67), (1.125, 75), (1.125, 127), (1.125, 132), (1.125, 156), (1.125, 162), (1.125, 173), (1.125, 199), (1.125, 212), (1.125, 216), (1.125, 232), (1.125, 251), (1.125, 262), (1.125, 326), (1.125, 334), (1.125, 343), (1.125, 349), (1.125, 397), (1.0, 6), (1.0, 105), (1.0, 176), (1.0, 242), (1.0, 339), (1.0, 395), (0.7083333333333333, 11), (0.5833333333333333, 183), (0.5833333333333333, 190), (0.5833333333333333, 200), (0.5833333333333333, 215), (0.5833333333333333, 253), (0.5833333333333333, 303), (0.5833333333333333, 307), (0.5833333333333333, 310), (0.575, 41), (0.575, 240), (0.575, 269), (0.575, 394), (0.4583333333333333, 8), (0.4583333333333333, 29), (0.4583333333333333, 31), (0.4583333333333333, 56), (0.4583333333333333, 92), (0.4583333333333333, 115), (0.4583333333333333, 158), (0.4583333333333333, 195), (0.4583333333333333, 211), (0.4583333333333333, 239), (0.4583333333333333, 263), (0.4583333333333333, 285), (0.4583333333333333, 293), (0.4583333333333333, 346), (0.4583333333333333, 352), (0.4583333333333333, 355), (0.4583333333333333, 365), (0.4583333333333333, 391), (0.4583333333333333, 396), (0.4583333333333333, 399), (0.45, 134), (0.45, 152), (0.45, 154), (0.45, 191), (0.45, 225), (0.45, 281), (0.45, 283), (0.45, 328), (0.45, 344), (0.45, 359), (0.39285714285714285, 1), (0.39285714285714285, 3), (0.39285714285714285, 5), (0.39285714285714285, 9), (0.39285714285714285, 10), (0.39285714285714285, 12), (0.39285714285714285, 14), (0.39285714285714285, 21), (0.39285714285714285, 32), (0.39285714285714285, 33), (0.39285714285714285, 34), (0.39285714285714285, 35), (0.39285714285714285, 39), (0.39285714285714285, 44), (0.39285714285714285, 48), (0.39285714285714285, 50), (0.39285714285714285, 53), (0.39285714285714285, 54), (0.39285714285714285, 55), (0.39285714285714285, 59), (0.39285714285714285, 61), (0.39285714285714285, 62), (0.39285714285714285, 63), (0.39285714285714285, 65), (0.39285714285714285, 66), (0.39285714285714285, 70), (0.39285714285714285, 71), (0.39285714285714285, 74), (0.39285714285714285, 76), (0.39285714285714285, 77), (0.39285714285714285, 79), (0.39285714285714285, 81), (0.39285714285714285, 82), (0.39285714285714285, 83), (0.39285714285714285, 84), (0.39285714285714285, 87), (0.39285714285714285, 89), (0.39285714285714285, 94), (0.39285714285714285, 95), (0.39285714285714285, 96), (0.39285714285714285, 98), (0.39285714285714285, 99), (0.39285714285714285, 100), (0.39285714285714285, 101), (0.39285714285714285, 103), (0.39285714285714285, 106), (0.39285714285714285, 107), (0.39285714285714285, 109), (0.39285714285714285, 110), (0.39285714285714285, 113), (0.39285714285714285, 114), (0.39285714285714285, 116), (0.39285714285714285, 119), (0.39285714285714285, 120), (0.39285714285714285, 121), (0.39285714285714285, 124), (0.39285714285714285, 125), (0.39285714285714285, 126), (0.39285714285714285, 129), (0.39285714285714285, 130), (0.39285714285714285, 131), (0.39285714285714285, 133), (0.39285714285714285, 139), (0.39285714285714285, 140), (0.39285714285714285, 142), (0.39285714285714285, 146), (0.39285714285714285, 153), (0.39285714285714285, 155), (0.39285714285714285, 160), (0.39285714285714285, 166), (0.39285714285714285, 167), (0.39285714285714285, 170), (0.39285714285714285, 172), (0.39285714285714285, 174), (0.39285714285714285, 181), (0.39285714285714285, 182), (0.39285714285714285, 186), (0.39285714285714285, 188), (0.39285714285714285, 189), (0.39285714285714285, 192), (0.39285714285714285, 193), (0.39285714285714285, 196), (0.39285714285714285, 198), (0.39285714285714285, 201), (0.39285714285714285, 203), (0.39285714285714285, 205), (0.39285714285714285, 209), (0.39285714285714285, 213), (0.39285714285714285, 214), (0.39285714285714285, 217), (0.39285714285714285, 220), (0.39285714285714285, 221), (0.39285714285714285, 226), (0.39285714285714285, 229), (0.39285714285714285, 230), (0.39285714285714285, 234), (0.39285714285714285, 237), (0.39285714285714285, 238), (0.39285714285714285, 243), (0.39285714285714285, 247), (0.39285714285714285, 248), (0.39285714285714285, 249), (0.39285714285714285, 261), (0.39285714285714285, 265), (0.39285714285714285, 268), (0.39285714285714285, 273), (0.39285714285714285, 278), (0.39285714285714285, 279), (0.39285714285714285, 280), (0.39285714285714285, 284), (0.39285714285714285, 286), (0.39285714285714285, 287), (0.39285714285714285, 291), (0.39285714285714285, 294), (0.39285714285714285, 300), (0.39285714285714285, 301), (0.39285714285714285, 304), (0.39285714285714285, 306), (0.39285714285714285, 309), (0.39285714285714285, 311), (0.39285714285714285, 313), (0.39285714285714285, 318), (0.39285714285714285, 319), (0.39285714285714285, 321), (0.39285714285714285, 322), (0.39285714285714285, 323), (0.39285714285714285, 324), (0.39285714285714285, 330), (0.39285714285714285, 331), (0.39285714285714285, 332), (0.39285714285714285, 333), (0.39285714285714285, 336), (0.39285714285714285, 347), (0.39285714285714285, 350), (0.39285714285714285, 351), (0.39285714285714285, 353), (0.39285714285714285, 354), (0.39285714285714285, 356), (0.39285714285714285, 357), (0.39285714285714285, 360), (0.39285714285714285, 362), (0.39285714285714285, 366), (0.39285714285714285, 373), (0.39285714285714285, 374), (0.39285714285714285, 375), (0.39285714285714285, 376), (0.39285714285714285, 377), (0.39285714285714285, 378), (0.39285714285714285, 380), (0.39285714285714285, 383), (0.39285714285714285, 387), (0.39285714285714285, 388), (0.3333333333333333, 19), (0.3333333333333333, 73), (0.3333333333333333, 136), (0.3333333333333333, 197), (0.3333333333333333, 210), (0.3333333333333333, 219), (0.3333333333333333, 252), (0.3333333333333333, 315), (0.325, 2), (0.325, 24), (0.325, 25), (0.325, 26), (0.325, 38), (0.325, 40), (0.325, 49), (0.325, 52), (0.325, 91), (0.325, 102), (0.325, 135), (0.325, 144), (0.325, 149), (0.325, 157), (0.325, 161), (0.325, 180), (0.325, 222), (0.325, 223), (0.325, 245), (0.325, 250), (0.325, 258), (0.325, 266), (0.325, 267), (0.325, 274), (0.325, 277), (0.325, 338), (0.325, 341), (0.325, 345), (0.325, 379), (0.325, 386), (0.325, 393), (0.26785714285714285, 36), (0.26785714285714285, 104), (0.26785714285714285, 145), (0.2361111111111111, 150), (0.2361111111111111, 271), (0.20192307692307693, 367), (0.20192307692307693, 385), (0.2, 20), (0.2, 23), (0.2, 30), (0.2, 68), (0.2, 85), (0.2, 88), (0.2, 111), (0.2, 117), (0.2, 123), (0.2, 138), (0.2, 164), (0.2, 168), (0.2, 177), (0.2, 187), (0.2, 208), (0.2, 224), (0.2, 244), (0.2, 246), (0.2, 290), (0.2, 297), (0.2, 312), (0.2, 320), (0.2, 342), (0.2, 381), (0.2, 390), (0.2, 398), (0.14285714285714285, 0), (0.14285714285714285, 4), (0.14285714285714285, 7), (0.14285714285714285, 13), (0.14285714285714285, 15), (0.14285714285714285, 16), (0.14285714285714285, 17), (0.14285714285714285, 22), (0.14285714285714285, 37), (0.14285714285714285, 43), (0.14285714285714285, 45), (0.14285714285714285, 46), (0.14285714285714285, 47), (0.14285714285714285, 51), (0.14285714285714285, 57), (0.14285714285714285, 60), (0.14285714285714285, 64), (0.14285714285714285, 69), (0.14285714285714285, 78), (0.14285714285714285, 80), (0.14285714285714285, 86), (0.14285714285714285, 93), (0.14285714285714285, 97), (0.14285714285714285, 108), (0.14285714285714285, 112), (0.14285714285714285, 118), (0.14285714285714285, 122), (0.14285714285714285, 128), (0.14285714285714285, 137), (0.14285714285714285, 141), (0.14285714285714285, 143), (0.14285714285714285, 147), (0.14285714285714285, 148), (0.14285714285714285, 151), (0.14285714285714285, 159), (0.14285714285714285, 163), (0.14285714285714285, 165), (0.14285714285714285, 169), (0.14285714285714285, 171), (0.14285714285714285, 175), (0.14285714285714285, 178), (0.14285714285714285, 179), (0.14285714285714285, 202), (0.14285714285714285, 204), (0.14285714285714285, 206), (0.14285714285714285, 207), (0.14285714285714285, 218), (0.14285714285714285, 227), (0.14285714285714285, 228), (0.14285714285714285, 231), (0.14285714285714285, 233), (0.14285714285714285, 235), (0.14285714285714285, 236), (0.14285714285714285, 241), (0.14285714285714285, 254), (0.14285714285714285, 255), (0.14285714285714285, 256), (0.14285714285714285, 257), (0.14285714285714285, 259), (0.14285714285714285, 260), (0.14285714285714285, 272), (0.14285714285714285, 275), (0.14285714285714285, 276), (0.14285714285714285, 282), (0.14285714285714285, 288), (0.14285714285714285, 289), (0.14285714285714285, 292), (0.14285714285714285, 295), (0.14285714285714285, 296), (0.14285714285714285, 298), (0.14285714285714285, 302), (0.14285714285714285, 305), (0.14285714285714285, 308), (0.14285714285714285, 314), (0.14285714285714285, 316), (0.14285714285714285, 317), (0.14285714285714285, 325), (0.14285714285714285, 327), (0.14285714285714285, 329), (0.14285714285714285, 335), (0.14285714285714285, 337), (0.14285714285714285, 340), (0.14285714285714285, 348), (0.14285714285714285, 361), (0.14285714285714285, 363), (0.14285714285714285, 364), (0.14285714285714285, 368), (0.14285714285714285, 369), (0.14285714285714285, 370), (0.14285714285714285, 372), (0.14285714285714285, 382), (0.14285714285714285, 384), (0.14285714285714285, 389), (0.14285714285714285, 392), (0.1111111111111111, 194), (0.06666666666666667, 270)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`3`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ 3 x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`3`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ (+ x 3) 3)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) y) x))
 nr_nodes: 8]
[Generation 1]
[Computing fitness]
[(1.375, 264), (1.375, 425), (1.375, 430), (1.25, 185), (1.25, 358), (1.25, 402), (1.25, 299), (1.25, 371), (1.25, 407), (1.25, 90), (1.25, 72), (1.25, 184), (1.25, 42), (1.125, 415), (1.125, 326), (1.125, 216), (1.125, 127), (1.125, 162), (1.125, 28), (1.125, 343), (1.125, 418), (1.125, 58), (1.125, 417), (1.125, 262), (1.125, 173), (1.125, 397), (1.125, 199), (1.125, 416), (1.125, 232), (1.125, 212), (1.125, 132), (1.125, 349), (1.125, 334), (1.125, 27), (1.125, 75), (1.125, 18), (1.125, 420), (1.125, 156), (1.125, 67), (1.125, 251), (1.125, 424), (1.0, 411), (1.0, 176), (1.0, 423), (1.0, 242), (1.0, 6), (1.0, 404), (1.0, 105), (1.0, 421), (1.0, 395), (1.0, 339), (1.0, 445), (0.7083333333333333, 11), (0.5833333333333333, 439), (0.5833333333333333, 419), (0.5833333333333333, 215), (0.5833333333333333, 437), (0.5833333333333333, 303), (0.5833333333333333, 310), (0.5833333333333333, 307), (0.5833333333333333, 183), (0.5833333333333333, 190), (0.5833333333333333, 435), (0.5833333333333333, 200), (0.5833333333333333, 253), (0.575, 240), (0.575, 394), (0.575, 432), (0.575, 41), (0.575, 269), (0.4583333333333333, 29), (0.4583333333333333, 115), (0.4583333333333333, 444), (0.4583333333333333, 427), (0.4583333333333333, 56), (0.4583333333333333, 158), (0.4583333333333333, 92), (0.4583333333333333, 405), (0.4583333333333333, 365), (0.4583333333333333, 239), (0.4583333333333333, 355), (0.4583333333333333, 195), (0.4583333333333333, 263), (0.4583333333333333, 399), (0.4583333333333333, 285), (0.4583333333333333, 414), (0.4583333333333333, 31), (0.4583333333333333, 409), (0.4583333333333333, 446), (0.4583333333333333, 441), (0.4583333333333333, 293), (0.4583333333333333, 211), (0.4583333333333333, 346), (0.4583333333333333, 8), (0.4583333333333333, 412), (0.4583333333333333, 396), (0.4583333333333333, 391), (0.4583333333333333, 436), (0.4583333333333333, 442), (0.4583333333333333, 352), (0.45, 452), (0.45, 454), (0.45, 400), (0.45, 434), (0.45, 152), (0.45, 344), (0.45, 134), (0.45, 448), (0.45, 283), (0.45, 447), (0.45, 328), (0.45, 225), (0.45, 281), (0.45, 154), (0.45, 359), (0.45, 191), (0.39285714285714285, 248), (0.39285714285714285, 172), (0.39285714285714285, 350), (0.39285714285714285, 106), (0.39285714285714285, 124), (0.39285714285714285, 238), (0.39285714285714285, 3), (0.39285714285714285, 125), (0.39285714285714285, 220), (0.39285714285714285, 322), (0.39285714285714285, 479), (0.39285714285714285, 61), (0.39285714285714285, 116), (0.39285714285714285, 487), (0.39285714285714285, 458), (0.39285714285714285, 198), (0.39285714285714285, 498), (0.39285714285714285, 167), (0.39285714285714285, 55), (0.39285714285714285, 54), (0.39285714285714285, 490), (0.39285714285714285, 483), (0.39285714285714285, 100), (0.39285714285714285, 284), (0.39285714285714285, 9), (0.39285714285714285, 478), (0.39285714285714285, 10), (0.39285714285714285, 126), (0.39285714285714285, 113), (0.39285714285714285, 461), (0.39285714285714285, 278), (0.39285714285714285, 50), (0.39285714285714285, 476), (0.39285714285714285, 214), (0.39285714285714285, 76), (0.39285714285714285, 193), (0.39285714285714285, 133), (0.39285714285714285, 83), (0.39285714285714285, 486), (0.39285714285714285, 70), (0.39285714285714285, 494), (0.39285714285714285, 331), (0.39285714285714285, 237), (0.39285714285714285, 109), (0.39285714285714285, 247), (0.39285714285714285, 273), (0.39285714285714285, 351), (0.39285714285714285, 291), (0.39285714285714285, 39), (0.39285714285714285, 5), (0.39285714285714285, 146), (0.39285714285714285, 280), (0.39285714285714285, 474), (0.39285714285714285, 304), (0.39285714285714285, 153), (0.39285714285714285, 353), (0.39285714285714285, 330), (0.39285714285714285, 387), (0.39285714285714285, 87), (0.39285714285714285, 462), (0.39285714285714285, 489), (0.39285714285714285, 98), (0.39285714285714285, 287), (0.39285714285714285, 186), (0.39285714285714285, 354), (0.39285714285714285, 21), (0.39285714285714285, 74), (0.39285714285714285, 131), (0.39285714285714285, 189), (0.39285714285714285, 129), (0.39285714285714285, 383), (0.39285714285714285, 95), (0.39285714285714285, 166), (0.39285714285714285, 81), (0.39285714285714285, 94), (0.39285714285714285, 96), (0.39285714285714285, 294), (0.39285714285714285, 366), (0.39285714285714285, 119), (0.39285714285714285, 323), (0.39285714285714285, 356), (0.39285714285714285, 360), (0.39285714285714285, 464), (0.39285714285714285, 492), (0.39285714285714285, 482), (0.39285714285714285, 333), (0.39285714285714285, 467), (0.39285714285714285, 318), (0.39285714285714285, 84), (0.39285714285714285, 496), (0.39285714285714285, 142), (0.39285714285714285, 71), (0.39285714285714285, 213), (0.39285714285714285, 181), (0.39285714285714285, 35), (0.39285714285714285, 357), (0.39285714285714285, 63), (0.39285714285714285, 481), (0.39285714285714285, 459), (0.39285714285714285, 362), (0.39285714285714285, 261), (0.39285714285714285, 249), (0.39285714285714285, 226), (0.39285714285714285, 82), (0.39285714285714285, 321), (0.39285714285714285, 301), (0.39285714285714285, 221), (0.39285714285714285, 306), (0.39285714285714285, 456), (0.39285714285714285, 457), (0.39285714285714285, 455), (0.39285714285714285, 286), (0.39285714285714285, 470), (0.39285714285714285, 205), (0.39285714285714285, 377), (0.39285714285714285, 279), (0.39285714285714285, 209), (0.39285714285714285, 300), (0.39285714285714285, 160), (0.39285714285714285, 374), (0.39285714285714285, 499), (0.39285714285714285, 477), (0.39285714285714285, 120), (0.39285714285714285, 463), (0.39285714285714285, 309), (0.39285714285714285, 155), (0.39285714285714285, 99), (0.39285714285714285, 79), (0.39285714285714285, 77), (0.39285714285714285, 62), (0.39285714285714285, 130), (0.39285714285714285, 44), (0.39285714285714285, 375), (0.39285714285714285, 107), (0.39285714285714285, 229), (0.39285714285714285, 34), (0.39285714285714285, 196), (0.39285714285714285, 347), (0.39285714285714285, 59), (0.39285714285714285, 243), (0.39285714285714285, 14), (0.39285714285714285, 311), (0.39285714285714285, 485), (0.39285714285714285, 313), (0.39285714285714285, 472), (0.39285714285714285, 192), (0.39285714285714285, 468), (0.39285714285714285, 12), (0.39285714285714285, 373), (0.39285714285714285, 1), (0.39285714285714285, 230), (0.39285714285714285, 110), (0.39285714285714285, 33), (0.39285714285714285, 336), (0.39285714285714285, 89), (0.39285714285714285, 139), (0.39285714285714285, 188), (0.39285714285714285, 495), (0.39285714285714285, 66), (0.39285714285714285, 500), (0.39285714285714285, 265), (0.39285714285714285, 217), (0.39285714285714285, 140), (0.39285714285714285, 319), (0.39285714285714285, 114), (0.39285714285714285, 465), (0.39285714285714285, 268), (0.39285714285714285, 48), (0.39285714285714285, 201), (0.39285714285714285, 121), (0.39285714285714285, 203), (0.39285714285714285, 101), (0.39285714285714285, 469), (0.39285714285714285, 53), (0.39285714285714285, 170), (0.39285714285714285, 32), (0.39285714285714285, 174), (0.39285714285714285, 324), (0.39285714285714285, 332), (0.39285714285714285, 388), (0.39285714285714285, 65), (0.39285714285714285, 103), (0.39285714285714285, 234), (0.39285714285714285, 182), (0.39285714285714285, 378), (0.39285714285714285, 376), (0.39285714285714285, 380), (0.3333333333333333, 210), (0.3333333333333333, 197), (0.3333333333333333, 136), (0.3333333333333333, 422), (0.3333333333333333, 19), (0.3333333333333333, 73), (0.3333333333333333, 252), (0.3333333333333333, 219), (0.3333333333333333, 315), (0.325, 52), (0.325, 258), (0.325, 429), (0.325, 393), (0.325, 38), (0.325, 2), (0.325, 274), (0.325, 49), (0.325, 24), (0.325, 431), (0.325, 102), (0.325, 25), (0.325, 161), (0.325, 144), (0.325, 222), (0.325, 338), (0.325, 277), (0.325, 245), (0.325, 40), (0.325, 157), (0.325, 345), (0.325, 450), (0.325, 26), (0.325, 91), (0.325, 250), (0.325, 135), (0.325, 266), (0.325, 341), (0.325, 149), (0.325, 267), (0.325, 180), (0.325, 386), (0.325, 223), (0.325, 379), (0.26785714285714285, 145), (0.26785714285714285, 36), (0.26785714285714285, 104), (0.2361111111111111, 271), (0.2361111111111111, 150), (0.20192307692307693, 385), (0.20192307692307693, 367), (0.2, 88), (0.2, 111), (0.2, 138), (0.2, 68), (0.2, 246), (0.2, 320), (0.2, 177), (0.2, 244), (0.2, 187), (0.2, 208), (0.2, 23), (0.2, 398), (0.2, 342), (0.2, 117), (0.2, 164), (0.2, 290), (0.2, 85), (0.2, 168), (0.2, 123), (0.2, 20), (0.2, 224), (0.2, 30), (0.2, 390), (0.2, 297), (0.2, 312), (0.2, 381), (0.14285714285714285, 22), (0.14285714285714285, 16), (0.14285714285714285, 64), (0.14285714285714285, 43), (0.14285714285714285, 15), (0.14285714285714285, 60), (0.14285714285714285, 78), (0.14285714285714285, 0), (0.14285714285714285, 80), (0.14285714285714285, 46), (0.14285714285714285, 7), (0.14285714285714285, 45), (0.14285714285714285, 4), (0.14285714285714285, 51), (0.14285714285714285, 13), (0.14285714285714285, 86), (0.14285714285714285, 17), (0.14285714285714285, 57), (0.14285714285714285, 47), (0.14285714285714285, 69), (0.14285714285714285, 37)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 425
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 430
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`3`#`#`y`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 3 y) x) 3))
 nr_nodes: 8]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* 3 x) 3)))
 nr_nodes: 8]
[Generation 2]
[Computing fitness]
[(1.375, 525), (1.375, 539), (1.375, 515), (1.375, 430), (1.375, 264), (1.375, 425), (1.375, 501), (1.25, 402), (1.25, 524), (1.25, 518), (1.25, 551), (1.25, 90), (1.25, 506), (1.25, 407), (1.25, 184), (1.25, 505), (1.25, 185), (1.25, 299), (1.25, 72), (1.25, 512), (1.25, 554), (1.25, 371), (1.25, 358), (1.25, 555), (1.25, 42), (1.125, 334), (1.125, 232), (1.125, 127), (1.125, 132), (1.125, 162), (1.125, 343), (1.125, 424), (1.125, 28), (1.125, 418), (1.125, 58), (1.125, 75), (1.125, 216), (1.125, 415), (1.125, 262), (1.125, 173), (1.125, 420), (1.125, 212), (1.125, 397), (1.125, 517), (1.125, 548), (1.125, 417), (1.125, 546), (1.125, 416), (1.125, 326), (1.125, 67), (1.125, 519), (1.125, 18), (1.125, 156), (1.125, 563), (1.125, 349), (1.125, 199), (1.125, 27), (1.125, 251), (1.0, 105), (1.0, 6), (1.0, 339), (1.0, 423), (1.0, 527), (1.0, 521), (1.0, 242), (1.0, 411), (1.0, 395), (1.0, 529), (1.0, 528), (1.0, 445), (1.0, 404), (1.0, 502), (1.0, 421), (1.0, 176), (1.0, 533), (0.7083333333333333, 534), (0.7083333333333333, 11), (0.7083333333333333, 544), (0.5833333333333333, 556), (0.5833333333333333, 200), (0.5833333333333333, 307), (0.5833333333333333, 190), (0.5833333333333333, 538), (0.5833333333333333, 536), (0.5833333333333333, 507), (0.5833333333333333, 531), (0.5833333333333333, 310), (0.5833333333333333, 435), (0.5833333333333333, 183), (0.5833333333333333, 303), (0.5833333333333333, 253), (0.5833333333333333, 437), (0.5833333333333333, 439), (0.5833333333333333, 419), (0.5833333333333333, 215), (0.5833333333333333, 545), (0.575, 269), (0.575, 542), (0.575, 543), (0.575, 432), (0.575, 394), (0.575, 240), (0.575, 41), (0.4583333333333333, 414), (0.4583333333333333, 355), (0.4583333333333333, 559), (0.4583333333333333, 441), (0.4583333333333333, 115), (0.4583333333333333, 540), (0.4583333333333333, 263), (0.4583333333333333, 396), (0.4583333333333333, 29), (0.4583333333333333, 561), (0.4583333333333333, 409), (0.4583333333333333, 239), (0.4583333333333333, 427), (0.4583333333333333, 31), (0.4583333333333333, 352), (0.4583333333333333, 365), (0.4583333333333333, 399), (0.4583333333333333, 412), (0.4583333333333333, 56), (0.4583333333333333, 436), (0.4583333333333333, 550), (0.4583333333333333, 444), (0.4583333333333333, 552), (0.4583333333333333, 293), (0.4583333333333333, 391), (0.4583333333333333, 158), (0.4583333333333333, 549), (0.4583333333333333, 285), (0.4583333333333333, 442), (0.4583333333333333, 346), (0.4583333333333333, 557), (0.4583333333333333, 446), (0.4583333333333333, 92), (0.4583333333333333, 535), (0.4583333333333333, 8), (0.4583333333333333, 560), (0.4583333333333333, 195), (0.4583333333333333, 405), (0.4583333333333333, 211), (0.45, 568), (0.45, 434), (0.45, 447), (0.45, 225), (0.45, 454), (0.45, 328), (0.45, 134), (0.45, 152), (0.45, 564), (0.45, 191), (0.45, 448), (0.45, 565), (0.45, 359), (0.45, 154), (0.45, 400), (0.45, 452), (0.45, 283), (0.45, 281), (0.45, 562), (0.45, 344), (0.39285714285714285, 63), (0.39285714285714285, 87), (0.39285714285714285, 48), (0.39285714285714285, 494), (0.39285714285714285, 50), (0.39285714285714285, 209), (0.39285714285714285, 5), (0.39285714285714285, 500), (0.39285714285714285, 113), (0.39285714285714285, 332), (0.39285714285714285, 571), (0.39285714285714285, 333), (0.39285714285714285, 120), (0.39285714285714285, 482), (0.39285714285714285, 114), (0.39285714285714285, 213), (0.39285714285714285, 388), (0.39285714285714285, 585), (0.39285714285714285, 32), (0.39285714285714285, 376), (0.39285714285714285, 182), (0.39285714285714285, 167), (0.39285714285714285, 229), (0.39285714285714285, 586), (0.39285714285714285, 456), (0.39285714285714285, 578), (0.39285714285714285, 287), (0.39285714285714285, 300), (0.39285714285714285, 378), (0.39285714285714285, 201), (0.39285714285714285, 140), (0.39285714285714285, 84), (0.39285714285714285, 74), (0.39285714285714285, 319), (0.39285714285714285, 61), (0.39285714285714285, 331), (0.39285714285714285, 464), (0.39285714285714285, 588), (0.39285714285714285, 247), (0.39285714285714285, 490), (0.39285714285714285, 485), (0.39285714285714285, 486), (0.39285714285714285, 483), (0.39285714285714285, 280), (0.39285714285714285, 360), (0.39285714285714285, 294), (0.39285714285714285, 469), (0.39285714285714285, 203), (0.39285714285714285, 237), (0.39285714285714285, 291), (0.39285714285714285, 324), (0.39285714285714285, 125), (0.39285714285714285, 354), (0.39285714285714285, 107), (0.39285714285714285, 377), (0.39285714285714285, 487), (0.39285714285714285, 383), (0.39285714285714285, 387), (0.39285714285714285, 313), (0.39285714285714285, 39), (0.39285714285714285, 576), (0.39285714285714285, 188), (0.39285714285714285, 268), (0.39285714285714285, 133), (0.39285714285714285, 591), (0.39285714285714285, 455), (0.39285714285714285, 478), (0.39285714285714285, 217), (0.39285714285714285, 495), (0.39285714285714285, 131), (0.39285714285714285, 234), (0.39285714285714285, 174), (0.39285714285714285, 467), (0.39285714285714285, 574), (0.39285714285714285, 119), (0.39285714285714285, 62), (0.39285714285714285, 106), (0.39285714285714285, 181), (0.39285714285714285, 153), (0.39285714285714285, 100), (0.39285714285714285, 284), (0.39285714285714285, 357), (0.39285714285714285, 582), (0.39285714285714285, 477), (0.39285714285714285, 124), (0.39285714285714285, 98), (0.39285714285714285, 592), (0.39285714285714285, 583), (0.39285714285714285, 458), (0.39285714285714285, 221), (0.39285714285714285, 499), (0.39285714285714285, 193), (0.39285714285714285, 321), (0.39285714285714285, 214), (0.39285714285714285, 375), (0.39285714285714285, 351), (0.39285714285714285, 121), (0.39285714285714285, 479), (0.39285714285714285, 273), (0.39285714285714285, 481), (0.39285714285714285, 220), (0.39285714285714285, 265), (0.39285714285714285, 261), (0.39285714285714285, 470), (0.39285714285714285, 278), (0.39285714285714285, 96), (0.39285714285714285, 366), (0.39285714285714285, 9), (0.39285714285714285, 249), (0.39285714285714285, 130), (0.39285714285714285, 304), (0.39285714285714285, 318), (0.39285714285714285, 139), (0.39285714285714285, 10), (0.39285714285714285, 205), (0.39285714285714285, 306), (0.39285714285714285, 186), (0.39285714285714285, 472), (0.39285714285714285, 350), (0.39285714285714285, 474), (0.39285714285714285, 34), (0.39285714285714285, 192), (0.39285714285714285, 457), (0.39285714285714285, 3), (0.39285714285714285, 362), (0.39285714285714285, 146), (0.39285714285714285, 230), (0.39285714285714285, 476), (0.39285714285714285, 279), (0.39285714285714285, 198), (0.39285714285714285, 142), (0.39285714285714285, 54), (0.39285714285714285, 89), (0.39285714285714285, 322), (0.39285714285714285, 65), (0.39285714285714285, 170), (0.39285714285714285, 71), (0.39285714285714285, 311), (0.39285714285714285, 492), (0.39285714285714285, 353), (0.39285714285714285, 309), (0.39285714285714285, 196), (0.39285714285714285, 155), (0.39285714285714285, 465), (0.39285714285714285, 301), (0.39285714285714285, 94), (0.39285714285714285, 59), (0.39285714285714285, 66), (0.39285714285714285, 33), (0.39285714285714285, 498), (0.39285714285714285, 374), (0.39285714285714285, 81), (0.39285714285714285, 468), (0.39285714285714285, 14), (0.39285714285714285, 589), (0.39285714285714285, 189), (0.39285714285714285, 489), (0.39285714285714285, 380), (0.39285714285714285, 172), (0.39285714285714285, 12), (0.39285714285714285, 166), (0.39285714285714285, 323), (0.39285714285714285, 76), (0.39285714285714285, 77), (0.39285714285714285, 126), (0.39285714285714285, 55), (0.39285714285714285, 581), (0.39285714285714285, 101), (0.39285714285714285, 330), (0.39285714285714285, 463), (0.39285714285714285, 53), (0.39285714285714285, 35), (0.39285714285714285, 590), (0.39285714285714285, 99), (0.39285714285714285, 248), (0.39285714285714285, 570), (0.39285714285714285, 336), (0.39285714285714285, 461), (0.39285714285714285, 83), (0.39285714285714285, 21), (0.39285714285714285, 129), (0.39285714285714285, 580), (0.39285714285714285, 1), (0.39285714285714285, 347), (0.39285714285714285, 103), (0.39285714285714285, 243), (0.39285714285714285, 573), (0.39285714285714285, 238), (0.39285714285714285, 109), (0.39285714285714285, 79), (0.39285714285714285, 286), (0.39285714285714285, 496), (0.39285714285714285, 373), (0.39285714285714285, 70), (0.39285714285714285, 82), (0.39285714285714285, 44), (0.39285714285714285, 356), (0.39285714285714285, 110), (0.39285714285714285, 459), (0.39285714285714285, 95), (0.39285714285714285, 116), (0.39285714285714285, 160), (0.39285714285714285, 462), (0.39285714285714285, 226), (0.3333333333333333, 210), (0.3333333333333333, 136), (0.3333333333333333, 19), (0.3333333333333333, 197), (0.3333333333333333, 315), (0.3333333333333333, 514), (0.3333333333333333, 219), (0.3333333333333333, 422), (0.3333333333333333, 73), (0.3333333333333333, 532), (0.3333333333333333, 252), (0.325, 49), (0.325, 429), (0.325, 393), (0.325, 52), (0.325, 541), (0.325, 161), (0.325, 258), (0.325, 24), (0.325, 25), (0.325, 274), (0.325, 2), (0.325, 431), (0.325, 38), (0.325, 503), (0.325, 566), (0.325, 510), (0.325, 567), (0.325, 569), (0.325, 504), (0.325, 102), (0.26785714285714285, 509), (0.2, 523), (0.2, 516)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 525
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 539
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 430
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.375, 264), (1.375, 430), (1.375, 425), (1.375, 501), (1.375, 515), (1.375, 654), (1.375, 525), (1.375, 539), (1.375, 688), (1.25, 518), (1.25, 299), (1.25, 42), (1.25, 608), (1.25, 505), (1.25, 371), (1.25, 630), (1.25, 90), (1.25, 642), (1.25, 594), (1.25, 600), (1.25, 554), (1.25, 603), (1.25, 358), (1.25, 666), (1.25, 402), (1.25, 185), (1.25, 72), (1.25, 407), (1.25, 184), (1.25, 607), (1.25, 524), (1.25, 512), (1.25, 551), (1.25, 555), (1.25, 506), (1.25, 631), (1.25, 601), (1.125, 548), (1.125, 212), (1.125, 517), (1.125, 424), (1.125, 199), (1.125, 418), (1.125, 519), (1.125, 420), (1.125, 156), (1.125, 679), (1.125, 326), (1.125, 262), (1.125, 75), (1.125, 127), (1.125, 397), (1.125, 334), (1.125, 67), (1.125, 624), (1.125, 162), (1.125, 28), (1.125, 619), (1.125, 546), (1.125, 173), (1.125, 18), (1.125, 612), (1.125, 417), (1.125, 58), (1.125, 563), (1.125, 343), (1.125, 216), (1.125, 633), (1.125, 613), (1.125, 620), (1.125, 416), (1.125, 251), (1.125, 349), (1.125, 132), (1.125, 27), (1.125, 415), (1.125, 232), (1.0, 502), (1.0, 423), (1.0, 527), (1.0, 411), (1.0, 641), (1.0, 529), (1.0, 176), (1.0, 404), (1.0, 521), (1.0, 636), (1.0, 105), (1.0, 645), (1.0, 339), (1.0, 640), (1.0, 445), (1.0, 639), (1.0, 533), (1.0, 637), (1.0, 6), (1.0, 528), (1.0, 626), (1.0, 395), (1.0, 242), (1.0, 421), (0.7083333333333333, 544), (0.7083333333333333, 11), (0.7083333333333333, 646), (0.7083333333333333, 534), (0.7083333333333333, 606), (0.5833333333333333, 599), (0.5833333333333333, 683), (0.5833333333333333, 556), (0.5833333333333333, 215), (0.5833333333333333, 651), (0.5833333333333333, 657), (0.5833333333333333, 655), (0.5833333333333333, 307), (0.5833333333333333, 545), (0.5833333333333333, 303), (0.5833333333333333, 538), (0.5833333333333333, 531), (0.5833333333333333, 253), (0.5833333333333333, 183), (0.5833333333333333, 536), (0.5833333333333333, 507), (0.5833333333333333, 656), (0.5833333333333333, 439), (0.5833333333333333, 437), (0.5833333333333333, 190), (0.5833333333333333, 658), (0.5833333333333333, 310), (0.5833333333333333, 435), (0.5833333333333333, 200), (0.5833333333333333, 419), (0.5833333333333333, 622), (0.5833333333333333, 652), (0.575, 663), (0.575, 394), (0.575, 542), (0.575, 240), (0.575, 543), (0.575, 660), (0.575, 269), (0.575, 432), (0.575, 41), (0.575, 662), (0.4583333333333333, 618), (0.4583333333333333, 540), (0.4583333333333333, 552), (0.4583333333333333, 686), (0.4583333333333333, 396), (0.4583333333333333, 677), (0.4583333333333333, 446), (0.4583333333333333, 667), (0.4583333333333333, 409), (0.4583333333333333, 412), (0.4583333333333333, 560), (0.4583333333333333, 665), (0.4583333333333333, 195), (0.4583333333333333, 158), (0.4583333333333333, 293), (0.4583333333333333, 436), (0.4583333333333333, 352), (0.4583333333333333, 8), (0.4583333333333333, 604), (0.4583333333333333, 56), (0.4583333333333333, 616), (0.4583333333333333, 399), (0.4583333333333333, 598), (0.4583333333333333, 670), (0.4583333333333333, 391), (0.4583333333333333, 444), (0.4583333333333333, 674), (0.4583333333333333, 211), (0.4583333333333333, 414), (0.4583333333333333, 442), (0.4583333333333333, 682), (0.4583333333333333, 355), (0.4583333333333333, 549), (0.4583333333333333, 557), (0.4583333333333333, 239), (0.4583333333333333, 263), (0.4583333333333333, 115), (0.4583333333333333, 628), (0.4583333333333333, 685), (0.4583333333333333, 29), (0.4583333333333333, 687), (0.4583333333333333, 346), (0.4583333333333333, 561), (0.4583333333333333, 614), (0.4583333333333333, 669), (0.4583333333333333, 535), (0.4583333333333333, 668), (0.4583333333333333, 627), (0.4583333333333333, 92), (0.4583333333333333, 684), (0.4583333333333333, 405), (0.4583333333333333, 550), (0.4583333333333333, 672), (0.4583333333333333, 31), (0.4583333333333333, 427), (0.4583333333333333, 441), (0.4583333333333333, 559), (0.4583333333333333, 285), (0.4583333333333333, 365), (0.45, 281), (0.45, 454), (0.45, 565), (0.45, 328), (0.45, 225), (0.45, 134), (0.45, 681), (0.45, 344), (0.45, 448), (0.45, 564), (0.45, 400), (0.45, 610), (0.45, 359), (0.45, 154), (0.45, 191), (0.45, 152), (0.45, 647), (0.45, 562), (0.45, 649), (0.45, 690), (0.45, 693), (0.45, 568), (0.45, 452), (0.45, 671), (0.45, 447), (0.45, 283), (0.45, 689), (0.45, 434), (0.39285714285714285, 76), (0.39285714285714285, 59), (0.39285714285714285, 249), (0.39285714285714285, 311), (0.39285714285714285, 350), (0.39285714285714285, 313), (0.39285714285714285, 98), (0.39285714285714285, 301), (0.39285714285714285, 125), (0.39285714285714285, 198), (0.39285714285714285, 174), (0.39285714285714285, 476), (0.39285714285714285, 54), (0.39285714285714285, 142), (0.39285714285714285, 214), (0.39285714285714285, 495), (0.39285714285714285, 189), (0.39285714285714285, 321), (0.39285714285714285, 124), (0.39285714285714285, 130), (0.39285714285714285, 100), (0.39285714285714285, 492), (0.39285714285714285, 351), (0.39285714285714285, 71), (0.39285714285714285, 155), (0.39285714285714285, 205), (0.39285714285714285, 247), (0.39285714285714285, 217), (0.39285714285714285, 585), (0.39285714285714285, 213), (0.39285714285714285, 10), (0.39285714285714285, 499), (0.39285714285714285, 589), (0.39285714285714285, 188), (0.39285714285714285, 498), (0.39285714285714285, 333), (0.39285714285714285, 474), (0.39285714285714285, 66), (0.39285714285714285, 196), (0.39285714285714285, 332), (0.39285714285714285, 586), (0.39285714285714285, 464), (0.39285714285714285, 472), (0.39285714285714285, 362), (0.39285714285714285, 34), (0.39285714285714285, 89), (0.39285714285714285, 14), (0.39285714285714285, 304), (0.39285714285714285, 146), (0.39285714285714285, 469), (0.39285714285714285, 265), (0.39285714285714285, 9), (0.39285714285714285, 167), (0.39285714285714285, 62), (0.39285714285714285, 221), (0.39285714285714285, 261), (0.39285714285714285, 481), (0.39285714285714285, 12), (0.39285714285714285, 131), (0.39285714285714285, 500), (0.39285714285714285, 50), (0.39285714285714285, 300), (0.39285714285714285, 374), (0.39285714285714285, 479), (0.39285714285714285, 478), (0.39285714285714285, 107), (0.39285714285714285, 74), (0.39285714285714285, 237), (0.39285714285714285, 268), (0.39285714285714285, 306), (0.39285714285714285, 477), (0.39285714285714285, 489), (0.39285714285714285, 490), (0.39285714285714285, 121), (0.39285714285714285, 291), (0.39285714285714285, 366), (0.39285714285714285, 140), (0.39285714285714285, 483), (0.39285714285714285, 119), (0.39285714285714285, 494), (0.39285714285714285, 203), (0.39285714285714285, 172), (0.39285714285714285, 591), (0.39285714285714285, 467), (0.39285714285714285, 468), (0.39285714285714285, 279), (0.39285714285714285, 87), (0.39285714285714285, 284), (0.39285714285714285, 375), (0.39285714285714285, 377), (0.39285714285714285, 376), (0.39285714285714285, 294), (0.39285714285714285, 485), (0.39285714285714285, 582), (0.39285714285714285, 360), (0.39285714285714285, 322), (0.39285714285714285, 139), (0.39285714285714285, 571), (0.39285714285714285, 153), (0.39285714285714285, 319), (0.39285714285714285, 39), (0.39285714285714285, 33), (0.39285714285714285, 209), (0.39285714285714285, 470), (0.39285714285714285, 120), (0.39285714285714285, 182), (0.39285714285714285, 592), (0.39285714285714285, 588), (0.39285714285714285, 455), (0.39285714285714285, 482), (0.39285714285714285, 230), (0.39285714285714285, 220), (0.39285714285714285, 5), (0.39285714285714285, 273), (0.39285714285714285, 287), (0.39285714285714285, 65), (0.39285714285714285, 61), (0.39285714285714285, 32), (0.39285714285714285, 181), (0.39285714285714285, 387), (0.39285714285714285, 583), (0.39285714285714285, 84), (0.39285714285714285, 201), (0.39285714285714285, 357), (0.39285714285714285, 353), (0.39285714285714285, 186), (0.39285714285714285, 486), (0.39285714285714285, 166), (0.39285714285714285, 458), (0.39285714285714285, 278), (0.39285714285714285, 234), (0.39285714285714285, 193), (0.39285714285714285, 323), (0.39285714285714285, 331), (0.39285714285714285, 63), (0.39285714285714285, 309), (0.39285714285714285, 378), (0.39285714285714285, 388), (0.39285714285714285, 229), (0.39285714285714285, 48), (0.39285714285714285, 192), (0.39285714285714285, 487), (0.39285714285714285, 574), (0.39285714285714285, 354), (0.39285714285714285, 318), (0.39285714285714285, 106), (0.39285714285714285, 380), (0.39285714285714285, 170), (0.39285714285714285, 578), (0.39285714285714285, 324), (0.39285714285714285, 576), (0.39285714285714285, 81), (0.39285714285714285, 3), (0.39285714285714285, 114), (0.39285714285714285, 113), (0.39285714285714285, 456), (0.39285714285714285, 96), (0.39285714285714285, 465), (0.39285714285714285, 457), (0.39285714285714285, 383), (0.39285714285714285, 280), (0.39285714285714285, 133), (0.39285714285714285, 94), (0.3333333333333333, 675), (0.325, 596), (0.325, 629), (0.325, 632), (0.325, 692), (0.2, 644), (0.2, 634)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 430
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 425
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) y) y))
 nr_nodes: 8]
[Generation 4]
[Computing fitness]
[(1.375, 786), (1.375, 264), (1.375, 688), (1.375, 525), (1.375, 430), (1.375, 515), (1.375, 425), (1.375, 501), (1.375, 654), (1.375, 695), (1.375, 539), (1.25, 600), (1.25, 185), (1.25, 754), (1.25, 506), (1.25, 518), (1.25, 631), (1.25, 702), (1.25, 762), (1.25, 184), (1.25, 512), (1.25, 630), (1.25, 709), (1.25, 607), (1.25, 554), (1.25, 299), (1.25, 704), (1.25, 666), (1.25, 608), (1.25, 42), (1.25, 407), (1.25, 402), (1.25, 601), (1.25, 725), (1.25, 371), (1.25, 642), (1.25, 716), (1.25, 703), (1.25, 737), (1.25, 505), (1.25, 707), (1.25, 524), (1.25, 555), (1.25, 90), (1.25, 594), (1.25, 72), (1.25, 551), (1.25, 778), (1.25, 719), (1.25, 699), (1.25, 358), (1.25, 706), (1.25, 715), (1.25, 697), (1.25, 603), (1.25, 726), (1.125, 28), (1.125, 424), (1.125, 397), (1.125, 232), (1.125, 212), (1.125, 262), (1.125, 633), (1.125, 420), (1.125, 721), (1.125, 619), (1.125, 620), (1.125, 162), (1.125, 729), (1.125, 216), (1.125, 613), (1.125, 343), (1.125, 736), (1.125, 743), (1.125, 624), (1.125, 790), (1.125, 132), (1.125, 548), (1.125, 727), (1.125, 75), (1.125, 349), (1.125, 251), (1.125, 517), (1.125, 199), (1.125, 173), (1.125, 58), (1.125, 612), (1.125, 67), (1.125, 742), (1.125, 563), (1.125, 546), (1.125, 416), (1.125, 334), (1.125, 679), (1.125, 418), (1.125, 417), (1.125, 740), (1.125, 27), (1.125, 774), (1.125, 326), (1.125, 18), (1.125, 519), (1.125, 415), (1.125, 156), (1.125, 127), (1.0, 411), (1.0, 641), (1.0, 527), (1.0, 395), (1.0, 748), (1.0, 636), (1.0, 639), (1.0, 445), (1.0, 758), (1.0, 339), (1.0, 533), (1.0, 242), (1.0, 502), (1.0, 528), (1.0, 753), (1.0, 640), (1.0, 529), (1.0, 714), (1.0, 645), (1.0, 626), (1.0, 752), (1.0, 423), (1.0, 421), (1.0, 404), (1.0, 6), (1.0, 176), (1.0, 521), (1.0, 637), (1.0, 746), (1.0, 105), (1.0, 756), (1.0, 745), (0.8333333333333333, 694), (0.7083333333333333, 759), (0.7083333333333333, 606), (0.7083333333333333, 11), (0.7083333333333333, 761), (0.7083333333333333, 776), (0.7083333333333333, 534), (0.7083333333333333, 646), (0.7083333333333333, 710), (0.7083333333333333, 544), (0.7083333333333333, 735), (0.7083333333333333, 705), (0.5833333333333333, 683), (0.5833333333333333, 657), (0.5833333333333333, 307), (0.5833333333333333, 775), (0.5833333333333333, 200), (0.5833333333333333, 536), (0.5833333333333333, 310), (0.5833333333333333, 190), (0.5833333333333333, 215), (0.5833333333333333, 419), (0.5833333333333333, 599), (0.5833333333333333, 766), (0.5833333333333333, 656), (0.5833333333333333, 437), (0.5833333333333333, 701), (0.5833333333333333, 253), (0.5833333333333333, 779), (0.5833333333333333, 556), (0.5833333333333333, 652), (0.5833333333333333, 763), (0.5833333333333333, 507), (0.5833333333333333, 303), (0.5833333333333333, 655), (0.5833333333333333, 435), (0.5833333333333333, 531), (0.5833333333333333, 622), (0.5833333333333333, 183), (0.5833333333333333, 538), (0.5833333333333333, 545), (0.5833333333333333, 767), (0.5833333333333333, 658), (0.5833333333333333, 651), (0.5833333333333333, 439), (0.575, 713), (0.575, 660), (0.575, 269), (0.575, 783), (0.575, 432), (0.575, 542), (0.575, 41), (0.575, 662), (0.575, 543), (0.575, 394), (0.575, 785), (0.575, 781), (0.575, 240), (0.575, 663), (0.4583333333333333, 263), (0.4583333333333333, 441), (0.4583333333333333, 29), (0.4583333333333333, 396), (0.4583333333333333, 158), (0.4583333333333333, 730), (0.4583333333333333, 687), (0.4583333333333333, 444), (0.4583333333333333, 604), (0.4583333333333333, 409), (0.4583333333333333, 552), (0.4583333333333333, 773), (0.4583333333333333, 665), (0.4583333333333333, 685), (0.4583333333333333, 739), (0.4583333333333333, 724), (0.4583333333333333, 195), (0.4583333333333333, 31), (0.4583333333333333, 765), (0.4583333333333333, 285), (0.4583333333333333, 668), (0.4583333333333333, 674), (0.4583333333333333, 672), (0.4583333333333333, 712), (0.4583333333333333, 239), (0.4583333333333333, 771), (0.4583333333333333, 92), (0.4583333333333333, 293), (0.4583333333333333, 352), (0.4583333333333333, 550), (0.4583333333333333, 391), (0.4583333333333333, 682), (0.4583333333333333, 559), (0.4583333333333333, 442), (0.4583333333333333, 56), (0.4583333333333333, 757), (0.4583333333333333, 446), (0.4583333333333333, 436), (0.4583333333333333, 561), (0.4583333333333333, 614), (0.4583333333333333, 560), (0.4583333333333333, 627), (0.4583333333333333, 670), (0.4583333333333333, 628), (0.4583333333333333, 211), (0.4583333333333333, 346), (0.4583333333333333, 427), (0.4583333333333333, 414), (0.4583333333333333, 355), (0.4583333333333333, 770), (0.4583333333333333, 722), (0.4583333333333333, 616), (0.4583333333333333, 667), (0.4583333333333333, 598), (0.4583333333333333, 365), (0.4583333333333333, 405), (0.4583333333333333, 669), (0.4583333333333333, 8), (0.4583333333333333, 412), (0.4583333333333333, 717), (0.4583333333333333, 557), (0.4583333333333333, 788), (0.4583333333333333, 792), (0.4583333333333333, 540), (0.4583333333333333, 115), (0.4583333333333333, 535), (0.4583333333333333, 686), (0.4583333333333333, 399), (0.4583333333333333, 549), (0.4583333333333333, 684), (0.4583333333333333, 618), (0.4583333333333333, 677), (0.45, 452), (0.45, 448), (0.45, 649), (0.45, 344), (0.45, 693), (0.45, 690), (0.45, 359), (0.45, 225), (0.45, 152), (0.45, 568), (0.45, 281), (0.45, 434), (0.45, 454), (0.45, 681), (0.45, 718), (0.45, 154), (0.45, 610), (0.45, 562), (0.45, 283), (0.45, 191), (0.45, 328), (0.45, 565), (0.45, 564), (0.45, 647), (0.45, 689), (0.45, 671), (0.45, 447), (0.45, 400), (0.45, 134), (0.39285714285714285, 119), (0.39285714285714285, 130), (0.39285714285714285, 366), (0.39285714285714285, 498), (0.39285714285714285, 214), (0.39285714285714285, 586), (0.39285714285714285, 107), (0.39285714285714285, 265), (0.39285714285714285, 66), (0.39285714285714285, 34), (0.39285714285714285, 490), (0.39285714285714285, 333), (0.39285714285714285, 198), (0.39285714285714285, 481), (0.39285714285714285, 89), (0.39285714285714285, 306), (0.39285714285714285, 12), (0.39285714285714285, 14), (0.39285714285714285, 121), (0.39285714285714285, 300), (0.39285714285714285, 131), (0.39285714285714285, 87), (0.39285714285714285, 489), (0.39285714285714285, 375), (0.39285714285714285, 98), (0.39285714285714285, 155), (0.39285714285714285, 174), (0.39285714285714285, 479), (0.39285714285714285, 261), (0.39285714285714285, 167), (0.39285714285714285, 332), (0.39285714285714285, 188), (0.39285714285714285, 247), (0.39285714285714285, 76), (0.39285714285714285, 464), (0.39285714285714285, 469), (0.39285714285714285, 125), (0.39285714285714285, 499), (0.39285714285714285, 291), (0.39285714285714285, 582), (0.39285714285714285, 500), (0.39285714285714285, 221), (0.39285714285714285, 284), (0.39285714285714285, 71), (0.39285714285714285, 483), (0.39285714285714285, 377), (0.39285714285714285, 301), (0.39285714285714285, 467), (0.39285714285714285, 279), (0.39285714285714285, 304), (0.39285714285714285, 485), (0.39285714285714285, 203), (0.39285714285714285, 474), (0.39285714285714285, 476), (0.39285714285714285, 237), (0.39285714285714285, 74), (0.39285714285714285, 321), (0.39285714285714285, 311), (0.39285714285714285, 189), (0.39285714285714285, 294), (0.39285714285714285, 492), (0.39285714285714285, 9), (0.39285714285714285, 350), (0.39285714285714285, 100), (0.39285714285714285, 142), (0.39285714285714285, 50), (0.39285714285714285, 495), (0.39285714285714285, 54), (0.39285714285714285, 213), (0.39285714285714285, 62), (0.39285714285714285, 268), (0.39285714285714285, 172), (0.39285714285714285, 59), (0.39285714285714285, 10), (0.39285714285714285, 362), (0.39285714285714285, 217), (0.39285714285714285, 468), (0.39285714285714285, 585), (0.39285714285714285, 589), (0.39285714285714285, 472), (0.39285714285714285, 477), (0.39285714285714285, 374), (0.39285714285714285, 146), (0.39285714285714285, 196), (0.39285714285714285, 205), (0.39285714285714285, 376), (0.39285714285714285, 313), (0.39285714285714285, 591), (0.39285714285714285, 360), (0.39285714285714285, 494), (0.39285714285714285, 478), (0.39285714285714285, 140), (0.39285714285714285, 124), (0.39285714285714285, 351), (0.39285714285714285, 249), (0.3333333333333333, 755), (0.3333333333333333, 750), (0.3333333333333333, 732), (0.325, 738), (0.325, 734), (0.325, 782), (0.2, 769), (0.2, 747)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ x (* 3 y))))
 nr_nodes: 8]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 688
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`3`#`#`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (* (* 3 x) 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 525
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 430
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ x y)))
 nr_nodes: 8]
[Generation 5]
[Computing fitness]
[(1.375, 425), (1.375, 695), (1.375, 515), (1.375, 264), (1.375, 525), (1.375, 539), (1.375, 799), (1.375, 688), (1.375, 501), (1.375, 430), (1.375, 654), (1.375, 786), (1.375, 842), (1.25, 72), (1.25, 719), (1.25, 631), (1.25, 737), (1.25, 358), (1.25, 608), (1.25, 805), (1.25, 826), (1.25, 825), (1.25, 90), (1.25, 42), (1.25, 630), (1.25, 185), (1.25, 299), (1.25, 706), (1.25, 812), (1.25, 703), (1.25, 802), (1.25, 551), (1.25, 715), (1.25, 642), (1.25, 814), (1.25, 524), (1.25, 697), (1.25, 518), (1.25, 725), (1.25, 873), (1.25, 702), (1.25, 822), (1.25, 512), (1.25, 726), (1.25, 797), (1.25, 813), (1.25, 505), (1.25, 666), (1.25, 754), (1.25, 555), (1.25, 716), (1.25, 554), (1.25, 808), (1.25, 371), (1.25, 402), (1.25, 823), (1.25, 600), (1.25, 707), (1.25, 827), (1.25, 407), (1.25, 800), (1.25, 594), (1.25, 506), (1.25, 607), (1.25, 762), (1.25, 184), (1.25, 709), (1.25, 852), (1.25, 704), (1.25, 815), (1.25, 793), (1.25, 778), (1.25, 699), (1.25, 603), (1.25, 601), (1.125, 729), (1.125, 858), (1.125, 58), (1.125, 67), (1.125, 28), (1.125, 343), (1.125, 740), (1.125, 199), (1.125, 326), (1.125, 742), (1.125, 843), (1.125, 162), (1.125, 27), (1.125, 835), (1.125, 397), (1.125, 721), (1.125, 853), (1.125, 75), (1.125, 517), (1.125, 790), (1.125, 612), (1.125, 727), (1.125, 519), (1.125, 795), (1.125, 156), (1.125, 882), (1.125, 820), (1.125, 132), (1.125, 262), (1.125, 418), (1.125, 416), (1.125, 212), (1.125, 415), (1.125, 613), (1.125, 679), (1.125, 620), (1.125, 424), (1.125, 349), (1.125, 232), (1.125, 824), (1.125, 845), (1.125, 774), (1.125, 546), (1.125, 563), (1.125, 417), (1.125, 807), (1.125, 743), (1.125, 837), (1.125, 849), (1.125, 420), (1.125, 819), (1.125, 633), (1.125, 736), (1.125, 624), (1.125, 619), (1.125, 832), (1.125, 848), (1.125, 816), (1.125, 127), (1.125, 548), (1.125, 216), (1.125, 334), (1.125, 839), (1.125, 251), (1.125, 846), (1.125, 855), (1.125, 173), (1.125, 18), (1.0, 714), (1.0, 871), (1.0, 6), (1.0, 411), (1.0, 521), (1.0, 753), (1.0, 645), (1.0, 395), (1.0, 445), (1.0, 339), (1.0, 880), (1.0, 745), (1.0, 533), (1.0, 176), (1.0, 862), (1.0, 864), (1.0, 872), (1.0, 868), (1.0, 884), (1.0, 105), (1.0, 639), (1.0, 865), (1.0, 421), (1.0, 883), (1.0, 830), (1.0, 804), (1.0, 636), (1.0, 640), (1.0, 529), (1.0, 758), (1.0, 637), (1.0, 502), (1.0, 242), (1.0, 746), (1.0, 641), (1.0, 752), (1.0, 423), (1.0, 404), (1.0, 527), (1.0, 528), (1.0, 756), (1.0, 626), (1.0, 748), (0.8333333333333333, 694), (0.7083333333333333, 11), (0.7083333333333333, 534), (0.7083333333333333, 809), (0.7083333333333333, 761), (0.7083333333333333, 889), (0.7083333333333333, 735), (0.7083333333333333, 776), (0.7083333333333333, 705), (0.7083333333333333, 759), (0.7083333333333333, 606), (0.7083333333333333, 646), (0.7083333333333333, 544), (0.7083333333333333, 885), (0.7083333333333333, 887), (0.7083333333333333, 888), (0.7083333333333333, 710), (0.5833333333333333, 779), (0.5833333333333333, 763), (0.5833333333333333, 817), (0.5833333333333333, 435), (0.5833333333333333, 419), (0.5833333333333333, 310), (0.5833333333333333, 556), (0.5833333333333333, 253), (0.5833333333333333, 536), (0.5833333333333333, 890), (0.5833333333333333, 655), (0.5833333333333333, 599), (0.5833333333333333, 190), (0.5833333333333333, 652), (0.5833333333333333, 183), (0.5833333333333333, 303), (0.5833333333333333, 200), (0.5833333333333333, 767), (0.5833333333333333, 538), (0.5833333333333333, 531), (0.5833333333333333, 651), (0.5833333333333333, 775), (0.5833333333333333, 437), (0.5833333333333333, 766), (0.5833333333333333, 215), (0.5833333333333333, 658), (0.5833333333333333, 701), (0.5833333333333333, 439), (0.5833333333333333, 545), (0.5833333333333333, 622), (0.5833333333333333, 683), (0.5833333333333333, 507), (0.5833333333333333, 307), (0.5833333333333333, 656), (0.5833333333333333, 657), (0.575, 781), (0.575, 660), (0.575, 240), (0.575, 663), (0.575, 543), (0.575, 432), (0.575, 785), (0.575, 269), (0.575, 713), (0.575, 394), (0.575, 542), (0.575, 41), (0.575, 783), (0.575, 662), (0.4583333333333333, 396), (0.4583333333333333, 346), (0.4583333333333333, 757), (0.4583333333333333, 851), (0.4583333333333333, 409), (0.4583333333333333, 685), (0.4583333333333333, 765), (0.4583333333333333, 841), (0.4583333333333333, 628), (0.4583333333333333, 239), (0.4583333333333333, 674), (0.4583333333333333, 770), (0.4583333333333333, 557), (0.4583333333333333, 195), (0.4583333333333333, 444), (0.4583333333333333, 722), (0.4583333333333333, 399), (0.4583333333333333, 355), (0.4583333333333333, 730), (0.4583333333333333, 627), (0.4583333333333333, 442), (0.4583333333333333, 686), (0.4583333333333333, 739), (0.4583333333333333, 414), (0.4583333333333333, 263), (0.4583333333333333, 840), (0.4583333333333333, 667), (0.4583333333333333, 717), (0.4583333333333333, 441), (0.4583333333333333, 549), (0.4583333333333333, 665), (0.4583333333333333, 712), (0.4583333333333333, 875), (0.4583333333333333, 669), (0.4583333333333333, 535), (0.4583333333333333, 677), (0.4583333333333333, 446), (0.4583333333333333, 352), (0.4583333333333333, 670), (0.4583333333333333, 8), (0.4583333333333333, 436), (0.4583333333333333, 427), (0.4583333333333333, 860), (0.4583333333333333, 391), (0.4583333333333333, 412), (0.4583333333333333, 788), (0.4583333333333333, 810), (0.4583333333333333, 552), (0.4583333333333333, 771), (0.4583333333333333, 540), (0.4583333333333333, 604), (0.4583333333333333, 561), (0.4583333333333333, 684), (0.4583333333333333, 598), (0.4583333333333333, 285), (0.4583333333333333, 560), (0.4583333333333333, 792), (0.4583333333333333, 891), (0.4583333333333333, 211), (0.4583333333333333, 682), (0.4583333333333333, 559), (0.4583333333333333, 550), (0.4583333333333333, 724), (0.4583333333333333, 365), (0.4583333333333333, 92), (0.4583333333333333, 687), (0.4583333333333333, 616), (0.4583333333333333, 158), (0.4583333333333333, 668), (0.4583333333333333, 618), (0.4583333333333333, 115), (0.4583333333333333, 293), (0.4583333333333333, 56), (0.4583333333333333, 29), (0.4583333333333333, 672), (0.4583333333333333, 31), (0.4583333333333333, 405), (0.4583333333333333, 773), (0.4583333333333333, 614), (0.45, 434), (0.45, 134), (0.45, 454), (0.45, 610), (0.45, 681), (0.45, 690), (0.45, 283), (0.45, 647), (0.45, 718), (0.45, 857), (0.45, 565), (0.45, 328), (0.45, 693), (0.45, 400), (0.45, 689), (0.45, 152), (0.45, 649), (0.45, 447), (0.45, 154), (0.45, 191), (0.45, 568), (0.45, 344), (0.45, 225), (0.45, 281), (0.45, 359), (0.45, 452), (0.45, 562), (0.45, 818), (0.45, 671), (0.45, 564), (0.45, 448), (0.39285714285714285, 174), (0.39285714285714285, 265), (0.39285714285714285, 333), (0.39285714285714285, 375), (0.39285714285714285, 34), (0.39285714285714285, 131), (0.39285714285714285, 14), (0.39285714285714285, 481), (0.39285714285714285, 300), (0.39285714285714285, 155), (0.39285714285714285, 130), (0.39285714285714285, 87), (0.39285714285714285, 479), (0.39285714285714285, 121), (0.39285714285714285, 490), (0.39285714285714285, 366), (0.39285714285714285, 214), (0.39285714285714285, 489), (0.39285714285714285, 12), (0.39285714285714285, 119), (0.39285714285714285, 98), (0.39285714285714285, 586), (0.39285714285714285, 89), (0.39285714285714285, 306), (0.39285714285714285, 198), (0.39285714285714285, 107), (0.39285714285714285, 498), (0.39285714285714285, 66), (0.3333333333333333, 859), (0.3333333333333333, 877), (0.3333333333333333, 869), (0.3333333333333333, 867), (0.325, 833), (0.325, 878), (0.325, 828), (0.325, 838), (0.325, 831), (0.26785714285714285, 836)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 425
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 695
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* (+ y x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 525
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (+ x y)))
 nr_nodes: 8]
[Generation 6]
[Computing fitness]
[(1.5, 898), (1.375, 895), (1.375, 654), (1.375, 515), (1.375, 906), (1.375, 786), (1.375, 893), (1.375, 501), (1.375, 425), (1.375, 430), (1.375, 539), (1.375, 688), (1.375, 525), (1.375, 955), (1.375, 842), (1.375, 799), (1.375, 695), (1.375, 900), (1.375, 264), (1.25, 873), (1.25, 754), (1.25, 805), (1.25, 42), (1.25, 715), (1.25, 630), (1.25, 969), (1.25, 607), (1.25, 505), (1.25, 802), (1.25, 642), (1.25, 823), (1.25, 725), (1.25, 716), (1.25, 909), (1.25, 815), (1.25, 707), (1.25, 925), (1.25, 697), (1.25, 813), (1.25, 916), (1.25, 601), (1.25, 371), (1.25, 905), (1.25, 937), (1.25, 762), (1.25, 402), (1.25, 512), (1.25, 407), (1.25, 737), (1.25, 852), (1.25, 603), (1.25, 827), (1.25, 793), (1.25, 184), (1.25, 555), (1.25, 719), (1.25, 299), (1.25, 706), (1.25, 699), (1.25, 918), (1.25, 704), (1.25, 914), (1.25, 551), (1.25, 726), (1.25, 594), (1.25, 923), (1.25, 702), (1.25, 778), (1.25, 631), (1.25, 666), (1.25, 812), (1.25, 942), (1.25, 797), (1.25, 358), (1.25, 826), (1.25, 608), (1.25, 703), (1.25, 911), (1.25, 554), (1.25, 600), (1.25, 938), (1.25, 921), (1.25, 896), (1.25, 524), (1.25, 506), (1.25, 825), (1.25, 822), (1.25, 800), (1.25, 709), (1.25, 972), (1.25, 185), (1.25, 518), (1.25, 90), (1.25, 814), (1.25, 808), (1.25, 72), (1.25, 958), (1.25, 908), (1.125, 899), (1.125, 736), (1.125, 727), (1.125, 173), (1.125, 199), (1.125, 839), (1.125, 416), (1.125, 983), (1.125, 848), (1.125, 27), (1.125, 417), (1.125, 162), (1.125, 740), (1.125, 807), (1.125, 843), (1.125, 959), (1.125, 619), (1.125, 58), (1.125, 326), (1.125, 624), (1.125, 620), (1.125, 882), (1.125, 975), (1.125, 633), (1.125, 832), (1.125, 968), (1.125, 612), (1.125, 415), (1.125, 944), (1.125, 519), (1.125, 262), (1.125, 849), (1.125, 855), (1.125, 795), (1.125, 846), (1.125, 517), (1.125, 742), (1.125, 956), (1.125, 950), (1.125, 349), (1.125, 790), (1.125, 548), (1.125, 424), (1.125, 156), (1.125, 926), (1.125, 546), (1.125, 953), (1.125, 858), (1.125, 216), (1.125, 966), (1.125, 915), (1.125, 824), (1.125, 679), (1.125, 954), (1.125, 743), (1.125, 845), (1.125, 819), (1.125, 820), (1.125, 28), (1.125, 922), (1.125, 837), (1.125, 397), (1.125, 729), (1.125, 420), (1.125, 970), (1.125, 67), (1.125, 853), (1.125, 563), (1.125, 948), (1.125, 127), (1.125, 721), (1.125, 418), (1.125, 774), (1.125, 343), (1.125, 835), (1.125, 940), (1.125, 212), (1.125, 334), (1.125, 75), (1.125, 132), (1.125, 933), (1.125, 232), (1.125, 613), (1.125, 251), (1.125, 816), (1.125, 903), (1.125, 18), (1.0, 639), (1.0, 423), (1.0, 884), (1.0, 395), (1.0, 830), (1.0, 445), (1.0, 641), (1.0, 714), (1.0, 758), (1.0, 176), (1.0, 242), (1.0, 502), (1.0, 752), (1.0, 872), (1.0, 871), (1.0, 411), (1.0, 521), (1.0, 421), (1.0, 527), (1.0, 529), (1.0, 636), (1.0, 626), (1.0, 868), (1.0, 864), (1.0, 880), (1.0, 637), (1.0, 528), (1.0, 883), (1.0, 746), (1.0, 982), (1.0, 533), (1.0, 6), (1.0, 753), (1.0, 404), (1.0, 756), (1.0, 105), (1.0, 804), (1.0, 645), (1.0, 640), (1.0, 745), (1.0, 748), (1.0, 862), (1.0, 339), (1.0, 865), (0.8333333333333333, 694), (0.7083333333333333, 606), (0.7083333333333333, 705), (0.7083333333333333, 809), (0.7083333333333333, 888), (0.7083333333333333, 534), (0.7083333333333333, 761), (0.7083333333333333, 887), (0.7083333333333333, 544), (0.7083333333333333, 759), (0.7083333333333333, 735), (0.7083333333333333, 776), (0.7083333333333333, 889), (0.7083333333333333, 710), (0.7083333333333333, 646), (0.7083333333333333, 11), (0.7083333333333333, 885), (0.5833333333333333, 930), (0.5833333333333333, 183), (0.5833333333333333, 947), (0.5833333333333333, 556), (0.5833333333333333, 775), (0.5833333333333333, 253), (0.5833333333333333, 766), (0.5833333333333333, 656), (0.5833333333333333, 536), (0.5833333333333333, 435), (0.5833333333333333, 538), (0.5833333333333333, 651), (0.5833333333333333, 701), (0.5833333333333333, 779), (0.5833333333333333, 599), (0.5833333333333333, 763), (0.5833333333333333, 215), (0.5833333333333333, 980), (0.5833333333333333, 658), (0.5833333333333333, 437), (0.5833333333333333, 439), (0.5833333333333333, 190), (0.5833333333333333, 622), (0.5833333333333333, 507), (0.5833333333333333, 419), (0.5833333333333333, 890), (0.5833333333333333, 657), (0.5833333333333333, 652), (0.5833333333333333, 531), (0.5833333333333333, 767), (0.5833333333333333, 817), (0.5833333333333333, 310), (0.5833333333333333, 303), (0.5833333333333333, 545), (0.5833333333333333, 683), (0.5833333333333333, 200), (0.5833333333333333, 655), (0.5833333333333333, 307), (0.575, 663), (0.575, 240), (0.575, 785), (0.575, 543), (0.575, 783), (0.575, 432), (0.575, 713), (0.575, 542), (0.575, 660), (0.575, 269), (0.575, 781), (0.575, 662), (0.575, 41), (0.575, 394), (0.575, 904), (0.4583333333333333, 739), (0.4583333333333333, 293), (0.4583333333333333, 730), (0.4583333333333333, 158), (0.4583333333333333, 540), (0.4583333333333333, 56), (0.4583333333333333, 687), (0.4583333333333333, 757), (0.4583333333333333, 436), (0.4583333333333333, 810), (0.4583333333333333, 978), (0.4583333333333333, 442), (0.4583333333333333, 670), (0.4583333333333333, 724), (0.4583333333333333, 939), (0.4583333333333333, 910), (0.4583333333333333, 977), (0.4583333333333333, 907), (0.4583333333333333, 717), (0.4583333333333333, 722), (0.4583333333333333, 792), (0.4583333333333333, 239), (0.4583333333333333, 875), (0.4583333333333333, 674), (0.4583333333333333, 414), (0.4583333333333333, 669), (0.4583333333333333, 934), (0.4583333333333333, 616), (0.4583333333333333, 946), (0.4583333333333333, 957), (0.4583333333333333, 952), (0.4583333333333333, 901), (0.4583333333333333, 665), (0.4583333333333333, 409), (0.4583333333333333, 399), (0.4583333333333333, 667), (0.4583333333333333, 427), (0.4583333333333333, 840), (0.4583333333333333, 618), (0.4583333333333333, 686), (0.4583333333333333, 549), (0.4583333333333333, 682), (0.4583333333333333, 396), (0.4583333333333333, 550), (0.4583333333333333, 352), (0.4583333333333333, 928), (0.4583333333333333, 598), (0.4583333333333333, 841), (0.4583333333333333, 851), (0.4583333333333333, 263), (0.4583333333333333, 765), (0.4583333333333333, 685), (0.4583333333333333, 559), (0.4583333333333333, 902), (0.4583333333333333, 945), (0.4583333333333333, 346), (0.4583333333333333, 365), (0.4583333333333333, 949), (0.4583333333333333, 917), (0.4583333333333333, 446), (0.4583333333333333, 412), (0.4583333333333333, 211), (0.4583333333333333, 285), (0.4583333333333333, 604), (0.4583333333333333, 8), (0.4583333333333333, 668), (0.4583333333333333, 92), (0.4583333333333333, 561), (0.4583333333333333, 628), (0.4583333333333333, 712), (0.4583333333333333, 560), (0.4583333333333333, 444), (0.4583333333333333, 788), (0.4583333333333333, 195), (0.4583333333333333, 355), (0.4583333333333333, 891), (0.4583333333333333, 677), (0.4583333333333333, 552), (0.4583333333333333, 627), (0.4583333333333333, 684), (0.4583333333333333, 391), (0.4583333333333333, 771), (0.4583333333333333, 770), (0.4583333333333333, 115), (0.4583333333333333, 535), (0.4583333333333333, 860), (0.4583333333333333, 441), (0.4583333333333333, 941), (0.4583333333333333, 557), (0.45, 935), (0.45, 920), (0.3333333333333333, 981), (0.3333333333333333, 974), (0.3333333333333333, 985), (0.325, 931), (0.325, 963), (0.325, 967), (0.325, 961), (0.325, 951), (0.2, 964), (0.2, 912)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 898
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (* x 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 654
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x y) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 906
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`3`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ (+ x 3) y)) x))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.75, 1027), (1.5, 987), (1.5, 898), (1.375, 955), (1.375, 695), (1.375, 893), (1.375, 991), (1.375, 425), (1.375, 900), (1.375, 996), (1.375, 906), (1.375, 539), (1.375, 786), (1.375, 688), (1.375, 430), (1.375, 990), (1.375, 525), (1.375, 1007), (1.375, 264), (1.375, 1049), (1.375, 501), (1.375, 895), (1.375, 1025), (1.375, 515), (1.375, 654), (1.375, 799), (1.375, 842), (1.25, 1037), (1.25, 1001), (1.25, 905), (1.25, 969), (1.25, 826), (1.25, 1034), (1.25, 908), (1.25, 554), (1.25, 914), (1.25, 797), (1.25, 805), (1.25, 704), (1.25, 185), (1.25, 719), (1.25, 551), (1.25, 603), (1.25, 184), (1.25, 1012), (1.25, 1016), (1.25, 642), (1.25, 999), (1.25, 726), (1.25, 1076), (1.25, 1028), (1.25, 1033), (1.25, 827), (1.25, 737), (1.25, 600), (1.25, 942), (1.25, 921), (1.25, 1004), (1.25, 1019), (1.25, 815), (1.25, 916), (1.25, 697), (1.25, 814), (1.25, 1014), (1.25, 800), (1.25, 925), (1.25, 1020), (1.25, 793), (1.25, 938), (1.25, 812), (1.25, 754), (1.25, 762), (1.25, 703), (1.25, 852), (1.25, 873), (1.25, 407), (1.25, 1009), (1.25, 1006), (1.25, 594), (1.25, 608), (1.25, 958), (1.25, 601), (1.25, 42), (1.25, 1035), (1.25, 808), (1.25, 909), (1.25, 802), (1.25, 972), (1.25, 555), (1.25, 699), (1.25, 72), (1.25, 1011), (1.25, 1060), (1.25, 709), (1.25, 993), (1.25, 702), (1.25, 631), (1.25, 358), (1.25, 707), (1.25, 911), (1.25, 706), (1.25, 896), (1.25, 90), (1.25, 1047), (1.25, 923), (1.25, 505), (1.25, 822), (1.25, 725), (1.25, 607), (1.25, 716), (1.25, 937), (1.25, 1036), (1.25, 524), (1.25, 402), (1.25, 630), (1.25, 823), (1.25, 715), (1.25, 778), (1.25, 299), (1.25, 666), (1.25, 371), (1.25, 825), (1.25, 918), (1.25, 506), (1.25, 512), (1.25, 518), (1.25, 995), (1.25, 813), (1.125, 1080), (1.125, 679), (1.125, 998), (1.125, 933), (1.125, 944), (1.125, 75), (1.125, 1073), (1.125, 417), (1.125, 975), (1.125, 1075), (1.125, 824), (1.125, 1081), (1.125, 251), (1.125, 1085), (1.125, 424), (1.125, 954), (1.125, 548), (1.125, 1065), (1.125, 619), (1.125, 740), (1.125, 903), (1.125, 132), (1.125, 613), (1.125, 1057), (1.125, 743), (1.125, 832), (1.125, 415), (1.125, 956), (1.125, 546), (1.125, 983), (1.125, 795), (1.125, 940), (1.125, 853), (1.125, 517), (1.125, 899), (1.125, 835), (1.125, 839), (1.125, 624), (1.125, 846), (1.125, 519), (1.125, 28), (1.125, 790), (1.125, 819), (1.125, 968), (1.125, 326), (1.125, 820), (1.125, 1051), (1.125, 27), (1.125, 262), (1.125, 970), (1.125, 1082), (1.125, 343), (1.125, 199), (1.125, 334), (1.125, 156), (1.125, 926), (1.125, 1044), (1.125, 959), (1.125, 915), (1.125, 948), (1.125, 807), (1.125, 212), (1.125, 922), (1.125, 216), (1.125, 1021), (1.125, 727), (1.125, 849), (1.125, 620), (1.125, 816), (1.125, 1000), (1.125, 845), (1.125, 950), (1.125, 58), (1.125, 418), (1.125, 416), (1.125, 953), (1.125, 1061), (1.125, 742), (1.125, 349), (1.125, 162), (1.125, 420), (1.125, 1058), (1.125, 563), (1.125, 127), (1.125, 848), (1.125, 397), (1.125, 1077), (1.125, 18), (1.125, 736), (1.125, 1083), (1.125, 729), (1.125, 721), (1.125, 837), (1.125, 843), (1.125, 67), (1.125, 855), (1.125, 1063), (1.125, 633), (1.125, 173), (1.125, 774), (1.125, 232), (1.125, 966), (1.125, 882), (1.125, 612), (1.125, 858), (1.0833333333333333, 1022), (1.0, 105), (1.0, 746), (1.0, 864), (1.0, 714), (1.0, 404), (1.0, 758), (1.0, 752), (1.0, 641), (1.0, 862), (1.0, 411), (1.0, 639), (1.0, 883), (1.0, 748), (1.0, 753), (1.0, 871), (1.0, 756), (1.0, 423), (1.0, 528), (1.0, 868), (1.0, 502), (1.0, 636), (1.0, 830), (1.0, 527), (1.0, 626), (1.0, 872), (1.0, 421), (1.0, 395), (1.0, 640), (1.0, 242), (1.0, 445), (1.0, 745), (1.0, 865), (1.0, 339), (1.0, 176), (1.0, 645), (1.0, 521), (1.0, 880), (1.0, 529), (1.0, 637), (1.0, 6), (1.0, 533), (1.0, 884), (1.0, 804), (1.0, 982), (0.8333333333333333, 694), (0.7083333333333333, 710), (0.7083333333333333, 888), (0.7083333333333333, 759), (0.7083333333333333, 889), (0.7083333333333333, 606), (0.7083333333333333, 735), (0.7083333333333333, 1046), (0.7083333333333333, 534), (0.7083333333333333, 809), (0.7083333333333333, 646), (0.7083333333333333, 887), (0.7083333333333333, 11), (0.7083333333333333, 544), (0.7083333333333333, 776), (0.7083333333333333, 1053), (0.7083333333333333, 761), (0.7083333333333333, 885), (0.7083333333333333, 705), (0.5833333333333333, 980), (0.5833333333333333, 657), (0.5833333333333333, 775), (0.5833333333333333, 652), (0.5833333333333333, 656), (0.5833333333333333, 947), (0.5833333333333333, 419), (0.5833333333333333, 307), (0.5833333333333333, 215), (0.5833333333333333, 435), (0.5833333333333333, 507), (0.5833333333333333, 658), (0.5833333333333333, 183), (0.5833333333333333, 701), (0.5833333333333333, 439), (0.5833333333333333, 536), (0.5833333333333333, 655), (0.5833333333333333, 683), (0.5833333333333333, 556), (0.5833333333333333, 545), (0.5833333333333333, 766), (0.5833333333333333, 253), (0.5833333333333333, 817), (0.5833333333333333, 890), (0.5833333333333333, 989), (0.5833333333333333, 303), (0.5833333333333333, 1003), (0.5833333333333333, 599), (0.5833333333333333, 622), (0.5833333333333333, 779), (0.5833333333333333, 930), (0.5833333333333333, 767), (0.5833333333333333, 190), (0.5833333333333333, 763), (0.5833333333333333, 1030), (0.5833333333333333, 651), (0.5833333333333333, 200), (0.5833333333333333, 531), (0.5833333333333333, 437), (0.5833333333333333, 538), (0.5833333333333333, 310), (0.5833333333333333, 1086), (0.575, 394), (0.575, 542), (0.575, 269), (0.575, 663), (0.575, 543), (0.575, 41), (0.575, 432), (0.575, 904), (0.575, 713), (0.575, 785), (0.575, 662), (0.575, 783), (0.575, 781), (0.575, 660), (0.575, 240), (0.4583333333333333, 1056), (0.4583333333333333, 1079), (0.4583333333333333, 56), (0.4583333333333333, 977), (0.4583333333333333, 670), (0.4583333333333333, 669), (0.4583333333333333, 1054), (0.4583333333333333, 414), (0.4583333333333333, 1040), (0.4583333333333333, 792), (0.4583333333333333, 907), (0.4583333333333333, 717), (0.4583333333333333, 724), (0.4583333333333333, 910), (0.4583333333333333, 978), (0.4583333333333333, 875), (0.4583333333333333, 436), (0.4583333333333333, 1059), (0.4583333333333333, 739), (0.4583333333333333, 1064), (0.4583333333333333, 158), (0.4583333333333333, 810), (0.4583333333333333, 442), (0.4583333333333333, 687), (0.4583333333333333, 730), (0.4583333333333333, 722), (0.4583333333333333, 939), (0.4583333333333333, 1071), (0.4583333333333333, 674), (0.4583333333333333, 1045), (0.4583333333333333, 1017), (0.4583333333333333, 239), (0.4583333333333333, 293), (0.4583333333333333, 757), (0.4583333333333333, 540), (0.45, 1010), (0.45, 1074), (0.45, 1024), (0.3333333333333333, 1031), (0.325, 1039), (0.325, 1069), (0.325, 1029), (0.325, 1042), (0.325, 1015), (0.325, 1067), (0.325, 1032)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1027
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 987
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) x) (* x 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 898
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (* x 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 955
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`3`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ x (* y (+ 3 y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 695
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
[Generation 8]
[Computing fitness]
[(1.75, 1027), (1.5, 987), (1.5, 898), (1.375, 654), (1.375, 991), (1.375, 893), (1.375, 695), (1.375, 688), (1.375, 786), (1.375, 996), (1.375, 430), (1.375, 501), (1.375, 1091), (1.375, 525), (1.375, 1025), (1.375, 842), (1.375, 539), (1.375, 895), (1.375, 1093), (1.375, 264), (1.375, 955), (1.375, 1101), (1.375, 906), (1.375, 900), (1.375, 799), (1.375, 1049), (1.375, 515), (1.375, 990), (1.375, 1173), (1.375, 425), (1.375, 1007), (1.25, 1014), (1.25, 896), (1.25, 1135), (1.25, 995), (1.25, 299), (1.25, 958), (1.25, 1047), (1.25, 905), (1.25, 918), (1.25, 725), (1.25, 702), (1.25, 402), (1.25, 603), (1.25, 594), (1.25, 1149), (1.25, 1097), (1.25, 873), (1.25, 802), (1.25, 706), (1.25, 1114), (1.25, 1028), (1.25, 630), (1.25, 1037), (1.25, 1001), (1.25, 827), (1.25, 1016), (1.25, 1006), (1.25, 1034), (1.25, 1156), (1.25, 993), (1.25, 1009), (1.25, 1019), (1.25, 699), (1.25, 812), (1.25, 793), (1.25, 778), (1.25, 1161), (1.25, 185), (1.25, 607), (1.25, 704), (1.25, 916), (1.25, 1162), (1.25, 505), (1.25, 600), (1.25, 925), (1.25, 518), (1.25, 999), (1.25, 407), (1.25, 709), (1.25, 1118), (1.25, 703), (1.25, 1036), (1.25, 608), (1.25, 808), (1.25, 551), (1.25, 822), (1.25, 631), (1.25, 707), (1.25, 42), (1.25, 1033), (1.25, 825), (1.25, 719), (1.25, 506), (1.25, 1177), (1.25, 1035), (1.25, 815), (1.25, 72), (1.25, 1163), (1.25, 512), (1.25, 938), (1.25, 555), (1.25, 1129), (1.25, 1119), (1.25, 814), (1.25, 800), (1.25, 969), (1.25, 1020), (1.25, 942), (1.25, 1138), (1.25, 358), (1.25, 911), (1.25, 1125), (1.25, 823), (1.25, 737), (1.25, 921), (1.25, 1099), (1.25, 1108), (1.25, 601), (1.25, 754), (1.25, 715), (1.25, 90), (1.25, 642), (1.25, 1012), (1.25, 937), (1.25, 554), (1.25, 1144), (1.25, 1169), (1.25, 1130), (1.25, 826), (1.25, 923), (1.25, 666), (1.25, 852), (1.25, 1076), (1.25, 1098), (1.25, 1166), (1.25, 1126), (1.25, 972), (1.25, 1136), (1.25, 1011), (1.25, 908), (1.25, 762), (1.25, 813), (1.25, 184), (1.25, 1164), (1.25, 909), (1.25, 716), (1.25, 914), (1.25, 797), (1.25, 1060), (1.25, 805), (1.25, 697), (1.25, 1004), (1.25, 726), (1.25, 371), (1.25, 524), (1.125, 1140), (1.125, 983), (1.125, 424), (1.125, 1167), (1.125, 853), (1.125, 1168), (1.125, 27), (1.125, 349), (1.125, 415), (1.125, 816), (1.125, 1096), (1.125, 1065), (1.125, 1176), (1.125, 417), (1.125, 998), (1.125, 262), (1.125, 1175), (1.125, 835), (1.125, 162), (1.125, 620), (1.125, 727), (1.125, 954), (1.125, 975), (1.125, 968), (1.125, 1109), (1.125, 933), (1.125, 1082), (1.125, 1063), (1.125, 1127), (1.125, 251), (1.125, 849), (1.125, 843), (1.125, 959), (1.125, 940), (1.125, 1058), (1.125, 58), (1.125, 824), (1.125, 1179), (1.125, 970), (1.125, 819), (1.125, 903), (1.125, 1051), (1.125, 1057), (1.125, 944), (1.125, 795), (1.125, 858), (1.125, 132), (1.125, 1080), (1.125, 1083), (1.125, 1160), (1.125, 326), (1.125, 1133), (1.125, 832), (1.125, 418), (1.125, 1155), (1.125, 519), (1.125, 790), (1.125, 1077), (1.125, 1132), (1.125, 922), (1.125, 721), (1.125, 1081), (1.125, 966), (1.125, 956), (1.125, 232), (1.125, 839), (1.125, 343), (1.125, 1145), (1.125, 1044), (1.125, 926), (1.125, 212), (1.125, 67), (1.125, 848), (1.125, 334), (1.125, 736), (1.125, 173), (1.125, 729), (1.125, 613), (1.125, 633), (1.125, 18), (1.125, 1107), (1.125, 1123), (1.125, 1075), (1.125, 915), (1.125, 807), (1.125, 563), (1.125, 1088), (1.125, 953), (1.125, 743), (1.125, 837), (1.125, 882), (1.125, 855), (1.125, 846), (1.125, 612), (1.125, 1121), (1.125, 156), (1.125, 1089), (1.125, 546), (1.125, 75), (1.125, 950), (1.125, 1000), (1.125, 845), (1.125, 624), (1.125, 517), (1.125, 1021), (1.125, 820), (1.125, 1085), (1.125, 416), (1.125, 899), (1.125, 548), (1.125, 679), (1.125, 742), (1.125, 199), (1.125, 1061), (1.125, 127), (1.125, 619), (1.125, 740), (1.125, 948), (1.125, 1189), (1.125, 1073), (1.125, 397), (1.125, 1110), (1.125, 774), (1.125, 420), (1.125, 216), (1.125, 1151), (1.125, 28), (1.0833333333333333, 1022), (1.0, 527), (1.0, 626), (1.0, 639), (1.0, 533), (1.0, 529), (1.0, 6), (1.0, 753), (1.0, 872), (1.0, 982), (1.0, 404), (1.0, 756), (1.0, 176), (1.0, 423), (1.0, 880), (1.0, 521), (1.0, 640), (1.0, 242), (1.0, 746), (1.0, 445), (1.0, 105), (1.0, 752), (1.0, 421), (1.0, 637), (1.0, 339), (1.0, 528), (1.0, 745), (1.0, 868), (1.0, 645), (1.0, 636), (1.0, 862), (1.0, 884), (1.0, 883), (1.0, 804), (1.0, 865), (1.0, 864), (1.0, 758), (1.0, 748), (1.0, 502), (1.0, 395), (1.0, 1120), (1.0, 411), (1.0, 830), (1.0, 714), (1.0, 871), (1.0, 641), (0.8333333333333333, 694), (0.7083333333333333, 887), (0.7083333333333333, 735), (0.7083333333333333, 606), (0.7083333333333333, 809), (0.7083333333333333, 544), (0.7083333333333333, 889), (0.7083333333333333, 710), (0.7083333333333333, 1046), (0.7083333333333333, 761), (0.7083333333333333, 11), (0.7083333333333333, 646), (0.7083333333333333, 888), (0.7083333333333333, 776), (0.7083333333333333, 1053), (0.7083333333333333, 885), (0.7083333333333333, 705), (0.7083333333333333, 759), (0.7083333333333333, 534), (0.5833333333333333, 303), (0.5833333333333333, 980), (0.5833333333333333, 989), (0.5833333333333333, 890), (0.5833333333333333, 656), (0.5833333333333333, 419), (0.5833333333333333, 766), (0.5833333333333333, 1105), (0.5833333333333333, 1103), (0.5833333333333333, 599), (0.5833333333333333, 253), (0.5833333333333333, 215), (0.5833333333333333, 1131), (0.5833333333333333, 1003), (0.5833333333333333, 947), (0.5833333333333333, 507), (0.5833333333333333, 655), (0.5833333333333333, 435), (0.5833333333333333, 701), (0.5833333333333333, 1112), (0.5833333333333333, 307), (0.5833333333333333, 1184), (0.5833333333333333, 439), (0.5833333333333333, 556), (0.5833333333333333, 183), (0.5833333333333333, 657), (0.5833333333333333, 658), (0.5833333333333333, 545), (0.5833333333333333, 652), (0.5833333333333333, 775), (0.5833333333333333, 683), (0.5833333333333333, 817), (0.5833333333333333, 1142), (0.5833333333333333, 536), (0.575, 1094), (0.4583333333333333, 1111), (0.4583333333333333, 1188), (0.4583333333333333, 1153), (0.4583333333333333, 1137), (0.4583333333333333, 1183), (0.4583333333333333, 1181), (0.4583333333333333, 1116), (0.4583333333333333, 1171), (0.4583333333333333, 1106), (0.4583333333333333, 1159), (0.45, 1147), (0.45, 1124), (0.45, 1165), (0.3333333333333333, 1148), (0.325, 1157), (0.325, 1186), (0.325, 1141)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1027
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 987
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) x) (* x 3)))
 nr_nodes: 10]
(CANDIDATE)[id: 898
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`3`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (* x 3)))
 nr_nodes: 8]
(CANDIDATE)[id: 654
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x y) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 991
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* x x)))
 nr_nodes: 8]
[Generation 9]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (+ (+ y (* y (* 3 x))) x))

Process finished with exit code 0
