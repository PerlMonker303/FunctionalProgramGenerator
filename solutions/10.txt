D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 1 (+ 1 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- y 1) (+ x (- (+ (+ (+ 1 1) (+ y x)) y) (* x (- (- 1 x) 1))))))
 nr_nodes: 24]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`1`#`#`x`#`#`x`#`#`(- ? ?)`(- ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`x`#`#`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (- y (- 1 x)) x) (- (- (* 1 y) (- x 1)) y)) 1))
 nr_nodes: 20]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ (- 1 1) x)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ (* y 1) x) (* (- 1 (+ y x)) 1)) 1))
 nr_nodes: 16]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`1`#`#`1`#`#`(- ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (+ (- x (* 1 1)) 1) (- 1 x)) (* 1 (+ (* x (* y 1)) y))))
 nr_nodes: 22]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* 1 y)) (* x (+ x 1))))
 nr_nodes: 12]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (- (+ y x) (+ y x)) (+ y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`y`#`#`(- ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (- y (- (- y y) 1)) y) x))
 nr_nodes: 12]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (* 1 (* x (+ y x)))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (- (- 1 y) (* 1 x)) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- (- x y) (+ (+ (+ y x) y) x))))
 nr_nodes: 14]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x y) x) (+ (* x 1) (- x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(- ? ?)`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (- x (* (+ y 1) 1))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* y 1) y) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`1`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ y (* (* (* x x) 1) (- (+ x x) (- x x))))))
 nr_nodes: 18]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* (* y x) x) (* y y)) 1) (* (* 1 (+ (+ y x) y)) (* (* (+ y x) (- x x)) (+ x x)))))
 nr_nodes: 32]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y 1) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- y (* 1 1)) y) (+ 1 y)))
 nr_nodes: 12]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x y) 1) y))
 nr_nodes: 8]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* y (- y x)) (- (+ x y) y)) 1) y))
 nr_nodes: 16]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x (+ (+ y x) x)) (* y (+ (+ x 1) (* 1 x)))) (* y (+ 1 y))))
 nr_nodes: 24]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* x y) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- y x) (- (- 1 1) (+ y (* y 1)))))
 nr_nodes: 14]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- (+ (- (* (* x x) x) y) (+ y y)) (* (* x 1) 1))))
 nr_nodes: 20]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`(- ? ?)`(- ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`x`#`#`y`#`#`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 1 (- (- x (- y x)) (- (- x y) 1))) y) x))
 nr_nodes: 18]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* y (- (* y x) x)) (+ (- (* x y) y) y)) x))
 nr_nodes: 18]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`y`#`#`1`#`#`1`#`#`1`#`#`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 (* x x)) (* 1 y)) (+ (* (+ (- (- y 1) 1) 1) (- (* (* x 1) x) 1)) x)))
 nr_nodes: 28]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`1`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* (* (+ (* y x) (- x x)) (+ x y)) 1) x) (* x (* y y))))
 nr_nodes: 22]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 1) x))
 nr_nodes: 6]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- (* (- 1 1) y) (+ (+ y 1) x)) (* y (* (* y 1) 1))) (+ y (* (+ (- y y) 1) (+ (* y y) y)))))
 nr_nodes: 34]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`x`#`#`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y (- x (- (* (* y x) (- (+ y 1) (* y 1))) 1))))
 nr_nodes: 18]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`1`#`#`(- ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (- (+ (- x 1) 1) (- 1 (- x y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (- 1 y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`1`#`#`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* (+ (+ y 1) y) 1) (- x (+ (- 1 x) (* y x)))) (* (- (* x y) y) (- x (* y x))))))
 nr_nodes: 32]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`1`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- 1 y) (* (* (+ y x) (- 1 1)) (* (* y y) (- 1 1)))) (+ 1 x)))
 nr_nodes: 24]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (* y 1) (+ x 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(- ? ?)`1`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x (- 1 (* 1 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (- (+ x x) y) (- y 1))))
 nr_nodes: 12]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`(- ? ?)`1`#`#`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`1`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x (+ (+ (- 1 1) 1) (- 1 (* 1 y)))) (+ (+ (- (+ y x) x) (* 1 x)) y)) x))
 nr_nodes: 28]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ (+ y 1) (+ (* x y) 1)) (+ x 1))))
 nr_nodes: 16]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (- (+ y 1) (* x y)) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`x`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (+ (+ x y) y) x) (+ (+ (- 1 x) 1) x)) (+ (- (- 1 1) x) y)))
 nr_nodes: 24]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`(* ? ?)`x`#`#`1`#`#`(- ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 (* (+ y (- (* x 1) (- x y))) (- x (+ x (+ x y))))) x))
 nr_nodes: 22]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* x y) 1) (+ (+ 1 x) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) y) (- y (+ 1 (+ (- y y) (+ x (- y y)))))))
 nr_nodes: 20]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ x 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`1`#`#`1`#`#`1`#`#`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (- (* 1 1) 1) x) 1) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- y (* y y)) y) (+ y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (- y y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 1 (* y (* (- 1 1) x))) x) (* y y)))
 nr_nodes: 16]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* x (+ (- (* x x) x) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`x`#`#`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- x x) y) (* (+ 1 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* x y) x) x))
 nr_nodes: 8]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 (* 1 (* y x))))
 nr_nodes: 8]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`1`#`#`1`#`#`(- ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (* y (+ (- 1 y) (* 1 1))) (+ y (* 1 (* 1 1)))) (- (* (* 1 y) (- x y)) 1)))
 nr_nodes: 28]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`(- ? ?)`(- ? ?)`y`#`#`1`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ 1 (+ 1 y)) (+ y y)) (- (- y 1) (- 1 1))))
 nr_nodes: 18]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 y) 1) y))
 nr_nodes: 8]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ x y) (+ (+ (- x 1) 1) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 1 x) (+ y y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`1`#`#`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (- 1 y) (* x 1)) (+ (- x y) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`1`#`#`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x (+ (- 1 (+ (- y 1) (+ (* y y) (- 1 x)))) (- (+ 1 x) 1))))
 nr_nodes: 22]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`x`#`#`y`#`#`y`#`#`(- ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- x y) y) (- (- y y) (* x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* 1 x) (* y y)) (+ (- y y) 1)) (- x 1)))
 nr_nodes: 18]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`1`#`#`(* ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (* (+ y 1) x) 1) (* (- (- y x) x) (* 1 (* y y)))))
 nr_nodes: 20]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (* 1 x) (+ x x)) (* x (* 1 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (* (- y x) (+ (- y y) (- 1 1))))))
 nr_nodes: 16]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ (- y x) (+ x y)) y) (* (* y (+ x x)) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`x`#`#`(- ? ?)`y`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ y (- (+ y 1) y)) x) (- y (+ (- (* y y) x) (- (- 1 1) (+ 1 1))))))
 nr_nodes: 26]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (+ (* x x) (* x x)) x) y))
 nr_nodes: 12]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* 1 y) (- 1 1)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ (+ x (- 1 y)) (* (+ x y) (* 1 y))) (* 1 (- y y))) (- 1 1)))
 nr_nodes: 24]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`(- ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (- (- (+ (* 1 x) (+ y 1)) (+ y (* 1 1))) (- 1 y)) (+ x (- x (* (* x y) (+ x x)))))))
 nr_nodes: 32]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`1`#`#`1`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (* (+ (- (* 1 x) (+ 1 1)) y) x) (* y 1)) x))
 nr_nodes: 18]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- y 1) 1) x))
 nr_nodes: 8]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 x) (- 1 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (+ 1 1)) (+ (* x y) (- (* y (+ 1 (+ 1 y))) x))))
 nr_nodes: 20]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (* 1 x) (+ (- y x) x))))
 nr_nodes: 12]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) (* (* (* y x) (+ x x)) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`1`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (- (+ y x) (* x y)) (* (- y x) (* 1 x))) (* (- (+ x 1) 1) (+ (+ y y) (+ 1 y)))))
 nr_nodes: 30]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`(* ? ?)`(- ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- (- (* 1 y) 1) (* (- 1 y) x))))
 nr_nodes: 14]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`x`#`#`(* ? ?)`1`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* 1 (* x 1))) (* x (* 1 (* 1 y)))))
 nr_nodes: 16]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`x`#`#`(- ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- (+ y 1) (+ y y)) x) (- x (- (* 1 x) (* 1 1)))))
 nr_nodes: 20]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`y`#`#`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (- (+ (* x 1) y) 1) x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(- ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`1`#`#`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ (- (+ (- x 1) 1) (+ x (- 1 1))) x)))
 nr_nodes: 18]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(- ? ?)`x`#`#`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (- x (* (* (- 1 x) y) (- x (+ y 1)))) 1)))
 nr_nodes: 18]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`(- ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ x (- (- (* y x) (* 1 y)) (- 1 1))) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`1`#`#`(+ ? ?)`x`#`#`y`#`#`(- ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- 1 (+ x y)) (- (* x 1) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 (* y x)) (* (* y 1) (* y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 1 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 1) (+ y x)) (* y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`1`#`#`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* 1 (+ x 1)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ (* y 1) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (- 1 y)) (- y (* (* (+ x 1) (+ y y)) (* x (+ 1 y))))))
 nr_nodes: 22]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ (* x y) (- x 1)) 1) y))
 nr_nodes: 12]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 1) x))
 nr_nodes: 6]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`1`#`#`(- ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- (- y 1) (- x x)) (* (+ x 1) x)) (+ (* (- y y) (+ x x)) (* 1 y))))
 nr_nodes: 26]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- (- (+ (+ y x) 1) (+ (+ x x) (* 1 x))) x)))
 nr_nodes: 18]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (+ x (* (- y (* 1 (* y 1))) x))))
 nr_nodes: 14]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`1`#`#`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`(+ ? ?)`(- ? ?)`1`#`#`(* ? ?)`1`#`#`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- (* (* 1 y) (- y 1)) (- (+ y 1) y)) (+ (- 1 (* 1 1)) x)) 1))
 nr_nodes: 24]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`y`#`#`(- ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 (* 1 (* y x))) (- (* (* (* y (* y y)) 1) y) (- (* 1 (+ y 1)) (+ (* x 1) x)))))
 nr_nodes: 30]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`y`#`#`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`(+ ? ?)`1`#`#`x`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* (+ 1 y) (- y (+ y y))) y) y) (- (+ (- y (+ (- x 1) (+ 1 x))) x) (* 1 y))))
 nr_nodes: 30]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`1`#`#`1`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (* 1 1) x) (- y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`(+ ? ?)`1`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- x x) x) (+ 1 (- x 1))))
 nr_nodes: 12]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`(- ? ?)`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- y (- (- 1 1) (+ y y))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- (- y y) (* y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`(* ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ x (* 1 1)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) (* x y)) (* x (+ 1 x))))
 nr_nodes: 14]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (+ 1 x)) (+ (* y x) (+ y x))))
 nr_nodes: 16]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (- y (+ 1 y))) x))
 nr_nodes: 10]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (- x x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x y) x) y))
 nr_nodes: 8]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- (+ (+ x y) (* 1 x)) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (- (+ 1 x) (- y x)) (+ y (- y 1)))))
 nr_nodes: 16]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- x y) (+ y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ x 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y 1) x) (- y (* y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`(- ? ?)`x`#`#`(- ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- x x) (- (- x (- x x)) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (* (+ x (- y 1)) (+ y (- y 1))) 1)))
 nr_nodes: 16]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (- x (+ y y))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* (- x x) (- 1 y))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (- (- (* (* y x) y) y) (* 1 y)) (- y (+ (- y (- x x)) (+ x y))))))
 nr_nodes: 26]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ 1 (+ (* y x) 1)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`y`#`#`y`#`#`1`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* (* (* (- y x) y) y) 1) (- y x)))
 nr_nodes: 14]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(- ? ?)`1`#`#`1`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (- 1 1)) (- 1 x)))
 nr_nodes: 10]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`x`#`#`(- ? ?)`1`#`#`(* ? ?)`y`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ (+ 1 x) (- y 1)) x) (- 1 (* y (- x 1)))))
 nr_nodes: 18]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`(* ? ?)`1`#`#`(+ ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- y (* 1 (+ x y))) (- x x)))
 nr_nodes: 12]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ x 1)) x))
 nr_nodes: 8]
[Generation 0]
[Computing fitness]
[(1.375, 14), (1.375, 65), (1.25, 219), (1.25, 325), (1.25, 333), (1.25, 390), (1.125, 10), (1.125, 334), (1.125, 387), (1.0, 186), (1.0, 359), (0.875, 19), (0.875, 35), (0.875, 54), (0.875, 297), (0.875, 321), (0.875, 336), (0.75, 112), (0.75, 146), (0.75, 148), (0.75, 155), (0.75, 158), (0.75, 185), (0.75, 279), (0.75, 317), (0.75, 320), (0.75, 332), (0.75, 343), (0.75, 349), (0.75, 399), (0.625, 0), (0.625, 23), (0.625, 26), (0.625, 27), (0.625, 34), (0.625, 56), (0.625, 57), (0.625, 67), (0.625, 94), (0.625, 103), (0.625, 114), (0.625, 119), (0.625, 135), (0.625, 141), (0.625, 157), (0.625, 170), (0.625, 181), (0.625, 240), (0.625, 249), (0.625, 258), (0.625, 291), (0.625, 292), (0.625, 303), (0.625, 307), (0.625, 326), (0.625, 337), (0.625, 376), (0.625, 396), (0.625, 397), (0.5416666666666666, 22), (0.5, 33), (0.5, 127), (0.5, 132), (0.5, 166), (0.5, 214), (0.5, 222), (0.5, 239), (0.5, 245), (0.5, 268), (0.5, 286), (0.5, 301), (0.5, 310), (0.5, 329), (0.5, 339), (0.5, 347), (0.475, 202), (0.41666666666666663, 6), (0.41666666666666663, 13), (0.41666666666666663, 21), (0.41666666666666663, 52), (0.41666666666666663, 58), (0.41666666666666663, 59), (0.41666666666666663, 62), (0.41666666666666663, 92), (0.41666666666666663, 117), (0.41666666666666663, 130), (0.41666666666666663, 152), (0.41666666666666663, 183), (0.41666666666666663, 227), (0.41666666666666663, 253), (0.41666666666666663, 254), (0.41666666666666663, 260), (0.41666666666666663, 274), (0.41666666666666663, 280), (0.41666666666666663, 284), (0.41666666666666663, 309), (0.41666666666666663, 350), (0.41666666666666663, 377), (0.375, 20), (0.375, 42), (0.375, 90), (0.375, 96), (0.375, 99), (0.375, 124), (0.375, 139), (0.375, 184), (0.375, 187), (0.375, 193), (0.375, 198), (0.375, 205), (0.375, 208), (0.375, 213), (0.375, 236), (0.375, 246), (0.375, 270), (0.375, 272), (0.375, 288), (0.375, 290), (0.375, 341), (0.375, 388), (0.35, 138), (0.3333333333333333, 91), (0.3333333333333333, 188), (0.3125, 212), (0.3125, 305), (0.3055555555555556, 79), (0.29545454545454547, 49), (0.29545454545454547, 107), (0.2916666666666667, 95), (0.29166666666666663, 7), (0.29166666666666663, 31), (0.29166666666666663, 43), (0.29166666666666663, 72), (0.29166666666666663, 115), (0.29166666666666663, 126), (0.29166666666666663, 145), (0.29166666666666663, 161), (0.29166666666666663, 163), (0.29166666666666663, 167), (0.29166666666666663, 180), (0.29166666666666663, 192), (0.29166666666666663, 207), (0.29166666666666663, 217), (0.29166666666666663, 220), (0.29166666666666663, 238), (0.29166666666666663, 241), (0.29166666666666663, 304), (0.29166666666666663, 319), (0.29166666666666663, 323), (0.29166666666666663, 324), (0.29166666666666663, 353), (0.29166666666666663, 356), (0.29166666666666663, 361), (0.29166666666666663, 371), (0.29166666666666663, 380), (0.25, 1), (0.25, 9), (0.25, 11), (0.25, 17), (0.25, 18), (0.25, 24), (0.25, 25), (0.25, 28), (0.25, 30), (0.25, 32), (0.25, 36), (0.25, 37), (0.25, 38), (0.25, 39), (0.25, 40), (0.25, 41), (0.25, 44), (0.25, 45), (0.25, 48), (0.25, 50), (0.25, 55), (0.25, 60), (0.25, 64), (0.25, 66), (0.25, 68), (0.25, 69), (0.25, 71), (0.25, 73), (0.25, 75), (0.25, 77), (0.25, 78), (0.25, 80), (0.25, 81), (0.25, 82), (0.25, 86), (0.25, 87), (0.25, 88), (0.25, 97), (0.25, 100), (0.25, 102), (0.25, 104), (0.25, 105), (0.25, 106), (0.25, 109), (0.25, 110), (0.25, 113), (0.25, 116), (0.25, 122), (0.25, 123), (0.25, 125), (0.25, 131), (0.25, 133), (0.25, 140), (0.25, 142), (0.25, 143), (0.25, 147), (0.25, 151), (0.25, 160), (0.25, 164), (0.25, 165), (0.25, 168), (0.25, 172), (0.25, 174), (0.25, 176), (0.25, 177), (0.25, 178), (0.25, 179), (0.25, 189), (0.25, 194), (0.25, 196), (0.25, 197), (0.25, 199), (0.25, 200), (0.25, 201), (0.25, 203), (0.25, 209), (0.25, 210), (0.25, 215), (0.25, 216), (0.25, 221), (0.25, 223), (0.25, 224), (0.25, 231), (0.25, 233), (0.25, 234), (0.25, 242), (0.25, 248), (0.25, 250), (0.25, 251), (0.25, 252), (0.25, 255), (0.25, 256), (0.25, 259), (0.25, 262), (0.25, 263), (0.25, 264), (0.25, 265), (0.25, 266), (0.25, 271), (0.25, 278), (0.25, 281), (0.25, 282), (0.25, 289), (0.25, 293), (0.25, 294), (0.25, 295), (0.25, 296), (0.25, 298), (0.25, 300), (0.25, 302), (0.25, 306), (0.25, 308), (0.25, 313), (0.25, 316), (0.25, 322), (0.25, 328), (0.25, 335), (0.25, 342), (0.25, 345), (0.25, 348), (0.25, 355), (0.25, 357), (0.25, 358), (0.25, 360), (0.25, 362), (0.25, 363), (0.25, 364), (0.25, 365), (0.25, 366), (0.25, 367), (0.25, 369), (0.25, 370), (0.25, 372), (0.25, 373), (0.25, 374), (0.25, 375), (0.25, 378), (0.25, 381), (0.25, 383), (0.25, 384), (0.25, 386), (0.25, 391), (0.25, 394), (0.25, 395), (0.225, 74), (0.225, 244), (0.225, 261), (0.20833333333333331, 16), (0.20833333333333331, 134), (0.19642857142857142, 4), (0.19642857142857142, 63), (0.19642857142857142, 108), (0.19642857142857142, 311), (0.1875, 382), (0.18055555555555555, 169), (0.175, 312), (0.175, 315), (0.17045454545454547, 229), (0.16666666666666666, 12), (0.16666666666666666, 61), (0.16666666666666666, 111), (0.16666666666666666, 204), (0.16666666666666666, 232), (0.16666666666666666, 267), (0.16666666666666666, 331), (0.16666666666666666, 338), (0.16666666666666666, 351), (0.125, 2), (0.125, 3), (0.125, 5), (0.125, 15), (0.125, 29), (0.125, 46), (0.125, 47), (0.125, 51), (0.125, 53), (0.125, 70), (0.125, 76), (0.125, 83), (0.125, 84), (0.125, 85), (0.125, 89), (0.125, 93), (0.125, 98), (0.125, 101), (0.125, 118), (0.125, 121), (0.125, 128), (0.125, 136), (0.125, 137), (0.125, 144), (0.125, 149), (0.125, 150), (0.125, 153), (0.125, 154), (0.125, 156), (0.125, 159), (0.125, 162), (0.125, 171), (0.125, 173), (0.125, 175), (0.125, 182), (0.125, 190), (0.125, 191), (0.125, 195), (0.125, 206), (0.125, 211), (0.125, 218), (0.125, 225), (0.125, 226), (0.125, 230), (0.125, 235), (0.125, 237), (0.125, 243), (0.125, 257), (0.125, 269), (0.125, 273), (0.125, 275), (0.125, 276), (0.125, 277), (0.125, 283), (0.125, 285), (0.125, 287), (0.125, 314), (0.125, 318), (0.125, 327), (0.125, 330), (0.125, 340), (0.125, 344), (0.125, 346), (0.125, 352), (0.125, 354), (0.125, 368), (0.125, 379), (0.125, 385), (0.125, 389), (0.125, 392), (0.125, 393), (0.125, 398), (0.1, 8), (0.08333333333333333, 299), (0.07142857142857142, 129), (0.07142857142857142, 228), (0.05555555555555555, 120), (0.05, 247)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* 1 y) (- 1 1)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- (- y y) (* y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (- y (+ 1 y))) x))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 400), (1.375, 65), (1.375, 14), (1.375, 416), (1.25, 390), (1.25, 333), (1.25, 325), (1.25, 219), (1.125, 414), (1.125, 334), (1.125, 387), (1.125, 10), (1.125, 435), (1.125, 445), (1.0, 186), (1.0, 437), (1.0, 359), (0.875, 19), (0.875, 321), (0.875, 54), (0.875, 336), (0.875, 439), (0.875, 35), (0.875, 297), (0.75, 418), (0.75, 413), (0.75, 185), (0.75, 112), (0.75, 446), (0.75, 404), (0.75, 343), (0.75, 332), (0.75, 320), (0.75, 148), (0.75, 349), (0.75, 158), (0.75, 399), (0.75, 155), (0.75, 408), (0.75, 279), (0.75, 428), (0.75, 410), (0.75, 317), (0.75, 146), (0.75, 415), (0.625, 170), (0.625, 26), (0.625, 258), (0.625, 141), (0.625, 23), (0.625, 27), (0.625, 421), (0.625, 303), (0.625, 119), (0.625, 157), (0.625, 0), (0.625, 57), (0.625, 94), (0.625, 240), (0.625, 292), (0.625, 465), (0.625, 424), (0.625, 433), (0.625, 396), (0.625, 291), (0.625, 67), (0.625, 34), (0.625, 56), (0.625, 307), (0.625, 135), (0.625, 103), (0.625, 326), (0.625, 473), (0.625, 114), (0.625, 181), (0.625, 405), (0.625, 337), (0.625, 397), (0.625, 376), (0.625, 426), (0.625, 249), (0.625, 466), (0.5416666666666666, 22), (0.5416666666666666, 432), (0.5, 347), (0.5, 268), (0.5, 438), (0.5, 286), (0.5, 402), (0.5, 127), (0.5, 329), (0.5, 214), (0.5, 239), (0.5, 301), (0.5, 470), (0.5, 429), (0.5, 444), (0.5, 431), (0.5, 468), (0.5, 222), (0.5, 132), (0.5, 310), (0.5, 407), (0.5, 339), (0.5, 33), (0.5, 166), (0.5, 245), (0.475, 202), (0.41666666666666663, 459), (0.41666666666666663, 280), (0.41666666666666663, 419), (0.41666666666666663, 21), (0.41666666666666663, 58), (0.41666666666666663, 460), (0.41666666666666663, 52), (0.41666666666666663, 454), (0.41666666666666663, 455), (0.41666666666666663, 227), (0.41666666666666663, 461), (0.41666666666666663, 457), (0.41666666666666663, 59), (0.41666666666666663, 274), (0.41666666666666663, 350), (0.41666666666666663, 401), (0.41666666666666663, 62), (0.41666666666666663, 92), (0.41666666666666663, 450), (0.41666666666666663, 377), (0.41666666666666663, 430), (0.41666666666666663, 309), (0.41666666666666663, 253), (0.41666666666666663, 117), (0.41666666666666663, 6), (0.41666666666666663, 284), (0.41666666666666663, 13), (0.41666666666666663, 260), (0.41666666666666663, 425), (0.41666666666666663, 451), (0.41666666666666663, 254), (0.41666666666666663, 152), (0.41666666666666663, 183), (0.41666666666666663, 130), (0.375, 205), (0.375, 288), (0.375, 474), (0.375, 213), (0.375, 193), (0.375, 20), (0.375, 42), (0.375, 236), (0.375, 411), (0.375, 208), (0.375, 139), (0.375, 464), (0.375, 90), (0.375, 246), (0.375, 290), (0.375, 198), (0.375, 187), (0.375, 272), (0.375, 388), (0.375, 270), (0.375, 463), (0.375, 184), (0.375, 99), (0.375, 423), (0.375, 124), (0.375, 462), (0.375, 96), (0.375, 341), (0.375, 441), (0.35, 442), (0.35, 138), (0.3333333333333333, 188), (0.3333333333333333, 91), (0.3125, 305), (0.3125, 212), (0.3055555555555556, 79), (0.3, 479), (0.29545454545454547, 49), (0.29545454545454547, 107), (0.2916666666666667, 95), (0.29166666666666663, 167), (0.29166666666666663, 220), (0.29166666666666663, 115), (0.29166666666666663, 356), (0.29166666666666663, 7), (0.29166666666666663, 241), (0.29166666666666663, 238), (0.29166666666666663, 490), (0.29166666666666663, 361), (0.29166666666666663, 217), (0.29166666666666663, 304), (0.29166666666666663, 483), (0.29166666666666663, 458), (0.29166666666666663, 161), (0.29166666666666663, 482), (0.29166666666666663, 485), (0.29166666666666663, 353), (0.29166666666666663, 180), (0.29166666666666663, 43), (0.29166666666666663, 192), (0.29166666666666663, 380), (0.29166666666666663, 319), (0.29166666666666663, 436), (0.29166666666666663, 487), (0.29166666666666663, 481), (0.29166666666666663, 489), (0.29166666666666663, 323), (0.29166666666666663, 409), (0.29166666666666663, 163), (0.29166666666666663, 469), (0.29166666666666663, 427), (0.29166666666666663, 480), (0.29166666666666663, 492), (0.29166666666666663, 145), (0.29166666666666663, 491), (0.29166666666666663, 126), (0.29166666666666663, 72), (0.29166666666666663, 207), (0.29166666666666663, 371), (0.29166666666666663, 324), (0.29166666666666663, 484), (0.29166666666666663, 31), (0.25, 295), (0.25, 242), (0.25, 25), (0.25, 266), (0.25, 140), (0.25, 282), (0.25, 68), (0.25, 87), (0.25, 18), (0.25, 131), (0.25, 306), (0.25, 164), (0.25, 342), (0.25, 48), (0.25, 41), (0.25, 197), (0.25, 40), (0.25, 328), (0.25, 215), (0.25, 302), (0.25, 97), (0.25, 177), (0.25, 360), (0.25, 125), (0.25, 264), (0.25, 308), (0.25, 142), (0.25, 298), (0.25, 364), (0.25, 395), (0.25, 391), (0.25, 366), (0.25, 179), (0.25, 367), (0.25, 50), (0.25, 231), (0.25, 109), (0.25, 263), (0.25, 45), (0.25, 289), (0.25, 281), (0.25, 381), (0.25, 174), (0.25, 189), (0.25, 60), (0.25, 75), (0.25, 373), (0.25, 64), (0.25, 133), (0.25, 69), (0.25, 77), (0.25, 251), (0.25, 66), (0.25, 313), (0.25, 378), (0.25, 384), (0.25, 71), (0.25, 100), (0.25, 256), (0.25, 110), (0.25, 386), (0.25, 113), (0.25, 39), (0.25, 82), (0.25, 9), (0.25, 151), (0.25, 362), (0.25, 17), (0.25, 78), (0.25, 168), (0.25, 248), (0.25, 37), (0.25, 216), (0.25, 102), (0.25, 176), (0.25, 104), (0.25, 44), (0.25, 472), (0.25, 234), (0.25, 294), (0.25, 200), (0.25, 38), (0.25, 160), (0.25, 223), (0.25, 1), (0.25, 105), (0.25, 88), (0.25, 81), (0.25, 278), (0.25, 209), (0.25, 262), (0.25, 123), (0.25, 335), (0.25, 210), (0.25, 30), (0.25, 32), (0.25, 316), (0.25, 374), (0.25, 255), (0.25, 55), (0.25, 252), (0.25, 224), (0.25, 199), (0.25, 73), (0.25, 143), (0.25, 178), (0.25, 11), (0.25, 271), (0.25, 201), (0.25, 116), (0.25, 358), (0.25, 300), (0.25, 355), (0.25, 36), (0.25, 172), (0.25, 233), (0.25, 86), (0.25, 322), (0.25, 203), (0.25, 369), (0.25, 165), (0.25, 293), (0.25, 348), (0.25, 194), (0.25, 106), (0.25, 196), (0.25, 250), (0.25, 363), (0.25, 296), (0.25, 265), (0.25, 370), (0.25, 259), (0.25, 221), (0.25, 357), (0.25, 394), (0.25, 28), (0.25, 372), (0.25, 147), (0.25, 345), (0.25, 365), (0.25, 80), (0.25, 122), (0.25, 375), (0.25, 24), (0.25, 383), (0.225, 261), (0.225, 74), (0.225, 244), (0.20833333333333331, 476), (0.20833333333333331, 16), (0.20833333333333331, 134), (0.19642857142857142, 108), (0.19642857142857142, 478), (0.19642857142857142, 4), (0.19642857142857142, 63), (0.19642857142857142, 311), (0.19642857142857142, 477), (0.1875, 382), (0.18055555555555555, 169), (0.175, 312), (0.175, 315), (0.17045454545454547, 229), (0.16666666666666666, 61), (0.16666666666666666, 338), (0.16666666666666666, 12), (0.16666666666666666, 232), (0.16666666666666666, 448), (0.16666666666666666, 453), (0.16666666666666666, 204), (0.16666666666666666, 351), (0.16666666666666666, 267), (0.16666666666666666, 111), (0.16666666666666666, 331), (0.125, 5), (0.125, 2), (0.125, 3)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 416
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(- ? ?)`1`#`#`1`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (- 1 1)) (- 1 x)))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 400), (1.375, 493), (1.375, 65), (1.375, 14), (1.375, 416), (1.25, 219), (1.25, 533), (1.25, 546), (1.25, 390), (1.25, 520), (1.25, 333), (1.25, 325), (1.125, 387), (1.125, 10), (1.125, 445), (1.125, 548), (1.125, 500), (1.125, 414), (1.125, 501), (1.125, 498), (1.125, 529), (1.125, 334), (1.125, 584), (1.125, 435), (1.0, 359), (1.0, 549), (1.0, 437), (1.0, 502), (1.0, 495), (1.0, 186), (0.875, 54), (0.875, 35), (0.875, 321), (0.875, 573), (0.875, 336), (0.875, 439), (0.875, 19), (0.875, 297), (0.875, 521), (0.75, 399), (0.75, 504), (0.75, 155), (0.75, 518), (0.75, 517), (0.75, 158), (0.75, 408), (0.75, 446), (0.75, 317), (0.75, 343), (0.75, 538), (0.75, 506), (0.75, 349), (0.75, 512), (0.75, 418), (0.75, 279), (0.75, 404), (0.75, 519), (0.75, 148), (0.75, 523), (0.75, 410), (0.75, 185), (0.75, 428), (0.75, 112), (0.75, 320), (0.75, 332), (0.75, 146), (0.75, 413), (0.75, 494), (0.75, 513), (0.75, 415), (0.625, 337), (0.625, 119), (0.625, 465), (0.625, 26), (0.625, 34), (0.625, 433), (0.625, 530), (0.625, 181), (0.625, 103), (0.625, 540), (0.625, 514), (0.625, 292), (0.625, 240), (0.625, 291), (0.625, 424), (0.625, 421), (0.625, 135), (0.625, 528), (0.625, 307), (0.625, 114), (0.625, 511), (0.625, 258), (0.625, 0), (0.625, 67), (0.625, 537), (0.625, 141), (0.625, 532), (0.625, 466), (0.625, 56), (0.625, 303), (0.625, 249), (0.625, 94), (0.625, 27), (0.625, 556), (0.625, 581), (0.625, 426), (0.625, 397), (0.625, 376), (0.625, 396), (0.625, 23), (0.625, 170), (0.625, 326), (0.625, 541), (0.625, 57), (0.625, 157), (0.625, 510), (0.625, 473), (0.625, 405), (0.5416666666666666, 22), (0.5416666666666666, 496), (0.5416666666666666, 544), (0.5416666666666666, 432), (0.5, 582), (0.5, 468), (0.5, 347), (0.5, 310), (0.5, 402), (0.5, 547), (0.5, 301), (0.5, 132), (0.5, 407), (0.5, 329), (0.5, 127), (0.5, 245), (0.5, 222), (0.5, 214), (0.5, 431), (0.5, 585), (0.5, 268), (0.5, 286), (0.5, 429), (0.5, 550), (0.5, 166), (0.5, 444), (0.5, 33), (0.5, 339), (0.5, 558), (0.5, 239), (0.5, 470), (0.5, 536), (0.5, 555), (0.5, 551), (0.5, 438), (0.475, 202), (0.41666666666666663, 59), (0.41666666666666663, 461), (0.41666666666666663, 565), (0.41666666666666663, 6), (0.41666666666666663, 130), (0.41666666666666663, 578), (0.41666666666666663, 152), (0.41666666666666663, 350), (0.41666666666666663, 450), (0.41666666666666663, 254), (0.41666666666666663, 117), (0.41666666666666663, 459), (0.41666666666666663, 572), (0.41666666666666663, 260), (0.41666666666666663, 401), (0.41666666666666663, 280), (0.41666666666666663, 430), (0.41666666666666663, 13), (0.41666666666666663, 52), (0.41666666666666663, 562), (0.41666666666666663, 457), (0.41666666666666663, 183), (0.41666666666666663, 92), (0.41666666666666663, 425), (0.41666666666666663, 253), (0.41666666666666663, 545), (0.41666666666666663, 563), (0.41666666666666663, 62), (0.41666666666666663, 455), (0.41666666666666663, 274), (0.41666666666666663, 451), (0.41666666666666663, 576), (0.41666666666666663, 454), (0.41666666666666663, 284), (0.41666666666666663, 419), (0.41666666666666663, 21), (0.41666666666666663, 580), (0.41666666666666663, 460), (0.41666666666666663, 377), (0.41666666666666663, 309), (0.41666666666666663, 568), (0.41666666666666663, 227), (0.41666666666666663, 58), (0.41666666666666663, 561), (0.41666666666666663, 577), (0.41666666666666663, 560), (0.375, 559), (0.375, 213), (0.375, 270), (0.375, 42), (0.375, 463), (0.375, 124), (0.375, 464), (0.375, 516), (0.375, 96), (0.375, 474), (0.375, 236), (0.375, 20), (0.375, 99), (0.375, 527), (0.375, 539), (0.375, 184), (0.375, 522), (0.375, 535), (0.375, 139), (0.375, 462), (0.375, 272), (0.375, 205), (0.375, 441), (0.375, 505), (0.375, 198), (0.375, 288), (0.375, 187), (0.375, 90), (0.375, 208), (0.375, 246), (0.375, 193), (0.375, 423), (0.375, 341), (0.375, 411), (0.375, 579), (0.375, 388), (0.375, 526), (0.375, 290), (0.35, 138), (0.35, 442), (0.3333333333333333, 188), (0.3333333333333333, 91), (0.3125, 305), (0.3125, 212), (0.3055555555555556, 79), (0.3, 479), (0.29545454545454547, 49), (0.29545454545454547, 107), (0.2916666666666667, 95), (0.29166666666666663, 161), (0.29166666666666663, 481), (0.29166666666666663, 241), (0.29166666666666663, 319), (0.29166666666666663, 483), (0.29166666666666663, 31), (0.29166666666666663, 356), (0.29166666666666663, 72), (0.29166666666666663, 180), (0.29166666666666663, 543), (0.29166666666666663, 323), (0.29166666666666663, 220), (0.29166666666666663, 480), (0.29166666666666663, 217), (0.29166666666666663, 490), (0.29166666666666663, 238), (0.29166666666666663, 163), (0.29166666666666663, 482), (0.29166666666666663, 167), (0.29166666666666663, 207), (0.29166666666666663, 492), (0.29166666666666663, 458), (0.29166666666666663, 469), (0.29166666666666663, 324), (0.29166666666666663, 192), (0.29166666666666663, 484), (0.29166666666666663, 491), (0.29166666666666663, 115), (0.29166666666666663, 485), (0.29166666666666663, 575), (0.29166666666666663, 43), (0.29166666666666663, 409), (0.29166666666666663, 371), (0.29166666666666663, 7), (0.29166666666666663, 427), (0.29166666666666663, 380), (0.29166666666666663, 489), (0.29166666666666663, 564), (0.29166666666666663, 361), (0.29166666666666663, 487), (0.29166666666666663, 304), (0.29166666666666663, 353), (0.29166666666666663, 436), (0.29166666666666663, 145), (0.29166666666666663, 126), (0.25, 256), (0.25, 48), (0.25, 242), (0.25, 335), (0.25, 378), (0.25, 216), (0.25, 81), (0.25, 68), (0.25, 60), (0.25, 39), (0.25, 525), (0.25, 255), (0.25, 179), (0.25, 110), (0.25, 109), (0.25, 295), (0.25, 384), (0.25, 142), (0.25, 373), (0.25, 32), (0.25, 113), (0.25, 278), (0.25, 294), (0.25, 281), (0.25, 17), (0.25, 44), (0.25, 37), (0.25, 1), (0.25, 210), (0.25, 472), (0.25, 78), (0.25, 30), (0.25, 215), (0.25, 381), (0.25, 25), (0.25, 266), (0.25, 313), (0.25, 306), (0.25, 367), (0.25, 104), (0.25, 251), (0.25, 88), (0.25, 200), (0.25, 105), (0.25, 316), (0.25, 362), (0.25, 75), (0.25, 174), (0.25, 87), (0.25, 168), (0.25, 77), (0.25, 125), (0.25, 289), (0.25, 248), (0.25, 553), (0.25, 386), (0.25, 160), (0.25, 308), (0.25, 123), (0.25, 131), (0.25, 151), (0.25, 64), (0.25, 177), (0.25, 360), (0.25, 263), (0.25, 176), (0.25, 164), (0.25, 234), (0.25, 282), (0.25, 38), (0.25, 71), (0.25, 252), (0.25, 342), (0.25, 18), (0.25, 264), (0.25, 223), (0.25, 374), (0.25, 41), (0.25, 209), (0.25, 82), (0.25, 302), (0.25, 9), (0.25, 197), (0.25, 189), (0.25, 366), (0.25, 100), (0.25, 55), (0.25, 395), (0.25, 102), (0.25, 364), (0.25, 66), (0.25, 69), (0.25, 298), (0.25, 50), (0.25, 40), (0.25, 140), (0.25, 133), (0.25, 391), (0.25, 231), (0.25, 262), (0.25, 97), (0.25, 45), (0.25, 328), (0.16666666666666666, 570), (0.16666666666666666, 566), (0.16666666666666666, 508)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 493
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 416
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) x) (* y x)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 400), (1.5, 635), (1.5, 682), (1.375, 14), (1.375, 65), (1.375, 587), (1.375, 493), (1.375, 416), (1.25, 622), (1.25, 533), (1.25, 520), (1.25, 325), (1.25, 219), (1.25, 605), (1.25, 390), (1.25, 591), (1.25, 593), (1.25, 333), (1.25, 546), (1.25, 627), (1.25, 647), (1.25, 641), (1.125, 500), (1.125, 414), (1.125, 501), (1.125, 584), (1.125, 498), (1.125, 387), (1.125, 595), (1.125, 10), (1.125, 334), (1.125, 435), (1.125, 655), (1.125, 529), (1.125, 600), (1.125, 679), (1.125, 548), (1.125, 445), (1.0, 608), (1.0, 685), (1.0, 495), (1.0, 549), (1.0, 630), (1.0, 186), (1.0, 502), (1.0, 437), (1.0, 359), (0.875, 573), (0.875, 586), (0.875, 297), (0.875, 650), (0.875, 35), (0.875, 54), (0.875, 19), (0.875, 614), (0.875, 439), (0.875, 673), (0.875, 336), (0.875, 321), (0.875, 521), (0.75, 633), (0.75, 592), (0.75, 624), (0.75, 404), (0.75, 661), (0.75, 155), (0.75, 636), (0.75, 506), (0.75, 513), (0.75, 413), (0.75, 428), (0.75, 185), (0.75, 349), (0.75, 158), (0.75, 615), (0.75, 688), (0.75, 517), (0.75, 512), (0.75, 112), (0.75, 504), (0.75, 317), (0.75, 332), (0.75, 621), (0.75, 598), (0.75, 446), (0.75, 415), (0.75, 418), (0.75, 519), (0.75, 518), (0.75, 146), (0.75, 494), (0.75, 628), (0.75, 523), (0.75, 343), (0.75, 148), (0.75, 408), (0.75, 279), (0.75, 538), (0.75, 410), (0.75, 320), (0.75, 399), (0.625, 421), (0.625, 424), (0.625, 396), (0.625, 664), (0.625, 541), (0.625, 397), (0.625, 648), (0.625, 405), (0.625, 510), (0.625, 596), (0.625, 433), (0.625, 141), (0.625, 307), (0.625, 67), (0.625, 643), (0.625, 337), (0.625, 662), (0.625, 23), (0.625, 581), (0.625, 249), (0.625, 170), (0.625, 57), (0.625, 240), (0.625, 638), (0.625, 619), (0.625, 530), (0.625, 691), (0.625, 34), (0.625, 292), (0.625, 135), (0.625, 181), (0.625, 528), (0.625, 326), (0.625, 94), (0.625, 376), (0.625, 602), (0.625, 532), (0.625, 473), (0.625, 466), (0.625, 426), (0.625, 157), (0.625, 303), (0.625, 540), (0.625, 258), (0.625, 651), (0.625, 537), (0.625, 0), (0.625, 27), (0.625, 660), (0.625, 56), (0.625, 26), (0.625, 511), (0.625, 119), (0.625, 645), (0.625, 514), (0.625, 465), (0.625, 114), (0.625, 670), (0.625, 652), (0.625, 103), (0.625, 291), (0.625, 659), (0.625, 556), (0.5416666666666666, 496), (0.5416666666666666, 672), (0.5416666666666666, 432), (0.5416666666666666, 22), (0.5416666666666666, 544), (0.5, 33), (0.5, 310), (0.5, 444), (0.5, 610), (0.5, 222), (0.5, 132), (0.5, 582), (0.5, 339), (0.5, 683), (0.5, 675), (0.5, 585), (0.5, 438), (0.5, 429), (0.5, 127), (0.5, 653), (0.5, 658), (0.5, 268), (0.5, 468), (0.5, 550), (0.5, 166), (0.5, 558), (0.5, 431), (0.5, 632), (0.5, 286), (0.5, 301), (0.5, 329), (0.5, 214), (0.5, 666), (0.5, 551), (0.5, 678), (0.5, 402), (0.5, 239), (0.5, 613), (0.5, 245), (0.5, 681), (0.5, 407), (0.5, 347), (0.5, 470), (0.5, 612), (0.5, 536), (0.5, 555), (0.5, 656), (0.5, 547), (0.475, 202), (0.41666666666666663, 425), (0.41666666666666663, 545), (0.41666666666666663, 626), (0.41666666666666663, 565), (0.41666666666666663, 560), (0.41666666666666663, 254), (0.41666666666666663, 455), (0.41666666666666663, 450), (0.41666666666666663, 6), (0.41666666666666663, 578), (0.41666666666666663, 460), (0.41666666666666663, 52), (0.41666666666666663, 284), (0.41666666666666663, 576), (0.41666666666666663, 13), (0.41666666666666663, 130), (0.41666666666666663, 280), (0.41666666666666663, 568), (0.41666666666666663, 577), (0.41666666666666663, 58), (0.41666666666666663, 572), (0.41666666666666663, 646), (0.41666666666666663, 59), (0.41666666666666663, 260), (0.41666666666666663, 152), (0.41666666666666663, 253), (0.41666666666666663, 580), (0.41666666666666663, 459), (0.41666666666666663, 401), (0.41666666666666663, 21), (0.41666666666666663, 377), (0.41666666666666663, 274), (0.41666666666666663, 461), (0.41666666666666663, 563), (0.41666666666666663, 430), (0.41666666666666663, 227), (0.41666666666666663, 419), (0.41666666666666663, 117), (0.41666666666666663, 454), (0.41666666666666663, 562), (0.41666666666666663, 183), (0.41666666666666663, 350), (0.41666666666666663, 561), (0.41666666666666663, 451), (0.41666666666666663, 62), (0.41666666666666663, 92), (0.41666666666666663, 309), (0.41666666666666663, 457), (0.375, 236), (0.375, 464), (0.375, 99), (0.375, 270), (0.375, 288), (0.375, 654), (0.375, 629), (0.375, 516), (0.375, 474), (0.375, 611), (0.375, 526), (0.375, 205), (0.375, 606), (0.375, 527), (0.375, 690), (0.375, 341), (0.375, 290), (0.375, 388), (0.375, 90), (0.375, 42), (0.375, 20), (0.375, 423), (0.375, 246), (0.375, 96), (0.375, 411), (0.375, 463), (0.375, 208), (0.375, 124), (0.375, 579), (0.375, 639), (0.375, 539), (0.375, 617), (0.375, 676), (0.375, 198), (0.375, 184), (0.375, 505), (0.375, 187), (0.375, 441), (0.375, 462), (0.375, 559), (0.375, 535), (0.375, 213), (0.375, 193), (0.375, 674), (0.375, 522), (0.375, 272), (0.375, 589), (0.375, 139), (0.35, 442), (0.35, 138), (0.3333333333333333, 188), (0.3333333333333333, 91), (0.3125, 305), (0.3125, 212), (0.3055555555555556, 79), (0.3, 479), (0.29545454545454547, 49), (0.29545454545454547, 107), (0.2916666666666667, 95), (0.29166666666666663, 356), (0.29166666666666663, 161), (0.29166666666666663, 7), (0.29166666666666663, 543), (0.29166666666666663, 458), (0.29166666666666663, 324), (0.29166666666666663, 480), (0.29166666666666663, 319), (0.29166666666666663, 43), (0.29166666666666663, 485), (0.29166666666666663, 220), (0.29166666666666663, 371), (0.29166666666666663, 490), (0.29166666666666663, 575), (0.29166666666666663, 483), (0.29166666666666663, 427), (0.29166666666666663, 604), (0.29166666666666663, 163), (0.29166666666666663, 657), (0.29166666666666663, 487), (0.29166666666666663, 207), (0.29166666666666663, 436), (0.29166666666666663, 491), (0.29166666666666663, 31), (0.29166666666666663, 469), (0.29166666666666663, 484), (0.29166666666666663, 217), (0.29166666666666663, 380), (0.29166666666666663, 241), (0.29166666666666663, 353), (0.29166666666666663, 361), (0.29166666666666663, 180), (0.29166666666666663, 72), (0.29166666666666663, 489), (0.29166666666666663, 145), (0.29166666666666663, 409), (0.29166666666666663, 238), (0.29166666666666663, 481), (0.29166666666666663, 323), (0.29166666666666663, 115), (0.29166666666666663, 482), (0.29166666666666663, 564), (0.29166666666666663, 304), (0.29166666666666663, 192), (0.29166666666666663, 126), (0.29166666666666663, 492), (0.29166666666666663, 167), (0.25, 32), (0.25, 216), (0.25, 281), (0.25, 110), (0.25, 295), (0.25, 525), (0.25, 384), (0.25, 278), (0.25, 78), (0.25, 179), (0.25, 294), (0.25, 81), (0.25, 109), (0.25, 255), (0.25, 39), (0.25, 378), (0.25, 37), (0.25, 48), (0.25, 687), (0.25, 256), (0.25, 210), (0.25, 335), (0.25, 113), (0.25, 242), (0.25, 1), (0.25, 68), (0.25, 60), (0.25, 44), (0.25, 142), (0.25, 17), (0.25, 472), (0.25, 373), (0.16666666666666666, 668)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x x) (* x x)) y))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 682), (1.5, 400), (1.5, 635), (1.375, 14), (1.375, 694), (1.375, 493), (1.375, 702), (1.375, 729), (1.375, 587), (1.375, 696), (1.375, 693), (1.375, 705), (1.375, 416), (1.375, 726), (1.375, 65), (1.25, 325), (1.25, 647), (1.25, 390), (1.25, 627), (1.25, 622), (1.25, 219), (1.25, 533), (1.25, 641), (1.25, 727), (1.25, 333), (1.25, 591), (1.25, 605), (1.25, 546), (1.25, 732), (1.25, 520), (1.25, 593), (1.25, 703), (1.125, 445), (1.125, 435), (1.125, 655), (1.125, 529), (1.125, 334), (1.125, 784), (1.125, 595), (1.125, 584), (1.125, 501), (1.125, 500), (1.125, 548), (1.125, 714), (1.125, 600), (1.125, 716), (1.125, 707), (1.125, 498), (1.125, 414), (1.125, 387), (1.125, 10), (1.125, 679), (1.125, 711), (1.0, 186), (1.0, 630), (1.0, 549), (1.0, 359), (1.0, 437), (1.0, 502), (1.0, 685), (1.0, 495), (1.0, 608), (1.0, 725), (0.875, 54), (0.875, 743), (0.875, 439), (0.875, 573), (0.875, 336), (0.875, 650), (0.875, 614), (0.875, 35), (0.875, 521), (0.875, 321), (0.875, 673), (0.875, 19), (0.875, 724), (0.875, 586), (0.875, 297), (0.75, 745), (0.75, 592), (0.75, 418), (0.75, 332), (0.75, 519), (0.75, 413), (0.75, 349), (0.75, 688), (0.75, 736), (0.75, 624), (0.75, 158), (0.75, 756), (0.75, 598), (0.75, 185), (0.75, 775), (0.75, 320), (0.75, 636), (0.75, 343), (0.75, 446), (0.75, 279), (0.75, 410), (0.75, 155), (0.75, 146), (0.75, 428), (0.75, 408), (0.75, 494), (0.75, 633), (0.75, 523), (0.75, 780), (0.75, 112), (0.75, 615), (0.75, 661), (0.75, 399), (0.75, 148), (0.75, 504), (0.75, 538), (0.75, 761), (0.75, 404), (0.75, 506), (0.75, 697), (0.75, 621), (0.75, 733), (0.75, 317), (0.75, 513), (0.75, 517), (0.75, 628), (0.75, 518), (0.75, 415), (0.75, 785), (0.75, 512), (0.625, 307), (0.625, 292), (0.625, 762), (0.625, 23), (0.625, 776), (0.625, 722), (0.625, 537), (0.625, 670), (0.625, 396), (0.625, 397), (0.625, 773), (0.625, 170), (0.625, 532), (0.625, 34), (0.625, 510), (0.625, 652), (0.625, 426), (0.625, 602), (0.625, 421), (0.625, 596), (0.625, 660), (0.625, 793), (0.625, 157), (0.625, 749), (0.625, 750), (0.625, 700), (0.625, 135), (0.625, 540), (0.625, 651), (0.625, 767), (0.625, 645), (0.625, 466), (0.625, 303), (0.625, 581), (0.625, 326), (0.625, 27), (0.625, 103), (0.625, 181), (0.625, 541), (0.625, 648), (0.625, 662), (0.625, 94), (0.625, 530), (0.625, 56), (0.625, 141), (0.625, 619), (0.625, 0), (0.625, 26), (0.625, 119), (0.625, 249), (0.625, 778), (0.625, 664), (0.625, 528), (0.625, 638), (0.625, 765), (0.625, 337), (0.625, 770), (0.625, 759), (0.625, 691), (0.625, 715), (0.625, 465), (0.625, 258), (0.625, 433), (0.625, 240), (0.625, 772), (0.625, 511), (0.625, 57), (0.625, 291), (0.625, 777), (0.625, 376), (0.625, 424), (0.625, 405), (0.625, 114), (0.625, 701), (0.625, 659), (0.625, 763), (0.625, 643), (0.625, 514), (0.625, 67), (0.625, 704), (0.625, 473), (0.625, 556), (0.5416666666666666, 432), (0.5416666666666666, 672), (0.5416666666666666, 22), (0.5416666666666666, 496), (0.5416666666666666, 544), (0.5, 347), (0.5, 329), (0.5, 431), (0.5, 734), (0.5, 310), (0.5, 268), (0.5, 468), (0.5, 214), (0.5, 656), (0.5, 771), (0.5, 683), (0.5, 402), (0.5, 681), (0.5, 429), (0.5, 339), (0.5, 550), (0.5, 470), (0.5, 730), (0.5, 613), (0.5, 678), (0.5, 536), (0.5, 658), (0.5, 222), (0.5, 558), (0.5, 748), (0.5, 751), (0.5, 632), (0.5, 166), (0.5, 719), (0.5, 555), (0.5, 286), (0.5, 610), (0.5, 132), (0.5, 612), (0.5, 582), (0.5, 675), (0.5, 781), (0.5, 127), (0.5, 666), (0.5, 301), (0.5, 239), (0.5, 585), (0.5, 653), (0.5, 740), (0.5, 33), (0.5, 245), (0.5, 438), (0.5, 407), (0.5, 551), (0.5, 547), (0.5, 698), (0.5, 752), (0.5, 444), (0.475, 202), (0.41666666666666663, 562), (0.41666666666666663, 260), (0.41666666666666663, 709), (0.41666666666666663, 401), (0.41666666666666663, 152), (0.41666666666666663, 459), (0.41666666666666663, 62), (0.41666666666666663, 565), (0.41666666666666663, 52), (0.41666666666666663, 646), (0.41666666666666663, 455), (0.41666666666666663, 13), (0.41666666666666663, 130), (0.41666666666666663, 545), (0.41666666666666663, 580), (0.41666666666666663, 21), (0.41666666666666663, 6), (0.41666666666666663, 183), (0.41666666666666663, 280), (0.41666666666666663, 454), (0.41666666666666663, 117), (0.41666666666666663, 457), (0.41666666666666663, 350), (0.41666666666666663, 284), (0.41666666666666663, 450), (0.41666666666666663, 577), (0.41666666666666663, 576), (0.41666666666666663, 377), (0.41666666666666663, 430), (0.41666666666666663, 92), (0.41666666666666663, 425), (0.41666666666666663, 560), (0.41666666666666663, 572), (0.41666666666666663, 461), (0.41666666666666663, 419), (0.41666666666666663, 274), (0.41666666666666663, 578), (0.41666666666666663, 309), (0.41666666666666663, 460), (0.41666666666666663, 568), (0.41666666666666663, 59), (0.41666666666666663, 451), (0.41666666666666663, 563), (0.41666666666666663, 626), (0.41666666666666663, 254), (0.41666666666666663, 253), (0.41666666666666663, 227), (0.41666666666666663, 561), (0.41666666666666663, 58), (0.375, 526), (0.375, 20), (0.375, 754), (0.375, 516), (0.375, 606), (0.375, 272), (0.375, 787), (0.375, 676), (0.375, 629), (0.375, 611), (0.375, 270), (0.375, 288), (0.375, 559), (0.375, 341), (0.375, 718), (0.375, 505), (0.375, 441), (0.375, 205), (0.375, 674), (0.375, 208), (0.375, 527), (0.375, 42), (0.375, 617), (0.375, 764), (0.375, 522), (0.375, 639), (0.375, 290), (0.375, 96), (0.375, 463), (0.375, 464), (0.375, 184), (0.375, 193), (0.375, 213), (0.375, 187), (0.375, 246), (0.375, 462), (0.375, 742), (0.375, 423), (0.375, 539), (0.375, 654), (0.375, 388), (0.375, 535), (0.375, 90), (0.375, 139), (0.375, 474), (0.375, 124), (0.375, 579), (0.375, 236), (0.375, 768), (0.375, 738), (0.375, 99), (0.375, 589), (0.375, 411), (0.375, 720), (0.375, 198), (0.375, 690), (0.35, 442), (0.35, 138), (0.3333333333333333, 91), (0.3333333333333333, 188), (0.3125, 305), (0.3125, 212), (0.3055555555555556, 79), (0.3, 479), (0.29545454545454547, 107), (0.29545454545454547, 49), (0.2916666666666667, 95), (0.29166666666666663, 712), (0.29166666666666663, 783), (0.29166666666666663, 708), (0.29166666666666663, 789), (0.29166666666666663, 757), (0.29166666666666663, 356), (0.29166666666666663, 543), (0.29166666666666663, 458), (0.29166666666666663, 161), (0.29166666666666663, 769), (0.29166666666666663, 747), (0.29166666666666663, 791), (0.29166666666666663, 7), (0.25, 788), (0.25, 717)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 694
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 400), (1.5, 635), (1.5, 682), (1.375, 587), (1.375, 693), (1.375, 65), (1.375, 14), (1.375, 705), (1.375, 794), (1.375, 694), (1.375, 729), (1.375, 795), (1.375, 800), (1.375, 493), (1.375, 801), (1.375, 803), (1.375, 726), (1.375, 416), (1.375, 702), (1.375, 696), (1.25, 546), (1.25, 854), (1.25, 732), (1.25, 819), (1.25, 325), (1.25, 821), (1.25, 622), (1.25, 333), (1.25, 605), (1.25, 627), (1.25, 703), (1.25, 591), (1.25, 840), (1.25, 219), (1.25, 390), (1.25, 641), (1.25, 647), (1.25, 533), (1.25, 593), (1.25, 520), (1.25, 727), (1.125, 548), (1.125, 707), (1.125, 445), (1.125, 655), (1.125, 334), (1.125, 816), (1.125, 498), (1.125, 784), (1.125, 815), (1.125, 501), (1.125, 796), (1.125, 711), (1.125, 825), (1.125, 716), (1.125, 798), (1.125, 414), (1.125, 600), (1.125, 435), (1.125, 500), (1.125, 679), (1.125, 805), (1.125, 714), (1.125, 595), (1.125, 529), (1.125, 387), (1.125, 584), (1.125, 10), (1.0, 818), (1.0, 685), (1.0, 359), (1.0, 817), (1.0, 851), (1.0, 725), (1.0, 186), (1.0, 867), (1.0, 608), (1.0, 630), (1.0, 813), (1.0, 495), (1.0, 437), (1.0, 870), (1.0, 810), (1.0, 502), (1.0, 549), (0.875, 673), (0.875, 297), (0.875, 586), (0.875, 835), (0.875, 724), (0.875, 614), (0.875, 521), (0.875, 35), (0.875, 439), (0.875, 743), (0.875, 54), (0.875, 321), (0.875, 808), (0.875, 19), (0.875, 650), (0.875, 829), (0.875, 855), (0.875, 837), (0.875, 841), (0.875, 573), (0.875, 336), (0.75, 112), (0.75, 413), (0.75, 349), (0.75, 332), (0.75, 343), (0.75, 513), (0.75, 615), (0.75, 761), (0.75, 775), (0.75, 185), (0.75, 804), (0.75, 446), (0.75, 506), (0.75, 822), (0.75, 410), (0.75, 415), (0.75, 512), (0.75, 418), (0.75, 494), (0.75, 866), (0.75, 756), (0.75, 538), (0.75, 633), (0.75, 621), (0.75, 838), (0.75, 688), (0.75, 523), (0.75, 598), (0.75, 320), (0.75, 844), (0.75, 849), (0.75, 852), (0.75, 518), (0.75, 745), (0.75, 661), (0.75, 833), (0.75, 797), (0.75, 856), (0.75, 859), (0.75, 863), (0.75, 517), (0.75, 504), (0.75, 399), (0.75, 862), (0.75, 408), (0.75, 317), (0.75, 592), (0.75, 832), (0.75, 785), (0.75, 628), (0.75, 155), (0.75, 279), (0.75, 428), (0.75, 853), (0.75, 865), (0.75, 736), (0.75, 636), (0.75, 780), (0.75, 624), (0.75, 148), (0.75, 404), (0.75, 842), (0.75, 733), (0.75, 158), (0.75, 519), (0.75, 146), (0.75, 697), (0.6666666666666666, 823), (0.625, 424), (0.625, 691), (0.625, 465), (0.625, 337), (0.625, 660), (0.625, 875), (0.625, 396), (0.625, 773), (0.625, 240), (0.625, 532), (0.625, 874), (0.625, 181), (0.625, 528), (0.625, 56), (0.625, 602), (0.625, 777), (0.625, 767), (0.625, 466), (0.625, 421), (0.625, 511), (0.625, 540), (0.625, 34), (0.625, 596), (0.625, 827), (0.625, 659), (0.625, 141), (0.625, 664), (0.625, 119), (0.625, 157), (0.625, 750), (0.625, 662), (0.625, 776), (0.625, 135), (0.625, 530), (0.625, 426), (0.625, 114), (0.625, 292), (0.625, 770), (0.625, 809), (0.625, 836), (0.625, 619), (0.625, 648), (0.625, 762), (0.625, 581), (0.625, 57), (0.625, 510), (0.625, 881), (0.625, 700), (0.625, 763), (0.625, 877), (0.625, 556), (0.625, 537), (0.625, 652), (0.625, 651), (0.625, 765), (0.625, 845), (0.625, 828), (0.625, 376), (0.625, 860), (0.625, 541), (0.625, 514), (0.625, 307), (0.625, 872), (0.625, 23), (0.625, 645), (0.625, 103), (0.625, 249), (0.625, 326), (0.625, 26), (0.625, 793), (0.625, 722), (0.625, 880), (0.625, 846), (0.625, 27), (0.625, 759), (0.625, 0), (0.625, 473), (0.625, 170), (0.625, 670), (0.625, 303), (0.625, 397), (0.625, 643), (0.625, 715), (0.625, 258), (0.625, 884), (0.625, 433), (0.625, 405), (0.625, 94), (0.625, 749), (0.625, 701), (0.625, 67), (0.625, 778), (0.625, 772), (0.625, 638), (0.625, 291), (0.625, 704), (0.5416666666666666, 22), (0.5416666666666666, 496), (0.5416666666666666, 432), (0.5416666666666666, 544), (0.5416666666666666, 672), (0.5416666666666666, 879), (0.5, 681), (0.5, 582), (0.5, 719), (0.5, 444), (0.5, 814), (0.5, 771), (0.5, 127), (0.5, 612), (0.5, 339), (0.5, 585), (0.5, 33), (0.5, 678), (0.5, 613), (0.5, 407), (0.5, 222), (0.5, 550), (0.5, 301), (0.5, 214), (0.5, 132), (0.5, 658), (0.5, 730), (0.5, 876), (0.5, 468), (0.5, 551), (0.5, 632), (0.5, 438), (0.5, 558), (0.5, 555), (0.5, 402), (0.5, 781), (0.5, 329), (0.5, 752), (0.5, 751), (0.5, 429), (0.5, 861), (0.5, 666), (0.5, 848), (0.5, 653), (0.5, 286), (0.5, 536), (0.5, 610), (0.5, 740), (0.5, 547), (0.5, 734), (0.5, 239), (0.5, 166), (0.5, 656), (0.5, 868), (0.5, 347), (0.5, 812), (0.5, 683), (0.5, 675), (0.5, 698), (0.5, 310), (0.5, 245), (0.5, 748), (0.5, 470), (0.5, 268), (0.5, 431), (0.475, 202), (0.41666666666666663, 58), (0.41666666666666663, 646), (0.41666666666666663, 626), (0.41666666666666663, 6), (0.41666666666666663, 62), (0.41666666666666663, 450), (0.41666666666666663, 419), (0.41666666666666663, 92), (0.41666666666666663, 577), (0.41666666666666663, 254), (0.41666666666666663, 425), (0.41666666666666663, 430), (0.41666666666666663, 21), (0.41666666666666663, 580), (0.41666666666666663, 284), (0.41666666666666663, 824), (0.41666666666666663, 117), (0.41666666666666663, 561), (0.41666666666666663, 545), (0.41666666666666663, 578), (0.41666666666666663, 454), (0.41666666666666663, 560), (0.41666666666666663, 260), (0.41666666666666663, 451), (0.41666666666666663, 457), (0.41666666666666663, 253), (0.41666666666666663, 280), (0.41666666666666663, 350), (0.41666666666666663, 460), (0.41666666666666663, 562), (0.41666666666666663, 802), (0.41666666666666663, 13), (0.41666666666666663, 461), (0.41666666666666663, 183), (0.41666666666666663, 563), (0.41666666666666663, 377), (0.41666666666666663, 401), (0.41666666666666663, 130), (0.41666666666666663, 59), (0.41666666666666663, 152), (0.41666666666666663, 568), (0.41666666666666663, 459), (0.41666666666666663, 274), (0.41666666666666663, 709), (0.41666666666666663, 52), (0.41666666666666663, 572), (0.41666666666666663, 576), (0.41666666666666663, 227), (0.41666666666666663, 455), (0.41666666666666663, 565), (0.41666666666666663, 309), (0.375, 272), (0.375, 754), (0.375, 20), (0.375, 857), (0.375, 787), (0.375, 807), (0.375, 526), (0.375, 882), (0.375, 830), (0.375, 516), (0.375, 606), (0.29166666666666663, 811), (0.25, 820)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 587
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 693
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x y) x) (* y x)))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.5, 682), (1.5, 635), (1.5, 400), (1.375, 702), (1.375, 14), (1.375, 493), (1.375, 801), (1.375, 795), (1.375, 794), (1.375, 949), (1.375, 729), (1.375, 693), (1.375, 705), (1.375, 897), (1.375, 694), (1.375, 696), (1.375, 892), (1.375, 416), (1.375, 800), (1.375, 726), (1.375, 65), (1.375, 587), (1.375, 803), (1.25, 937), (1.25, 948), (1.25, 641), (1.25, 593), (1.25, 896), (1.25, 898), (1.25, 546), (1.25, 325), (1.25, 219), (1.25, 520), (1.25, 976), (1.25, 605), (1.25, 908), (1.25, 903), (1.25, 703), (1.25, 622), (1.25, 732), (1.25, 390), (1.25, 533), (1.25, 627), (1.25, 974), (1.25, 887), (1.25, 333), (1.25, 854), (1.25, 727), (1.25, 821), (1.25, 647), (1.25, 591), (1.25, 840), (1.25, 819), (1.125, 931), (1.125, 334), (1.125, 600), (1.125, 825), (1.125, 595), (1.125, 707), (1.125, 10), (1.125, 501), (1.125, 798), (1.125, 716), (1.125, 498), (1.125, 548), (1.125, 923), (1.125, 805), (1.125, 921), (1.125, 940), (1.125, 972), (1.125, 711), (1.125, 655), (1.125, 714), (1.125, 815), (1.125, 816), (1.125, 445), (1.125, 679), (1.125, 529), (1.125, 796), (1.125, 905), (1.125, 927), (1.125, 414), (1.125, 784), (1.125, 435), (1.125, 929), (1.125, 500), (1.125, 387), (1.125, 928), (1.125, 911), (1.125, 584), (1.0, 495), (1.0, 938), (1.0, 608), (1.0, 813), (1.0, 437), (1.0, 916), (1.0, 359), (1.0, 941), (1.0, 818), (1.0, 889), (1.0, 915), (1.0, 851), (1.0, 906), (1.0, 186), (1.0, 963), (1.0, 502), (1.0, 817), (1.0, 867), (1.0, 810), (1.0, 725), (1.0, 870), (1.0, 549), (1.0, 685), (1.0, 630), (0.875, 743), (0.875, 841), (0.875, 573), (0.875, 521), (0.875, 808), (0.875, 54), (0.875, 835), (0.875, 837), (0.875, 945), (0.875, 855), (0.875, 297), (0.875, 829), (0.875, 321), (0.875, 614), (0.875, 907), (0.875, 724), (0.875, 650), (0.875, 586), (0.875, 952), (0.875, 942), (0.875, 35), (0.875, 894), (0.875, 901), (0.875, 917), (0.875, 439), (0.875, 336), (0.875, 19), (0.875, 673), (0.875, 890), (0.75, 957), (0.75, 852), (0.75, 146), (0.75, 279), (0.75, 736), (0.75, 965), (0.75, 688), (0.75, 615), (0.75, 628), (0.75, 185), (0.75, 148), (0.75, 661), (0.75, 633), (0.75, 849), (0.75, 519), (0.75, 866), (0.75, 343), (0.75, 733), (0.75, 332), (0.75, 112), (0.75, 862), (0.75, 899), (0.75, 962), (0.75, 415), (0.75, 969), (0.75, 506), (0.75, 592), (0.75, 955), (0.75, 636), (0.75, 320), (0.75, 863), (0.75, 953), (0.75, 408), (0.75, 780), (0.75, 804), (0.75, 853), (0.75, 410), (0.75, 838), (0.75, 317), (0.75, 621), (0.75, 797), (0.75, 904), (0.75, 404), (0.75, 538), (0.75, 518), (0.75, 756), (0.75, 523), (0.75, 865), (0.75, 428), (0.75, 446), (0.75, 418), (0.75, 513), (0.75, 785), (0.75, 155), (0.75, 512), (0.75, 939), (0.75, 624), (0.75, 822), (0.75, 349), (0.75, 413), (0.75, 158), (0.75, 832), (0.75, 978), (0.75, 966), (0.75, 399), (0.75, 856), (0.75, 745), (0.75, 844), (0.75, 960), (0.75, 517), (0.75, 761), (0.75, 842), (0.75, 598), (0.75, 956), (0.75, 494), (0.75, 504), (0.75, 833), (0.75, 775), (0.75, 859), (0.75, 697), (0.6666666666666666, 823), (0.625, 875), (0.625, 511), (0.625, 510), (0.625, 157), (0.625, 530), (0.625, 541), (0.625, 57), (0.625, 662), (0.625, 648), (0.625, 670), (0.625, 778), (0.625, 114), (0.625, 881), (0.625, 763), (0.625, 970), (0.625, 465), (0.625, 659), (0.625, 258), (0.625, 750), (0.625, 135), (0.625, 514), (0.625, 700), (0.625, 397), (0.625, 0), (0.625, 776), (0.625, 872), (0.625, 926), (0.625, 27), (0.625, 651), (0.625, 303), (0.625, 581), (0.625, 767), (0.625, 376), (0.625, 660), (0.625, 307), (0.625, 424), (0.625, 877), (0.625, 94), (0.625, 426), (0.625, 860), (0.625, 828), (0.625, 181), (0.625, 141), (0.625, 759), (0.625, 874), (0.625, 772), (0.625, 326), (0.625, 973), (0.625, 722), (0.625, 749), (0.625, 421), (0.625, 56), (0.625, 964), (0.625, 715), (0.625, 23), (0.625, 619), (0.625, 773), (0.625, 827), (0.625, 337), (0.625, 884), (0.625, 396), (0.625, 935), (0.625, 643), (0.625, 645), (0.625, 596), (0.625, 845), (0.625, 556), (0.625, 691), (0.625, 701), (0.625, 765), (0.625, 704), (0.625, 240), (0.625, 249), (0.625, 602), (0.625, 946), (0.625, 532), (0.625, 67), (0.625, 473), (0.625, 528), (0.625, 466), (0.625, 537), (0.625, 170), (0.625, 664), (0.625, 34), (0.625, 762), (0.625, 958), (0.625, 433), (0.625, 291), (0.625, 26), (0.625, 770), (0.625, 777), (0.625, 793), (0.625, 119), (0.625, 292), (0.625, 652), (0.625, 103), (0.625, 405), (0.625, 638), (0.625, 836), (0.625, 846), (0.625, 880), (0.625, 540), (0.625, 809), (0.625, 924), (0.5416666666666666, 432), (0.5416666666666666, 496), (0.5416666666666666, 672), (0.5416666666666666, 22), (0.5416666666666666, 544), (0.5416666666666666, 961), (0.5416666666666666, 879), (0.5, 166), (0.5, 551), (0.5, 239), (0.5, 868), (0.5, 632), (0.5, 558), (0.5, 734), (0.5, 339), (0.5, 751), (0.5, 214), (0.5, 781), (0.5, 730), (0.5, 613), (0.5, 936), (0.5, 740), (0.5, 653), (0.5, 33), (0.5, 752), (0.5, 980), (0.5, 547), (0.5, 861), (0.5, 814), (0.5, 719), (0.5, 585), (0.5, 612), (0.5, 286), (0.5, 429), (0.5, 658), (0.5, 550), (0.5, 402), (0.5, 132), (0.5, 407), (0.5, 610), (0.5, 666), (0.5, 222), (0.5, 848), (0.5, 582), (0.5, 329), (0.5, 910), (0.5, 438), (0.5, 681), (0.5, 347), (0.5, 678), (0.5, 127), (0.5, 771), (0.5, 920), (0.5, 301), (0.5, 444), (0.5, 656), (0.5, 555), (0.5, 876), (0.5, 950), (0.5, 468), (0.5, 536), (0.5, 925), (0.41666666666666663, 947), (0.41666666666666663, 979), (0.41666666666666663, 913), (0.41666666666666663, 919), (0.375, 943), (0.375, 975), (0.375, 885), (0.375, 967), (0.29166666666666663, 930), (0.29166666666666663, 933)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 702
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (- y 1)) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* (* 1 y) 1)) x))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.5, 682), (1.5, 999), (1.5, 635), (1.5, 1040), (1.5, 400), (1.375, 1026), (1.375, 795), (1.375, 65), (1.375, 990), (1.375, 794), (1.375, 693), (1.375, 493), (1.375, 702), (1.375, 988), (1.375, 726), (1.375, 729), (1.375, 14), (1.375, 416), (1.375, 949), (1.375, 892), (1.375, 696), (1.375, 800), (1.375, 803), (1.375, 801), (1.375, 694), (1.375, 897), (1.375, 705), (1.375, 983), (1.375, 587), (1.25, 896), (1.25, 1068), (1.25, 989), (1.25, 703), (1.25, 219), (1.25, 987), (1.25, 1043), (1.25, 647), (1.25, 985), (1.25, 641), (1.25, 992), (1.25, 840), (1.25, 622), (1.25, 997), (1.25, 591), (1.25, 1002), (1.25, 1018), (1.25, 727), (1.25, 546), (1.25, 819), (1.25, 821), (1.25, 605), (1.25, 903), (1.25, 732), (1.25, 887), (1.25, 520), (1.25, 1042), (1.25, 627), (1.25, 948), (1.25, 325), (1.25, 984), (1.25, 976), (1.25, 333), (1.25, 974), (1.25, 908), (1.25, 1000), (1.25, 1011), (1.25, 937), (1.25, 1013), (1.25, 898), (1.25, 390), (1.25, 593), (1.25, 1047), (1.25, 854), (1.25, 533), (1.125, 798), (1.125, 501), (1.125, 1038), (1.125, 1050), (1.125, 815), (1.125, 825), (1.125, 500), (1.125, 655), (1.125, 529), (1.125, 931), (1.125, 679), (1.125, 498), (1.125, 816), (1.125, 334), (1.125, 1008), (1.125, 1023), (1.125, 1014), (1.125, 600), (1.125, 1074), (1.125, 1019), (1.125, 923), (1.125, 921), (1.125, 805), (1.125, 911), (1.125, 716), (1.125, 595), (1.125, 707), (1.125, 1015), (1.125, 584), (1.125, 714), (1.125, 905), (1.125, 435), (1.125, 548), (1.125, 784), (1.125, 929), (1.125, 995), (1.125, 928), (1.125, 1007), (1.125, 711), (1.125, 1036), (1.125, 10), (1.125, 940), (1.125, 387), (1.125, 445), (1.125, 991), (1.125, 927), (1.125, 414), (1.125, 972), (1.125, 796), (1.125, 1029), (1.125, 1048), (1.125, 1006), (1.0, 938), (1.0, 1024), (1.0, 1053), (1.0, 608), (1.0, 685), (1.0, 870), (1.0, 186), (1.0, 495), (1.0, 851), (1.0, 502), (1.0, 630), (1.0, 915), (1.0, 963), (1.0, 867), (1.0, 437), (1.0, 817), (1.0, 549), (1.0, 359), (1.0, 916), (1.0, 889), (1.0, 906), (1.0, 1069), (1.0, 813), (1.0, 1033), (1.0, 725), (1.0, 941), (1.0, 810), (1.0, 818), (0.875, 1057), (0.875, 1070), (0.875, 829), (0.875, 521), (0.875, 614), (0.875, 35), (0.875, 321), (0.875, 1056), (0.875, 901), (0.875, 890), (0.875, 942), (0.875, 855), (0.875, 841), (0.875, 439), (0.875, 917), (0.875, 952), (0.875, 673), (0.875, 54), (0.875, 724), (0.875, 1031), (0.875, 336), (0.875, 1028), (0.875, 945), (0.875, 650), (0.875, 19), (0.875, 907), (0.875, 994), (0.875, 1055), (0.875, 297), (0.875, 837), (0.875, 808), (0.875, 586), (0.875, 1062), (0.875, 894), (0.875, 743), (0.875, 573), (0.875, 835), (0.75, 822), (0.75, 852), (0.75, 512), (0.75, 513), (0.75, 862), (0.75, 408), (0.75, 733), (0.75, 538), (0.75, 832), (0.75, 185), (0.75, 978), (0.75, 332), (0.75, 158), (0.75, 633), (0.75, 775), (0.75, 1071), (0.75, 1065), (0.75, 615), (0.75, 904), (0.75, 865), (0.75, 1037), (0.75, 415), (0.75, 317), (0.75, 1010), (0.75, 621), (0.75, 661), (0.75, 1064), (0.75, 428), (0.75, 1017), (0.75, 592), (0.75, 844), (0.75, 761), (0.75, 506), (0.75, 785), (0.75, 446), (0.75, 155), (0.75, 1020), (0.75, 745), (0.75, 146), (0.75, 833), (0.75, 404), (0.75, 399), (0.75, 410), (0.75, 859), (0.75, 960), (0.75, 956), (0.75, 413), (0.75, 756), (0.75, 418), (0.75, 804), (0.75, 736), (0.75, 1032), (0.75, 966), (0.75, 853), (0.75, 518), (0.75, 598), (0.75, 279), (0.75, 953), (0.75, 504), (0.75, 797), (0.75, 965), (0.75, 780), (0.75, 981), (0.75, 863), (0.75, 349), (0.75, 628), (0.75, 957), (0.75, 343), (0.75, 517), (0.75, 636), (0.75, 320), (0.75, 624), (0.75, 969), (0.75, 688), (0.75, 494), (0.75, 849), (0.75, 842), (0.75, 838), (0.75, 866), (0.75, 899), (0.75, 148), (0.75, 519), (0.75, 697), (0.75, 1075), (0.75, 523), (0.75, 112), (0.75, 962), (0.75, 856), (0.75, 955), (0.75, 939), (0.6666666666666666, 823), (0.625, 424), (0.625, 750), (0.625, 307), (0.625, 660), (0.625, 157), (0.625, 114), (0.625, 291), (0.625, 828), (0.625, 767), (0.625, 776), (0.625, 691), (0.625, 240), (0.625, 964), (0.625, 700), (0.625, 772), (0.625, 619), (0.625, 662), (0.625, 473), (0.625, 511), (0.625, 556), (0.625, 874), (0.625, 880), (0.625, 648), (0.625, 759), (0.625, 860), (0.625, 749), (0.625, 722), (0.625, 303), (0.625, 27), (0.625, 970), (0.625, 0), (0.625, 877), (0.625, 645), (0.625, 466), (0.625, 326), (0.625, 181), (0.625, 827), (0.625, 119), (0.625, 170), (0.625, 763), (0.625, 141), (0.625, 103), (0.625, 664), (0.625, 530), (0.625, 541), (0.625, 405), (0.625, 1060), (0.625, 643), (0.625, 762), (0.625, 651), (0.625, 845), (0.625, 926), (0.625, 532), (0.625, 1009), (0.625, 793), (0.625, 701), (0.625, 1035), (0.625, 421), (0.625, 638), (0.625, 94), (0.625, 946), (0.625, 510), (0.625, 881), (0.625, 396), (0.625, 765), (0.625, 596), (0.625, 23), (0.625, 292), (0.625, 770), (0.625, 57), (0.625, 935), (0.625, 581), (0.625, 465), (0.625, 26), (0.625, 884), (0.625, 135), (0.625, 872), (0.625, 34), (0.625, 67), (0.625, 875), (0.625, 376), (0.625, 846), (0.625, 514), (0.625, 1067), (0.625, 528), (0.625, 249), (0.625, 773), (0.625, 56), (0.625, 659), (0.625, 258), (0.625, 986), (0.625, 777), (0.625, 652), (0.625, 715), (0.625, 337), (0.625, 958), (0.625, 704), (0.625, 670), (0.625, 426), (0.625, 397), (0.625, 836), (0.625, 778), (0.625, 973), (0.625, 537), (0.625, 602), (0.625, 433), (0.5, 1049), (0.5, 1003), (0.5, 1005), (0.5, 1039), (0.5, 1058), (0.5, 1072), (0.375, 1022), (0.375, 1054), (0.375, 1045), (0.375, 1025), (0.25, 1061), (0.25, 1052)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 999
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) (* 1 x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1040
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (+ (* x 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.5, 635), (1.5, 1040), (1.5, 999), (1.5, 682), (1.5, 1104), (1.5, 400), (1.5, 1166), (1.375, 1089), (1.375, 795), (1.375, 694), (1.375, 794), (1.375, 726), (1.375, 983), (1.375, 705), (1.375, 892), (1.375, 897), (1.375, 803), (1.375, 1026), (1.375, 587), (1.375, 65), (1.375, 693), (1.375, 800), (1.375, 14), (1.375, 990), (1.375, 416), (1.375, 702), (1.375, 493), (1.375, 988), (1.375, 1083), (1.375, 949), (1.375, 801), (1.375, 729), (1.375, 696), (1.375, 1150), (1.25, 1103), (1.25, 937), (1.25, 989), (1.25, 992), (1.25, 546), (1.25, 974), (1.25, 1002), (1.25, 641), (1.25, 333), (1.25, 325), (1.25, 732), (1.25, 1164), (1.25, 1167), (1.25, 605), (1.25, 1018), (1.25, 1068), (1.25, 1100), (1.25, 976), (1.25, 997), (1.25, 390), (1.25, 647), (1.25, 898), (1.25, 1011), (1.25, 533), (1.25, 1090), (1.25, 984), (1.25, 903), (1.25, 1101), (1.25, 819), (1.25, 1094), (1.25, 627), (1.25, 985), (1.25, 219), (1.25, 1085), (1.25, 1119), (1.25, 1000), (1.25, 821), (1.25, 854), (1.25, 948), (1.25, 987), (1.25, 622), (1.25, 593), (1.25, 591), (1.25, 1042), (1.25, 520), (1.25, 887), (1.25, 703), (1.25, 1120), (1.25, 896), (1.25, 1013), (1.25, 1043), (1.25, 840), (1.25, 1087), (1.25, 727), (1.25, 1047), (1.25, 908), (1.125, 711), (1.125, 387), (1.125, 805), (1.125, 816), (1.125, 1006), (1.125, 784), (1.125, 815), (1.125, 655), (1.125, 1149), (1.125, 995), (1.125, 1174), (1.125, 1162), (1.125, 1128), (1.125, 1129), (1.125, 1029), (1.125, 1126), (1.125, 929), (1.125, 923), (1.125, 679), (1.125, 921), (1.125, 414), (1.125, 1048), (1.125, 972), (1.125, 1109), (1.125, 1019), (1.125, 927), (1.125, 1008), (1.125, 1131), (1.125, 1092), (1.125, 548), (1.125, 1074), (1.125, 714), (1.125, 1038), (1.125, 1130), (1.125, 1015), (1.125, 825), (1.125, 928), (1.125, 905), (1.125, 716), (1.125, 529), (1.125, 584), (1.125, 600), (1.125, 798), (1.125, 931), (1.125, 1136), (1.125, 1127), (1.125, 1113), (1.125, 1036), (1.125, 334), (1.125, 500), (1.125, 435), (1.125, 1135), (1.125, 1023), (1.125, 911), (1.125, 445), (1.125, 498), (1.125, 1007), (1.125, 1155), (1.125, 796), (1.125, 707), (1.125, 1050), (1.125, 991), (1.125, 1014), (1.125, 10), (1.125, 1171), (1.125, 595), (1.125, 501), (1.125, 940), (1.0, 549), (1.0, 818), (1.0, 608), (1.0, 1069), (1.0, 867), (1.0, 1158), (1.0, 941), (1.0, 1081), (1.0, 1024), (1.0, 359), (1.0, 889), (1.0, 1053), (1.0, 851), (1.0, 906), (1.0, 630), (1.0, 817), (1.0, 685), (1.0, 813), (1.0, 437), (1.0, 870), (1.0, 1160), (1.0, 1165), (1.0, 1098), (1.0, 1172), (1.0, 502), (1.0, 495), (1.0, 810), (1.0, 938), (1.0, 725), (1.0, 1170), (1.0, 1033), (1.0, 186), (1.0, 1133), (1.0, 916), (1.0, 963), (1.0, 915), (0.875, 808), (0.875, 35), (0.875, 1070), (0.875, 521), (0.875, 1031), (0.875, 573), (0.875, 1091), (0.875, 1028), (0.875, 837), (0.875, 890), (0.875, 743), (0.875, 321), (0.875, 586), (0.875, 54), (0.875, 942), (0.875, 1077), (0.875, 614), (0.875, 841), (0.875, 894), (0.875, 1062), (0.875, 855), (0.875, 336), (0.875, 650), (0.875, 945), (0.875, 901), (0.875, 1056), (0.875, 994), (0.875, 1055), (0.875, 439), (0.875, 835), (0.875, 907), (0.875, 19), (0.875, 952), (0.875, 917), (0.875, 724), (0.875, 297), (0.875, 1057), (0.875, 673), (0.875, 829), (0.75, 538), (0.75, 615), (0.75, 1144), (0.75, 761), (0.75, 343), (0.75, 856), (0.75, 797), (0.75, 1088), (0.75, 428), (0.75, 446), (0.75, 939), (0.75, 844), (0.75, 957), (0.75, 320), (0.75, 853), (0.75, 519), (0.75, 1017), (0.75, 832), (0.75, 146), (0.75, 415), (0.75, 279), (0.75, 688), (0.75, 1084), (0.75, 780), (0.75, 899), (0.75, 592), (0.75, 981), (0.75, 512), (0.75, 523), (0.75, 1099), (0.75, 804), (0.75, 399), (0.75, 955), (0.75, 518), (0.75, 1146), (0.75, 1096), (0.75, 966), (0.75, 697), (0.75, 1117), (0.75, 633), (0.75, 413), (0.75, 1075), (0.75, 733), (0.75, 148), (0.75, 506), (0.75, 517), (0.75, 756), (0.75, 775), (0.75, 953), (0.75, 317), (0.75, 494), (0.75, 865), (0.75, 956), (0.75, 628), (0.75, 866), (0.75, 636), (0.75, 1032), (0.75, 408), (0.75, 962), (0.75, 624), (0.75, 598), (0.75, 112), (0.75, 1020), (0.75, 621), (0.75, 862), (0.75, 736), (0.75, 822), (0.75, 1037), (0.75, 661), (0.75, 155), (0.75, 842), (0.75, 158), (0.75, 849), (0.75, 1111), (0.75, 965), (0.75, 418), (0.75, 978), (0.75, 833), (0.75, 785), (0.75, 852), (0.75, 1108), (0.75, 1139), (0.75, 745), (0.75, 1010), (0.75, 513), (0.75, 1065), (0.75, 838), (0.75, 504), (0.75, 185), (0.75, 1071), (0.75, 1064), (0.75, 859), (0.75, 349), (0.75, 863), (0.75, 969), (0.75, 404), (0.75, 960), (0.75, 904), (0.75, 410), (0.75, 332), (0.6666666666666666, 823), (0.625, 880), (0.625, 1148), (0.625, 759), (0.625, 1106), (0.625, 750), (0.625, 772), (0.625, 645), (0.625, 1140), (0.625, 828), (0.625, 662), (0.625, 648), (0.625, 767), (0.625, 556), (0.625, 114), (0.625, 303), (0.625, 1110), (0.625, 964), (0.625, 181), (0.625, 660), (0.625, 776), (0.625, 722), (0.625, 291), (0.625, 749), (0.625, 827), (0.625, 874), (0.625, 619), (0.625, 473), (0.625, 691), (0.625, 326), (0.625, 860), (0.625, 27), (0.625, 1118), (0.625, 970), (0.625, 307), (0.625, 119), (0.625, 511), (0.625, 240), (0.625, 664), (0.625, 170), (0.625, 1123), (0.625, 141), (0.625, 0), (0.625, 103), (0.625, 157), (0.625, 877), (0.625, 763), (0.625, 466), (0.625, 424), (0.625, 700), (0.5, 1079), (0.5, 1107), (0.5, 1138), (0.5, 1093), (0.41666666666666663, 1080), (0.41666666666666663, 1121), (0.375, 1143), (0.375, 1151), (0.375, 1115), (0.375, 1157), (0.375, 1152), (0.29166666666666663, 1141), (0.29166666666666663, 1154), (0.25, 1112), (0.25, 1125), (0.25, 1168), (0.25, 1161)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1040
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (+ (* x 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 999
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) (* 1 x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (+ y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1104
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (* x x)) (* y y)))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.625, 1180), (1.5, 1104), (1.5, 635), (1.5, 400), (1.5, 1166), (1.5, 1206), (1.5, 682), (1.5, 999), (1.5, 1040), (1.375, 1083), (1.375, 729), (1.375, 1026), (1.375, 693), (1.375, 795), (1.375, 1190), (1.375, 1188), (1.375, 65), (1.375, 726), (1.375, 1150), (1.375, 1089), (1.375, 988), (1.375, 587), (1.375, 702), (1.375, 800), (1.375, 794), (1.375, 983), (1.375, 1182), (1.375, 14), (1.375, 1232), (1.375, 493), (1.375, 892), (1.375, 705), (1.375, 897), (1.375, 990), (1.375, 694), (1.375, 1178), (1.375, 696), (1.375, 803), (1.375, 416), (1.375, 801), (1.375, 949), (1.25, 1265), (1.25, 1120), (1.25, 840), (1.25, 908), (1.25, 903), (1.25, 819), (1.25, 1043), (1.25, 1101), (1.25, 627), (1.25, 1238), (1.25, 1047), (1.25, 591), (1.25, 325), (1.25, 854), (1.25, 703), (1.25, 937), (1.25, 727), (1.25, 948), (1.25, 896), (1.25, 887), (1.25, 1103), (1.25, 987), (1.25, 1087), (1.25, 984), (1.25, 1242), (1.25, 1119), (1.25, 641), (1.25, 1210), (1.25, 593), (1.25, 533), (1.25, 992), (1.25, 1221), (1.25, 1094), (1.25, 1202), (1.25, 333), (1.25, 1085), (1.25, 1164), (1.25, 1209), (1.25, 1090), (1.25, 1100), (1.25, 1192), (1.25, 1018), (1.25, 605), (1.25, 1205), (1.25, 989), (1.25, 821), (1.25, 1223), (1.25, 622), (1.25, 1013), (1.25, 1000), (1.25, 1068), (1.25, 546), (1.25, 1002), (1.25, 732), (1.25, 1042), (1.25, 985), (1.25, 974), (1.25, 1217), (1.25, 390), (1.25, 1167), (1.25, 997), (1.25, 647), (1.25, 898), (1.25, 520), (1.25, 219), (1.25, 976), (1.25, 1230), (1.25, 1011), (1.125, 1256), (1.125, 784), (1.125, 501), (1.125, 1135), (1.125, 716), (1.125, 1014), (1.125, 921), (1.125, 995), (1.125, 1130), (1.125, 1136), (1.125, 1008), (1.125, 529), (1.125, 595), (1.125, 929), (1.125, 1092), (1.125, 655), (1.125, 414), (1.125, 600), (1.125, 1006), (1.125, 10), (1.125, 1029), (1.125, 928), (1.125, 931), (1.125, 923), (1.125, 905), (1.125, 1007), (1.125, 815), (1.125, 1050), (1.125, 334), (1.125, 1126), (1.125, 1128), (1.125, 1015), (1.125, 1036), (1.125, 1109), (1.125, 445), (1.125, 1074), (1.125, 940), (1.125, 435), (1.125, 1113), (1.125, 679), (1.125, 1244), (1.125, 387), (1.125, 798), (1.125, 1229), (1.125, 1019), (1.125, 1149), (1.125, 1240), (1.125, 1023), (1.125, 1187), (1.125, 1038), (1.125, 991), (1.125, 498), (1.125, 1252), (1.125, 1259), (1.125, 711), (1.125, 796), (1.125, 816), (1.125, 1048), (1.125, 805), (1.125, 825), (1.125, 1236), (1.125, 1155), (1.125, 548), (1.125, 911), (1.125, 1261), (1.125, 1174), (1.125, 707), (1.125, 1171), (1.125, 500), (1.125, 584), (1.125, 1127), (1.125, 1129), (1.125, 714), (1.125, 1235), (1.125, 1162), (1.125, 927), (1.125, 972), (1.125, 1131), (1.0, 549), (1.0, 1208), (1.0, 851), (1.0, 889), (1.0, 1170), (1.0, 915), (1.0, 870), (1.0, 359), (1.0, 1069), (1.0, 437), (1.0, 1160), (1.0, 608), (1.0, 1098), (1.0, 630), (1.0, 1165), (1.0, 1024), (1.0, 810), (1.0, 502), (1.0, 725), (1.0, 817), (1.0, 938), (1.0, 186), (1.0, 1133), (1.0, 941), (1.0, 963), (1.0, 1053), (1.0, 867), (1.0, 1172), (1.0, 1033), (1.0, 1253), (1.0, 1158), (1.0, 813), (1.0, 818), (1.0, 906), (1.0, 1081), (1.0, 685), (1.0, 495), (1.0, 916), (0.875, 743), (0.875, 829), (0.875, 1189), (0.875, 945), (0.875, 1185), (0.875, 439), (0.875, 901), (0.875, 1070), (0.875, 994), (0.875, 907), (0.875, 724), (0.875, 1195), (0.875, 321), (0.875, 1062), (0.875, 841), (0.875, 297), (0.875, 1191), (0.875, 1091), (0.875, 19), (0.875, 890), (0.875, 521), (0.875, 1028), (0.875, 336), (0.875, 855), (0.875, 35), (0.875, 1031), (0.875, 1057), (0.875, 835), (0.875, 1196), (0.875, 942), (0.875, 917), (0.875, 952), (0.875, 573), (0.875, 894), (0.875, 54), (0.875, 650), (0.875, 586), (0.875, 1077), (0.875, 614), (0.875, 837), (0.875, 1056), (0.875, 673), (0.875, 1055), (0.875, 808), (0.75, 158), (0.75, 598), (0.75, 1108), (0.75, 1193), (0.75, 981), (0.75, 1214), (0.75, 1032), (0.75, 1111), (0.75, 965), (0.75, 962), (0.75, 428), (0.75, 185), (0.75, 780), (0.75, 804), (0.75, 775), (0.75, 415), (0.75, 279), (0.75, 957), (0.75, 1065), (0.75, 865), (0.75, 518), (0.75, 446), (0.75, 856), (0.75, 592), (0.75, 797), (0.75, 822), (0.75, 1201), (0.75, 688), (0.75, 844), (0.75, 633), (0.75, 756), (0.75, 538), (0.75, 939), (0.75, 155), (0.75, 852), (0.75, 862), (0.75, 1194), (0.75, 1010), (0.75, 1139), (0.75, 1084), (0.75, 523), (0.75, 1176), (0.75, 1247), (0.75, 628), (0.75, 513), (0.75, 899), (0.75, 1228), (0.75, 849), (0.75, 399), (0.75, 621), (0.75, 317), (0.75, 736), (0.75, 636), (0.75, 413), (0.75, 785), (0.75, 1204), (0.75, 1198), (0.75, 833), (0.75, 761), (0.75, 1099), (0.75, 506), (0.75, 956), (0.75, 745), (0.75, 661), (0.75, 1175), (0.75, 853), (0.75, 697), (0.75, 955), (0.75, 966), (0.75, 1144), (0.75, 112), (0.75, 624), (0.75, 1071), (0.75, 1075), (0.75, 1020), (0.75, 1262), (0.75, 838), (0.75, 1117), (0.75, 1146), (0.75, 519), (0.75, 504), (0.75, 733), (0.75, 512), (0.75, 146), (0.75, 1225), (0.75, 418), (0.75, 1088), (0.75, 866), (0.75, 953), (0.75, 1017), (0.75, 1037), (0.75, 1064), (0.75, 615), (0.75, 517), (0.75, 832), (0.75, 1184), (0.75, 859), (0.75, 1179), (0.75, 494), (0.75, 408), (0.75, 978), (0.75, 1096), (0.75, 842), (0.75, 320), (0.75, 148), (0.75, 343), (0.625, 1249), (0.625, 1251), (0.625, 1226), (0.625, 1234), (0.625, 1207), (0.625, 1203), (0.625, 1255), (0.625, 1197), (0.625, 1250), (0.5, 1220), (0.5, 1218), (0.5, 1264), (0.5, 1213), (0.5, 1215), (0.5, 1241), (0.5, 1231), (0.5, 1266), (0.5, 1186), (0.375, 1219), (0.375, 1257), (0.375, 1245), (0.29166666666666663, 1199), (0.29166666666666663, 1260), (0.25, 1211), (0.25, 1239)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1104
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 (* x x)) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 1166
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x (* x x)) x) y))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.625, 1180), (1.5, 635), (1.5, 999), (1.5, 1166), (1.5, 1318), (1.5, 400), (1.5, 1104), (1.5, 682), (1.5, 1040), (1.5, 1267), (1.5, 1206), (1.375, 1232), (1.375, 1326), (1.375, 803), (1.375, 1277), (1.375, 949), (1.375, 1178), (1.375, 1275), (1.375, 983), (1.375, 801), (1.375, 587), (1.375, 897), (1.375, 1288), (1.375, 1313), (1.375, 988), (1.375, 1083), (1.375, 696), (1.375, 1188), (1.375, 493), (1.375, 729), (1.375, 795), (1.375, 1273), (1.375, 1150), (1.375, 800), (1.375, 702), (1.375, 1279), (1.375, 1089), (1.375, 1182), (1.375, 1026), (1.375, 892), (1.375, 726), (1.375, 416), (1.375, 1278), (1.375, 65), (1.375, 794), (1.375, 1190), (1.375, 990), (1.375, 705), (1.375, 693), (1.375, 14), (1.375, 694), (1.25, 732), (1.25, 1043), (1.25, 1242), (1.25, 1100), (1.25, 985), (1.25, 1230), (1.25, 219), (1.25, 1085), (1.25, 989), (1.25, 1094), (1.25, 520), (1.25, 854), (1.25, 1018), (1.25, 908), (1.25, 1217), (1.25, 591), (1.25, 821), (1.25, 987), (1.25, 1119), (1.25, 1315), (1.25, 976), (1.25, 593), (1.25, 1265), (1.25, 948), (1.25, 1301), (1.25, 605), (1.25, 1202), (1.25, 1002), (1.25, 1047), (1.25, 1325), (1.25, 1090), (1.25, 896), (1.25, 1238), (1.25, 984), (1.25, 819), (1.25, 1000), (1.25, 1101), (1.25, 1350), (1.25, 937), (1.25, 1068), (1.25, 1319), (1.25, 1294), (1.25, 546), (1.25, 1192), (1.25, 1210), (1.25, 1290), (1.25, 390), (1.25, 333), (1.25, 1223), (1.25, 641), (1.25, 997), (1.25, 992), (1.25, 1221), (1.25, 1011), (1.25, 627), (1.25, 887), (1.25, 1120), (1.25, 727), (1.25, 622), (1.25, 1087), (1.25, 1103), (1.25, 974), (1.25, 325), (1.25, 898), (1.25, 903), (1.25, 1042), (1.25, 1167), (1.25, 840), (1.25, 1276), (1.25, 1209), (1.25, 647), (1.25, 1013), (1.25, 1164), (1.25, 1272), (1.25, 703), (1.25, 533), (1.25, 1205), (1.125, 1240), (1.125, 414), (1.125, 1236), (1.125, 1149), (1.125, 1019), (1.125, 1014), (1.125, 927), (1.125, 1229), (1.125, 716), (1.125, 1345), (1.125, 921), (1.125, 1008), (1.125, 500), (1.125, 972), (1.125, 805), (1.125, 548), (1.125, 679), (1.125, 1155), (1.125, 929), (1.125, 1252), (1.125, 911), (1.125, 600), (1.125, 584), (1.125, 798), (1.125, 796), (1.125, 1357), (1.125, 1244), (1.125, 905), (1.125, 1171), (1.125, 1174), (1.125, 1113), (1.125, 1130), (1.125, 1015), (1.125, 707), (1.125, 1271), (1.125, 1347), (1.125, 711), (1.125, 445), (1.125, 1127), (1.125, 995), (1.125, 928), (1.125, 1128), (1.125, 501), (1.125, 825), (1.125, 1029), (1.125, 1023), (1.125, 334), (1.125, 1289), (1.125, 1354), (1.125, 1038), (1.125, 1007), (1.125, 1131), (1.125, 655), (1.125, 1282), (1.125, 940), (1.125, 784), (1.125, 1006), (1.125, 1050), (1.125, 595), (1.125, 1297), (1.125, 931), (1.125, 1360), (1.125, 1109), (1.125, 1162), (1.125, 435), (1.125, 1036), (1.125, 1359), (1.125, 1136), (1.125, 1259), (1.125, 1341), (1.125, 1048), (1.125, 1187), (1.125, 1339), (1.125, 1235), (1.125, 923), (1.125, 816), (1.125, 714), (1.125, 1129), (1.125, 10), (1.125, 498), (1.125, 1135), (1.125, 1074), (1.125, 1261), (1.125, 815), (1.125, 387), (1.125, 1256), (1.125, 529), (1.125, 1126), (1.125, 1302), (1.125, 991), (1.125, 1092), (1.0, 1336), (1.0, 817), (1.0, 495), (1.0, 1158), (1.0, 810), (1.0, 1069), (1.0, 889), (1.0, 685), (1.0, 608), (1.0, 941), (1.0, 870), (1.0, 549), (1.0, 867), (1.0, 1081), (1.0, 186), (1.0, 725), (1.0, 1253), (1.0, 851), (1.0, 502), (1.0, 906), (1.0, 1098), (1.0, 916), (1.0, 938), (1.0, 630), (1.0, 1033), (1.0, 915), (1.0, 1208), (1.0, 813), (1.0, 359), (1.0, 1024), (1.0, 1133), (1.0, 1270), (1.0, 437), (1.0, 1160), (1.0, 963), (1.0, 818), (1.0, 1172), (1.0, 1165), (1.0, 1170), (1.0, 1053), (0.875, 1189), (0.875, 901), (0.875, 829), (0.875, 297), (0.875, 614), (0.875, 336), (0.875, 724), (0.875, 994), (0.875, 835), (0.875, 650), (0.875, 808), (0.875, 1057), (0.875, 1306), (0.875, 907), (0.875, 894), (0.875, 945), (0.875, 321), (0.875, 1185), (0.875, 890), (0.875, 439), (0.875, 855), (0.875, 673), (0.875, 1268), (0.875, 1028), (0.875, 841), (0.875, 1195), (0.875, 19), (0.875, 1196), (0.875, 1286), (0.875, 1077), (0.875, 917), (0.875, 1070), (0.875, 942), (0.875, 1062), (0.875, 1284), (0.875, 952), (0.875, 1308), (0.875, 586), (0.875, 573), (0.875, 521), (0.875, 1091), (0.875, 743), (0.875, 1031), (0.875, 1055), (0.875, 1191), (0.875, 1056), (0.875, 35), (0.875, 54), (0.875, 1330), (0.875, 837), (0.75, 899), (0.75, 1084), (0.75, 1204), (0.75, 1331), (0.75, 513), (0.75, 962), (0.75, 1032), (0.75, 736), (0.75, 1247), (0.75, 939), (0.75, 1343), (0.75, 279), (0.75, 1328), (0.75, 598), (0.75, 1201), (0.75, 1316), (0.75, 399), (0.75, 981), (0.75, 428), (0.75, 688), (0.75, 852), (0.75, 628), (0.75, 317), (0.75, 1293), (0.75, 756), (0.75, 446), (0.75, 1108), (0.75, 849), (0.75, 1298), (0.75, 856), (0.75, 1292), (0.75, 1194), (0.75, 1139), (0.75, 1320), (0.75, 413), (0.75, 1010), (0.75, 518), (0.75, 415), (0.75, 965), (0.75, 844), (0.75, 1327), (0.75, 775), (0.75, 523), (0.75, 1065), (0.75, 155), (0.75, 865), (0.75, 1353), (0.75, 862), (0.75, 1111), (0.75, 621), (0.75, 185), (0.75, 1304), (0.75, 785), (0.75, 1355), (0.75, 1176), (0.75, 957), (0.75, 1228), (0.75, 1281), (0.75, 633), (0.75, 1324), (0.75, 822), (0.75, 1193), (0.75, 636), (0.75, 780), (0.75, 804), (0.75, 158), (0.75, 1274), (0.75, 797), (0.75, 538), (0.75, 592), (0.75, 1214), (0.75, 1317), (0.625, 1329), (0.625, 1335), (0.625, 1314), (0.625, 1323), (0.625, 1346), (0.625, 1333), (0.5416666666666666, 1352), (0.5416666666666666, 1309), (0.5, 1296), (0.5, 1299), (0.5, 1310), (0.5, 1340), (0.5, 1351), (0.41666666666666663, 1337), (0.41666666666666663, 1283), (0.41666666666666663, 1312), (0.375, 1334), (0.29166666666666663, 1321), (0.25, 1349)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 999
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) (* 1 x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 1166
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x (* x x)) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 1318
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* 1 y)) (* y x)))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.625, 1180), (1.625, 1361), (1.5, 635), (1.5, 400), (1.5, 1267), (1.5, 999), (1.5, 1363), (1.5, 1104), (1.5, 1040), (1.5, 1206), (1.5, 1450), (1.5, 1318), (1.5, 682), (1.5, 1166), (1.375, 800), (1.375, 949), (1.375, 1150), (1.375, 1232), (1.375, 416), (1.375, 729), (1.375, 1386), (1.375, 1326), (1.375, 1393), (1.375, 1313), (1.375, 1188), (1.375, 1279), (1.375, 587), (1.375, 983), (1.375, 702), (1.375, 694), (1.375, 1365), (1.375, 988), (1.375, 1273), (1.375, 1190), (1.375, 1277), (1.375, 1278), (1.375, 1364), (1.375, 892), (1.375, 803), (1.375, 801), (1.375, 1288), (1.375, 493), (1.375, 1182), (1.375, 696), (1.375, 897), (1.375, 1374), (1.375, 1178), (1.375, 705), (1.375, 726), (1.375, 990), (1.375, 794), (1.375, 14), (1.375, 1089), (1.375, 65), (1.375, 1275), (1.375, 795), (1.375, 1391), (1.375, 1026), (1.375, 1083), (1.375, 693), (1.375, 1392), (1.25, 908), (1.25, 1325), (1.25, 1192), (1.25, 732), (1.25, 1013), (1.25, 727), (1.25, 989), (1.25, 887), (1.25, 1242), (1.25, 1202), (1.25, 1221), (1.25, 840), (1.25, 1425), (1.25, 641), (1.25, 1217), (1.25, 985), (1.25, 1119), (1.25, 605), (1.25, 992), (1.25, 1294), (1.25, 1265), (1.25, 1018), (1.25, 1404), (1.25, 1301), (1.25, 333), (1.25, 1388), (1.25, 903), (1.25, 854), (1.25, 1367), (1.25, 1210), (1.25, 1415), (1.25, 219), (1.25, 1397), (1.25, 1396), (1.25, 948), (1.25, 1120), (1.25, 1223), (1.25, 1272), (1.25, 987), (1.25, 997), (1.25, 390), (1.25, 1422), (1.25, 1043), (1.25, 647), (1.25, 1047), (1.25, 1319), (1.25, 1087), (1.25, 1068), (1.25, 1011), (1.25, 1167), (1.25, 1407), (1.25, 1350), (1.25, 1101), (1.25, 1379), (1.25, 1238), (1.25, 1042), (1.25, 533), (1.25, 1085), (1.25, 1230), (1.25, 1100), (1.25, 819), (1.25, 1205), (1.25, 821), (1.25, 1276), (1.25, 1000), (1.25, 1002), (1.25, 593), (1.25, 937), (1.25, 1458), (1.25, 627), (1.25, 984), (1.25, 1090), (1.25, 520), (1.25, 1103), (1.25, 1389), (1.25, 898), (1.25, 1290), (1.25, 591), (1.25, 896), (1.25, 1440), (1.25, 622), (1.25, 1398), (1.25, 1164), (1.25, 1094), (1.25, 325), (1.25, 1209), (1.25, 1436), (1.25, 1426), (1.25, 546), (1.25, 974), (1.25, 976), (1.25, 703), (1.25, 1315), (1.25, 1437), (1.125, 816), (1.125, 1419), (1.125, 931), (1.125, 995), (1.125, 1411), (1.125, 10), (1.125, 1448), (1.125, 1360), (1.125, 927), (1.125, 825), (1.125, 1460), (1.125, 600), (1.125, 1394), (1.125, 548), (1.125, 1126), (1.125, 1006), (1.125, 707), (1.125, 1412), (1.125, 1014), (1.125, 1129), (1.125, 1271), (1.125, 1174), (1.125, 716), (1.125, 1357), (1.125, 1229), (1.125, 1187), (1.125, 435), (1.125, 1377), (1.125, 1162), (1.125, 529), (1.125, 1461), (1.125, 991), (1.125, 1359), (1.125, 1252), (1.125, 1451), (1.125, 1235), (1.125, 1297), (1.125, 798), (1.125, 1244), (1.125, 921), (1.125, 711), (1.125, 1074), (1.125, 1453), (1.125, 498), (1.125, 1128), (1.125, 1048), (1.125, 1345), (1.125, 1354), (1.125, 1050), (1.125, 784), (1.125, 387), (1.125, 1135), (1.125, 1038), (1.125, 1454), (1.125, 714), (1.125, 414), (1.125, 972), (1.125, 929), (1.125, 1236), (1.125, 1036), (1.125, 1149), (1.125, 1240), (1.125, 1109), (1.125, 805), (1.125, 1015), (1.125, 1136), (1.125, 1155), (1.125, 1256), (1.125, 1259), (1.125, 1261), (1.125, 679), (1.125, 1289), (1.125, 911), (1.125, 928), (1.125, 1408), (1.125, 1341), (1.125, 1023), (1.125, 501), (1.125, 655), (1.125, 1113), (1.125, 1427), (1.125, 1434), (1.125, 1008), (1.125, 584), (1.125, 1092), (1.125, 1390), (1.125, 1302), (1.125, 1171), (1.125, 905), (1.125, 796), (1.125, 923), (1.125, 815), (1.125, 1347), (1.125, 1130), (1.125, 1007), (1.125, 1282), (1.125, 500), (1.125, 1127), (1.125, 1339), (1.125, 595), (1.125, 445), (1.125, 940), (1.125, 1019), (1.125, 334), (1.125, 1131), (1.125, 1029), (1.0, 1172), (1.0, 916), (1.0, 1208), (1.0, 359), (1.0, 1053), (1.0, 725), (1.0, 1069), (1.0, 1270), (1.0, 813), (1.0, 941), (1.0, 1081), (1.0, 502), (1.0, 1362), (1.0, 1133), (1.0, 915), (1.0, 1165), (1.0, 1158), (1.0, 818), (1.0, 1416), (1.0, 867), (1.0, 1376), (1.0, 495), (1.0, 685), (1.0, 630), (1.0, 906), (1.0, 817), (1.0, 1336), (1.0, 1253), (1.0, 851), (1.0, 437), (1.0, 1098), (1.0, 870), (1.0, 889), (1.0, 1024), (1.0, 608), (1.0, 1170), (1.0, 1459), (1.0, 1383), (1.0, 1033), (1.0, 810), (1.0, 186), (1.0, 1370), (1.0, 1160), (1.0, 963), (1.0, 549), (1.0, 938), (0.875, 829), (0.875, 808), (0.875, 1284), (0.875, 321), (0.875, 1062), (0.875, 907), (0.875, 994), (0.875, 837), (0.875, 1055), (0.875, 614), (0.875, 1330), (0.875, 19), (0.875, 650), (0.875, 855), (0.875, 1456), (0.875, 35), (0.875, 586), (0.875, 673), (0.875, 1306), (0.875, 1196), (0.875, 835), (0.875, 917), (0.875, 573), (0.875, 1185), (0.875, 1056), (0.875, 1031), (0.875, 1268), (0.875, 1070), (0.875, 743), (0.875, 1189), (0.875, 1195), (0.875, 1028), (0.875, 1286), (0.875, 1077), (0.875, 841), (0.875, 1091), (0.875, 521), (0.875, 54), (0.875, 1308), (0.875, 297), (0.875, 890), (0.875, 439), (0.875, 952), (0.875, 1057), (0.875, 1191), (0.875, 945), (0.875, 724), (0.875, 894), (0.875, 901), (0.875, 942), (0.875, 336), (0.75, 1400), (0.75, 279), (0.75, 899), (0.75, 1385), (0.75, 1201), (0.75, 1247), (0.75, 1204), (0.75, 1424), (0.75, 939), (0.75, 1343), (0.75, 513), (0.75, 1084), (0.75, 1316), (0.75, 962), (0.75, 1331), (0.75, 736), (0.75, 598), (0.75, 1406), (0.75, 1430), (0.75, 1328), (0.75, 1032), (0.625, 1372), (0.625, 1366), (0.625, 1414), (0.625, 1449), (0.625, 1403), (0.625, 1446), (0.625, 1381), (0.625, 1429), (0.5416666666666666, 1418), (0.5, 1401), (0.5, 1442), (0.5, 1455), (0.5, 1410), (0.5, 1423), (0.5, 1432), (0.5, 1420), (0.5, 1443), (0.41666666666666663, 1439), (0.375, 1369), (0.375, 1444), (0.25, 1382)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x y) x) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 1267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y x)) (* y x)))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.625, 1462), (1.625, 1361), (1.625, 1180), (1.5, 1318), (1.5, 400), (1.5, 1450), (1.5, 1104), (1.5, 1166), (1.5, 1206), (1.5, 1549), (1.5, 635), (1.5, 1363), (1.5, 1040), (1.5, 1542), (1.5, 999), (1.5, 1267), (1.5, 682), (1.375, 1480), (1.375, 1083), (1.375, 693), (1.375, 800), (1.375, 1393), (1.375, 801), (1.375, 1491), (1.375, 1150), (1.375, 1178), (1.375, 892), (1.375, 1278), (1.375, 1313), (1.375, 1526), (1.375, 795), (1.375, 1472), (1.375, 1273), (1.375, 988), (1.375, 949), (1.375, 493), (1.375, 696), (1.375, 14), (1.375, 794), (1.375, 803), (1.375, 587), (1.375, 1386), (1.375, 1275), (1.375, 1483), (1.375, 1277), (1.375, 1485), (1.375, 1547), (1.375, 1089), (1.375, 1364), (1.375, 726), (1.375, 1288), (1.375, 1190), (1.375, 1279), (1.375, 1391), (1.375, 1026), (1.375, 1479), (1.375, 1365), (1.375, 702), (1.375, 1467), (1.375, 416), (1.375, 1499), (1.375, 983), (1.375, 1182), (1.375, 1493), (1.375, 694), (1.375, 1488), (1.375, 1374), (1.375, 1326), (1.375, 729), (1.375, 990), (1.375, 1232), (1.375, 65), (1.375, 897), (1.375, 705), (1.375, 1392), (1.375, 1188), (1.25, 819), (1.25, 1458), (1.25, 1389), (1.25, 1167), (1.25, 1294), (1.25, 1436), (1.25, 591), (1.25, 1047), (1.25, 1011), (1.25, 1119), (1.25, 985), (1.25, 1120), (1.25, 727), (1.25, 1440), (1.25, 1398), (1.25, 333), (1.25, 703), (1.25, 1272), (1.25, 520), (1.25, 1090), (1.25, 641), (1.25, 1552), (1.25, 1000), (1.25, 948), (1.25, 1100), (1.25, 1290), (1.25, 325), (1.25, 1018), (1.25, 1425), (1.25, 1265), (1.25, 1085), (1.25, 976), (1.25, 605), (1.25, 896), (1.25, 937), (1.25, 1205), (1.25, 1276), (1.25, 1042), (1.25, 546), (1.25, 1103), (1.25, 1301), (1.25, 908), (1.25, 1068), (1.25, 1367), (1.25, 1437), (1.25, 1221), (1.25, 997), (1.25, 1404), (1.25, 1523), (1.25, 1319), (1.25, 1397), (1.25, 647), (1.25, 533), (1.25, 1002), (1.25, 593), (1.25, 1087), (1.25, 1516), (1.25, 1210), (1.25, 390), (1.25, 903), (1.25, 1502), (1.25, 1013), (1.25, 1388), (1.25, 1202), (1.25, 1422), (1.25, 1550), (1.25, 989), (1.25, 987), (1.25, 219), (1.25, 622), (1.25, 627), (1.25, 887), (1.25, 1217), (1.25, 1238), (1.25, 1209), (1.25, 1242), (1.25, 1496), (1.25, 1521), (1.25, 1223), (1.25, 1500), (1.25, 840), (1.25, 1315), (1.25, 992), (1.25, 1164), (1.25, 1396), (1.25, 984), (1.25, 1094), (1.25, 1489), (1.25, 854), (1.25, 974), (1.25, 1043), (1.25, 1415), (1.25, 732), (1.25, 1555), (1.25, 1544), (1.25, 1192), (1.25, 1540), (1.25, 1474), (1.25, 1514), (1.25, 1230), (1.25, 1101), (1.25, 1379), (1.25, 1507), (1.25, 898), (1.25, 1407), (1.25, 1325), (1.25, 1539), (1.25, 1350), (1.25, 1426), (1.25, 821), (1.125, 1256), (1.125, 1127), (1.125, 921), (1.125, 1297), (1.125, 1412), (1.125, 1135), (1.125, 1282), (1.125, 584), (1.125, 595), (1.125, 655), (1.125, 711), (1.125, 679), (1.125, 1460), (1.125, 1007), (1.125, 1126), (1.125, 798), (1.125, 1454), (1.125, 972), (1.125, 1048), (1.125, 1074), (1.125, 1339), (1.125, 1345), (1.125, 927), (1.125, 1174), (1.125, 940), (1.125, 1036), (1.125, 1259), (1.125, 714), (1.125, 928), (1.125, 1109), (1.125, 500), (1.125, 1341), (1.125, 1354), (1.125, 1092), (1.125, 1149), (1.125, 911), (1.125, 1019), (1.125, 1451), (1.125, 1469), (1.125, 501), (1.125, 716), (1.125, 414), (1.125, 1508), (1.125, 931), (1.125, 334), (1.125, 1029), (1.125, 600), (1.125, 10), (1.125, 387), (1.125, 1289), (1.125, 1394), (1.125, 1359), (1.125, 1448), (1.125, 1015), (1.125, 1411), (1.125, 1377), (1.125, 1495), (1.125, 1131), (1.125, 1240), (1.125, 1130), (1.125, 1235), (1.125, 1236), (1.125, 1050), (1.125, 435), (1.125, 529), (1.125, 1155), (1.125, 905), (1.125, 1519), (1.125, 1252), (1.125, 1171), (1.125, 1530), (1.125, 796), (1.125, 1481), (1.125, 1129), (1.125, 548), (1.125, 1347), (1.125, 498), (1.125, 815), (1.125, 923), (1.125, 995), (1.125, 1261), (1.125, 816), (1.125, 1453), (1.125, 1023), (1.125, 1419), (1.125, 1113), (1.125, 1461), (1.125, 445), (1.125, 1244), (1.125, 1008), (1.125, 1128), (1.125, 707), (1.125, 825), (1.125, 1427), (1.125, 1408), (1.125, 1162), (1.125, 1360), (1.125, 1482), (1.125, 1357), (1.125, 1038), (1.125, 1515), (1.125, 1434), (1.125, 805), (1.125, 1006), (1.125, 1271), (1.125, 929), (1.125, 1229), (1.125, 1187), (1.125, 784), (1.125, 1136), (1.125, 1302), (1.125, 991), (1.125, 1390), (1.125, 1014), (1.0, 186), (1.0, 1069), (1.0, 1081), (1.0, 1208), (1.0, 1336), (1.0, 725), (1.0, 549), (1.0, 818), (1.0, 813), (1.0, 1160), (1.0, 608), (1.0, 1459), (1.0, 916), (1.0, 1468), (1.0, 1165), (1.0, 867), (1.0, 963), (1.0, 1362), (1.0, 1098), (1.0, 1033), (1.0, 1270), (1.0, 938), (1.0, 1158), (1.0, 1133), (1.0, 1172), (1.0, 1170), (1.0, 685), (1.0, 817), (1.0, 502), (1.0, 437), (1.0, 889), (1.0, 906), (1.0, 1416), (1.0, 1053), (1.0, 870), (1.0, 1370), (1.0, 1383), (1.0, 810), (1.0, 1376), (1.0, 495), (1.0, 941), (1.0, 851), (1.0, 915), (1.0, 359), (1.0, 1024), (1.0, 630), (1.0, 1253), (1.0, 1477), (1.0, 1492), (0.875, 1284), (0.875, 829), (0.875, 1062), (0.875, 35), (0.875, 855), (0.875, 1518), (0.875, 673), (0.875, 808), (0.875, 837), (0.875, 1475), (0.875, 1456), (0.875, 1501), (0.875, 1055), (0.875, 1330), (0.875, 614), (0.875, 1533), (0.875, 19), (0.875, 321), (0.875, 1464), (0.875, 907), (0.875, 994), (0.875, 586), (0.875, 650), (0.75, 1484), (0.75, 1487), (0.75, 1471), (0.75, 1525), (0.75, 1470), (0.75, 1536), (0.75, 1511), (0.75, 1531), (0.75, 1505), (0.625, 1509), (0.625, 1497), (0.625, 1522), (0.625, 1498), (0.625, 1541), (0.625, 1506), (0.625, 1545), (0.5, 1510), (0.5, 1532), (0.5, 1543), (0.5, 1513), (0.5, 1503), (0.41666666666666663, 1553), (0.41666666666666663, 1466), (0.41666666666666663, 1520), (0.375, 1534), (0.375, 1554), (0.375, 1528), (0.29166666666666663, 1537)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1462
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1318
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* 1 y)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 400
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* (* 1 y) x)) y))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.625, 1361), (1.625, 1556), (1.625, 1462), (1.625, 1180), (1.5, 1040), (1.5, 400), (1.5, 682), (1.5, 1267), (1.5, 999), (1.5, 1549), (1.5, 1318), (1.5, 635), (1.5, 1542), (1.5, 1559), (1.5, 1363), (1.5, 1450), (1.5, 1206), (1.5, 1166), (1.5, 1576), (1.5, 1104), (1.375, 1232), (1.375, 1493), (1.375, 795), (1.375, 1188), (1.375, 1591), (1.375, 702), (1.375, 988), (1.375, 1277), (1.375, 897), (1.375, 1581), (1.375, 1279), (1.375, 1480), (1.375, 803), (1.375, 1599), (1.375, 705), (1.375, 1600), (1.375, 696), (1.375, 801), (1.375, 1485), (1.375, 1178), (1.375, 1150), (1.375, 1392), (1.375, 1275), (1.375, 800), (1.375, 1483), (1.375, 1467), (1.375, 1374), (1.375, 1190), (1.375, 1585), (1.375, 983), (1.375, 1488), (1.375, 1393), (1.375, 794), (1.375, 1326), (1.375, 1592), (1.375, 1364), (1.375, 1278), (1.375, 14), (1.375, 1479), (1.375, 949), (1.375, 729), (1.375, 587), (1.375, 1596), (1.375, 1273), (1.375, 1026), (1.375, 726), (1.375, 65), (1.375, 1648), (1.375, 1526), (1.375, 1288), (1.375, 1365), (1.375, 493), (1.375, 1565), (1.375, 1594), (1.375, 1582), (1.375, 416), (1.375, 1313), (1.375, 1472), (1.375, 1089), (1.375, 693), (1.375, 694), (1.375, 1391), (1.375, 1499), (1.375, 1557), (1.375, 1597), (1.375, 1386), (1.375, 990), (1.375, 892), (1.375, 1491), (1.375, 1182), (1.375, 1547), (1.375, 1083), (1.25, 1238), (1.25, 1425), (1.25, 1018), (1.25, 1042), (1.25, 1315), (1.25, 1500), (1.25, 1389), (1.25, 390), (1.25, 1474), (1.25, 1209), (1.25, 908), (1.25, 1544), (1.25, 1590), (1.25, 591), (1.25, 1325), (1.25, 903), (1.25, 1507), (1.25, 1489), (1.25, 1555), (1.25, 819), (1.25, 1085), (1.25, 1217), (1.25, 1388), (1.25, 333), (1.25, 1120), (1.25, 840), (1.25, 1000), (1.25, 1047), (1.25, 1094), (1.25, 1223), (1.25, 1013), (1.25, 992), (1.25, 1011), (1.25, 1626), (1.25, 821), (1.25, 1397), (1.25, 1276), (1.25, 1550), (1.25, 727), (1.25, 985), (1.25, 1577), (1.25, 1415), (1.25, 1301), (1.25, 605), (1.25, 997), (1.25, 1440), (1.25, 1205), (1.25, 1202), (1.25, 1571), (1.25, 1100), (1.25, 546), (1.25, 1638), (1.25, 1350), (1.25, 1618), (1.25, 1516), (1.25, 1627), (1.25, 1437), (1.25, 896), (1.25, 622), (1.25, 1367), (1.25, 593), (1.25, 1043), (1.25, 1242), (1.25, 854), (1.25, 1087), (1.25, 1514), (1.25, 1635), (1.25, 520), (1.25, 1290), (1.25, 1164), (1.25, 1539), (1.25, 1422), (1.25, 1192), (1.25, 703), (1.25, 987), (1.25, 1647), (1.25, 974), (1.25, 1319), (1.25, 1458), (1.25, 1502), (1.25, 1379), (1.25, 1640), (1.25, 533), (1.25, 1496), (1.25, 1002), (1.25, 1103), (1.25, 1294), (1.25, 627), (1.25, 1221), (1.25, 887), (1.25, 1230), (1.25, 325), (1.25, 1552), (1.25, 976), (1.25, 1119), (1.25, 948), (1.25, 984), (1.25, 1436), (1.25, 937), (1.25, 641), (1.25, 1210), (1.25, 1622), (1.25, 898), (1.25, 1407), (1.25, 1101), (1.25, 989), (1.25, 1426), (1.25, 1523), (1.25, 647), (1.25, 1396), (1.25, 1068), (1.25, 1272), (1.25, 1265), (1.25, 732), (1.25, 1398), (1.25, 1540), (1.25, 1090), (1.25, 1595), (1.25, 1167), (1.25, 1404), (1.25, 1521), (1.25, 219), (1.125, 1282), (1.125, 1074), (1.125, 1408), (1.125, 1240), (1.125, 711), (1.125, 1580), (1.125, 1128), (1.125, 911), (1.125, 1036), (1.125, 584), (1.125, 1297), (1.125, 1451), (1.125, 1345), (1.125, 1149), (1.125, 1187), (1.125, 1127), (1.125, 1236), (1.125, 414), (1.125, 796), (1.125, 815), (1.125, 1575), (1.125, 1519), (1.125, 655), (1.125, 1482), (1.125, 1411), (1.125, 1008), (1.125, 1495), (1.125, 548), (1.125, 1136), (1.125, 1092), (1.125, 816), (1.125, 387), (1.125, 798), (1.125, 1508), (1.125, 1006), (1.125, 595), (1.125, 716), (1.125, 991), (1.125, 1256), (1.125, 1302), (1.125, 1155), (1.125, 1229), (1.125, 498), (1.125, 445), (1.125, 1354), (1.125, 1289), (1.125, 529), (1.125, 1261), (1.125, 1271), (1.125, 1023), (1.125, 905), (1.125, 929), (1.125, 1235), (1.125, 1126), (1.125, 1461), (1.125, 1469), (1.125, 1171), (1.125, 1453), (1.125, 1628), (1.125, 334), (1.125, 825), (1.125, 500), (1.125, 1481), (1.125, 805), (1.125, 1460), (1.125, 1015), (1.125, 1048), (1.125, 1259), (1.125, 1427), (1.125, 1129), (1.125, 1135), (1.125, 1007), (1.125, 1174), (1.125, 1515), (1.125, 435), (1.125, 1377), (1.125, 1347), (1.125, 1614), (1.125, 1454), (1.125, 1014), (1.125, 1434), (1.125, 714), (1.125, 940), (1.125, 1357), (1.125, 995), (1.125, 1162), (1.125, 600), (1.125, 1050), (1.125, 1019), (1.125, 784), (1.125, 1394), (1.125, 927), (1.125, 1412), (1.125, 1339), (1.125, 972), (1.125, 921), (1.125, 1130), (1.125, 1448), (1.125, 1113), (1.125, 679), (1.125, 1244), (1.125, 1109), (1.125, 501), (1.125, 1360), (1.125, 1252), (1.125, 1419), (1.125, 1131), (1.125, 1530), (1.125, 10), (1.125, 707), (1.125, 1341), (1.125, 1631), (1.125, 931), (1.125, 1390), (1.125, 1029), (1.125, 923), (1.125, 928), (1.125, 1038), (1.125, 1359), (1.0, 1133), (1.0, 867), (1.0, 1362), (1.0, 1579), (1.0, 725), (1.0, 813), (1.0, 1033), (1.0, 1069), (1.0, 1459), (1.0, 1562), (1.0, 549), (1.0, 1468), (1.0, 608), (1.0, 1160), (1.0, 1208), (1.0, 1165), (1.0, 1158), (1.0, 1172), (1.0, 916), (1.0, 1098), (1.0, 186), (1.0, 818), (1.0, 938), (1.0, 963), (1.0, 1629), (1.0, 1081), (1.0, 1586), (1.0, 1336), (1.0, 1270), (0.875, 1633), (0.875, 1572), (0.875, 1584), (0.875, 1567), (0.875, 1566), (0.75, 1612), (0.75, 1619), (0.75, 1634), (0.75, 1609), (0.75, 1602), (0.75, 1593), (0.75, 1625), (0.75, 1644), (0.75, 1623), (0.75, 1642), (0.75, 1636), (0.75, 1570), (0.75, 1624), (0.75, 1561), (0.75, 1589), (0.75, 1578), (0.625, 1645), (0.625, 1610), (0.625, 1616), (0.625, 1603), (0.625, 1617), (0.5, 1568), (0.5, 1615), (0.5, 1611), (0.5, 1560), (0.5, 1643), (0.41666666666666663, 1607), (0.41666666666666663, 1588), (0.41666666666666663, 1621), (0.41666666666666663, 1574), (0.375, 1605), (0.375, 1564), (0.16666666666666666, 1601)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1556
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1462
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1040
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (+ (* x 1) x)))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
[(1.625, 1556), (1.625, 1361), (1.625, 1650), (1.625, 1180), (1.625, 1652), (1.625, 1462), (1.5, 1318), (1.5, 635), (1.5, 1576), (1.5, 1267), (1.5, 1679), (1.5, 682), (1.5, 1559), (1.5, 1657), (1.5, 400), (1.5, 999), (1.5, 1699), (1.5, 1166), (1.5, 1711), (1.5, 1549), (1.5, 1450), (1.5, 1104), (1.5, 1040), (1.5, 1542), (1.5, 1653), (1.5, 1363), (1.5, 1730), (1.5, 1654), (1.5, 1206), (1.375, 1364), (1.375, 1493), (1.375, 795), (1.375, 1597), (1.375, 705), (1.375, 1600), (1.375, 1662), (1.375, 1479), (1.375, 1365), (1.375, 1744), (1.375, 803), (1.375, 1190), (1.375, 693), (1.375, 1472), (1.375, 1488), (1.375, 794), (1.375, 1374), (1.375, 1392), (1.375, 1150), (1.375, 1188), (1.375, 1288), (1.375, 1581), (1.375, 493), (1.375, 1083), (1.375, 1182), (1.375, 729), (1.375, 1669), (1.375, 1680), (1.375, 892), (1.375, 1700), (1.375, 990), (1.375, 1313), (1.375, 1681), (1.375, 14), (1.375, 949), (1.375, 1273), (1.375, 1491), (1.375, 696), (1.375, 694), (1.375, 65), (1.375, 1386), (1.375, 702), (1.375, 1026), (1.375, 1667), (1.375, 1467), (1.375, 1648), (1.375, 1485), (1.375, 1705), (1.375, 1592), (1.375, 897), (1.375, 1596), (1.375, 1089), (1.375, 1391), (1.375, 1499), (1.375, 1689), (1.375, 1557), (1.375, 1594), (1.375, 1278), (1.375, 1591), (1.375, 1565), (1.375, 1670), (1.375, 416), (1.375, 1393), (1.375, 1277), (1.375, 1232), (1.375, 1480), (1.375, 1599), (1.375, 1275), (1.375, 988), (1.375, 1483), (1.375, 726), (1.375, 587), (1.375, 1737), (1.375, 983), (1.375, 1526), (1.375, 1582), (1.375, 801), (1.375, 1547), (1.375, 1585), (1.375, 1326), (1.375, 1279), (1.375, 1682), (1.375, 1685), (1.375, 800), (1.375, 1707), (1.375, 1676), (1.375, 1178), (1.25, 1301), (1.25, 1436), (1.25, 1210), (1.25, 1407), (1.25, 1047), (1.25, 1294), (1.25, 887), (1.25, 1626), (1.25, 1544), (1.25, 1521), (1.25, 819), (1.25, 908), (1.25, 647), (1.25, 1622), (1.25, 1397), (1.25, 840), (1.25, 1647), (1.25, 1223), (1.25, 1555), (1.25, 1209), (1.25, 1100), (1.25, 1265), (1.25, 1205), (1.25, 1500), (1.25, 1290), (1.25, 854), (1.25, 1404), (1.25, 1090), (1.25, 1167), (1.25, 1242), (1.25, 974), (1.25, 1496), (1.25, 732), (1.25, 1164), (1.25, 1474), (1.25, 1396), (1.25, 1590), (1.25, 1440), (1.25, 1389), (1.25, 1319), (1.25, 1042), (1.25, 1002), (1.25, 1458), (1.25, 1638), (1.25, 1732), (1.25, 1743), (1.25, 992), (1.25, 219), (1.25, 1713), (1.25, 1276), (1.25, 1325), (1.25, 1094), (1.25, 325), (1.25, 1507), (1.25, 1709), (1.25, 1087), (1.25, 1640), (1.25, 390), (1.25, 1367), (1.25, 1426), (1.25, 1672), (1.25, 1068), (1.25, 1489), (1.25, 593), (1.25, 1000), (1.25, 1595), (1.25, 1686), (1.25, 1749), (1.25, 1552), (1.25, 1101), (1.25, 1539), (1.25, 1119), (1.25, 641), (1.25, 1379), (1.25, 985), (1.25, 1422), (1.25, 533), (1.25, 1571), (1.25, 1120), (1.25, 1540), (1.25, 1238), (1.25, 1550), (1.25, 987), (1.25, 1103), (1.25, 1502), (1.25, 1514), (1.25, 520), (1.25, 1217), (1.25, 1415), (1.25, 1618), (1.25, 898), (1.25, 1627), (1.25, 1523), (1.25, 1011), (1.25, 703), (1.25, 1717), (1.25, 1043), (1.25, 1018), (1.25, 1727), (1.25, 1315), (1.25, 989), (1.25, 605), (1.25, 997), (1.25, 622), (1.25, 1230), (1.25, 1425), (1.25, 903), (1.25, 1013), (1.25, 1202), (1.25, 1192), (1.25, 821), (1.25, 1577), (1.25, 333), (1.25, 1635), (1.25, 948), (1.25, 976), (1.25, 1085), (1.25, 937), (1.25, 1437), (1.25, 1718), (1.25, 591), (1.25, 627), (1.25, 1398), (1.25, 984), (1.25, 1221), (1.25, 1272), (1.25, 896), (1.25, 1388), (1.25, 546), (1.25, 1350), (1.25, 727), (1.25, 1516), (1.125, 929), (1.125, 716), (1.125, 1023), (1.125, 1282), (1.125, 1126), (1.125, 584), (1.125, 1453), (1.125, 1048), (1.125, 1015), (1.125, 1229), (1.125, 1171), (1.125, 815), (1.125, 707), (1.125, 498), (1.125, 825), (1.125, 1130), (1.125, 1394), (1.125, 1019), (1.125, 1162), (1.125, 1074), (1.125, 548), (1.125, 796), (1.125, 1412), (1.125, 445), (1.125, 1580), (1.125, 1354), (1.125, 798), (1.125, 1481), (1.125, 1014), (1.125, 387), (1.125, 1297), (1.125, 1092), (1.125, 805), (1.125, 1127), (1.125, 1665), (1.125, 816), (1.125, 1729), (1.125, 1174), (1.125, 940), (1.125, 995), (1.125, 1261), (1.125, 1419), (1.125, 711), (1.125, 1448), (1.125, 972), (1.125, 1725), (1.125, 1136), (1.125, 1461), (1.125, 1530), (1.125, 714), (1.125, 1256), (1.125, 1252), (1.125, 1128), (1.125, 784), (1.125, 1628), (1.125, 679), (1.125, 1495), (1.125, 1748), (1.125, 1508), (1.125, 1666), (1.125, 1469), (1.125, 1259), (1.125, 595), (1.125, 905), (1.125, 1271), (1.125, 1434), (1.125, 1187), (1.125, 911), (1.125, 1008), (1.125, 1050), (1.125, 927), (1.125, 1135), (1.125, 1341), (1.125, 1451), (1.125, 655), (1.125, 1742), (1.125, 1289), (1.125, 500), (1.125, 1454), (1.125, 1345), (1.125, 1129), (1.125, 1515), (1.125, 1357), (1.125, 1726), (1.125, 1427), (1.125, 1006), (1.125, 529), (1.125, 1113), (1.125, 1149), (1.125, 1614), (1.125, 1109), (1.125, 1347), (1.125, 1746), (1.125, 1482), (1.125, 1408), (1.125, 334), (1.125, 414), (1.125, 1036), (1.125, 501), (1.125, 1235), (1.125, 1360), (1.125, 1240), (1.125, 1244), (1.125, 1236), (1.125, 1377), (1.125, 1339), (1.125, 10), (1.125, 600), (1.125, 1302), (1.125, 1155), (1.125, 1519), (1.125, 921), (1.125, 991), (1.125, 1460), (1.125, 435), (1.125, 1131), (1.125, 1575), (1.125, 1007), (1.125, 1411), (1.0, 1660), (1.0, 1678), (1.0, 1697), (1.0, 1674), (0.875, 1656), (0.875, 1659), (0.875, 1683), (0.875, 1696), (0.75, 1691), (0.75, 1701), (0.75, 1658), (0.75, 1703), (0.75, 1693), (0.75, 1664), (0.75, 1721), (0.75, 1688), (0.75, 1739), (0.75, 1706), (0.75, 1695), (0.75, 1675), (0.625, 1708), (0.625, 1734), (0.625, 1698), (0.5416666666666666, 1663), (0.5, 1668), (0.5, 1747), (0.41666666666666663, 1690), (0.41666666666666663, 1723), (0.375, 1738), (0.375, 1740), (0.375, 1720), (0.29166666666666663, 1736), (0.29166666666666663, 1715)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1556
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1650
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1652
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 15]
[Computing fitness]
[(1.625, 1650), (1.625, 1556), (1.625, 1652), (1.625, 1751), (1.625, 1180), (1.625, 1462), (1.625, 1361), (1.625, 1750), (1.5, 1450), (1.5, 1104), (1.5, 1318), (1.5, 1657), (1.5, 1206), (1.5, 1679), (1.5, 635), (1.5, 1767), (1.5, 1576), (1.5, 999), (1.5, 682), (1.5, 1559), (1.5, 1654), (1.5, 1711), (1.5, 1267), (1.5, 1759), (1.5, 1730), (1.5, 1653), (1.5, 400), (1.5, 1363), (1.5, 1549), (1.5, 1699), (1.5, 1040), (1.5, 1542), (1.5, 1812), (1.5, 1166), (1.375, 1662), (1.375, 1594), (1.375, 1681), (1.375, 1802), (1.375, 1800), (1.375, 1232), (1.375, 696), (1.375, 1820), (1.375, 693), (1.375, 1787), (1.375, 1547), (1.375, 1784), (1.375, 1467), (1.375, 1326), (1.375, 1582), (1.375, 694), (1.375, 990), (1.375, 1279), (1.375, 1600), (1.375, 729), (1.375, 1480), (1.375, 1680), (1.375, 1386), (1.375, 1769), (1.375, 1803), (1.375, 1825), (1.375, 1273), (1.375, 1374), (1.375, 1689), (1.375, 1596), (1.375, 65), (1.375, 1805), (1.375, 1597), (1.375, 1581), (1.375, 1472), (1.375, 801), (1.375, 1682), (1.375, 1592), (1.375, 983), (1.375, 1391), (1.375, 1785), (1.375, 949), (1.375, 1774), (1.375, 1793), (1.375, 1313), (1.375, 1810), (1.375, 1150), (1.375, 1278), (1.375, 897), (1.375, 800), (1.375, 1288), (1.375, 803), (1.375, 1499), (1.375, 988), (1.375, 1676), (1.375, 1585), (1.375, 1591), (1.375, 1670), (1.375, 1488), (1.375, 587), (1.375, 1493), (1.375, 702), (1.375, 1485), (1.375, 1178), (1.375, 1393), (1.375, 1392), (1.375, 1491), (1.375, 892), (1.375, 705), (1.375, 1700), (1.375, 1648), (1.375, 794), (1.375, 1364), (1.375, 1788), (1.375, 1685), (1.375, 1669), (1.375, 1026), (1.375, 1823), (1.375, 1737), (1.375, 726), (1.375, 795), (1.375, 416), (1.375, 1188), (1.375, 1526), (1.375, 1565), (1.375, 1083), (1.375, 1275), (1.375, 1277), (1.375, 493), (1.375, 1182), (1.375, 1705), (1.375, 1089), (1.375, 1483), (1.375, 1744), (1.375, 14), (1.375, 1707), (1.375, 1479), (1.375, 1365), (1.375, 1557), (1.375, 1599), (1.375, 1190), (1.375, 1667), (1.25, 1474), (1.25, 533), (1.25, 908), (1.25, 1540), (1.25, 992), (1.25, 1571), (1.25, 1502), (1.25, 1018), (1.25, 898), (1.25, 1523), (1.25, 727), (1.25, 1640), (1.25, 1202), (1.25, 1103), (1.25, 605), (1.25, 1831), (1.25, 546), (1.25, 1743), (1.25, 1635), (1.25, 903), (1.25, 1425), (1.25, 984), (1.25, 1516), (1.25, 1732), (1.25, 1325), (1.25, 1550), (1.25, 1458), (1.25, 1801), (1.25, 1436), (1.25, 1398), (1.25, 1627), (1.25, 985), (1.25, 333), (1.25, 219), (1.25, 1210), (1.25, 948), (1.25, 732), (1.25, 1749), (1.25, 1539), (1.25, 641), (1.25, 1167), (1.25, 1514), (1.25, 1555), (1.25, 1265), (1.25, 1221), (1.25, 1223), (1.25, 1389), (1.25, 325), (1.25, 1806), (1.25, 627), (1.25, 1000), (1.25, 1828), (1.25, 1552), (1.25, 1507), (1.25, 1626), (1.25, 1709), (1.25, 1013), (1.25, 1164), (1.25, 1437), (1.25, 1407), (1.25, 1319), (1.25, 1713), (1.25, 1404), (1.25, 1440), (1.25, 1415), (1.25, 1087), (1.25, 1500), (1.25, 1090), (1.25, 1577), (1.25, 1618), (1.25, 1521), (1.25, 591), (1.25, 1829), (1.25, 1778), (1.25, 1192), (1.25, 1818), (1.25, 1119), (1.25, 1792), (1.25, 1794), (1.25, 819), (1.25, 1085), (1.25, 520), (1.25, 1388), (1.25, 390), (1.25, 1350), (1.25, 622), (1.25, 1272), (1.25, 1396), (1.25, 1838), (1.25, 1647), (1.25, 887), (1.25, 997), (1.25, 1799), (1.25, 1238), (1.25, 1672), (1.25, 1205), (1.25, 1622), (1.25, 989), (1.25, 1042), (1.25, 1638), (1.25, 1094), (1.25, 974), (1.25, 1718), (1.25, 647), (1.25, 1276), (1.25, 1315), (1.25, 1686), (1.25, 1595), (1.25, 1011), (1.25, 1294), (1.25, 896), (1.25, 1230), (1.25, 1301), (1.25, 937), (1.25, 840), (1.25, 854), (1.25, 1844), (1.25, 593), (1.25, 1100), (1.25, 1544), (1.25, 1242), (1.25, 1426), (1.25, 1002), (1.25, 1101), (1.25, 1397), (1.25, 1783), (1.25, 703), (1.25, 1068), (1.25, 1379), (1.25, 1590), (1.25, 976), (1.25, 1120), (1.25, 1717), (1.25, 1727), (1.25, 1827), (1.25, 1209), (1.25, 1047), (1.25, 1043), (1.25, 1422), (1.25, 987), (1.25, 1290), (1.25, 1367), (1.25, 1496), (1.25, 1489), (1.25, 821), (1.25, 1217), (1.125, 1580), (1.125, 1174), (1.125, 1023), (1.125, 1772), (1.125, 1048), (1.125, 1008), (1.125, 816), (1.125, 714), (1.125, 1434), (1.125, 927), (1.125, 548), (1.125, 1135), (1.125, 1014), (1.125, 1050), (1.125, 1394), (1.125, 1354), (1.125, 911), (1.125, 805), (1.125, 1725), (1.125, 1074), (1.125, 707), (1.125, 1162), (1.125, 1729), (1.125, 1666), (1.125, 1481), (1.125, 1126), (1.125, 1128), (1.125, 1495), (1.125, 1015), (1.125, 584), (1.125, 595), (1.125, 1451), (1.125, 1842), (1.125, 940), (1.125, 1282), (1.125, 387), (1.125, 798), (1.125, 1271), (1.125, 1297), (1.125, 1289), (1.125, 1748), (1.125, 905), (1.125, 1092), (1.125, 995), (1.125, 1261), (1.125, 1229), (1.125, 655), (1.125, 1469), (1.125, 1256), (1.125, 716), (1.125, 1130), (1.125, 825), (1.125, 796), (1.125, 1530), (1.125, 1508), (1.125, 1019), (1.125, 784), (1.125, 1252), (1.125, 1448), (1.125, 1127), (1.125, 1171), (1.125, 1187), (1.125, 1341), (1.125, 711), (1.125, 1419), (1.125, 498), (1.125, 972), (1.125, 1665), (1.125, 1628), (1.125, 1834), (1.125, 1259), (1.125, 1461), (1.125, 1412), (1.125, 1136), (1.125, 1453), (1.125, 1742), (1.125, 815), (1.125, 679), (1.125, 929), (1.125, 445), (1.0, 1819), (1.0, 1781), (1.0, 1768), (1.0, 1760), (1.0, 1814), (0.875, 1776), (0.875, 1758), (0.875, 1815), (0.875, 1816), (0.875, 1791), (0.875, 1841), (0.875, 1765), (0.875, 1755), (0.875, 1833), (0.875, 1753), (0.875, 1789), (0.875, 1797), (0.875, 1766), (0.75, 1762), (0.75, 1773), (0.75, 1780), (0.75, 1763), (0.75, 1843), (0.75, 1754), (0.625, 1804), (0.625, 1835), (0.625, 1756), (0.625, 1839), (0.625, 1771), (0.5, 1845), (0.5, 1811), (0.5, 1836), (0.5, 1796), (0.41666666666666663, 1777), (0.41666666666666663, 1808), (0.41666666666666663, 1837), (0.29166666666666663, 1822), (0.25, 1826)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1650
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1556
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1652
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1751
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 16]
[Computing fitness]
[(1.625, 1849), (1.625, 1650), (1.625, 1751), (1.625, 1750), (1.625, 1462), (1.625, 1556), (1.625, 1847), (1.625, 1180), (1.625, 1850), (1.625, 1652), (1.625, 1361), (1.5, 1857), (1.5, 1812), (1.5, 999), (1.5, 1907), (1.5, 1767), (1.5, 1549), (1.5, 1104), (1.5, 1711), (1.5, 1559), (1.5, 1885), (1.5, 1657), (1.5, 400), (1.5, 1206), (1.5, 1679), (1.5, 635), (1.5, 1653), (1.5, 1542), (1.5, 1318), (1.5, 1450), (1.5, 1869), (1.5, 1855), (1.5, 1576), (1.5, 1363), (1.5, 1922), (1.5, 1267), (1.5, 1699), (1.5, 1894), (1.5, 1730), (1.5, 1759), (1.5, 1936), (1.5, 1040), (1.5, 1865), (1.5, 1923), (1.5, 682), (1.5, 1654), (1.5, 1166), (1.5, 1911), (1.375, 1485), (1.375, 1800), (1.375, 1026), (1.375, 1774), (1.375, 1472), (1.375, 1929), (1.375, 1278), (1.375, 983), (1.375, 1916), (1.375, 1900), (1.375, 1810), (1.375, 1479), (1.375, 1680), (1.375, 1883), (1.375, 1364), (1.375, 1707), (1.375, 1676), (1.375, 1913), (1.375, 1803), (1.375, 1823), (1.375, 1669), (1.375, 65), (1.375, 1870), (1.375, 1888), (1.375, 1493), (1.375, 1878), (1.375, 1279), (1.375, 1365), (1.375, 1313), (1.375, 892), (1.375, 1769), (1.375, 1927), (1.375, 988), (1.375, 1089), (1.375, 1273), (1.375, 1901), (1.375, 1393), (1.375, 1565), (1.375, 1483), (1.375, 696), (1.375, 1488), (1.375, 1700), (1.375, 1582), (1.375, 1182), (1.375, 1326), (1.375, 1793), (1.375, 416), (1.375, 1670), (1.375, 1232), (1.375, 1392), (1.375, 1557), (1.375, 1277), (1.375, 1662), (1.375, 1744), (1.375, 1190), (1.375, 1597), (1.375, 1178), (1.375, 1820), (1.375, 1275), (1.375, 803), (1.375, 1863), (1.375, 1386), (1.375, 1083), (1.375, 1288), (1.375, 1667), (1.375, 729), (1.375, 1581), (1.375, 1591), (1.375, 1467), (1.375, 1880), (1.375, 1858), (1.375, 794), (1.375, 726), (1.375, 1788), (1.375, 1600), (1.375, 1899), (1.375, 1928), (1.375, 1491), (1.375, 949), (1.375, 493), (1.375, 1594), (1.375, 1547), (1.375, 1596), (1.375, 801), (1.375, 1648), (1.375, 1884), (1.375, 693), (1.375, 1785), (1.375, 1705), (1.375, 1599), (1.375, 800), (1.375, 1825), (1.375, 897), (1.375, 1685), (1.375, 1585), (1.375, 1150), (1.375, 795), (1.375, 1805), (1.375, 1689), (1.375, 1933), (1.375, 990), (1.375, 1910), (1.375, 1737), (1.375, 1682), (1.375, 1873), (1.375, 1924), (1.375, 587), (1.375, 1896), (1.375, 14), (1.375, 1499), (1.375, 1374), (1.375, 1802), (1.375, 1526), (1.375, 1681), (1.375, 1871), (1.375, 1391), (1.375, 702), (1.375, 1592), (1.375, 1188), (1.375, 694), (1.375, 1903), (1.375, 1784), (1.375, 705), (1.375, 1480), (1.375, 1787), (1.25, 1087), (1.25, 997), (1.25, 1792), (1.25, 1539), (1.25, 627), (1.25, 976), (1.25, 1265), (1.25, 1042), (1.25, 1397), (1.25, 622), (1.25, 1205), (1.25, 903), (1.25, 1192), (1.25, 1672), (1.25, 647), (1.25, 1941), (1.25, 1749), (1.25, 1590), (1.25, 1622), (1.25, 1891), (1.25, 1709), (1.25, 1276), (1.25, 1595), (1.25, 1618), (1.25, 333), (1.25, 1514), (1.25, 732), (1.25, 1422), (1.25, 1544), (1.25, 1627), (1.25, 605), (1.25, 1120), (1.25, 908), (1.25, 1398), (1.25, 1290), (1.25, 1100), (1.25, 1496), (1.25, 1801), (1.25, 1827), (1.25, 1013), (1.25, 1523), (1.25, 1806), (1.25, 533), (1.25, 1217), (1.25, 898), (1.25, 1577), (1.25, 219), (1.25, 1407), (1.25, 1713), (1.25, 1210), (1.25, 1474), (1.25, 1119), (1.25, 1068), (1.25, 1202), (1.25, 1783), (1.25, 591), (1.25, 1540), (1.25, 1002), (1.25, 1325), (1.25, 854), (1.25, 1686), (1.25, 1507), (1.25, 1319), (1.25, 1389), (1.25, 1388), (1.25, 1831), (1.25, 974), (1.25, 1043), (1.25, 1717), (1.25, 703), (1.25, 1440), (1.25, 1934), (1.25, 1718), (1.25, 1818), (1.25, 1085), (1.25, 1209), (1.25, 727), (1.25, 948), (1.25, 1396), (1.25, 1437), (1.25, 1011), (1.25, 985), (1.25, 1502), (1.25, 593), (1.25, 1635), (1.25, 984), (1.25, 1167), (1.25, 1272), (1.25, 1103), (1.25, 1799), (1.25, 1090), (1.25, 325), (1.25, 1425), (1.25, 1828), (1.25, 1521), (1.25, 1458), (1.25, 896), (1.25, 390), (1.25, 1242), (1.25, 1550), (1.25, 1164), (1.25, 1301), (1.25, 1778), (1.25, 1500), (1.25, 1727), (1.25, 1794), (1.25, 1516), (1.25, 1935), (1.25, 819), (1.25, 1379), (1.25, 1436), (1.25, 1638), (1.25, 1415), (1.25, 1018), (1.25, 1555), (1.25, 1426), (1.25, 1350), (1.25, 546), (1.25, 989), (1.25, 1626), (1.25, 1101), (1.25, 992), (1.25, 1647), (1.25, 1743), (1.25, 1221), (1.25, 987), (1.25, 1367), (1.25, 1238), (1.25, 641), (1.25, 1552), (1.25, 1844), (1.25, 1640), (1.25, 887), (1.25, 1897), (1.25, 1230), (1.25, 1489), (1.25, 1094), (1.25, 1404), (1.25, 1838), (1.25, 937), (1.25, 1047), (1.25, 520), (1.25, 1000), (1.25, 1571), (1.25, 1732), (1.25, 821), (1.25, 1294), (1.25, 1315), (1.25, 840), (1.25, 1223), (1.25, 1904), (1.25, 1829), (1.125, 940), (1.125, 1162), (1.125, 1289), (1.125, 1174), (1.125, 1282), (1.125, 927), (1.125, 1354), (1.125, 1481), (1.125, 1729), (1.125, 595), (1.125, 1271), (1.125, 1886), (1.125, 1394), (1.125, 1881), (1.125, 1876), (1.125, 1297), (1.125, 1495), (1.125, 1772), (1.125, 387), (1.125, 1892), (1.125, 816), (1.125, 1580), (1.125, 1128), (1.125, 584), (1.125, 1135), (1.125, 1434), (1.125, 1048), (1.125, 1050), (1.125, 1919), (1.125, 548), (1.125, 714), (1.125, 1748), (1.125, 1842), (1.125, 1126), (1.125, 1451), (1.125, 1015), (1.125, 1014), (1.125, 1023), (1.125, 1074), (1.125, 1666), (1.125, 1008), (1.125, 905), (1.125, 1725), (1.125, 1092), (1.125, 805), (1.125, 707), (1.125, 911), (1.125, 798), (1.125, 1909), (1.0, 1860), (1.0, 1861), (1.0, 1877), (0.875, 1895), (0.875, 1882), (0.875, 1862), (0.875, 1932), (0.875, 1930), (0.875, 1866), (0.75, 1875), (0.75, 1917), (0.75, 1921), (0.75, 1902), (0.75, 1939), (0.75, 1868), (0.75, 1926), (0.75, 1905), (0.75, 1854), (0.75, 1915), (0.75, 1912), (0.625, 1879), (0.5, 1890), (0.5, 1940), (0.41666666666666663, 1938), (0.375, 1918), (0.29166666666666663, 1852)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1849
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1650
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1751
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1750
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1462
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 17]
[Computing fitness]
[(1.625, 1751), (1.625, 1180), (1.625, 1849), (1.625, 1944), (1.625, 1650), (1.625, 1361), (1.625, 1556), (1.625, 1850), (1.625, 1652), (1.625, 1949), (1.625, 1946), (1.625, 1462), (1.625, 1945), (1.625, 1948), (1.625, 1750), (1.625, 1942), (1.625, 1847), (1.5, 1104), (1.5, 1923), (1.5, 1166), (1.5, 400), (1.5, 1559), (1.5, 1657), (1.5, 1767), (1.5, 999), (1.5, 1654), (1.5, 1907), (1.5, 1812), (1.5, 1730), (1.5, 1961), (1.5, 1971), (1.5, 1894), (1.5, 682), (1.5, 1759), (1.5, 1679), (1.5, 1699), (1.5, 1363), (1.5, 635), (1.5, 1450), (1.5, 1857), (1.5, 1922), (1.5, 1267), (1.5, 1542), (1.5, 1206), (1.5, 1968), (1.5, 1040), (1.5, 1855), (1.5, 1318), (1.5, 1911), (1.5, 2034), (1.5, 1711), (1.5, 1549), (1.5, 1869), (1.5, 1885), (1.5, 2011), (1.5, 1991), (1.5, 1865), (1.5, 1653), (1.5, 1576), (1.5, 1953), (1.5, 1936), (1.5, 1970), (1.375, 1483), (1.375, 794), (1.375, 1393), (1.375, 2007), (1.375, 1888), (1.375, 694), (1.375, 800), (1.375, 1582), (1.375, 1150), (1.375, 1985), (1.375, 1232), (1.375, 1182), (1.375, 795), (1.375, 1870), (1.375, 2004), (1.375, 1984), (1.375, 1599), (1.375, 1802), (1.375, 1597), (1.375, 2039), (1.375, 1700), (1.375, 1596), (1.375, 1467), (1.375, 990), (1.375, 2041), (1.375, 1878), (1.375, 1676), (1.375, 1485), (1.375, 2024), (1.375, 1900), (1.375, 2017), (1.375, 1648), (1.375, 1769), (1.375, 416), (1.375, 1326), (1.375, 1083), (1.375, 1491), (1.375, 1793), (1.375, 2023), (1.375, 1499), (1.375, 1800), (1.375, 803), (1.375, 1374), (1.375, 892), (1.375, 1788), (1.375, 1871), (1.375, 693), (1.375, 1178), (1.375, 1594), (1.375, 1929), (1.375, 1488), (1.375, 696), (1.375, 1591), (1.375, 1858), (1.375, 726), (1.375, 1910), (1.375, 1592), (1.375, 1681), (1.375, 1526), (1.375, 1190), (1.375, 1472), (1.375, 1386), (1.375, 1774), (1.375, 1924), (1.375, 1026), (1.375, 587), (1.375, 1365), (1.375, 1682), (1.375, 1980), (1.375, 897), (1.375, 1275), (1.375, 1982), (1.375, 1823), (1.375, 1680), (1.375, 1810), (1.375, 493), (1.375, 1277), (1.375, 1820), (1.375, 1803), (1.375, 1392), (1.375, 1959), (1.375, 1557), (1.375, 1600), (1.375, 1903), (1.375, 1707), (1.375, 1880), (1.375, 1585), (1.375, 1705), (1.375, 1479), (1.375, 801), (1.375, 1188), (1.375, 983), (1.375, 1785), (1.375, 1896), (1.375, 1391), (1.375, 1670), (1.375, 1685), (1.375, 1565), (1.375, 949), (1.375, 1913), (1.375, 1547), (1.375, 1975), (1.375, 1662), (1.375, 1916), (1.375, 1995), (1.375, 1899), (1.375, 1667), (1.375, 1313), (1.375, 988), (1.375, 1787), (1.375, 1933), (1.375, 1364), (1.375, 2042), (1.375, 1928), (1.375, 1737), (1.375, 1089), (1.375, 1480), (1.375, 1669), (1.375, 1901), (1.375, 1863), (1.375, 1883), (1.375, 2026), (1.375, 1689), (1.375, 705), (1.375, 2018), (1.375, 1825), (1.375, 1784), (1.375, 1279), (1.375, 2040), (1.375, 702), (1.375, 1288), (1.375, 1744), (1.375, 1493), (1.375, 14), (1.375, 1581), (1.375, 65), (1.375, 1805), (1.375, 1273), (1.375, 1873), (1.375, 1278), (1.375, 1884), (1.375, 2033), (1.375, 2028), (1.375, 1927), (1.375, 729), (1.375, 2036), (1.25, 1934), (1.25, 1085), (1.25, 840), (1.25, 1437), (1.25, 821), (1.25, 1167), (1.25, 1217), (1.25, 898), (1.25, 1507), (1.25, 937), (1.25, 1272), (1.25, 854), (1.25, 903), (1.25, 1626), (1.25, 1242), (1.25, 732), (1.25, 593), (1.25, 1718), (1.25, 1647), (1.25, 1210), (1.25, 533), (1.25, 1474), (1.25, 1794), (1.25, 1743), (1.25, 1672), (1.25, 1627), (1.25, 1500), (1.25, 1379), (1.25, 1221), (1.25, 1013), (1.25, 1407), (1.25, 1838), (1.25, 1713), (1.25, 1595), (1.25, 1941), (1.25, 1396), (1.25, 1276), (1.25, 1238), (1.25, 1290), (1.25, 520), (1.25, 1265), (1.25, 641), (1.25, 1516), (1.25, 1749), (1.25, 1192), (1.25, 1068), (1.25, 1831), (1.25, 1523), (1.25, 976), (1.25, 1415), (1.25, 1732), (1.25, 1801), (1.25, 1404), (1.25, 1350), (1.25, 1829), (1.25, 1002), (1.25, 1223), (1.25, 984), (1.25, 1422), (1.25, 1389), (1.25, 1640), (1.25, 1935), (1.25, 987), (1.25, 1521), (1.25, 1425), (1.25, 989), (1.25, 1315), (1.25, 390), (1.25, 333), (1.25, 1717), (1.25, 1087), (1.25, 1828), (1.25, 1638), (1.25, 1398), (1.25, 1727), (1.25, 992), (1.25, 1094), (1.25, 1891), (1.25, 591), (1.25, 546), (1.25, 2025), (1.25, 1042), (1.25, 1103), (1.25, 1230), (1.25, 727), (1.25, 1686), (1.25, 974), (1.25, 1966), (1.25, 1090), (1.25, 997), (1.25, 622), (1.25, 1047), (1.25, 1502), (1.25, 819), (1.25, 1635), (1.25, 896), (1.25, 1294), (1.25, 1043), (1.25, 1818), (1.25, 1436), (1.25, 703), (1.25, 1018), (1.25, 1552), (1.25, 1514), (1.25, 1590), (1.25, 1489), (1.25, 1301), (1.25, 1799), (1.25, 1792), (1.25, 2029), (1.25, 647), (1.25, 1000), (1.25, 1440), (1.25, 1539), (1.25, 1806), (1.25, 605), (1.25, 887), (1.25, 1827), (1.25, 1426), (1.25, 1101), (1.25, 1496), (1.25, 1119), (1.25, 1100), (1.25, 2002), (1.25, 1778), (1.25, 1550), (1.25, 1783), (1.25, 1011), (1.25, 1571), (1.25, 1319), (1.25, 1202), (1.25, 1622), (1.25, 1577), (1.25, 1388), (1.25, 627), (1.25, 908), (1.25, 1164), (1.25, 948), (1.25, 219), (1.25, 1325), (1.25, 1205), (1.25, 1540), (1.25, 1367), (1.25, 1120), (1.25, 1897), (1.25, 1397), (1.25, 325), (1.25, 1544), (1.25, 1709), (1.25, 1844), (1.25, 1555), (1.25, 1999), (1.25, 985), (1.25, 1209), (1.25, 1458), (1.25, 1618), (1.25, 1904), (1.125, 2032), (1.125, 1990), (1.0, 2000), (1.0, 1964), (1.0, 2019), (1.0, 1986), (1.0, 1973), (1.0, 1950), (0.875, 1958), (0.875, 2035), (0.875, 1997), (0.875, 1994), (0.875, 1955), (0.875, 1993), (0.875, 1956), (0.875, 1977), (0.875, 2022), (0.875, 1952), (0.875, 1963), (0.875, 1962), (0.875, 1996), (0.875, 1988), (0.75, 1979), (0.75, 1981), (0.75, 2001), (0.625, 1976), (0.625, 2016), (0.625, 2009), (0.625, 2038), (0.5, 2031), (0.5, 2005), (0.41666666666666663, 1978), (0.41666666666666663, 2014), (0.375, 2012), (0.29166666666666663, 2021)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1751
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1849
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1944
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1650
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 18]
[Computing fitness]
[(1.625, 2053), (1.625, 1944), (1.625, 1652), (1.625, 2049), (1.625, 1949), (1.625, 1942), (1.625, 1650), (1.625, 1945), (1.625, 1361), (1.625, 2045), (1.625, 2044), (1.625, 1847), (1.625, 2043), (1.625, 2052), (1.625, 2050), (1.625, 1462), (1.625, 1946), (1.625, 1556), (1.625, 1180), (1.625, 2046), (1.625, 1751), (1.625, 1750), (1.625, 2047), (1.625, 1948), (1.625, 1850), (1.625, 1849), (1.5, 1450), (1.5, 2075), (1.5, 1653), (1.5, 1576), (1.5, 2062), (1.5, 2104), (1.5, 2073), (1.5, 1869), (1.5, 1767), (1.5, 2011), (1.5, 2065), (1.5, 1559), (1.5, 1363), (1.5, 1549), (1.5, 2117), (1.5, 1894), (1.5, 1923), (1.5, 1936), (1.5, 2077), (1.5, 1318), (1.5, 682), (1.5, 2059), (1.5, 1542), (1.5, 1657), (1.5, 2081), (1.5, 1759), (1.5, 1679), (1.5, 1812), (1.5, 1711), (1.5, 1885), (1.5, 2124), (1.5, 1040), (1.5, 1699), (1.5, 1970), (1.5, 1855), (1.5, 2092), (1.5, 1971), (1.5, 999), (1.5, 1968), (1.5, 1267), (1.5, 2069), (1.5, 1206), (1.5, 1865), (1.5, 1911), (1.5, 1654), (1.5, 2058), (1.5, 1104), (1.5, 1166), (1.5, 400), (1.5, 1961), (1.5, 1991), (1.5, 1857), (1.5, 2034), (1.5, 1953), (1.5, 635), (1.5, 2055), (1.5, 1907), (1.5, 1922), (1.5, 1730), (1.375, 1901), (1.375, 2074), (1.375, 2113), (1.375, 1800), (1.375, 1597), (1.375, 2040), (1.375, 1313), (1.375, 1374), (1.375, 2078), (1.375, 1870), (1.375, 2042), (1.375, 892), (1.375, 988), (1.375, 949), (1.375, 1676), (1.375, 1705), (1.375, 1178), (1.375, 897), (1.375, 1581), (1.375, 2110), (1.375, 1805), (1.375, 1680), (1.375, 694), (1.375, 1485), (1.375, 1600), (1.375, 493), (1.375, 1933), (1.375, 2111), (1.375, 1681), (1.375, 1279), (1.375, 1980), (1.375, 1916), (1.375, 1565), (1.375, 726), (1.375, 1784), (1.375, 1924), (1.375, 1858), (1.375, 416), (1.375, 1467), (1.375, 1903), (1.375, 1744), (1.375, 1737), (1.375, 1365), (1.375, 1188), (1.375, 14), (1.375, 794), (1.375, 2123), (1.375, 2121), (1.375, 1878), (1.375, 2024), (1.375, 983), (1.375, 1472), (1.375, 696), (1.375, 795), (1.375, 801), (1.375, 1985), (1.375, 2026), (1.375, 2036), (1.375, 1391), (1.375, 2101), (1.375, 1910), (1.375, 1888), (1.375, 2132), (1.375, 1682), (1.375, 2133), (1.375, 1526), (1.375, 1873), (1.375, 1825), (1.375, 2033), (1.375, 1592), (1.375, 1793), (1.375, 1392), (1.375, 2028), (1.375, 1787), (1.375, 1689), (1.375, 1479), (1.375, 2018), (1.375, 1488), (1.375, 1393), (1.375, 1802), (1.375, 1326), (1.375, 1670), (1.375, 1929), (1.375, 1928), (1.375, 1669), (1.375, 1896), (1.375, 702), (1.375, 1982), (1.375, 1823), (1.375, 587), (1.375, 1883), (1.375, 1880), (1.375, 1667), (1.375, 2095), (1.375, 1182), (1.375, 1899), (1.375, 1232), (1.375, 1278), (1.375, 1089), (1.375, 2004), (1.375, 1984), (1.375, 1591), (1.375, 2041), (1.375, 1596), (1.375, 1599), (1.375, 1288), (1.375, 1275), (1.375, 1788), (1.375, 705), (1.375, 1277), (1.375, 1863), (1.375, 1785), (1.375, 729), (1.375, 2023), (1.375, 65), (1.375, 2007), (1.375, 1685), (1.375, 1493), (1.375, 1913), (1.375, 1648), (1.375, 1927), (1.375, 803), (1.375, 1273), (1.375, 1700), (1.375, 1662), (1.375, 1959), (1.375, 1871), (1.375, 1557), (1.375, 1483), (1.375, 1491), (1.375, 1884), (1.375, 1499), (1.375, 1774), (1.375, 1594), (1.375, 1083), (1.375, 693), (1.375, 1810), (1.375, 1585), (1.375, 2106), (1.375, 1364), (1.375, 2082), (1.375, 1769), (1.375, 1582), (1.375, 1386), (1.375, 2017), (1.375, 1190), (1.375, 1820), (1.375, 1480), (1.375, 1707), (1.375, 1547), (1.375, 1900), (1.375, 800), (1.375, 2039), (1.375, 1803), (1.375, 1975), (1.375, 1995), (1.375, 1026), (1.375, 990), (1.375, 1150), (1.25, 1743), (1.25, 1415), (1.25, 974), (1.25, 992), (1.25, 1727), (1.25, 1552), (1.25, 1087), (1.25, 819), (1.25, 1265), (1.25, 1350), (1.25, 1315), (1.25, 937), (1.25, 1966), (1.25, 1090), (1.25, 1398), (1.25, 1891), (1.25, 896), (1.25, 1829), (1.25, 997), (1.25, 987), (1.25, 1749), (1.25, 976), (1.25, 1407), (1.25, 1042), (1.25, 1818), (1.25, 1272), (1.25, 641), (1.25, 1230), (1.25, 2063), (1.25, 1474), (1.25, 1500), (1.25, 1635), (1.25, 1626), (1.25, 1828), (1.25, 1647), (1.25, 1934), (1.25, 854), (1.25, 1713), (1.25, 2090), (1.25, 1425), (1.25, 2125), (1.25, 903), (1.25, 1103), (1.25, 333), (1.25, 1276), (1.25, 984), (1.25, 1732), (1.25, 1018), (1.25, 1440), (1.25, 1514), (1.25, 2088), (1.25, 1068), (1.25, 898), (1.25, 520), (1.25, 1210), (1.25, 1404), (1.25, 1221), (1.25, 887), (1.25, 2025), (1.25, 1801), (1.25, 1792), (1.25, 1000), (1.25, 622), (1.25, 1379), (1.25, 989), (1.25, 2029), (1.25, 1838), (1.25, 1422), (1.25, 1539), (1.25, 647), (1.25, 390), (1.25, 1301), (1.25, 1290), (1.25, 1523), (1.25, 1085), (1.25, 1717), (1.25, 703), (1.25, 1294), (1.25, 1590), (1.25, 1799), (1.25, 1686), (1.25, 1935), (1.25, 1002), (1.25, 1047), (1.25, 1718), (1.25, 1831), (1.25, 2072), (1.25, 1489), (1.25, 533), (1.25, 1217), (1.25, 1672), (1.25, 1521), (1.25, 605), (1.25, 1043), (1.25, 1516), (1.25, 1238), (1.25, 1192), (1.25, 1223), (1.25, 593), (1.25, 821), (1.25, 727), (1.25, 1437), (1.25, 1638), (1.25, 1507), (1.25, 1806), (1.25, 1242), (1.25, 1640), (1.25, 1167), (1.25, 1595), (1.25, 1627), (1.25, 1396), (1.25, 840), (1.25, 1502), (1.25, 732), (1.25, 546), (1.25, 1389), (1.25, 591), (1.25, 1941), (1.25, 1094), (1.25, 1436), (1.25, 1794), (1.25, 1013), (1.125, 2091), (1.125, 2083), (1.125, 2068), (1.125, 2089), (1.125, 2131), (1.125, 2094), (1.0, 2122), (1.0, 2067), (1.0, 2108), (1.0, 2096), (1.0, 2071), (0.875, 2116), (0.875, 2056), (0.875, 2100), (0.875, 2064), (0.875, 2102), (0.875, 2066), (0.875, 2119), (0.875, 2076), (0.875, 2054), (0.75, 2115), (0.75, 2060), (0.75, 2105), (0.75, 2130), (0.75, 2057), (0.75, 2087), (0.75, 2128), (0.625, 2085), (0.625, 2118), (0.625, 2099), (0.5, 2079), (0.5, 2126), (0.5, 2098), (0.16666666666666666, 2120)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2053
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* y x)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1944
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1652
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2049
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1949
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 19]
[Computing fitness]
[(1.625, 2047), (1.625, 1652), (1.625, 1556), (1.625, 2052), (1.625, 1847), (1.625, 2045), (1.625, 2149), (1.625, 2146), (1.625, 1849), (1.625, 1650), (1.625, 2144), (1.625, 2046), (1.625, 2043), (1.625, 1850), (1.625, 2137), (1.625, 1180), (1.625, 2140), (1.625, 2142), (1.625, 2145), (1.625, 1944), (1.625, 1946), (1.625, 2049), (1.625, 2044), (1.625, 1948), (1.625, 2147), (1.625, 1945), (1.625, 1361), (1.625, 1751), (1.625, 2050), (1.625, 2053), (1.625, 2135), (1.625, 1949), (1.625, 1462), (1.625, 2141), (1.625, 2138), (1.625, 2134), (1.625, 1750), (1.625, 1942), (1.625, 2143), (1.5, 2055), (1.5, 2117), (1.5, 1166), (1.5, 1104), (1.5, 2159), (1.5, 1855), (1.5, 2069), (1.5, 1923), (1.5, 2170), (1.5, 1549), (1.5, 2011), (1.5, 1542), (1.5, 400), (1.5, 1865), (1.5, 1759), (1.5, 1450), (1.5, 1653), (1.5, 1894), (1.5, 2177), (1.5, 1206), (1.5, 2073), (1.5, 1699), (1.5, 1730), (1.5, 1953), (1.5, 1971), (1.5, 2059), (1.5, 1767), (1.5, 1679), (1.5, 1657), (1.5, 2124), (1.5, 2172), (1.5, 2065), (1.5, 1559), (1.5, 1991), (1.5, 1857), (1.5, 1812), (1.5, 1970), (1.5, 1885), (1.5, 2092), (1.5, 2157), (1.5, 2179), (1.5, 2034), (1.5, 2165), (1.5, 1318), (1.5, 1040), (1.5, 2075), (1.5, 682), (1.5, 1911), (1.5, 2104), (1.5, 1363), (1.5, 1576), (1.5, 1654), (1.5, 2058), (1.5, 1968), (1.5, 635), (1.5, 1907), (1.5, 1936), (1.5, 2153), (1.5, 1922), (1.5, 1711), (1.5, 2192), (1.5, 2081), (1.5, 2077), (1.5, 2062), (1.5, 2216), (1.5, 1869), (1.5, 1267), (1.5, 999), (1.5, 1961), (1.375, 2041), (1.375, 2222), (1.375, 65), (1.375, 1980), (1.375, 2174), (1.375, 801), (1.375, 1928), (1.375, 892), (1.375, 1883), (1.375, 1785), (1.375, 1803), (1.375, 1878), (1.375, 1493), (1.375, 1707), (1.375, 1810), (1.375, 1547), (1.375, 1393), (1.375, 1232), (1.375, 1900), (1.375, 2200), (1.375, 726), (1.375, 1365), (1.375, 1279), (1.375, 2024), (1.375, 1888), (1.375, 2078), (1.375, 1899), (1.375, 1787), (1.375, 1744), (1.375, 2189), (1.375, 1825), (1.375, 1774), (1.375, 693), (1.375, 1662), (1.375, 2191), (1.375, 1600), (1.375, 1800), (1.375, 2193), (1.375, 1288), (1.375, 1896), (1.375, 1680), (1.375, 2028), (1.375, 1026), (1.375, 1802), (1.375, 2033), (1.375, 1984), (1.375, 1472), (1.375, 702), (1.375, 988), (1.375, 2007), (1.375, 2211), (1.375, 1975), (1.375, 990), (1.375, 1582), (1.375, 1910), (1.375, 897), (1.375, 416), (1.375, 1676), (1.375, 1682), (1.375, 2188), (1.375, 1188), (1.375, 2111), (1.375, 983), (1.375, 1916), (1.375, 1884), (1.375, 1784), (1.375, 1178), (1.375, 1959), (1.375, 2095), (1.375, 2202), (1.375, 2101), (1.375, 2023), (1.375, 2203), (1.375, 1871), (1.375, 2106), (1.375, 1858), (1.375, 1150), (1.375, 1705), (1.375, 1083), (1.375, 1669), (1.375, 1480), (1.375, 1565), (1.375, 1386), (1.375, 14), (1.375, 2218), (1.375, 2110), (1.375, 1982), (1.375, 2017), (1.375, 1901), (1.375, 1273), (1.375, 2151), (1.375, 1689), (1.375, 1392), (1.375, 1591), (1.375, 2162), (1.375, 1557), (1.375, 1913), (1.375, 2026), (1.375, 2204), (1.375, 1793), (1.375, 1880), (1.375, 800), (1.375, 1870), (1.375, 1581), (1.375, 1089), (1.375, 1769), (1.375, 1326), (1.375, 2121), (1.375, 1597), (1.375, 1788), (1.375, 1483), (1.375, 1927), (1.375, 1313), (1.375, 2194), (1.375, 1823), (1.375, 1467), (1.375, 2113), (1.375, 1374), (1.375, 1488), (1.375, 2040), (1.375, 949), (1.375, 1985), (1.375, 1903), (1.375, 1182), (1.375, 1275), (1.375, 2213), (1.375, 795), (1.375, 1479), (1.375, 2036), (1.375, 2082), (1.375, 1820), (1.375, 2123), (1.375, 1929), (1.375, 1700), (1.375, 2039), (1.375, 1485), (1.375, 1190), (1.375, 1685), (1.375, 1277), (1.375, 1667), (1.375, 493), (1.375, 1805), (1.375, 2196), (1.375, 2042), (1.375, 803), (1.375, 1670), (1.375, 1599), (1.375, 2132), (1.375, 2004), (1.375, 2197), (1.375, 2018), (1.375, 1863), (1.375, 1681), (1.375, 1596), (1.375, 1391), (1.375, 1499), (1.375, 729), (1.375, 1592), (1.375, 1995), (1.375, 1364), (1.375, 1924), (1.375, 587), (1.375, 1873), (1.375, 696), (1.375, 705), (1.375, 1933), (1.375, 1648), (1.375, 1278), (1.375, 2167), (1.375, 1737), (1.375, 2074), (1.375, 1585), (1.375, 2212), (1.375, 1594), (1.375, 1526), (1.375, 794), (1.375, 2133), (1.375, 694), (1.375, 1491), (1.25, 1686), (1.25, 1379), (1.25, 1500), (1.25, 1422), (1.25, 1042), (1.25, 2125), (1.25, 1000), (1.25, 1407), (1.25, 333), (1.25, 2158), (1.25, 1590), (1.25, 647), (1.25, 2025), (1.25, 992), (1.25, 1552), (1.25, 987), (1.25, 887), (1.25, 1539), (1.25, 2161), (1.25, 622), (1.25, 1265), (1.25, 1749), (1.25, 1350), (1.25, 2090), (1.25, 1818), (1.25, 1090), (1.25, 1966), (1.25, 1891), (1.25, 1087), (1.25, 1799), (1.25, 1626), (1.25, 1018), (1.25, 1103), (1.25, 1838), (1.25, 1315), (1.25, 903), (1.25, 854), (1.25, 1743), (1.25, 1732), (1.25, 1713), (1.25, 1294), (1.25, 1440), (1.25, 896), (1.25, 898), (1.25, 2029), (1.25, 1934), (1.25, 937), (1.25, 1792), (1.25, 641), (1.25, 1068), (1.25, 390), (1.25, 1474), (1.25, 1301), (1.25, 2063), (1.25, 1404), (1.25, 520), (1.25, 1647), (1.25, 1727), (1.25, 1276), (1.25, 1398), (1.25, 989), (1.25, 1085), (1.25, 1828), (1.25, 703), (1.25, 1514), (1.25, 1210), (1.25, 984), (1.25, 1415), (1.25, 1272), (1.25, 819), (1.25, 2088), (1.25, 976), (1.25, 1717), (1.25, 2185), (1.25, 1829), (1.25, 1635), (1.25, 1290), (1.25, 974), (1.25, 1523), (1.25, 1230), (1.25, 1801), (1.25, 1425), (1.25, 997), (1.25, 1221), (1.0, 2152), (1.0, 2209), (1.0, 2199), (1.0, 2183), (1.0, 2156), (1.0, 2173), (1.0, 2208), (0.875, 2187), (0.875, 2160), (0.875, 2205), (0.875, 2190), (0.875, 2163), (0.875, 2181), (0.875, 2186), (0.875, 2219), (0.875, 2155), (0.875, 2175), (0.875, 2171), (0.875, 2164), (0.875, 2168), (0.875, 2184), (0.875, 2210), (0.875, 2182), (0.875, 2215), (0.75, 2221), (0.5, 2201), (0.5, 2176), (0.375, 2166), (0.29166666666666663, 2207)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2047
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1652
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1556
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2052
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1847
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 20]
[Computing fitness]
[(1.625, 2043), (1.625, 2143), (1.625, 2045), (1.625, 1948), (1.625, 2243), (1.625, 1949), (1.625, 2135), (1.625, 2142), (1.625, 2138), (1.625, 1945), (1.625, 2050), (1.625, 2224), (1.625, 2238), (1.625, 2134), (1.625, 2228), (1.625, 1946), (1.625, 2234), (1.625, 2144), (1.625, 2226), (1.625, 2052), (1.625, 2149), (1.625, 2223), (1.625, 2235), (1.625, 1462), (1.625, 2233), (1.625, 2137), (1.625, 1849), (1.625, 1850), (1.625, 2047), (1.625, 1750), (1.625, 2044), (1.625, 2239), (1.625, 2140), (1.625, 1847), (1.625, 2145), (1.625, 2229), (1.625, 2227), (1.625, 1556), (1.625, 1751), (1.625, 2242), (1.625, 1942), (1.625, 1944), (1.625, 2053), (1.625, 2232), (1.625, 1361), (1.625, 2046), (1.625, 1650), (1.625, 1652), (1.625, 2230), (1.625, 2147), (1.625, 2141), (1.625, 2146), (1.625, 1180), (1.625, 2231), (1.625, 2049), (1.625, 2225), (1.625, 2237), (1.5, 1970), (1.5, 2280), (1.5, 2157), (1.5, 2170), (1.5, 2262), (1.5, 2117), (1.5, 2062), (1.5, 1318), (1.5, 2251), (1.5, 2244), (1.5, 400), (1.5, 2192), (1.5, 2165), (1.5, 2172), (1.5, 1654), (1.5, 2247), (1.5, 1812), (1.5, 1679), (1.5, 2253), (1.5, 1767), (1.5, 2282), (1.5, 2294), (1.5, 1922), (1.5, 1104), (1.5, 1953), (1.5, 1730), (1.5, 999), (1.5, 1699), (1.5, 2069), (1.5, 2059), (1.5, 2283), (1.5, 1549), (1.5, 1363), (1.5, 2153), (1.5, 1894), (1.5, 2260), (1.5, 2081), (1.5, 2267), (1.5, 2269), (1.5, 1653), (1.5, 2159), (1.5, 1855), (1.5, 1166), (1.5, 2297), (1.5, 2073), (1.5, 682), (1.5, 1885), (1.5, 2216), (1.5, 2011), (1.5, 1542), (1.5, 2177), (1.5, 1559), (1.5, 1971), (1.5, 2289), (1.5, 2255), (1.5, 1923), (1.5, 2034), (1.5, 2058), (1.5, 2104), (1.5, 2092), (1.5, 1206), (1.5, 1711), (1.5, 2055), (1.5, 1968), (1.5, 2179), (1.5, 2124), (1.5, 1267), (1.5, 2077), (1.5, 1911), (1.5, 2286), (1.5, 1657), (1.5, 2075), (1.5, 1857), (1.5, 1991), (1.5, 1759), (1.5, 1450), (1.5, 1936), (1.5, 1869), (1.5, 2306), (1.5, 1040), (1.5, 1907), (1.5, 2281), (1.5, 1576), (1.5, 1961), (1.5, 1865), (1.5, 2265), (1.5, 635), (1.5, 2065), (1.375, 1680), (1.375, 983), (1.375, 949), (1.375, 2028), (1.375, 1928), (1.375, 1959), (1.375, 729), (1.375, 1178), (1.375, 1364), (1.375, 1277), (1.375, 493), (1.375, 1984), (1.375, 1924), (1.375, 1901), (1.375, 1910), (1.375, 1526), (1.375, 2074), (1.375, 2193), (1.375, 1784), (1.375, 2213), (1.375, 696), (1.375, 1927), (1.375, 1393), (1.375, 2132), (1.375, 2292), (1.375, 1878), (1.375, 587), (1.375, 1480), (1.375, 2023), (1.375, 1884), (1.375, 2101), (1.375, 2004), (1.375, 1188), (1.375, 2200), (1.375, 2033), (1.375, 1858), (1.375, 1288), (1.375, 2194), (1.375, 2133), (1.375, 705), (1.375, 1787), (1.375, 801), (1.375, 416), (1.375, 1582), (1.375, 897), (1.375, 1547), (1.375, 2041), (1.375, 1700), (1.375, 2203), (1.375, 2211), (1.375, 1871), (1.375, 2259), (1.375, 1975), (1.375, 1662), (1.375, 1150), (1.375, 1485), (1.375, 2202), (1.375, 1769), (1.375, 1374), (1.375, 1499), (1.375, 2218), (1.375, 693), (1.375, 1820), (1.375, 2082), (1.375, 2293), (1.375, 2304), (1.375, 1026), (1.375, 1883), (1.375, 2196), (1.375, 1083), (1.375, 2024), (1.375, 2042), (1.375, 1707), (1.375, 990), (1.375, 1391), (1.375, 794), (1.375, 1493), (1.375, 1793), (1.375, 2302), (1.375, 1863), (1.375, 1785), (1.375, 1929), (1.375, 892), (1.375, 1896), (1.375, 2026), (1.375, 1596), (1.375, 1788), (1.375, 1326), (1.375, 1705), (1.375, 2036), (1.375, 1278), (1.375, 1581), (1.375, 2106), (1.375, 1682), (1.375, 2204), (1.375, 1600), (1.375, 1273), (1.375, 2110), (1.375, 1592), (1.375, 1190), (1.375, 702), (1.375, 1913), (1.375, 65), (1.375, 2078), (1.375, 1805), (1.375, 2121), (1.375, 1648), (1.375, 1669), (1.375, 1900), (1.375, 1689), (1.375, 2123), (1.375, 1916), (1.375, 1467), (1.375, 1565), (1.375, 2039), (1.375, 1737), (1.375, 2017), (1.375, 1472), (1.375, 14), (1.375, 2018), (1.375, 1800), (1.375, 1585), (1.375, 2189), (1.375, 1488), (1.375, 726), (1.375, 1810), (1.375, 2174), (1.375, 1802), (1.375, 1933), (1.375, 2197), (1.375, 1823), (1.375, 1232), (1.375, 1365), (1.375, 1888), (1.375, 1982), (1.375, 1873), (1.375, 1995), (1.375, 1597), (1.375, 1392), (1.375, 1685), (1.375, 1870), (1.375, 2151), (1.375, 1591), (1.375, 1825), (1.375, 1880), (1.375, 1670), (1.375, 2310), (1.375, 1279), (1.375, 2309), (1.375, 2212), (1.375, 1985), (1.375, 1483), (1.375, 1594), (1.375, 1557), (1.375, 1903), (1.375, 1744), (1.375, 1803), (1.375, 2308), (1.375, 2191), (1.375, 988), (1.375, 1491), (1.375, 1313), (1.375, 1479), (1.375, 1599), (1.375, 1681), (1.375, 2113), (1.375, 2111), (1.375, 2162), (1.375, 1386), (1.375, 800), (1.375, 694), (1.375, 1667), (1.375, 1899), (1.375, 1676), (1.375, 2007), (1.375, 1774), (1.375, 1089), (1.375, 1980), (1.375, 795), (1.375, 2167), (1.375, 2040), (1.375, 2222), (1.375, 803), (1.375, 2188), (1.375, 2095), (1.375, 1275), (1.375, 1182), (1.25, 1500), (1.25, 1749), (1.25, 1087), (1.25, 1018), (1.25, 1090), (1.25, 987), (1.25, 1000), (1.25, 1539), (1.25, 2277), (1.25, 1838), (1.25, 2249), (1.25, 1042), (1.25, 1818), (1.25, 2161), (1.25, 2090), (1.25, 647), (1.25, 992), (1.25, 2305), (1.25, 1966), (1.25, 1891), (1.25, 2025), (1.25, 887), (1.25, 1350), (1.25, 1590), (1.25, 903), (1.25, 2254), (1.25, 622), (1.25, 1799), (1.25, 1743), (1.25, 1315), (1.25, 854), (1.25, 2256), (1.25, 1103), (1.25, 2158), (1.25, 1552), (1.25, 1686), (1.25, 1265), (1.25, 1379), (1.25, 1626), (1.25, 333), (1.25, 1422), (1.25, 1407), (1.25, 2125), (1.125, 2312), (1.0, 2245), (1.0, 2295), (1.0, 2271), (1.0, 2278), (1.0, 2303), (1.0, 2274), (0.875, 2246), (0.875, 2252), (0.875, 2299), (0.875, 2315), (0.875, 2279), (0.7916666666666666, 2300), (0.75, 2307), (0.75, 2314), (0.75, 2275), (0.75, 2284), (0.625, 2288), (0.625, 2298), (0.625, 2268), (0.625, 2291), (0.625, 2258), (0.41666666666666663, 2273), (0.41666666666666663, 2264), (0.29166666666666663, 2241)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2043
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2143
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2045
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1948
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2243
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 21]
[Computing fitness]
[(1.625, 2145), (1.625, 2397), (1.625, 2135), (1.625, 2339), (1.625, 2142), (1.625, 2237), (1.625, 2230), (1.625, 2044), (1.625, 2043), (1.625, 2242), (1.625, 2235), (1.625, 2330), (1.625, 2344), (1.625, 1949), (1.625, 2345), (1.625, 2046), (1.625, 2243), (1.625, 2050), (1.625, 2334), (1.625, 2232), (1.625, 2225), (1.625, 1948), (1.625, 1849), (1.625, 2329), (1.625, 2317), (1.625, 1751), (1.625, 1180), (1.625, 2047), (1.625, 2321), (1.625, 1942), (1.625, 2349), (1.625, 2325), (1.625, 1652), (1.625, 2143), (1.625, 2045), (1.625, 1361), (1.625, 2224), (1.625, 2227), (1.625, 2234), (1.625, 2233), (1.625, 2319), (1.625, 2140), (1.625, 2144), (1.625, 2316), (1.625, 2337), (1.625, 2336), (1.625, 2137), (1.625, 1847), (1.625, 1945), (1.625, 2320), (1.625, 1944), (1.625, 2049), (1.625, 2052), (1.625, 2331), (1.625, 2141), (1.625, 2342), (1.625, 1462), (1.625, 2134), (1.625, 2231), (1.625, 2333), (1.625, 2238), (1.625, 2348), (1.625, 1946), (1.625, 2332), (1.625, 1850), (1.625, 2318), (1.625, 2327), (1.625, 1750), (1.625, 1556), (1.625, 2138), (1.625, 2239), (1.625, 2053), (1.625, 2223), (1.625, 2338), (1.625, 1650), (1.625, 2228), (1.625, 2226), (1.625, 2149), (1.625, 2323), (1.625, 2146), (1.625, 2340), (1.625, 2229), (1.625, 2147), (1.625, 2346), (1.5, 2306), (1.5, 2286), (1.5, 2283), (1.5, 1206), (1.5, 1855), (1.5, 2247), (1.5, 1657), (1.5, 1166), (1.5, 1923), (1.5, 2260), (1.5, 1363), (1.5, 1699), (1.5, 1971), (1.5, 1885), (1.5, 1961), (1.5, 2157), (1.5, 2281), (1.5, 2390), (1.5, 1865), (1.5, 1970), (1.5, 2059), (1.5, 2253), (1.5, 2387), (1.5, 2058), (1.5, 1267), (1.5, 2404), (1.5, 2073), (1.5, 2400), (1.5, 1450), (1.5, 2077), (1.5, 1894), (1.5, 1869), (1.5, 2341), (1.5, 682), (1.5, 2297), (1.5, 2092), (1.5, 2034), (1.5, 1104), (1.5, 2069), (1.5, 2062), (1.5, 2075), (1.5, 1730), (1.5, 1318), (1.5, 2401), (1.5, 2282), (1.5, 2392), (1.5, 2408), (1.5, 2081), (1.5, 400), (1.5, 1559), (1.5, 2267), (1.5, 2159), (1.5, 2065), (1.5, 2244), (1.5, 2289), (1.5, 1812), (1.5, 1040), (1.5, 1653), (1.5, 1759), (1.5, 1767), (1.5, 635), (1.5, 2280), (1.5, 2255), (1.5, 2192), (1.5, 2368), (1.5, 2172), (1.5, 2124), (1.5, 1907), (1.5, 2262), (1.5, 2117), (1.5, 1936), (1.5, 2055), (1.5, 2265), (1.5, 2370), (1.5, 1857), (1.5, 2216), (1.5, 1549), (1.5, 2294), (1.5, 1991), (1.5, 2386), (1.5, 2011), (1.5, 2363), (1.5, 1679), (1.5, 1968), (1.5, 2251), (1.5, 2365), (1.5, 2393), (1.5, 2322), (1.5, 999), (1.5, 1911), (1.5, 2179), (1.5, 2357), (1.5, 2177), (1.5, 2170), (1.5, 1542), (1.5, 2406), (1.5, 2165), (1.5, 1922), (1.5, 1576), (1.5, 1953), (1.5, 1654), (1.5, 2104), (1.5, 2153), (1.5, 2376), (1.5, 2269), (1.5, 1711), (1.375, 1823), (1.375, 2212), (1.375, 416), (1.375, 2211), (1.375, 702), (1.375, 1810), (1.375, 2039), (1.375, 2007), (1.375, 2196), (1.375, 2017), (1.375, 1278), (1.375, 1585), (1.375, 1774), (1.375, 693), (1.375, 2197), (1.375, 2151), (1.375, 990), (1.375, 949), (1.375, 705), (1.375, 2111), (1.375, 1386), (1.375, 892), (1.375, 1480), (1.375, 1985), (1.375, 2078), (1.375, 1488), (1.375, 1479), (1.375, 1365), (1.375, 1026), (1.375, 1089), (1.375, 1803), (1.375, 2310), (1.375, 2389), (1.375, 14), (1.375, 1472), (1.375, 2106), (1.375, 1707), (1.375, 1901), (1.375, 2123), (1.375, 2132), (1.375, 2292), (1.375, 2213), (1.375, 2304), (1.375, 800), (1.375, 1800), (1.375, 694), (1.375, 2202), (1.375, 2204), (1.375, 1880), (1.375, 1288), (1.375, 1600), (1.375, 1485), (1.375, 1591), (1.375, 2203), (1.375, 1878), (1.375, 2259), (1.375, 1910), (1.375, 2366), (1.375, 1190), (1.375, 1493), (1.375, 1788), (1.375, 2110), (1.375, 1899), (1.375, 2018), (1.375, 795), (1.375, 1676), (1.375, 2074), (1.375, 1682), (1.375, 2398), (1.375, 1982), (1.375, 1597), (1.375, 1392), (1.375, 1959), (1.375, 2028), (1.375, 1916), (1.375, 1896), (1.375, 1326), (1.375, 2411), (1.375, 1685), (1.375, 2041), (1.375, 2162), (1.375, 1933), (1.375, 2355), (1.375, 1467), (1.375, 1313), (1.375, 1888), (1.375, 2004), (1.375, 1277), (1.375, 2200), (1.375, 1547), (1.375, 1980), (1.375, 983), (1.375, 1785), (1.375, 587), (1.375, 1870), (1.375, 1929), (1.375, 1483), (1.375, 2101), (1.375, 1083), (1.375, 794), (1.375, 2167), (1.375, 1705), (1.375, 1188), (1.375, 1858), (1.375, 696), (1.375, 2174), (1.375, 1594), (1.375, 2189), (1.375, 1565), (1.375, 726), (1.375, 1374), (1.375, 1871), (1.375, 1820), (1.375, 1984), (1.375, 988), (1.375, 1769), (1.375, 1793), (1.375, 1364), (1.375, 1995), (1.375, 897), (1.375, 1557), (1.375, 2293), (1.375, 1900), (1.375, 2113), (1.375, 1669), (1.375, 2026), (1.375, 1178), (1.375, 1273), (1.375, 1784), (1.375, 2023), (1.375, 1744), (1.375, 1667), (1.375, 2036), (1.375, 1670), (1.375, 2308), (1.375, 1737), (1.375, 1787), (1.375, 1975), (1.375, 2375), (1.375, 1927), (1.375, 2309), (1.375, 1805), (1.375, 1232), (1.375, 1279), (1.375, 1863), (1.375, 1883), (1.375, 1648), (1.375, 1924), (1.375, 1592), (1.375, 2133), (1.375, 1913), (1.375, 1689), (1.375, 2121), (1.375, 2193), (1.375, 1662), (1.375, 2042), (1.375, 1700), (1.375, 1680), (1.375, 729), (1.375, 1884), (1.375, 1491), (1.375, 1499), (1.375, 1391), (1.375, 1681), (1.375, 1825), (1.375, 801), (1.375, 2302), (1.375, 1802), (1.375, 1596), (1.375, 2024), (1.375, 1873), (1.375, 493), (1.375, 65), (1.375, 1928), (1.375, 2082), (1.375, 2218), (1.375, 2033), (1.375, 1526), (1.375, 2191), (1.375, 1581), (1.375, 1150), (1.375, 1903), (1.375, 1582), (1.375, 2194), (1.375, 2414), (1.375, 1393), (1.375, 1599), (1.375, 2350), (1.25, 2378), (1.25, 2396), (1.25, 2377), (1.0, 2407), (1.0, 2373), (1.0, 2362), (1.0, 2353), (0.875, 2403), (0.875, 2395), (0.875, 2354), (0.875, 2394), (0.875, 2405), (0.75, 2383), (0.75, 2379), (0.75, 2413), (0.625, 2409), (0.625, 2352), (0.41666666666666663, 2381), (0.41666666666666663, 2372), (0.41666666666666663, 2385), (0.41666666666666663, 2359), (0.29166666666666663, 2361)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2145
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* y x)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2142
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 22]
[Computing fitness]
[(1.625, 1849), (1.625, 2419), (1.625, 2317), (1.625, 2339), (1.625, 2225), (1.625, 2424), (1.625, 2049), (1.625, 2233), (1.625, 1850), (1.625, 1751), (1.625, 1948), (1.625, 2444), (1.625, 2232), (1.625, 2046), (1.625, 2415), (1.625, 2142), (1.625, 2227), (1.625, 2228), (1.625, 2440), (1.625, 2052), (1.625, 2469), (1.625, 2238), (1.625, 2144), (1.625, 2147), (1.625, 1946), (1.625, 2459), (1.625, 2226), (1.625, 2432), (1.625, 2318), (1.625, 2340), (1.625, 2442), (1.625, 2043), (1.625, 2223), (1.625, 2239), (1.625, 2045), (1.625, 2345), (1.625, 2349), (1.625, 2327), (1.625, 1847), (1.625, 2047), (1.625, 2449), (1.625, 2242), (1.625, 2397), (1.625, 2320), (1.625, 2234), (1.625, 2323), (1.625, 2231), (1.625, 1556), (1.625, 1650), (1.625, 1750), (1.625, 2316), (1.625, 2143), (1.625, 2145), (1.625, 2230), (1.625, 1462), (1.625, 1945), (1.625, 2149), (1.625, 1180), (1.625, 1949), (1.625, 2138), (1.625, 2430), (1.625, 2331), (1.625, 2458), (1.625, 2235), (1.625, 2337), (1.625, 2146), (1.625, 2425), (1.625, 2447), (1.625, 2422), (1.625, 2435), (1.625, 2426), (1.625, 2229), (1.625, 2467), (1.625, 1361), (1.625, 2334), (1.625, 2134), (1.625, 2446), (1.625, 2336), (1.625, 2237), (1.625, 2329), (1.625, 1944), (1.625, 2434), (1.625, 2433), (1.625, 2420), (1.625, 2044), (1.625, 2429), (1.625, 1942), (1.625, 2448), (1.625, 2342), (1.625, 2137), (1.625, 2338), (1.625, 2135), (1.625, 2319), (1.625, 2141), (1.625, 2445), (1.625, 2443), (1.625, 2050), (1.625, 2224), (1.625, 2417), (1.625, 2332), (1.625, 2348), (1.625, 2461), (1.625, 2460), (1.625, 2457), (1.625, 2325), (1.625, 2243), (1.625, 2140), (1.625, 2344), (1.625, 2330), (1.625, 2333), (1.625, 2454), (1.625, 2423), (1.625, 2346), (1.625, 2437), (1.625, 2321), (1.625, 2456), (1.625, 2053), (1.625, 2466), (1.625, 1652), (1.625, 2462), (1.625, 2428), (1.5, 2251), (1.5, 2124), (1.5, 2512), (1.5, 1653), (1.5, 2159), (1.5, 1857), (1.5, 1040), (1.5, 2488), (1.5, 2073), (1.5, 2490), (1.5, 2404), (1.5, 1885), (1.5, 2077), (1.5, 1855), (1.5, 2376), (1.5, 2280), (1.5, 1559), (1.5, 1812), (1.5, 1654), (1.5, 1968), (1.5, 1104), (1.5, 2281), (1.5, 1907), (1.5, 2393), (1.5, 2406), (1.5, 2192), (1.5, 2513), (1.5, 2244), (1.5, 2502), (1.5, 1657), (1.5, 2408), (1.5, 2365), (1.5, 2370), (1.5, 2253), (1.5, 2055), (1.5, 1363), (1.5, 1953), (1.5, 2392), (1.5, 1206), (1.5, 1679), (1.5, 1730), (1.5, 2011), (1.5, 1759), (1.5, 2170), (1.5, 2165), (1.5, 2477), (1.5, 1923), (1.5, 2092), (1.5, 2065), (1.5, 2255), (1.5, 2104), (1.5, 1865), (1.5, 2153), (1.5, 2262), (1.5, 1318), (1.5, 2501), (1.5, 2179), (1.5, 1542), (1.5, 2117), (1.5, 2289), (1.5, 2034), (1.5, 2260), (1.5, 2216), (1.5, 1711), (1.5, 1922), (1.5, 1991), (1.5, 2069), (1.5, 2486), (1.5, 2368), (1.5, 2387), (1.5, 2341), (1.5, 1971), (1.5, 1869), (1.5, 1911), (1.5, 1961), (1.5, 2075), (1.5, 2282), (1.5, 1549), (1.5, 1166), (1.5, 1450), (1.5, 1894), (1.5, 1267), (1.5, 1970), (1.5, 2081), (1.5, 2172), (1.5, 2265), (1.5, 2247), (1.5, 635), (1.5, 2495), (1.5, 2157), (1.5, 2475), (1.5, 2283), (1.5, 1699), (1.5, 2177), (1.5, 2062), (1.5, 2506), (1.5, 400), (1.5, 1767), (1.5, 2386), (1.5, 2322), (1.5, 2306), (1.5, 2517), (1.5, 2363), (1.5, 2294), (1.5, 2297), (1.5, 2507), (1.5, 2059), (1.5, 1936), (1.5, 2269), (1.5, 999), (1.5, 682), (1.5, 2357), (1.5, 2510), (1.5, 2400), (1.5, 2058), (1.5, 2390), (1.5, 2286), (1.5, 2267), (1.5, 1576), (1.5, 2401), (1.375, 1467), (1.375, 1774), (1.375, 1899), (1.375, 1277), (1.375, 1479), (1.375, 2211), (1.375, 1483), (1.375, 1916), (1.375, 1888), (1.375, 1188), (1.375, 1820), (1.375, 1485), (1.375, 2293), (1.375, 2132), (1.375, 2017), (1.375, 2492), (1.375, 1685), (1.375, 2111), (1.375, 1083), (1.375, 983), (1.375, 2259), (1.375, 2123), (1.375, 1585), (1.375, 1313), (1.375, 2489), (1.375, 2106), (1.375, 2007), (1.375, 2292), (1.375, 1823), (1.375, 1365), (1.375, 1929), (1.375, 2026), (1.375, 794), (1.375, 2101), (1.375, 1982), (1.375, 2355), (1.375, 1705), (1.375, 1488), (1.375, 1800), (1.375, 1871), (1.375, 2308), (1.375, 1386), (1.375, 2366), (1.375, 1984), (1.375, 2039), (1.375, 2505), (1.375, 795), (1.375, 1493), (1.375, 1547), (1.375, 1896), (1.375, 1785), (1.375, 1910), (1.375, 1326), (1.375, 1364), (1.375, 988), (1.375, 1591), (1.375, 587), (1.375, 1803), (1.375, 2202), (1.375, 2110), (1.375, 1707), (1.375, 1793), (1.375, 2200), (1.375, 2197), (1.375, 2472), (1.375, 1480), (1.375, 2151), (1.375, 1878), (1.375, 2023), (1.375, 702), (1.375, 2213), (1.375, 1278), (1.375, 2162), (1.375, 2212), (1.375, 1178), (1.375, 800), (1.375, 2310), (1.375, 2196), (1.375, 1810), (1.375, 2078), (1.375, 1880), (1.375, 1472), (1.375, 2018), (1.375, 693), (1.375, 1980), (1.375, 1900), (1.375, 2041), (1.375, 1959), (1.375, 14), (1.375, 2508), (1.375, 1670), (1.375, 1594), (1.375, 897), (1.375, 1769), (1.375, 1744), (1.375, 2204), (1.375, 1784), (1.375, 1026), (1.375, 1565), (1.375, 2189), (1.375, 1600), (1.375, 1089), (1.375, 1669), (1.375, 2074), (1.375, 696), (1.375, 1667), (1.375, 1870), (1.375, 2004), (1.375, 2174), (1.375, 1597), (1.375, 892), (1.375, 1392), (1.375, 705), (1.375, 949), (1.375, 1273), (1.375, 1858), (1.375, 1788), (1.375, 416), (1.375, 1676), (1.375, 1682), (1.375, 1933), (1.375, 2411), (1.375, 2167), (1.375, 1557), (1.375, 2113), (1.375, 2304), (1.375, 2203), (1.375, 990), (1.375, 2028), (1.375, 2389), (1.375, 1374), (1.375, 1985), (1.375, 1901), (1.375, 694), (1.375, 1190), (1.375, 726), (1.375, 2036), (1.375, 1288), (1.375, 2398), (1.375, 1995), (1.25, 2515), (1.25, 2494), (1.0, 2482), (1.0, 2483), (1.0, 2509), (0.875, 2485), (0.875, 2471), (0.875, 2451), (0.875, 2504), (0.875, 2476), (0.875, 2497), (0.875, 2473), (0.5, 2493), (0.5, 2480), (0.41666666666666663, 2499), (0.29166666666666663, 2453), (0.29166666666666663, 2479), (0.29166666666666663, 2464), (0.29166666666666663, 2439)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1849
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2419
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2225
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 23]
[Computing fitness]
[(1.625, 2044), (1.625, 2462), (1.625, 1946), (1.625, 2346), (1.625, 2572), (1.625, 2147), (1.625, 2144), (1.625, 2467), (1.625, 2225), (1.625, 2339), (1.625, 2332), (1.625, 2426), (1.625, 2537), (1.625, 2420), (1.625, 2556), (1.625, 2448), (1.625, 2449), (1.625, 2562), (1.625, 2568), (1.625, 2565), (1.625, 2340), (1.625, 2532), (1.625, 2548), (1.625, 1948), (1.625, 2397), (1.625, 2342), (1.625, 2228), (1.625, 2457), (1.625, 2232), (1.625, 2581), (1.625, 2338), (1.625, 2466), (1.625, 2541), (1.625, 2419), (1.625, 2552), (1.625, 2584), (1.625, 1462), (1.625, 2563), (1.625, 2578), (1.625, 1650), (1.625, 2520), (1.625, 2329), (1.625, 2234), (1.625, 2547), (1.625, 2560), (1.625, 2594), (1.625, 2533), (1.625, 2238), (1.625, 1944), (1.625, 2567), (1.625, 2052), (1.625, 1849), (1.625, 2043), (1.625, 2235), (1.625, 2243), (1.625, 1945), (1.625, 2429), (1.625, 2237), (1.625, 1750), (1.625, 2226), (1.625, 2344), (1.625, 2323), (1.625, 2456), (1.625, 2518), (1.625, 2542), (1.625, 2415), (1.625, 2590), (1.625, 2045), (1.625, 2571), (1.625, 2224), (1.625, 2325), (1.625, 2424), (1.625, 2046), (1.625, 2580), (1.625, 2047), (1.625, 2569), (1.625, 2231), (1.625, 2558), (1.625, 2227), (1.625, 2331), (1.625, 2146), (1.625, 1652), (1.625, 2583), (1.625, 2223), (1.625, 2242), (1.625, 2417), (1.625, 2527), (1.625, 2316), (1.625, 2551), (1.625, 2430), (1.625, 2053), (1.625, 2554), (1.625, 2543), (1.625, 1180), (1.625, 2134), (1.625, 2539), (1.625, 2317), (1.625, 2446), (1.625, 2549), (1.625, 2330), (1.625, 2318), (1.625, 2461), (1.625, 2433), (1.625, 2440), (1.625, 2435), (1.625, 2050), (1.625, 1361), (1.625, 2519), (1.625, 2576), (1.625, 2523), (1.625, 2348), (1.625, 2233), (1.625, 2521), (1.625, 1751), (1.625, 2528), (1.625, 2135), (1.625, 2137), (1.625, 2585), (1.625, 2320), (1.625, 2577), (1.625, 2458), (1.625, 2149), (1.625, 2321), (1.625, 2575), (1.625, 2422), (1.625, 2469), (1.625, 2434), (1.625, 2579), (1.625, 2336), (1.625, 2437), (1.625, 2442), (1.625, 2327), (1.625, 1847), (1.625, 1949), (1.625, 2587), (1.625, 2570), (1.625, 2334), (1.625, 2432), (1.625, 2229), (1.625, 2460), (1.625, 1942), (1.625, 2138), (1.625, 2586), (1.625, 2349), (1.625, 2319), (1.625, 2049), (1.625, 2239), (1.625, 2333), (1.625, 2428), (1.625, 2425), (1.625, 2145), (1.625, 2447), (1.625, 2524), (1.625, 2459), (1.625, 2423), (1.625, 2230), (1.625, 2141), (1.625, 2564), (1.625, 1850), (1.625, 1556), (1.625, 2337), (1.625, 2142), (1.625, 2345), (1.625, 2561), (1.625, 2445), (1.625, 2574), (1.625, 2535), (1.625, 2530), (1.625, 2443), (1.625, 2525), (1.625, 2522), (1.625, 2444), (1.625, 2591), (1.625, 2140), (1.625, 2540), (1.625, 2454), (1.625, 2143), (1.5, 2282), (1.5, 1857), (1.5, 2216), (1.5, 2055), (1.5, 2289), (1.5, 1971), (1.5, 1759), (1.5, 2260), (1.5, 2512), (1.5, 2376), (1.5, 1654), (1.5, 2265), (1.5, 2165), (1.5, 2490), (1.5, 1363), (1.5, 1699), (1.5, 2153), (1.5, 1653), (1.5, 2297), (1.5, 2392), (1.5, 635), (1.5, 1267), (1.5, 1711), (1.5, 1549), (1.5, 2510), (1.5, 1576), (1.5, 2267), (1.5, 1657), (1.5, 1961), (1.5, 1865), (1.5, 2124), (1.5, 2408), (1.5, 2386), (1.5, 1206), (1.5, 1812), (1.5, 2341), (1.5, 2488), (1.5, 1968), (1.5, 2406), (1.5, 1318), (1.5, 2179), (1.5, 2069), (1.5, 2404), (1.5, 1730), (1.5, 2401), (1.5, 2486), (1.5, 2294), (1.5, 2283), (1.5, 2073), (1.5, 2244), (1.5, 2280), (1.5, 1894), (1.5, 1040), (1.5, 2286), (1.5, 1911), (1.5, 2517), (1.5, 2092), (1.5, 2059), (1.5, 2062), (1.5, 1953), (1.5, 2501), (1.5, 2081), (1.5, 2390), (1.5, 1991), (1.5, 2157), (1.5, 2262), (1.5, 1767), (1.5, 2608), (1.5, 2075), (1.5, 2370), (1.5, 2322), (1.5, 2247), (1.5, 2177), (1.5, 682), (1.5, 2363), (1.5, 1970), (1.5, 2495), (1.5, 2475), (1.5, 1885), (1.5, 2065), (1.5, 1936), (1.5, 1166), (1.5, 2269), (1.5, 1559), (1.5, 2357), (1.5, 2306), (1.5, 2281), (1.5, 2255), (1.5, 2477), (1.5, 2011), (1.5, 2513), (1.5, 1104), (1.5, 999), (1.5, 2104), (1.5, 1922), (1.5, 2502), (1.5, 1923), (1.5, 2400), (1.5, 2387), (1.5, 1869), (1.5, 2192), (1.5, 2251), (1.5, 2058), (1.5, 2159), (1.5, 1855), (1.5, 2393), (1.5, 2172), (1.5, 2170), (1.5, 2117), (1.5, 2506), (1.5, 1907), (1.5, 2365), (1.5, 1679), (1.5, 400), (1.5, 2077), (1.5, 2507), (1.5, 2034), (1.5, 2368), (1.5, 1450), (1.5, 1542), (1.5, 2253), (1.375, 1483), (1.375, 2366), (1.375, 2505), (1.375, 1820), (1.375, 2018), (1.375, 1278), (1.375, 2123), (1.375, 2259), (1.375, 2546), (1.375, 1984), (1.375, 1591), (1.375, 2292), (1.375, 2110), (1.375, 2472), (1.375, 1493), (1.375, 1386), (1.375, 1810), (1.375, 1277), (1.375, 2592), (1.375, 2211), (1.375, 1480), (1.375, 1485), (1.375, 1896), (1.375, 2132), (1.375, 1793), (1.375, 2196), (1.375, 2200), (1.375, 1899), (1.375, 2007), (1.375, 1910), (1.375, 1685), (1.375, 1479), (1.375, 2197), (1.375, 2293), (1.375, 2597), (1.375, 2492), (1.375, 1929), (1.375, 1878), (1.375, 983), (1.375, 1326), (1.375, 1705), (1.375, 2355), (1.375, 1547), (1.375, 1880), (1.375, 2023), (1.375, 1888), (1.375, 2101), (1.375, 1488), (1.375, 1472), (1.375, 2162), (1.375, 1785), (1.375, 2039), (1.375, 1188), (1.375, 2151), (1.375, 795), (1.375, 1774), (1.375, 794), (1.375, 1800), (1.375, 1467), (1.375, 2308), (1.375, 2202), (1.375, 2026), (1.375, 1365), (1.375, 2212), (1.375, 2078), (1.375, 1823), (1.375, 1982), (1.375, 1083), (1.375, 1313), (1.375, 800), (1.375, 1871), (1.375, 2213), (1.375, 1916), (1.375, 2310), (1.375, 1364), (1.375, 2106), (1.375, 1585), (1.375, 2601), (1.375, 702), (1.375, 693), (1.375, 988), (1.375, 1178), (1.375, 1707), (1.375, 2017), (1.375, 2489), (1.375, 2111), (1.375, 587), (1.375, 1803), (1.25, 2607), (1.25, 2609), (1.125, 2595), (1.125, 2599), (1.0, 2604), (0.875, 2545), (0.875, 2589), (0.875, 2605), (0.875, 2596), (0.75, 2610), (0.75, 2611), (0.625, 2603), (0.5, 2600), (0.5, 2602)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2044
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2462
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1946
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2346
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2572
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 24]
[Computing fitness]
[(1.625, 2454), (1.625, 2540), (1.625, 2558), (1.625, 2524), (1.625, 2624), (1.625, 2318), (1.625, 2397), (1.625, 2420), (1.625, 2659), (1.625, 1750), (1.625, 2230), (1.625, 2700), (1.625, 2443), (1.625, 2448), (1.625, 2227), (1.625, 2144), (1.625, 2537), (1.625, 2446), (1.625, 2428), (1.625, 2580), (1.625, 2618), (1.625, 2458), (1.625, 2469), (1.625, 2676), (1.625, 2456), (1.625, 2462), (1.625, 2570), (1.625, 2146), (1.625, 2549), (1.625, 2329), (1.625, 2422), (1.625, 2334), (1.625, 2138), (1.625, 2046), (1.625, 2340), (1.625, 2052), (1.625, 2527), (1.625, 2243), (1.625, 2651), (1.625, 2140), (1.625, 2669), (1.625, 2585), (1.625, 2518), (1.625, 2579), (1.625, 2687), (1.625, 2563), (1.625, 2578), (1.625, 2238), (1.625, 2667), (1.625, 2705), (1.625, 2141), (1.625, 2668), (1.625, 2419), (1.625, 2632), (1.625, 2461), (1.625, 2652), (1.625, 2547), (1.625, 2043), (1.625, 1652), (1.625, 2590), (1.625, 2430), (1.625, 2345), (1.625, 2342), (1.625, 2699), (1.625, 2695), (1.625, 2415), (1.625, 2674), (1.625, 2523), (1.625, 2567), (1.625, 2584), (1.625, 2615), (1.625, 2569), (1.625, 2691), (1.625, 1180), (1.625, 2346), (1.625, 2666), (1.625, 2587), (1.625, 2423), (1.625, 2689), (1.625, 2535), (1.625, 2336), (1.625, 2663), (1.625, 2696), (1.625, 2551), (1.625, 2143), (1.625, 2661), (1.625, 2622), (1.625, 2237), (1.625, 2678), (1.625, 2425), (1.625, 2626), (1.625, 2231), (1.625, 2521), (1.625, 2049), (1.625, 2331), (1.625, 2543), (1.625, 1949), (1.625, 2528), (1.625, 2047), (1.625, 2325), (1.625, 2134), (1.625, 2137), (1.625, 2562), (1.625, 2673), (1.625, 2655), (1.625, 2577), (1.625, 2617), (1.625, 2444), (1.625, 2656), (1.625, 2697), (1.625, 2658), (1.625, 2591), (1.625, 2530), (1.625, 1556), (1.625, 2614), (1.625, 2690), (1.625, 2344), (1.625, 2429), (1.625, 2459), (1.625, 2532), (1.625, 2613), (1.625, 2565), (1.625, 2619), (1.625, 2638), (1.625, 2548), (1.625, 2433), (1.625, 2229), (1.625, 2586), (1.625, 2224), (1.625, 2321), (1.625, 2703), (1.625, 2657), (1.625, 2671), (1.625, 1751), (1.625, 2045), (1.625, 2653), (1.625, 2629), (1.625, 2636), (1.625, 2644), (1.625, 2709), (1.625, 2234), (1.625, 2332), (1.625, 2348), (1.625, 1462), (1.625, 2142), (1.625, 2333), (1.625, 2581), (1.625, 2330), (1.625, 2323), (1.625, 2349), (1.625, 2574), (1.625, 1944), (1.625, 2228), (1.625, 2434), (1.625, 2319), (1.625, 2432), (1.625, 2050), (1.625, 2707), (1.625, 2680), (1.625, 2561), (1.625, 2460), (1.625, 2232), (1.625, 2044), (1.625, 2317), (1.625, 2135), (1.625, 2149), (1.625, 1650), (1.625, 2541), (1.625, 2639), (1.625, 2520), (1.625, 2647), (1.625, 2646), (1.625, 2327), (1.625, 2233), (1.625, 2539), (1.625, 2519), (1.625, 2242), (1.625, 2641), (1.625, 2633), (1.625, 2568), (1.625, 2235), (1.625, 2442), (1.625, 2053), (1.625, 2642), (1.625, 2226), (1.625, 2435), (1.625, 2612), (1.625, 2583), (1.625, 2316), (1.625, 1946), (1.625, 2239), (1.625, 1850), (1.625, 2575), (1.625, 2457), (1.625, 2701), (1.625, 2542), (1.625, 2339), (1.625, 2147), (1.625, 2710), (1.625, 2467), (1.625, 1361), (1.625, 2417), (1.625, 2623), (1.625, 1942), (1.625, 2560), (1.625, 2533), (1.625, 2572), (1.625, 2594), (1.625, 2449), (1.625, 2145), (1.625, 1849), (1.625, 2447), (1.625, 2698), (1.625, 2338), (1.625, 1847), (1.625, 2445), (1.625, 2320), (1.625, 2426), (1.625, 2630), (1.625, 2223), (1.625, 2522), (1.625, 2627), (1.625, 2437), (1.625, 2692), (1.625, 1948), (1.625, 2681), (1.625, 2525), (1.625, 2616), (1.625, 1945), (1.625, 2466), (1.625, 2675), (1.625, 2571), (1.625, 2576), (1.625, 2337), (1.625, 2552), (1.625, 2554), (1.625, 2440), (1.625, 2564), (1.625, 2556), (1.625, 2682), (1.625, 2424), (1.625, 2620), (1.625, 2225), (1.5, 1857), (1.5, 2507), (1.5, 2404), (1.5, 2392), (1.5, 2260), (1.5, 1936), (1.5, 1855), (1.5, 2058), (1.5, 2244), (1.5, 2406), (1.5, 2192), (1.5, 1104), (1.5, 2608), (1.5, 2011), (1.5, 1711), (1.5, 2289), (1.5, 2059), (1.5, 2506), (1.5, 2357), (1.5, 2253), (1.5, 2065), (1.5, 2075), (1.5, 2341), (1.5, 1040), (1.5, 2170), (1.5, 2294), (1.5, 2477), (1.5, 1894), (1.5, 2159), (1.5, 2386), (1.5, 2488), (1.5, 1885), (1.5, 1911), (1.5, 1953), (1.5, 2363), (1.5, 2390), (1.5, 1865), (1.5, 2502), (1.5, 2322), (1.5, 2475), (1.5, 2306), (1.5, 2297), (1.5, 1206), (1.5, 2517), (1.5, 1767), (1.5, 2280), (1.5, 2055), (1.5, 1961), (1.5, 2157), (1.5, 2387), (1.5, 1923), (1.5, 2073), (1.5, 2376), (1.5, 2486), (1.5, 2393), (1.5, 2069), (1.5, 1699), (1.5, 1542), (1.5, 2081), (1.5, 2247), (1.5, 2670), (1.5, 1549), (1.5, 2153), (1.5, 2177), (1.5, 400), (1.5, 2267), (1.5, 2365), (1.5, 2172), (1.5, 2255), (1.5, 2092), (1.5, 1971), (1.5, 1657), (1.5, 1450), (1.5, 2104), (1.5, 1318), (1.5, 2513), (1.5, 2370), (1.5, 2495), (1.5, 1759), (1.5, 2124), (1.5, 2216), (1.5, 1166), (1.5, 2501), (1.5, 2401), (1.5, 2062), (1.5, 682), (1.5, 1991), (1.5, 1654), (1.5, 2282), (1.5, 999), (1.5, 2512), (1.5, 2408), (1.5, 2490), (1.5, 2269), (1.5, 1730), (1.5, 2034), (1.5, 2179), (1.5, 1363), (1.5, 1907), (1.5, 2281), (1.5, 2286), (1.5, 2262), (1.5, 2510), (1.5, 1812), (1.5, 1968), (1.5, 1869), (1.5, 2368), (1.5, 2625), (1.5, 2265), (1.5, 1576), (1.5, 1559), (1.5, 2077), (1.5, 2117), (1.5, 2251), (1.5, 1679), (1.5, 2283), (1.5, 1653), (1.5, 1922), (1.5, 1970), (1.5, 635), (1.5, 2400), (1.5, 1267), (1.5, 2165), (1.375, 1810), (1.375, 2505), (1.375, 1386), (1.375, 2110), (1.375, 2259), (1.375, 2196), (1.375, 2592), (1.375, 1483), (1.375, 2132), (1.375, 1793), (1.375, 2200), (1.375, 1480), (1.375, 1591), (1.375, 2472), (1.375, 1485), (1.375, 1493), (1.375, 1896), (1.375, 2018), (1.375, 1277), (1.375, 2292), (1.375, 2123), (1.375, 2211), (1.375, 2366), (1.375, 1984), (1.375, 2654), (1.375, 2546), (1.375, 1820), (1.375, 1278), (0.875, 2694), (0.875, 2635), (0.875, 2649), (0.29166666666666663, 2665), (0.29166666666666663, 2686), (0.29166666666666663, 2684)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2454
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2540
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2558
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2524
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2624
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 25]
[Computing fitness]
[(1.625, 2722), (1.625, 2619), (1.625, 2731), (1.625, 2718), (1.625, 2053), (1.625, 2397), (1.625, 2552), (1.625, 2429), (1.625, 2658), (1.625, 2415), (1.625, 2749), (1.625, 2142), (1.625, 2560), (1.625, 2144), (1.625, 2227), (1.625, 2671), (1.625, 2345), (1.625, 2758), (1.625, 2590), (1.625, 2774), (1.625, 2045), (1.625, 2537), (1.625, 2612), (1.625, 2443), (1.625, 2570), (1.625, 1946), (1.625, 2759), (1.625, 2799), (1.625, 2744), (1.625, 2330), (1.625, 2523), (1.625, 2797), (1.625, 2425), (1.625, 2765), (1.625, 2576), (1.625, 2574), (1.625, 2454), (1.625, 2319), (1.625, 2237), (1.625, 2786), (1.625, 2723), (1.625, 2712), (1.625, 1652), (1.625, 1750), (1.625, 2527), (1.625, 2766), (1.625, 2417), (1.625, 2230), (1.625, 2540), (1.625, 2715), (1.625, 2572), (1.625, 2746), (1.625, 2642), (1.625, 2325), (1.625, 2587), (1.625, 2338), (1.625, 2652), (1.625, 2729), (1.625, 2738), (1.625, 2349), (1.625, 2424), (1.625, 2776), (1.625, 2781), (1.625, 2551), (1.625, 2426), (1.625, 2734), (1.625, 2798), (1.625, 2548), (1.625, 2334), (1.625, 1180), (1.625, 2140), (1.625, 2616), (1.625, 2543), (1.625, 2701), (1.625, 2673), (1.625, 1462), (1.625, 2698), (1.625, 2457), (1.625, 2333), (1.625, 2710), (1.625, 2225), (1.625, 2787), (1.625, 2141), (1.625, 2617), (1.625, 2520), (1.625, 2336), (1.625, 2539), (1.625, 2773), (1.625, 2728), (1.625, 2320), (1.625, 2627), (1.625, 2528), (1.625, 2456), (1.625, 2435), (1.625, 1948), (1.625, 2641), (1.625, 2739), (1.625, 2521), (1.625, 2444), (1.625, 2784), (1.625, 2778), (1.625, 2568), (1.625, 2796), (1.625, 2754), (1.625, 2788), (1.625, 2462), (1.625, 2681), (1.625, 2344), (1.625, 2580), (1.625, 2522), (1.625, 2663), (1.625, 2699), (1.625, 2707), (1.625, 2591), (1.625, 2337), (1.625, 2340), (1.625, 2586), (1.625, 2569), (1.625, 2530), (1.625, 2737), (1.625, 2440), (1.625, 2768), (1.625, 2316), (1.625, 2647), (1.625, 2594), (1.625, 2579), (1.625, 2626), (1.625, 2720), (1.625, 2052), (1.625, 2143), (1.625, 2226), (1.625, 2674), (1.625, 2691), (1.625, 2564), (1.625, 2563), (1.625, 2655), (1.625, 2433), (1.625, 2049), (1.625, 2762), (1.625, 2229), (1.625, 2449), (1.625, 2661), (1.625, 2532), (1.625, 2790), (1.625, 2764), (1.625, 2149), (1.625, 2753), (1.625, 2346), (1.625, 2584), (1.625, 2750), (1.625, 2321), (1.625, 2561), (1.625, 2680), (1.625, 2050), (1.625, 2137), (1.625, 2524), (1.625, 2460), (1.625, 1944), (1.625, 2785), (1.625, 2632), (1.625, 2549), (1.625, 2730), (1.625, 2740), (1.625, 2695), (1.625, 2577), (1.625, 2223), (1.625, 2147), (1.625, 2420), (1.625, 2741), (1.625, 2752), (1.625, 2519), (1.625, 2525), (1.625, 2565), (1.625, 2242), (1.625, 2243), (1.625, 2231), (1.625, 2792), (1.625, 2623), (1.625, 2732), (1.625, 2145), (1.625, 2317), (1.625, 2233), (1.625, 2044), (1.625, 2651), (1.625, 2466), (1.625, 1949), (1.625, 2733), (1.625, 1556), (1.625, 2747), (1.625, 2567), (1.625, 2348), (1.625, 2682), (1.625, 2458), (1.625, 2446), (1.625, 2794), (1.625, 2709), (1.625, 2447), (1.625, 2721), (1.625, 2585), (1.625, 2633), (1.625, 2445), (1.625, 2659), (1.625, 2518), (1.625, 2772), (1.625, 1850), (1.625, 2703), (1.625, 2639), (1.625, 2696), (1.625, 2613), (1.625, 2726), (1.625, 2329), (1.625, 2735), (1.625, 2705), (1.625, 2789), (1.625, 2430), (1.625, 2533), (1.625, 2318), (1.625, 2700), (1.625, 2669), (1.625, 2666), (1.625, 1650), (1.625, 2622), (1.625, 2332), (1.625, 2656), (1.625, 2630), (1.625, 2228), (1.625, 2802), (1.625, 2467), (1.625, 1945), (1.625, 2653), (1.625, 2556), (1.625, 2717), (1.625, 2043), (1.625, 2578), (1.625, 2620), (1.625, 2342), (1.625, 2428), (1.625, 2459), (1.625, 2624), (1.625, 2757), (1.625, 2692), (1.625, 2618), (1.625, 2636), (1.625, 2711), (1.625, 2432), (1.625, 2795), (1.625, 2690), (1.625, 2234), (1.625, 2146), (1.625, 2581), (1.625, 2138), (1.625, 2323), (1.625, 2801), (1.625, 2434), (1.625, 2678), (1.625, 1942), (1.625, 1847), (1.625, 2571), (1.625, 2046), (1.625, 2461), (1.625, 1751), (1.625, 2756), (1.625, 2047), (1.625, 2736), (1.625, 2339), (1.625, 2745), (1.625, 2667), (1.625, 2448), (1.625, 2724), (1.625, 2232), (1.625, 2134), (1.625, 2423), (1.625, 2419), (1.625, 2767), (1.625, 2782), (1.625, 2331), (1.625, 1849), (1.625, 2135), (1.625, 2614), (1.625, 2535), (1.625, 2742), (1.625, 2238), (1.625, 2547), (1.625, 2554), (1.625, 2646), (1.625, 2224), (1.625, 2800), (1.625, 2689), (1.625, 2558), (1.625, 2629), (1.625, 2239), (1.625, 2713), (1.625, 2542), (1.625, 2615), (1.625, 2422), (1.625, 2442), (1.625, 2327), (1.625, 2657), (1.625, 2583), (1.625, 2668), (1.625, 2676), (1.625, 2437), (1.625, 2575), (1.625, 2644), (1.625, 2675), (1.625, 2469), (1.625, 2235), (1.625, 2541), (1.625, 2687), (1.625, 2638), (1.625, 2562), (1.625, 2697), (1.625, 1361), (1.5, 2507), (1.5, 1855), (1.5, 2244), (1.5, 2255), (1.5, 2172), (1.5, 2727), (1.5, 2387), (1.5, 1657), (1.5, 2495), (1.5, 1923), (1.5, 1885), (1.5, 2267), (1.5, 1711), (1.5, 2247), (1.5, 2376), (1.5, 2058), (1.5, 2104), (1.5, 2393), (1.5, 2065), (1.5, 1936), (1.5, 2059), (1.5, 2488), (1.5, 2341), (1.5, 2475), (1.5, 2177), (1.5, 1961), (1.5, 2390), (1.5, 2404), (1.5, 1206), (1.5, 2513), (1.5, 2392), (1.5, 1549), (1.5, 2370), (1.5, 2253), (1.5, 1857), (1.5, 2124), (1.5, 1166), (1.5, 2289), (1.5, 2075), (1.5, 2157), (1.5, 2486), (1.5, 2216), (1.5, 1911), (1.5, 1894), (1.5, 2608), (1.5, 2159), (1.5, 1542), (1.5, 2365), (1.5, 2363), (1.5, 1450), (1.5, 2069), (1.5, 2297), (1.5, 2092), (1.5, 2260), (1.5, 2153), (1.5, 2280), (1.5, 2011), (1.5, 2386), (1.5, 1971), (1.5, 2502), (1.5, 2517), (1.5, 1953), (1.5, 2322), (1.5, 2306), (1.5, 2670), (1.5, 2170), (1.5, 1865), (1.5, 2748), (1.5, 2192), (1.5, 1104), (1.5, 2055), (1.5, 1759), (1.5, 2294), (1.5, 2506), (1.5, 1318), (1.5, 400), (1.5, 1040), (1.5, 2073), (1.5, 2081), (1.5, 2406), (1.5, 1699), (1.5, 2477), (1.5, 1767), (1.5, 2357), (0.875, 2761), (0.29166666666666663, 2770), (0.29166666666666663, 2780)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2722
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2619
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2731
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2718
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2053
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* y x)) (* y x)))
 nr_nodes: 10]
[Generation 26]
[Computing fitness]
[(1.625, 2344), (1.625, 2844), (1.625, 2447), (1.625, 2329), (1.625, 2144), (1.625, 2687), (1.625, 2656), (1.625, 2857), (1.625, 2878), (1.625, 2700), (1.625, 2437), (1.625, 2143), (1.625, 2576), (1.625, 2420), (1.625, 2815), (1.625, 2225), (1.625, 2735), (1.625, 2461), (1.625, 2667), (1.625, 2551), (1.625, 2331), (1.625, 2521), (1.625, 2522), (1.625, 2801), (1.625, 2419), (1.625, 2871), (1.625, 2424), (1.625, 2224), (1.625, 2746), (1.625, 2728), (1.625, 2782), (1.625, 2226), (1.625, 2552), (1.625, 2721), (1.625, 2046), (1.625, 1652), (1.625, 2636), (1.625, 2680), (1.625, 2237), (1.625, 1944), (1.625, 2681), (1.625, 2134), (1.625, 2744), (1.625, 2832), (1.625, 2440), (1.625, 2321), (1.625, 2569), (1.625, 2678), (1.625, 1180), (1.625, 2893), (1.625, 2348), (1.625, 2338), (1.625, 2726), (1.625, 2549), (1.625, 2655), (1.625, 1948), (1.625, 2773), (1.625, 2722), (1.625, 2043), (1.625, 2839), (1.625, 2429), (1.625, 2819), (1.625, 2772), (1.625, 2560), (1.625, 2868), (1.625, 2572), (1.625, 2639), (1.625, 2587), (1.625, 2790), (1.625, 2898), (1.625, 2542), (1.625, 2739), (1.625, 2768), (1.625, 2901), (1.625, 1945), (1.625, 2661), (1.625, 2731), (1.625, 2657), (1.625, 2617), (1.625, 2869), (1.625, 2862), (1.625, 2434), (1.625, 2745), (1.625, 2747), (1.625, 2462), (1.625, 2738), (1.625, 2881), (1.625, 2047), (1.625, 2828), (1.625, 2715), (1.625, 2327), (1.625, 2140), (1.625, 2633), (1.625, 2423), (1.625, 2826), (1.625, 1650), (1.625, 2632), (1.625, 2765), (1.625, 2659), (1.625, 2149), (1.625, 2444), (1.625, 2137), (1.625, 2673), (1.625, 2583), (1.625, 2044), (1.625, 2239), (1.625, 1556), (1.625, 2523), (1.625, 2697), (1.625, 2899), (1.625, 2863), (1.625, 2797), (1.625, 2556), (1.625, 2415), (1.625, 2460), (1.625, 2317), (1.625, 2540), (1.625, 2798), (1.625, 2568), (1.625, 2469), (1.625, 2802), (1.625, 2233), (1.625, 2435), (1.625, 2319), (1.625, 2795), (1.625, 2342), (1.625, 2891), (1.625, 2699), (1.625, 2833), (1.625, 2575), (1.625, 2232), (1.625, 2615), (1.625, 2525), (1.625, 2459), (1.625, 2443), (1.625, 2741), (1.625, 2653), (1.625, 2580), (1.625, 2590), (1.625, 2449), (1.625, 2730), (1.625, 2788), (1.625, 2228), (1.625, 2466), (1.625, 2837), (1.625, 2223), (1.625, 2786), (1.625, 2337), (1.625, 2652), (1.625, 2539), (1.625, 2734), (1.625, 2875), (1.625, 2805), (1.625, 2756), (1.625, 2422), (1.625, 2146), (1.625, 2145), (1.625, 2897), (1.625, 2235), (1.625, 2349), (1.625, 2800), (1.625, 2668), (1.625, 2620), (1.625, 2442), (1.625, 2630), (1.625, 2750), (1.625, 2548), (1.625, 1949), (1.625, 2333), (1.625, 2619), (1.625, 2417), (1.625, 2658), (1.625, 2774), (1.625, 2432), (1.625, 2325), (1.625, 2243), (1.625, 2613), (1.625, 2723), (1.625, 2820), (1.625, 2698), (1.625, 2807), (1.625, 2316), (1.625, 2330), (1.625, 2622), (1.625, 2520), (1.625, 2792), (1.625, 2712), (1.625, 2831), (1.625, 2736), (1.625, 2890), (1.625, 2799), (1.625, 2138), (1.625, 2676), (1.625, 2822), (1.625, 2332), (1.625, 2720), (1.625, 2882), (1.625, 2050), (1.625, 2724), (1.625, 2740), (1.625, 2454), (1.625, 2703), (1.625, 2318), (1.625, 2861), (1.625, 2892), (1.625, 2887), (1.625, 2880), (1.625, 2816), (1.625, 2577), (1.625, 2141), (1.625, 2829), (1.625, 2458), (1.625, 2570), (1.625, 2894), (1.625, 2612), (1.625, 2674), (1.625, 2537), (1.625, 2729), (1.625, 2742), (1.625, 2776), (1.625, 2896), (1.625, 2732), (1.625, 2227), (1.625, 2626), (1.625, 1750), (1.625, 2229), (1.625, 2877), (1.625, 2806), (1.625, 2547), (1.625, 2811), (1.625, 2785), (1.625, 2519), (1.625, 2705), (1.625, 2565), (1.625, 2433), (1.625, 2646), (1.625, 2336), (1.625, 2692), (1.625, 2865), (1.625, 2629), (1.625, 2524), (1.625, 2870), (1.625, 2764), (1.625, 2818), (1.625, 2851), (1.625, 2586), (1.625, 2528), (1.625, 2558), (1.625, 2803), (1.625, 2445), (1.625, 2757), (1.625, 2346), (1.625, 2397), (1.625, 2889), (1.625, 2554), (1.625, 2563), (1.625, 2859), (1.625, 2053), (1.625, 2535), (1.625, 2049), (1.625, 1942), (1.625, 2561), (1.625, 2579), (1.625, 2836), (1.625, 2518), (1.625, 2541), (1.625, 2682), (1.625, 2845), (1.625, 2830), (1.625, 1847), (1.625, 2804), (1.625, 2814), (1.625, 2717), (1.625, 2567), (1.625, 2752), (1.625, 2562), (1.625, 2585), (1.625, 2647), (1.625, 1849), (1.625, 2320), (1.625, 2856), (1.625, 2784), (1.625, 2709), (1.625, 2789), (1.625, 2430), (1.625, 2671), (1.625, 2642), (1.625, 2616), (1.625, 2530), (1.625, 2574), (1.625, 2809), (1.625, 2532), (1.625, 2345), (1.625, 2334), (1.625, 2864), (1.625, 2571), (1.625, 2457), (1.625, 2578), (1.625, 2456), (1.625, 2594), (1.625, 2796), (1.625, 2234), (1.625, 2147), (1.625, 2794), (1.625, 2718), (1.625, 2448), (1.625, 2753), (1.625, 2135), (1.625, 2339), (1.625, 2854), (1.625, 2759), (1.625, 2340), (1.625, 2581), (1.625, 2823), (1.625, 2888), (1.625, 2838), (1.625, 2781), (1.625, 1361), (1.625, 2666), (1.625, 2695), (1.625, 2749), (1.625, 2543), (1.625, 2663), (1.625, 2142), (1.625, 2446), (1.625, 2564), (1.625, 2766), (1.625, 2533), (1.625, 2707), (1.625, 2638), (1.625, 2787), (1.625, 2754), (1.625, 2849), (1.625, 2812), (1.625, 2843), (1.625, 2591), (1.625, 2847), (1.625, 2238), (1.625, 2713), (1.625, 2691), (1.625, 2614), (1.625, 2846), (1.625, 2696), (1.625, 2885), (1.625, 2627), (1.625, 2644), (1.625, 2624), (1.625, 2428), (1.625, 2618), (1.625, 2651), (1.625, 2045), (1.625, 2231), (1.625, 2527), (1.625, 2230), (1.625, 1751), (1.625, 2425), (1.625, 1462), (1.625, 2242), (1.625, 2710), (1.625, 2690), (1.625, 1946), (1.625, 2737), (1.625, 2467), (1.625, 2669), (1.625, 2701), (1.625, 2853), (1.625, 2052), (1.625, 2426), (1.625, 2675), (1.625, 2711), (1.625, 2733), (1.625, 2758), (1.625, 2689), (1.625, 2825), (1.625, 2767), (1.625, 2834), (1.625, 2778), (1.625, 2762), (1.625, 2584), (1.625, 1850), (1.625, 2641), (1.625, 2323), (1.625, 2623), (1.625, 2884), (1.5, 2267), (1.5, 1885), (1.5, 2387), (1.5, 2727), (1.5, 1923), (1.5, 2495), (1.5, 2244), (1.5, 1855), (1.5, 2255), (1.5, 2172), (1.5, 1657), (1.5, 2507), (1.375, 2866), (1.125, 2841), (0.29166666666666663, 2903), (0.29166666666666663, 2873)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2344
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2844
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2447
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2329
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2144
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 27]
[Computing fitness]
[(1.625, 2674), (1.625, 2617), (1.625, 2797), (1.625, 2854), (1.625, 2871), (1.625, 2671), (1.625, 2806), (1.625, 2338), (1.625, 2587), (1.625, 2723), (1.625, 2339), (1.625, 2941), (1.625, 2235), (1.625, 2620), (1.625, 2914), (1.625, 2921), (1.625, 2947), (1.625, 2523), (1.625, 2807), (1.625, 2415), (1.625, 2344), (1.625, 2319), (1.625, 2823), (1.625, 2786), (1.625, 2568), (1.625, 2659), (1.625, 2348), (1.625, 2630), (1.625, 2330), (1.625, 2145), (1.625, 2968), (1.625, 2574), (1.625, 2899), (1.625, 2134), (1.625, 2575), (1.625, 2744), (1.625, 1944), (1.625, 2229), (1.625, 2667), (1.625, 2789), (1.625, 2986), (1.625, 2972), (1.625, 2053), (1.625, 2996), (1.625, 2901), (1.625, 2429), (1.625, 2960), (1.625, 2682), (1.625, 2774), (1.625, 2225), (1.625, 2445), (1.625, 2845), (1.625, 2768), (1.625, 2985), (1.625, 2619), (1.625, 2144), (1.625, 2430), (1.625, 2561), (1.625, 2832), (1.625, 2839), (1.625, 2668), (1.625, 2785), (1.625, 2736), (1.625, 2890), (1.625, 2952), (1.625, 2912), (1.625, 2718), (1.625, 2224), (1.625, 2983), (1.625, 2525), (1.625, 2982), (1.625, 2424), (1.625, 2147), (1.625, 2457), (1.625, 2794), (1.625, 2524), (1.625, 2639), (1.625, 2980), (1.625, 3009), (1.625, 2698), (1.625, 3006), (1.625, 2804), (1.625, 2870), (1.625, 2567), (1.625, 2795), (1.625, 2336), (1.625, 2822), (1.625, 2334), (1.625, 2864), (1.625, 2829), (1.625, 2460), (1.625, 2820), (1.625, 2838), (1.625, 2750), (1.625, 2695), (1.625, 2776), (1.625, 2717), (1.625, 2443), (1.625, 2541), (1.625, 2809), (1.625, 2958), (1.625, 2894), (1.625, 2535), (1.625, 2865), (1.625, 2432), (1.625, 2135), (1.625, 2909), (1.625, 2859), (1.625, 2819), (1.625, 2342), (1.625, 2320), (1.625, 2558), (1.625, 2857), (1.625, 2576), (1.625, 2579), (1.625, 2796), (1.625, 2910), (1.625, 1750), (1.625, 2446), (1.625, 2138), (1.625, 2837), (1.625, 2658), (1.625, 2868), (1.625, 2919), (1.625, 2802), (1.625, 2746), (1.625, 2556), (1.625, 2700), (1.625, 1556), (1.625, 2731), (1.625, 2461), (1.625, 1945), (1.625, 2930), (1.625, 2680), (1.625, 2562), (1.625, 2539), (1.625, 2803), (1.625, 1942), (1.625, 2327), (1.625, 2950), (1.625, 2655), (1.625, 2856), (1.625, 2444), (1.625, 2889), (1.625, 2705), (1.625, 2547), (1.625, 2586), (1.625, 2673), (1.625, 2998), (1.625, 2239), (1.625, 2629), (1.625, 2563), (1.625, 2805), (1.625, 2926), (1.625, 2577), (1.625, 2543), (1.625, 2861), (1.625, 1949), (1.625, 2434), (1.625, 2346), (1.625, 2782), (1.625, 2908), (1.625, 2831), (1.625, 2994), (1.625, 2747), (1.625, 2581), (1.625, 2565), (1.625, 3004), (1.625, 2913), (1.625, 2456), (1.625, 2528), (1.625, 2888), (1.625, 2325), (1.625, 2989), (1.625, 2466), (1.625, 2938), (1.625, 2542), (1.625, 2572), (1.625, 2687), (1.625, 2223), (1.625, 2440), (1.625, 2728), (1.625, 2811), (1.625, 2551), (1.625, 2922), (1.625, 2332), (1.625, 2699), (1.625, 2560), (1.625, 2844), (1.625, 2632), (1.625, 2984), (1.625, 2893), (1.625, 2801), (1.625, 2906), (1.625, 2552), (1.625, 2940), (1.625, 2459), (1.625, 2337), (1.625, 2580), (1.625, 2757), (1.625, 2646), (1.625, 2233), (1.625, 2349), (1.625, 2828), (1.625, 3008), (1.625, 2232), (1.625, 2316), (1.625, 2951), (1.625, 2652), (1.625, 2237), (1.625, 2583), (1.625, 2234), (1.625, 2663), (1.625, 2647), (1.625, 2924), (1.625, 2520), (1.625, 2956), (1.625, 2642), (1.625, 2991), (1.625, 2721), (1.625, 2887), (1.625, 2448), (1.625, 2826), (1.625, 2764), (1.625, 2869), (1.625, 2784), (1.625, 2773), (1.625, 2816), (1.625, 2653), (1.625, 2666), (1.625, 2722), (1.625, 3001), (1.625, 2321), (1.625, 1361), (1.625, 2948), (1.625, 2548), (1.625, 2729), (1.625, 2877), (1.625, 2942), (1.625, 2772), (1.625, 2892), (1.625, 2945), (1.625, 2454), (1.625, 2417), (1.625, 2419), (1.625, 2891), (1.625, 2730), (1.625, 2735), (1.625, 2613), (1.625, 2756), (1.625, 2578), (1.625, 2615), (1.625, 2329), (1.625, 2798), (1.625, 2934), (1.625, 2571), (1.625, 2833), (1.625, 2049), (1.625, 2897), (1.625, 2788), (1.625, 2862), (1.625, 2905), (1.625, 2939), (1.625, 2815), (1.625, 2851), (1.625, 2570), (1.625, 2622), (1.625, 2519), (1.625, 2967), (1.625, 2928), (1.625, 2742), (1.625, 2715), (1.625, 2549), (1.625, 2435), (1.625, 2790), (1.625, 2800), (1.625, 2875), (1.625, 2318), (1.625, 2554), (1.625, 2050), (1.625, 2726), (1.625, 2878), (1.625, 2333), (1.625, 2420), (1.625, 2656), (1.625, 2661), (1.625, 2676), (1.625, 2681), (1.625, 2226), (1.625, 2616), (1.625, 1650), (1.625, 2146), (1.625, 2792), (1.625, 2863), (1.625, 2317), (1.625, 2927), (1.625, 2740), (1.625, 2518), (1.625, 2142), (1.625, 2935), (1.625, 2449), (1.625, 2749), (1.625, 2975), (1.625, 2734), (1.625, 1180), (1.625, 3005), (1.625, 2703), (1.625, 2462), (1.625, 2692), (1.625, 2143), (1.625, 2920), (1.625, 2954), (1.625, 2923), (1.625, 2881), (1.625, 2964), (1.625, 2657), (1.625, 2458), (1.625, 2537), (1.625, 2141), (1.625, 2340), (1.625, 2594), (1.625, 2739), (1.625, 1847), (1.625, 2530), (1.625, 2697), (1.625, 2227), (1.625, 2423), (1.625, 2720), (1.625, 2753), (1.625, 2882), (1.625, 2932), (1.625, 2724), (1.625, 1849), (1.625, 2781), (1.625, 2943), (1.625, 2898), (1.625, 2521), (1.625, 2752), (1.625, 2590), (1.625, 2422), (1.625, 2738), (1.625, 2765), (1.625, 2636), (1.625, 2397), (1.625, 2741), (1.625, 2140), (1.625, 2047), (1.625, 2732), (1.625, 2540), (1.625, 2880), (1.625, 2437), (1.625, 2046), (1.625, 1652), (1.625, 1948), (1.625, 2149), (1.625, 2712), (1.625, 2043), (1.625, 2447), (1.625, 2993), (1.625, 2612), (1.625, 2918), (1.625, 2532), (1.625, 2331), (1.625, 2818), (1.625, 2569), (1.625, 2830), (1.625, 2345), (1.625, 2442), (1.625, 2678), (1.625, 2137), (1.625, 2228), (1.625, 2626), (1.625, 2522), (1.625, 2987), (1.625, 2044), (1.625, 2433), (1.625, 2709), (1.625, 3002), (1.625, 2243), (1.625, 2911), (1.625, 2469), (1.625, 2633), (1.625, 2799), (1.625, 2944), (1.625, 2814), (1.625, 2585), (1.625, 2745), (1.625, 2997), (1.625, 2896), (1.625, 2937), (1.625, 2836), (1.625, 2759), (1.5, 2966), (1.375, 2962), (0.875, 3000), (0.875, 2974), (0.29166666666666663, 2970), (0.29166666666666663, 2916), (0.29166666666666663, 2979), (0.29166666666666663, 2977)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2674
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2617
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2797
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2854
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 28]
[Computing fitness]
[(1.625, 2232), (1.625, 3075), (1.625, 2646), (1.625, 2739), (1.625, 2568), (1.625, 2983), (1.625, 3062), (1.625, 2998), (1.625, 3060), (1.625, 2774), (1.625, 2432), (1.625, 2424), (1.625, 2332), (1.625, 3110), (1.625, 2419), (1.625, 3014), (1.625, 3066), (1.625, 2890), (1.625, 2950), (1.625, 2551), (1.625, 2958), (1.625, 3106), (1.625, 2695), (1.625, 2967), (1.625, 2586), (1.625, 2537), (1.625, 2342), (1.625, 3004), (1.625, 2542), (1.625, 2319), (1.625, 3079), (1.625, 2773), (1.625, 2803), (1.625, 2934), (1.625, 1949), (1.625, 2652), (1.625, 2875), (1.625, 2223), (1.625, 2237), (1.625, 2336), (1.625, 2146), (1.625, 2530), (1.625, 2914), (1.625, 2772), (1.625, 2460), (1.625, 2658), (1.625, 2466), (1.625, 2334), (1.625, 2630), (1.625, 3045), (1.625, 2239), (1.625, 3074), (1.625, 1944), (1.625, 2234), (1.625, 2547), (1.625, 2794), (1.625, 2135), (1.625, 2330), (1.625, 2905), (1.625, 2989), (1.625, 2820), (1.625, 2728), (1.625, 2548), (1.625, 2888), (1.625, 3034), (1.625, 2692), (1.625, 3076), (1.625, 2549), (1.625, 2798), (1.625, 2458), (1.625, 2617), (1.625, 2851), (1.625, 2697), (1.625, 2756), (1.625, 2899), (1.625, 3092), (1.625, 2656), (1.625, 2828), (1.625, 2930), (1.625, 2661), (1.625, 2445), (1.625, 2868), (1.625, 2862), (1.625, 2443), (1.625, 2802), (1.625, 2947), (1.625, 2941), (1.625, 2901), (1.625, 2579), (1.625, 2539), (1.625, 2518), (1.625, 2552), (1.625, 2226), (1.625, 2325), (1.625, 2816), (1.625, 2975), (1.625, 3108), (1.625, 2826), (1.625, 2721), (1.625, 3052), (1.625, 2839), (1.625, 2224), (1.625, 2663), (1.625, 3058), (1.625, 2523), (1.625, 2863), (1.625, 2893), (1.625, 2680), (1.625, 2926), (1.625, 2138), (1.625, 2687), (1.625, 2750), (1.625, 2871), (1.625, 2788), (1.625, 3114), (1.625, 2845), (1.625, 2844), (1.625, 2870), (1.625, 2440), (1.625, 3055), (1.625, 2622), (1.625, 2938), (1.625, 3009), (1.625, 3054), (1.625, 2797), (1.625, 2145), (1.625, 2822), (1.625, 2346), (1.625, 2805), (1.625, 2435), (1.625, 3073), (1.625, 1650), (1.625, 2730), (1.625, 3069), (1.625, 2457), (1.625, 2229), (1.625, 2935), (1.625, 3101), (1.625, 2543), (1.625, 2567), (1.625, 2729), (1.625, 2832), (1.625, 2615), (1.625, 3105), (1.625, 2339), (1.625, 3061), (1.625, 2317), (1.625, 3005), (1.625, 2909), (1.625, 2563), (1.625, 2789), (1.625, 2444), (1.625, 2560), (1.625, 2887), (1.625, 2233), (1.625, 2889), (1.625, 3015), (1.625, 2461), (1.625, 2583), (1.625, 2570), (1.625, 2768), (1.625, 2912), (1.625, 2682), (1.625, 3043), (1.625, 2525), (1.625, 2050), (1.625, 2740), (1.625, 3097), (1.625, 2629), (1.625, 2878), (1.625, 2831), (1.625, 2340), (1.625, 2653), (1.625, 2854), (1.625, 3038), (1.625, 2049), (1.625, 2349), (1.625, 2434), (1.625, 2749), (1.625, 2913), (1.625, 2558), (1.625, 2815), (1.625, 2908), (1.625, 1750), (1.625, 2337), (1.625, 2928), (1.625, 2735), (1.625, 3063), (1.625, 3041), (1.625, 2984), (1.625, 2520), (1.625, 2673), (1.625, 3021), (1.625, 2320), (1.625, 2920), (1.625, 2681), (1.625, 2456), (1.625, 2667), (1.625, 2964), (1.625, 2922), (1.625, 1942), (1.625, 3056), (1.625, 2861), (1.625, 2881), (1.625, 2897), (1.625, 2415), (1.625, 2837), (1.625, 2942), (1.625, 2657), (1.625, 2327), (1.625, 2535), (1.625, 2972), (1.625, 2134), (1.625, 2736), (1.625, 2869), (1.625, 2318), (1.625, 3111), (1.625, 2960), (1.625, 2746), (1.625, 2801), (1.625, 3018), (1.625, 3028), (1.625, 2856), (1.625, 3087), (1.625, 2235), (1.625, 2329), (1.625, 3006), (1.625, 2554), (1.625, 2782), (1.625, 2838), (1.625, 2698), (1.625, 2655), (1.625, 2857), (1.625, 2927), (1.625, 2676), (1.625, 2449), (1.625, 3081), (1.625, 3016), (1.625, 2921), (1.625, 2718), (1.625, 2574), (1.625, 2141), (1.625, 3072), (1.625, 3027), (1.625, 2632), (1.625, 3065), (1.625, 2807), (1.625, 3017), (1.625, 2996), (1.625, 3104), (1.625, 2785), (1.625, 2804), (1.625, 2620), (1.625, 2945), (1.625, 2674), (1.625, 3046), (1.625, 2144), (1.625, 3036), (1.625, 3001), (1.625, 2338), (1.625, 3090), (1.625, 3070), (1.625, 3068), (1.625, 2939), (1.625, 2647), (1.625, 3033), (1.625, 2571), (1.625, 3037), (1.625, 2541), (1.625, 1180), (1.625, 3042), (1.625, 2829), (1.625, 2956), (1.625, 2833), (1.625, 2948), (1.625, 2575), (1.625, 3067), (1.625, 2561), (1.625, 2764), (1.625, 2578), (1.625, 2877), (1.625, 3083), (1.625, 3095), (1.625, 2919), (1.625, 2333), (1.625, 2723), (1.625, 2519), (1.625, 3023), (1.625, 2344), (1.625, 3050), (1.625, 2147), (1.625, 2619), (1.625, 2894), (1.625, 2462), (1.625, 2744), (1.625, 2700), (1.625, 2639), (1.625, 2225), (1.625, 2348), (1.625, 3112), (1.625, 2616), (1.625, 2792), (1.625, 2786), (1.625, 2671), (1.625, 3008), (1.625, 2784), (1.625, 2572), (1.625, 2859), (1.625, 2986), (1.625, 2790), (1.625, 2580), (1.625, 2143), (1.625, 3053), (1.625, 2757), (1.625, 1847), (1.625, 2417), (1.625, 3088), (1.625, 2565), (1.625, 3039), (1.625, 3011), (1.625, 2053), (1.625, 2699), (1.625, 2642), (1.625, 2613), (1.625, 2703), (1.625, 2951), (1.625, 2910), (1.625, 2459), (1.625, 3048), (1.625, 2795), (1.625, 1556), (1.625, 2576), (1.625, 2982), (1.625, 2864), (1.625, 3029), (1.625, 2968), (1.625, 2430), (1.625, 2142), (1.625, 2446), (1.625, 2809), (1.625, 2666), (1.625, 2819), (1.625, 2776), (1.625, 2587), (1.625, 2892), (1.625, 2454), (1.625, 2321), (1.625, 2906), (1.625, 2985), (1.625, 2316), (1.625, 2952), (1.625, 2891), (1.625, 2581), (1.625, 2659), (1.625, 2731), (1.625, 2562), (1.625, 2924), (1.625, 2823), (1.625, 2994), (1.625, 2865), (1.625, 2954), (1.625, 2556), (1.625, 2722), (1.625, 3084), (1.625, 2420), (1.625, 2577), (1.625, 2980), (1.625, 2811), (1.625, 2668), (1.625, 2742), (1.625, 2940), (1.625, 3099), (1.625, 3093), (1.625, 2923), (1.625, 2800), (1.625, 2715), (1.625, 2991), (1.625, 2734), (1.625, 2806), (1.625, 1361), (1.625, 2796), (1.625, 2528), (1.625, 2747), (1.625, 3085), (1.625, 2717), (1.625, 2524), (1.625, 2726), (1.625, 1945), (1.625, 3059), (1.625, 2448), (1.625, 2705), (1.625, 2429), (1.625, 3032), (1.625, 2594), (0.29166666666666663, 3025), (0.29166666666666663, 3020), (0.29166666666666663, 3031), (0.29166666666666663, 3078), (0.29166666666666663, 3013), (0.29166666666666663, 3103)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2232
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2646
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2739
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2568
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 29]
[Computing fitness]
[(1.625, 2333), (1.625, 2774), (1.625, 2934), (1.625, 2663), (1.625, 3159), (1.625, 2723), (1.625, 2565), (1.625, 3120), (1.625, 2344), (1.625, 2329), (1.625, 2332), (1.625, 2417), (1.625, 2554), (1.625, 2586), (1.625, 3067), (1.625, 3198), (1.625, 2942), (1.625, 2458), (1.625, 3018), (1.625, 2415), (1.625, 3197), (1.625, 2807), (1.625, 2837), (1.625, 2805), (1.625, 3079), (1.625, 2466), (1.625, 3110), (1.625, 3006), (1.625, 2144), (1.625, 2563), (1.625, 3053), (1.625, 2578), (1.625, 2518), (1.625, 2983), (1.625, 2829), (1.625, 3162), (1.625, 2703), (1.625, 3135), (1.625, 2520), (1.625, 3038), (1.625, 2661), (1.625, 2617), (1.625, 2728), (1.625, 3183), (1.625, 2887), (1.625, 2756), (1.625, 3015), (1.625, 2871), (1.625, 3122), (1.625, 3054), (1.625, 2525), (1.625, 2339), (1.625, 2233), (1.625, 3154), (1.625, 2989), (1.625, 2673), (1.625, 3052), (1.625, 3158), (1.625, 2630), (1.625, 3115), (1.625, 2947), (1.625, 2927), (1.625, 3128), (1.625, 1942), (1.625, 3191), (1.625, 3137), (1.625, 3144), (1.625, 2570), (1.625, 2619), (1.625, 3105), (1.625, 2998), (1.625, 2050), (1.625, 2844), (1.625, 2863), (1.625, 3112), (1.625, 2457), (1.625, 2792), (1.625, 2671), (1.625, 3163), (1.625, 2319), (1.625, 2700), (1.625, 2681), (1.625, 3070), (1.625, 2859), (1.625, 3033), (1.625, 2320), (1.625, 2542), (1.625, 2224), (1.625, 2833), (1.625, 2736), (1.625, 2838), (1.625, 2893), (1.625, 3014), (1.625, 2449), (1.625, 2348), (1.625, 2145), (1.625, 2801), (1.625, 3187), (1.625, 2234), (1.625, 3130), (1.625, 2340), (1.625, 3004), (1.625, 2667), (1.625, 2928), (1.625, 2336), (1.625, 2342), (1.625, 2804), (1.625, 3152), (1.625, 1847), (1.625, 3104), (1.625, 3016), (1.625, 2571), (1.625, 2877), (1.625, 3058), (1.625, 2552), (1.625, 3140), (1.625, 2788), (1.625, 3046), (1.625, 2134), (1.625, 3076), (1.625, 3069), (1.625, 2869), (1.625, 3206), (1.625, 2930), (1.625, 3168), (1.625, 2922), (1.625, 1944), (1.625, 3151), (1.625, 2138), (1.625, 2950), (1.625, 2632), (1.625, 2815), (1.625, 2797), (1.625, 2938), (1.625, 2226), (1.625, 3041), (1.625, 3097), (1.625, 2572), (1.625, 2905), (1.625, 2935), (1.625, 3008), (1.625, 3114), (1.625, 3101), (1.625, 2583), (1.625, 2346), (1.625, 3074), (1.625, 2444), (1.625, 3209), (1.625, 2325), (1.625, 2539), (1.625, 2334), (1.625, 2338), (1.625, 3201), (1.625, 3177), (1.625, 3189), (1.625, 2143), (1.625, 3009), (1.625, 3092), (1.625, 2519), (1.625, 2547), (1.625, 3188), (1.625, 2537), (1.625, 3176), (1.625, 2986), (1.625, 2674), (1.625, 2620), (1.625, 3184), (1.625, 3119), (1.625, 3173), (1.625, 2327), (1.625, 2908), (1.625, 3106), (1.625, 1650), (1.625, 3039), (1.625, 2535), (1.625, 2857), (1.625, 2921), (1.625, 2746), (1.625, 2798), (1.625, 2901), (1.625, 3194), (1.625, 3165), (1.625, 2135), (1.625, 2237), (1.625, 3063), (1.625, 3001), (1.625, 3042), (1.625, 2730), (1.625, 3061), (1.625, 2744), (1.625, 3147), (1.625, 2919), (1.625, 2786), (1.625, 3157), (1.625, 3150), (1.625, 3125), (1.625, 2964), (1.625, 2870), (1.625, 2822), (1.625, 2750), (1.625, 2567), (1.625, 2579), (1.625, 3045), (1.625, 2826), (1.625, 2655), (1.625, 1949), (1.625, 2419), (1.625, 2790), (1.625, 2868), (1.625, 2912), (1.625, 2845), (1.625, 2647), (1.625, 2899), (1.625, 2828), (1.625, 2695), (1.625, 3023), (1.625, 2462), (1.625, 2878), (1.625, 2613), (1.625, 2881), (1.625, 2862), (1.625, 2913), (1.625, 3133), (1.625, 2435), (1.625, 2239), (1.625, 2789), (1.625, 1180), (1.625, 2629), (1.625, 2948), (1.625, 3066), (1.625, 2443), (1.625, 2558), (1.625, 3123), (1.625, 2764), (1.625, 3139), (1.625, 3043), (1.625, 3192), (1.625, 2920), (1.625, 2225), (1.625, 2622), (1.625, 3164), (1.625, 2053), (1.625, 2749), (1.625, 2831), (1.625, 2875), (1.625, 2785), (1.625, 2975), (1.625, 3072), (1.625, 2445), (1.625, 3210), (1.625, 3068), (1.625, 2939), (1.625, 2782), (1.625, 3129), (1.625, 2317), (1.625, 3011), (1.625, 2739), (1.625, 2784), (1.625, 2945), (1.625, 2646), (1.625, 3185), (1.625, 2548), (1.625, 3073), (1.625, 2740), (1.625, 2223), (1.625, 2890), (1.625, 2349), (1.625, 2803), (1.625, 3075), (1.625, 2652), (1.625, 2432), (1.625, 3142), (1.625, 2926), (1.625, 3087), (1.625, 3056), (1.625, 2687), (1.625, 2680), (1.625, 2984), (1.625, 3145), (1.625, 2820), (1.625, 2232), (1.625, 2568), (1.625, 2794), (1.625, 2757), (1.625, 2967), (1.625, 2456), (1.625, 3037), (1.625, 2653), (1.625, 2718), (1.625, 2839), (1.625, 3116), (1.625, 2141), (1.625, 2956), (1.625, 2330), (1.625, 3050), (1.625, 3117), (1.625, 3036), (1.625, 3088), (1.625, 2889), (1.625, 3126), (1.625, 3028), (1.625, 2642), (1.625, 2676), (1.625, 2146), (1.625, 3021), (1.625, 2692), (1.625, 2802), (1.625, 3124), (1.625, 2434), (1.625, 2816), (1.625, 3062), (1.625, 2773), (1.625, 3207), (1.625, 2914), (1.625, 3081), (1.625, 3170), (1.625, 2543), (1.625, 2909), (1.625, 2561), (1.625, 2229), (1.625, 2996), (1.625, 2560), (1.625, 2657), (1.625, 3055), (1.625, 2318), (1.625, 3143), (1.625, 2575), (1.625, 2541), (1.625, 2682), (1.625, 2523), (1.625, 2772), (1.625, 3203), (1.625, 2656), (1.625, 1750), (1.625, 3083), (1.625, 2832), (1.625, 2147), (1.625, 2551), (1.625, 2530), (1.625, 2721), (1.625, 3034), (1.625, 3204), (1.625, 3146), (1.625, 2735), (1.625, 3017), (1.625, 3090), (1.625, 2580), (1.625, 2897), (1.625, 3065), (1.625, 3149), (1.625, 2574), (1.625, 2461), (1.625, 2460), (1.625, 3148), (1.625, 2440), (1.625, 3095), (1.625, 2888), (1.625, 3060), (1.625, 2235), (1.625, 2941), (1.625, 2768), (1.625, 2549), (1.625, 2639), (1.625, 2698), (1.625, 3108), (1.625, 3190), (1.625, 3186), (1.625, 2729), (1.625, 2972), (1.625, 3160), (1.625, 2658), (1.625, 3027), (1.625, 3182), (1.625, 2424), (1.625, 2616), (1.625, 2697), (1.625, 2049), (1.625, 2960), (1.625, 3172), (1.625, 2894), (1.625, 2699), (1.625, 2337), (1.625, 3141), (1.625, 2851), (1.625, 2861), (1.625, 2615), (1.625, 3127), (1.625, 3167), (1.625, 2958), (1.625, 2854), (1.625, 2856), (1.625, 3005), (1.625, 3111), (1.5, 3195), (0.875, 3179), (0.875, 3181), (0.29166666666666663, 3200), (0.29166666666666663, 3132), (0.29166666666666663, 3175), (0.29166666666666663, 3156)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2774
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2934
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2663
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 30]
[Computing fitness]
[(1.625, 2320), (1.625, 2632), (1.625, 3004), (1.625, 3214), (1.625, 3159), (1.625, 2318), (1.625, 3046), (1.625, 3233), (1.625, 3273), (1.625, 2788), (1.625, 3206), (1.625, 1650), (1.625, 2333), (1.625, 3043), (1.625, 2563), (1.625, 3081), (1.625, 2921), (1.625, 2327), (1.625, 3303), (1.625, 3056), (1.625, 2456), (1.625, 2803), (1.625, 3263), (1.625, 3016), (1.625, 2914), (1.625, 2325), (1.625, 3015), (1.625, 3163), (1.625, 2964), (1.625, 3291), (1.625, 3257), (1.625, 3144), (1.625, 2764), (1.625, 2663), (1.625, 3229), (1.625, 2950), (1.625, 3274), (1.625, 3197), (1.625, 2826), (1.625, 2744), (1.625, 2740), (1.625, 2859), (1.625, 2567), (1.625, 3039), (1.625, 3157), (1.625, 3251), (1.625, 3053), (1.625, 2239), (1.625, 3137), (1.625, 2913), (1.625, 3009), (1.625, 2773), (1.625, 2339), (1.625, 2457), (1.625, 2449), (1.625, 2996), (1.625, 2782), (1.625, 2945), (1.625, 2947), (1.625, 3023), (1.625, 3217), (1.625, 2560), (1.625, 2845), (1.625, 2928), (1.625, 2554), (1.625, 2535), (1.625, 3282), (1.625, 2750), (1.625, 2789), (1.625, 2435), (1.625, 2565), (1.625, 3177), (1.625, 2680), (1.625, 2617), (1.625, 2145), (1.625, 2671), (1.625, 2844), (1.625, 2349), (1.625, 2831), (1.625, 3270), (1.625, 2746), (1.625, 3018), (1.625, 3041), (1.625, 3267), (1.625, 3260), (1.625, 3054), (1.625, 2444), (1.625, 3120), (1.625, 2736), (1.625, 3014), (1.625, 3222), (1.625, 3305), (1.625, 2135), (1.625, 2833), (1.625, 3110), (1.625, 2869), (1.625, 2434), (1.625, 2820), (1.625, 2336), (1.625, 3150), (1.625, 2518), (1.625, 3140), (1.625, 2224), (1.625, 2445), (1.625, 2816), (1.625, 3265), (1.625, 2922), (1.625, 3191), (1.625, 3230), (1.625, 2881), (1.625, 2728), (1.625, 2784), (1.625, 3275), (1.625, 3106), (1.625, 3301), (1.625, 2749), (1.625, 2862), (1.625, 2234), (1.625, 2542), (1.625, 3247), (1.625, 2756), (1.625, 3165), (1.625, 3087), (1.625, 3227), (1.625, 1180), (1.625, 3299), (1.625, 2232), (1.625, 2552), (1.625, 2877), (1.625, 3252), (1.625, 3248), (1.625, 3170), (1.625, 2673), (1.625, 2870), (1.625, 2935), (1.625, 3293), (1.625, 2919), (1.625, 3201), (1.625, 2537), (1.625, 3286), (1.625, 2141), (1.625, 3021), (1.625, 2730), (1.625, 3225), (1.625, 2871), (1.625, 2642), (1.625, 2338), (1.625, 2905), (1.625, 2878), (1.625, 3073), (1.625, 3052), (1.625, 3280), (1.625, 2458), (1.625, 3253), (1.625, 2655), (1.625, 3292), (1.625, 3139), (1.625, 1949), (1.625, 2667), (1.625, 2790), (1.625, 3135), (1.625, 3130), (1.625, 3238), (1.625, 2622), (1.625, 3079), (1.625, 2417), (1.625, 3288), (1.625, 2908), (1.625, 2579), (1.625, 3234), (1.625, 2899), (1.625, 3033), (1.625, 3297), (1.625, 2927), (1.625, 3042), (1.625, 2462), (1.625, 2233), (1.625, 2525), (1.625, 2237), (1.625, 2792), (1.625, 3115), (1.625, 2334), (1.625, 2786), (1.625, 3242), (1.625, 2901), (1.625, 2909), (1.625, 3097), (1.625, 1847), (1.625, 3142), (1.625, 2629), (1.625, 3158), (1.625, 3271), (1.625, 3218), (1.625, 2989), (1.625, 3279), (1.625, 3221), (1.625, 3124), (1.625, 1942), (1.625, 2934), (1.625, 2620), (1.625, 2807), (1.625, 3296), (1.625, 3216), (1.625, 2805), (1.625, 3269), (1.625, 2548), (1.625, 3122), (1.625, 2868), (1.625, 3112), (1.625, 3235), (1.625, 3069), (1.625, 2838), (1.625, 3184), (1.625, 3074), (1.625, 3145), (1.625, 3058), (1.625, 2983), (1.625, 3307), (1.625, 2568), (1.625, 2797), (1.625, 3151), (1.625, 3241), (1.625, 2837), (1.625, 2863), (1.625, 3011), (1.625, 3045), (1.625, 2647), (1.625, 2984), (1.625, 2520), (1.625, 3237), (1.625, 3249), (1.625, 2839), (1.625, 2558), (1.625, 3036), (1.625, 3104), (1.625, 3168), (1.625, 3209), (1.625, 3294), (1.625, 2798), (1.625, 3239), (1.625, 2657), (1.625, 3067), (1.625, 2578), (1.625, 3298), (1.625, 3258), (1.625, 2519), (1.625, 3038), (1.625, 3055), (1.625, 3125), (1.625, 3062), (1.625, 2938), (1.625, 2619), (1.625, 3068), (1.625, 2344), (1.625, 2138), (1.625, 2348), (1.625, 3063), (1.625, 3072), (1.625, 3185), (1.625, 2926), (1.625, 2586), (1.625, 3070), (1.625, 3304), (1.625, 2547), (1.625, 2346), (1.625, 3194), (1.625, 2723), (1.625, 2332), (1.625, 3119), (1.625, 3277), (1.625, 2676), (1.625, 2822), (1.625, 2143), (1.625, 2889), (1.625, 2653), (1.625, 2543), (1.625, 3123), (1.625, 3147), (1.625, 3164), (1.625, 3259), (1.625, 2718), (1.625, 2415), (1.625, 2432), (1.625, 2661), (1.625, 1944), (1.625, 3183), (1.625, 3284), (1.625, 3188), (1.625, 2652), (1.625, 2419), (1.625, 2570), (1.625, 2053), (1.625, 2329), (1.625, 2466), (1.625, 2739), (1.625, 3240), (1.625, 3050), (1.625, 2875), (1.625, 2687), (1.625, 2975), (1.625, 2893), (1.625, 3223), (1.625, 2583), (1.625, 2804), (1.625, 3290), (1.625, 3076), (1.625, 3187), (1.625, 3232), (1.625, 3266), (1.625, 2342), (1.625, 3133), (1.625, 2802), (1.625, 2939), (1.625, 3152), (1.625, 2930), (1.625, 2948), (1.625, 3126), (1.625, 2134), (1.625, 3192), (1.625, 2920), (1.625, 3061), (1.625, 3001), (1.625, 2857), (1.625, 2317), (1.625, 2692), (1.625, 3176), (1.625, 2646), (1.625, 2674), (1.625, 3117), (1.625, 2443), (1.625, 3075), (1.625, 3302), (1.625, 2319), (1.625, 3212), (1.625, 3245), (1.625, 3128), (1.625, 3256), (1.625, 3189), (1.625, 3114), (1.625, 2146), (1.625, 2703), (1.625, 3066), (1.625, 3262), (1.625, 2695), (1.625, 2226), (1.625, 2890), (1.625, 2572), (1.625, 2539), (1.625, 2801), (1.625, 2815), (1.625, 2998), (1.625, 3092), (1.625, 2229), (1.625, 3250), (1.625, 2757), (1.625, 2340), (1.625, 2330), (1.625, 3088), (1.625, 2630), (1.625, 3105), (1.625, 2223), (1.625, 2785), (1.625, 3154), (1.625, 2561), (1.625, 2794), (1.625, 2571), (1.625, 3116), (1.625, 3037), (1.625, 3300), (1.625, 2050), (1.625, 2225), (1.625, 3173), (1.625, 3028), (1.625, 2912), (1.625, 2967), (1.625, 3207), (1.625, 2942), (1.625, 3283), (1.625, 3162), (1.625, 2986), (1.625, 3101), (1.625, 2828), (1.625, 2887), (1.625, 2956), (1.625, 3008), (1.625, 3226), (1.625, 3210), (1.625, 3006), (1.625, 3198), (1.625, 2774), (1.625, 2829), (1.625, 2613), (1.625, 2700), (1.625, 2144), (1.625, 2681), (1.625, 3129), (1.5, 3243), (1.375, 3224), (0.875, 3255), (0.29166666666666663, 3220)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2320
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2632
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3004
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3214
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 31]
[Computing fitness]
[(1.625, 3145), (1.625, 3385), (1.625, 2798), (1.625, 2802), (1.625, 2554), (1.625, 2434), (1.625, 3009), (1.625, 2547), (1.625, 2899), (1.625, 3396), (1.625, 2863), (1.625, 3380), (1.625, 3269), (1.625, 2583), (1.625, 3320), (1.625, 3072), (1.625, 2676), (1.625, 2939), (1.625, 3191), (1.625, 3318), (1.625, 3087), (1.625, 2518), (1.625, 2568), (1.625, 2845), (1.625, 2663), (1.625, 2909), (1.625, 3371), (1.625, 3076), (1.625, 2462), (1.625, 3370), (1.625, 2617), (1.625, 3252), (1.625, 3277), (1.625, 3253), (1.625, 3062), (1.625, 2773), (1.625, 2336), (1.625, 2560), (1.625, 2913), (1.625, 3351), (1.625, 2901), (1.625, 3242), (1.625, 3038), (1.625, 3375), (1.625, 3079), (1.625, 3350), (1.625, 3104), (1.625, 2620), (1.625, 2826), (1.625, 3293), (1.625, 3356), (1.625, 2519), (1.625, 3312), (1.625, 2667), (1.625, 2349), (1.625, 3317), (1.625, 3218), (1.625, 2652), (1.625, 3168), (1.625, 1944), (1.625, 2542), (1.625, 2417), (1.625, 3247), (1.625, 2692), (1.625, 2629), (1.625, 3039), (1.625, 2135), (1.625, 2520), (1.625, 2820), (1.625, 2921), (1.625, 2138), (1.625, 2839), (1.625, 2339), (1.625, 2718), (1.625, 2881), (1.625, 2831), (1.625, 2622), (1.625, 3282), (1.625, 2920), (1.625, 3081), (1.625, 3352), (1.625, 3018), (1.625, 2870), (1.625, 3298), (1.625, 3187), (1.625, 3229), (1.625, 2537), (1.625, 2327), (1.625, 2950), (1.625, 3386), (1.625, 3063), (1.625, 2642), (1.625, 2871), (1.625, 3159), (1.625, 2332), (1.625, 3227), (1.625, 3304), (1.625, 2750), (1.625, 2749), (1.625, 2878), (1.625, 3073), (1.625, 2868), (1.625, 3015), (1.625, 3286), (1.625, 3124), (1.625, 3260), (1.625, 3358), (1.625, 3052), (1.625, 3322), (1.625, 3389), (1.625, 2789), (1.625, 2905), (1.625, 2632), (1.625, 2239), (1.625, 3157), (1.625, 2764), (1.625, 3372), (1.625, 3398), (1.625, 2457), (1.625, 3184), (1.625, 3349), (1.625, 3382), (1.625, 2224), (1.625, 3150), (1.625, 3315), (1.625, 2875), (1.625, 2792), (1.625, 3046), (1.625, 3041), (1.625, 2338), (1.625, 3296), (1.625, 2318), (1.625, 2653), (1.625, 2739), (1.625, 3201), (1.625, 2567), (1.625, 2449), (1.625, 3233), (1.625, 3308), (1.625, 3021), (1.625, 2657), (1.625, 3214), (1.625, 2807), (1.625, 2233), (1.625, 3225), (1.625, 2578), (1.625, 2458), (1.625, 3137), (1.625, 3368), (1.625, 3393), (1.625, 3053), (1.625, 2419), (1.625, 3240), (1.625, 3123), (1.625, 3122), (1.625, 2435), (1.625, 3058), (1.625, 3043), (1.625, 3115), (1.625, 3266), (1.625, 2805), (1.625, 2134), (1.625, 2143), (1.625, 3068), (1.625, 2927), (1.625, 3403), (1.625, 2889), (1.625, 2797), (1.625, 3324), (1.625, 3183), (1.625, 2647), (1.625, 2857), (1.625, 2862), (1.625, 3381), (1.625, 2730), (1.625, 3023), (1.625, 3359), (1.625, 3279), (1.625, 3292), (1.625, 3165), (1.625, 3271), (1.625, 3294), (1.625, 3335), (1.625, 2548), (1.625, 3055), (1.625, 3239), (1.625, 3259), (1.625, 2744), (1.625, 3232), (1.625, 2535), (1.625, 3139), (1.625, 3061), (1.625, 2869), (1.625, 2996), (1.625, 3265), (1.625, 2975), (1.625, 3334), (1.625, 2333), (1.625, 3391), (1.625, 3140), (1.625, 3274), (1.625, 3342), (1.625, 2877), (1.625, 3321), (1.625, 3299), (1.625, 1180), (1.625, 3353), (1.625, 3036), (1.625, 2525), (1.625, 2984), (1.625, 3284), (1.625, 3147), (1.625, 2945), (1.625, 2680), (1.625, 2673), (1.625, 3248), (1.625, 3133), (1.625, 2053), (1.625, 3267), (1.625, 2784), (1.625, 2317), (1.625, 3288), (1.625, 3360), (1.625, 3263), (1.625, 3373), (1.625, 3119), (1.625, 3297), (1.625, 3249), (1.625, 3390), (1.625, 2344), (1.625, 3290), (1.625, 3379), (1.625, 2570), (1.625, 3402), (1.625, 3314), (1.625, 2908), (1.625, 2655), (1.625, 3230), (1.625, 2746), (1.625, 2466), (1.625, 2740), (1.625, 3135), (1.625, 3395), (1.625, 3045), (1.625, 2723), (1.625, 3301), (1.625, 2552), (1.625, 3070), (1.625, 2938), (1.625, 2790), (1.625, 3238), (1.625, 2833), (1.625, 3130), (1.625, 3192), (1.625, 2232), (1.625, 2563), (1.625, 3050), (1.625, 2325), (1.625, 2859), (1.625, 2838), (1.625, 3110), (1.625, 3209), (1.625, 3280), (1.625, 3329), (1.625, 3235), (1.625, 3056), (1.625, 1847), (1.625, 2728), (1.625, 3152), (1.625, 3004), (1.625, 2543), (1.625, 3325), (1.625, 2803), (1.625, 3309), (1.625, 2348), (1.625, 3305), (1.625, 2687), (1.625, 3331), (1.625, 3042), (1.625, 3074), (1.625, 2983), (1.625, 2837), (1.625, 3323), (1.625, 3185), (1.625, 3001), (1.625, 1650), (1.625, 2935), (1.625, 3316), (1.625, 2661), (1.625, 3357), (1.625, 2788), (1.625, 2141), (1.625, 3275), (1.625, 2346), (1.625, 2579), (1.625, 2804), (1.625, 3258), (1.625, 2329), (1.625, 3221), (1.625, 3126), (1.625, 3125), (1.625, 3067), (1.625, 2844), (1.625, 3144), (1.625, 3188), (1.625, 2893), (1.625, 3016), (1.625, 3014), (1.625, 3197), (1.625, 2558), (1.625, 2926), (1.625, 2919), (1.625, 3194), (1.625, 3307), (1.625, 2930), (1.625, 3354), (1.625, 3164), (1.625, 2619), (1.625, 2444), (1.625, 3106), (1.625, 2816), (1.625, 2928), (1.625, 3339), (1.625, 3310), (1.625, 2947), (1.625, 3054), (1.625, 3151), (1.625, 2964), (1.625, 3158), (1.625, 3234), (1.625, 3273), (1.625, 2782), (1.625, 2445), (1.625, 3251), (1.625, 3333), (1.625, 3170), (1.625, 2786), (1.625, 2237), (1.625, 2822), (1.625, 2914), (1.625, 1949), (1.625, 2456), (1.625, 2334), (1.625, 3177), (1.625, 2320), (1.625, 1942), (1.625, 3345), (1.625, 3378), (1.625, 3257), (1.625, 3332), (1.625, 3069), (1.625, 2234), (1.625, 2145), (1.625, 3336), (1.625, 2432), (1.625, 3326), (1.625, 3033), (1.625, 2736), (1.625, 3216), (1.625, 3291), (1.625, 3241), (1.625, 3327), (1.625, 2415), (1.625, 3346), (1.625, 3344), (1.625, 3397), (1.625, 3303), (1.625, 3367), (1.625, 2586), (1.625, 3237), (1.625, 3401), (1.625, 3163), (1.625, 3112), (1.625, 3217), (1.625, 3142), (1.625, 2948), (1.625, 3341), (1.625, 3365), (1.625, 3222), (1.625, 2756), (1.625, 3383), (1.625, 2934), (1.625, 2671), (1.625, 2565), (1.625, 2989), (1.625, 3011), (1.625, 3347), (1.625, 3361), (1.625, 3270), (1.625, 2342), (1.625, 3120), (1.625, 3097), (1.625, 3223), (1.625, 2922), (1.625, 3206), (1.375, 3399), (0.875, 3363), (0.875, 3338), (0.29166666666666663, 3377), (0.29166666666666663, 3388)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3145
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3385
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2798
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2802
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2554
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 32]
[Computing fitness]
[(1.625, 3430), (1.625, 3221), (1.625, 2135), (1.625, 3194), (1.625, 3352), (1.625, 2901), (1.625, 2344), (1.625, 2554), (1.625, 2857), (1.625, 3317), (1.625, 3381), (1.625, 3050), (1.625, 3110), (1.625, 2945), (1.625, 3408), (1.625, 2620), (1.625, 3334), (1.625, 3467), (1.625, 2826), (1.625, 3372), (1.625, 2996), (1.625, 3409), (1.625, 3070), (1.625, 3497), (1.625, 2950), (1.625, 3454), (1.625, 3307), (1.625, 3316), (1.625, 2750), (1.625, 2338), (1.625, 3389), (1.625, 3018), (1.625, 3447), (1.625, 2647), (1.625, 3014), (1.625, 3023), (1.625, 2317), (1.625, 3227), (1.625, 2881), (1.625, 3288), (1.625, 2730), (1.625, 3375), (1.625, 3015), (1.625, 3439), (1.625, 3429), (1.625, 3339), (1.625, 2653), (1.625, 2657), (1.625, 2348), (1.625, 2927), (1.625, 3312), (1.625, 3063), (1.625, 3471), (1.625, 3485), (1.625, 3446), (1.625, 2619), (1.625, 3486), (1.625, 3282), (1.625, 2134), (1.625, 3242), (1.625, 2920), (1.625, 3325), (1.625, 3323), (1.625, 3081), (1.625, 2141), (1.625, 2687), (1.625, 3489), (1.625, 3410), (1.625, 2449), (1.625, 2739), (1.625, 2790), (1.625, 2339), (1.625, 3187), (1.625, 3382), (1.625, 2807), (1.625, 2579), (1.625, 2797), (1.625, 2458), (1.625, 2831), (1.625, 3192), (1.625, 3104), (1.625, 2939), (1.625, 3016), (1.625, 3225), (1.625, 3403), (1.625, 2938), (1.625, 2232), (1.625, 3444), (1.625, 3258), (1.625, 3067), (1.625, 2859), (1.625, 3126), (1.625, 3413), (1.625, 2558), (1.625, 2984), (1.625, 3021), (1.625, 3431), (1.625, 3122), (1.625, 2935), (1.625, 3393), (1.625, 3072), (1.625, 2325), (1.625, 3253), (1.625, 3053), (1.625, 3357), (1.625, 3076), (1.625, 2870), (1.625, 2805), (1.625, 3252), (1.625, 3232), (1.625, 3130), (1.625, 3422), (1.625, 3247), (1.625, 2336), (1.625, 3371), (1.625, 2661), (1.625, 3322), (1.625, 2868), (1.625, 3305), (1.625, 2930), (1.625, 3124), (1.625, 3412), (1.625, 3296), (1.625, 2692), (1.625, 3269), (1.625, 3480), (1.625, 2567), (1.625, 3424), (1.625, 3115), (1.625, 3460), (1.625, 2983), (1.625, 2143), (1.625, 2535), (1.625, 2749), (1.625, 3165), (1.625, 2837), (1.625, 2845), (1.625, 3466), (1.625, 3074), (1.625, 3331), (1.625, 3320), (1.625, 3310), (1.625, 3045), (1.625, 3038), (1.625, 3379), (1.625, 3277), (1.625, 3248), (1.625, 2804), (1.625, 3073), (1.625, 3052), (1.625, 3437), (1.625, 3286), (1.625, 3360), (1.625, 2838), (1.625, 3119), (1.625, 2740), (1.625, 2138), (1.625, 3464), (1.625, 3150), (1.625, 3140), (1.625, 2560), (1.625, 3428), (1.625, 3184), (1.625, 3502), (1.625, 3488), (1.625, 2318), (1.625, 3308), (1.625, 3267), (1.625, 2928), (1.625, 1847), (1.625, 2875), (1.625, 3436), (1.625, 3159), (1.625, 3493), (1.625, 3068), (1.625, 2617), (1.625, 3139), (1.625, 3473), (1.625, 3354), (1.625, 2863), (1.625, 2520), (1.625, 3201), (1.625, 3079), (1.625, 3214), (1.625, 3230), (1.625, 2784), (1.625, 2869), (1.625, 2926), (1.625, 1944), (1.625, 3349), (1.625, 2329), (1.625, 2434), (1.625, 2629), (1.625, 3042), (1.625, 3062), (1.625, 2673), (1.625, 2622), (1.625, 3218), (1.625, 3046), (1.625, 2909), (1.625, 3427), (1.625, 3036), (1.625, 3404), (1.625, 2877), (1.625, 3329), (1.625, 3229), (1.625, 3087), (1.625, 3396), (1.625, 3423), (1.625, 3501), (1.625, 2893), (1.625, 2975), (1.625, 2642), (1.625, 3280), (1.625, 3144), (1.625, 3188), (1.625, 3500), (1.625, 2543), (1.625, 3183), (1.625, 2632), (1.625, 3168), (1.625, 2053), (1.625, 3380), (1.625, 2667), (1.625, 3318), (1.625, 3484), (1.625, 3450), (1.625, 3448), (1.625, 2913), (1.625, 1650), (1.625, 3301), (1.625, 2798), (1.625, 3373), (1.625, 3472), (1.625, 3266), (1.625, 3263), (1.625, 2899), (1.625, 3135), (1.625, 3391), (1.625, 3426), (1.625, 3487), (1.625, 3453), (1.625, 3123), (1.625, 1180), (1.625, 3039), (1.625, 2548), (1.625, 3239), (1.625, 3055), (1.625, 3395), (1.625, 2417), (1.625, 2820), (1.625, 2332), (1.625, 3342), (1.625, 2921), (1.625, 3004), (1.625, 2570), (1.625, 2583), (1.625, 2444), (1.625, 2525), (1.625, 3191), (1.625, 2744), (1.625, 3442), (1.625, 2680), (1.625, 2773), (1.625, 2919), (1.625, 2435), (1.625, 3145), (1.625, 3009), (1.625, 2788), (1.625, 2568), (1.625, 2346), (1.625, 2224), (1.625, 2552), (1.625, 3495), (1.625, 2518), (1.625, 2462), (1.625, 3309), (1.625, 3458), (1.625, 2789), (1.625, 3238), (1.625, 3433), (1.625, 3315), (1.625, 2871), (1.625, 3235), (1.625, 3414), (1.625, 2466), (1.625, 2655), (1.625, 2333), (1.625, 3402), (1.625, 3385), (1.625, 2802), (1.625, 2844), (1.625, 3370), (1.625, 2676), (1.625, 3041), (1.625, 2563), (1.625, 2792), (1.625, 3284), (1.625, 2663), (1.625, 3469), (1.625, 2723), (1.625, 3056), (1.625, 2862), (1.625, 2578), (1.625, 2547), (1.625, 3275), (1.625, 3209), (1.625, 3415), (1.625, 3335), (1.625, 3481), (1.625, 3386), (1.625, 3494), (1.625, 3443), (1.625, 2652), (1.625, 3425), (1.625, 3440), (1.625, 3249), (1.625, 3304), (1.625, 3359), (1.625, 2718), (1.625, 3265), (1.625, 2327), (1.625, 2728), (1.625, 3133), (1.625, 2803), (1.625, 3106), (1.625, 2833), (1.625, 2764), (1.625, 3398), (1.625, 2349), (1.625, 3435), (1.625, 3058), (1.625, 3279), (1.625, 3260), (1.625, 2233), (1.625, 3456), (1.625, 3197), (1.625, 3299), (1.625, 3470), (1.625, 3483), (1.625, 2816), (1.625, 2746), (1.625, 3417), (1.625, 2239), (1.625, 3292), (1.625, 3157), (1.625, 3461), (1.625, 3147), (1.625, 3419), (1.625, 3474), (1.625, 3290), (1.625, 3350), (1.625, 2878), (1.625, 3294), (1.625, 3297), (1.625, 3298), (1.625, 2537), (1.625, 3390), (1.625, 3137), (1.625, 2457), (1.625, 3043), (1.625, 3368), (1.625, 3477), (1.625, 3293), (1.625, 3259), (1.625, 3274), (1.625, 2542), (1.625, 2839), (1.625, 3358), (1.625, 3351), (1.625, 2947), (1.625, 3324), (1.625, 2908), (1.625, 3353), (1.625, 3314), (1.625, 3271), (1.625, 3233), (1.625, 3321), (1.625, 3185), (1.625, 3164), (1.625, 3125), (1.625, 3001), (1.625, 2905), (1.625, 3240), (1.625, 2889), (1.625, 3434), (1.625, 2419), (1.625, 3152), (1.625, 3061), (1.625, 2519), (1.625, 3356), (1.5, 3445), (1.5, 3499), (1.375, 3491), (0.875, 3476), (0.29166666666666663, 3406), (0.29166666666666663, 3452), (0.29166666666666663, 3463), (0.29166666666666663, 3421), (0.29166666666666663, 3479)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3430
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3221
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3194
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3352
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 33]
[Computing fitness]
[(1.625, 3409), (1.625, 3487), (1.625, 2913), (1.625, 3484), (1.625, 3414), (1.625, 3584), (1.625, 3275), (1.625, 3382), (1.625, 2548), (1.625, 3581), (1.625, 3586), (1.625, 3130), (1.625, 3056), (1.625, 3045), (1.625, 3589), (1.625, 2877), (1.625, 3081), (1.625, 3126), (1.625, 3442), (1.625, 2444), (1.625, 3015), (1.625, 3464), (1.625, 2317), (1.625, 2984), (1.625, 3354), (1.625, 2945), (1.625, 2792), (1.625, 3555), (1.625, 3036), (1.625, 2143), (1.625, 2789), (1.625, 3335), (1.625, 3076), (1.625, 2466), (1.625, 3263), (1.625, 3322), (1.625, 3537), (1.625, 3440), (1.625, 3554), (1.625, 3315), (1.625, 2629), (1.625, 3523), (1.625, 3150), (1.625, 3514), (1.625, 2680), (1.625, 1847), (1.625, 3563), (1.625, 3430), (1.625, 2655), (1.625, 2718), (1.625, 3413), (1.625, 2449), (1.625, 3558), (1.625, 3410), (1.625, 2893), (1.625, 3433), (1.625, 3503), (1.625, 2332), (1.625, 3039), (1.625, 3119), (1.625, 2870), (1.625, 3277), (1.625, 3532), (1.625, 3439), (1.625, 3582), (1.625, 3122), (1.625, 3307), (1.625, 3565), (1.625, 3488), (1.625, 2935), (1.625, 3192), (1.625, 3183), (1.625, 2617), (1.625, 2728), (1.625, 3396), (1.625, 3577), (1.625, 2803), (1.625, 3429), (1.625, 3454), (1.625, 2920), (1.625, 3053), (1.625, 2739), (1.625, 3023), (1.625, 2138), (1.625, 3602), (1.625, 3357), (1.625, 2926), (1.625, 3009), (1.625, 3486), (1.625, 2134), (1.625, 2784), (1.625, 3597), (1.625, 2547), (1.625, 2939), (1.625, 3516), (1.625, 3436), (1.625, 3139), (1.625, 2788), (1.625, 3559), (1.625, 3168), (1.625, 3552), (1.625, 2642), (1.625, 3547), (1.625, 2857), (1.625, 2657), (1.625, 1180), (1.625, 2804), (1.625, 2543), (1.625, 3402), (1.625, 2875), (1.625, 3480), (1.625, 2135), (1.625, 2434), (1.625, 3594), (1.625, 2224), (1.625, 2930), (1.625, 3339), (1.625, 3517), (1.625, 2869), (1.625, 3540), (1.625, 3541), (1.625, 3104), (1.625, 3469), (1.625, 3252), (1.625, 3460), (1.625, 3318), (1.625, 3296), (1.625, 2435), (1.625, 3317), (1.625, 2927), (1.625, 3087), (1.625, 3595), (1.625, 3371), (1.625, 2826), (1.625, 3571), (1.625, 2518), (1.625, 3247), (1.625, 3267), (1.625, 3607), (1.625, 3505), (1.625, 3074), (1.625, 3373), (1.625, 3050), (1.625, 3473), (1.625, 3004), (1.625, 3404), (1.625, 3310), (1.625, 3325), (1.625, 3229), (1.625, 3443), (1.625, 2676), (1.625, 2520), (1.625, 3604), (1.625, 3403), (1.625, 3184), (1.625, 3342), (1.625, 3481), (1.625, 3360), (1.625, 3533), (1.625, 3569), (1.625, 3286), (1.625, 3191), (1.625, 3239), (1.625, 2583), (1.625, 3014), (1.625, 3225), (1.625, 2647), (1.625, 3493), (1.625, 3221), (1.625, 3530), (1.625, 3372), (1.625, 3485), (1.625, 3253), (1.625, 3501), (1.625, 3494), (1.625, 3598), (1.625, 3447), (1.625, 3248), (1.625, 3599), (1.625, 3428), (1.625, 2805), (1.625, 3194), (1.625, 3593), (1.625, 3265), (1.625, 3380), (1.625, 3316), (1.625, 3073), (1.625, 2798), (1.625, 3334), (1.625, 3305), (1.625, 3495), (1.625, 2552), (1.625, 2570), (1.625, 3426), (1.625, 3249), (1.625, 3359), (1.625, 2333), (1.625, 3527), (1.625, 3115), (1.625, 3042), (1.625, 3379), (1.625, 3304), (1.625, 3453), (1.625, 2845), (1.625, 3052), (1.625, 3301), (1.625, 3510), (1.625, 3585), (1.625, 3067), (1.625, 3536), (1.625, 3543), (1.625, 3232), (1.625, 2336), (1.625, 3201), (1.625, 2653), (1.625, 2740), (1.625, 2919), (1.625, 3466), (1.625, 3422), (1.625, 3562), (1.625, 2348), (1.625, 2921), (1.625, 2667), (1.625, 3188), (1.625, 2790), (1.625, 3370), (1.625, 2462), (1.625, 3046), (1.625, 3600), (1.625, 3448), (1.625, 2568), (1.625, 3308), (1.625, 2838), (1.625, 3227), (1.625, 3500), (1.625, 3021), (1.625, 3561), (1.625, 2567), (1.625, 3018), (1.625, 3605), (1.625, 2773), (1.625, 3110), (1.625, 3258), (1.625, 3424), (1.625, 3038), (1.625, 2458), (1.625, 2327), (1.625, 3489), (1.625, 3133), (1.625, 3235), (1.625, 3431), (1.625, 2579), (1.625, 3135), (1.625, 2871), (1.625, 3590), (1.625, 3159), (1.625, 3041), (1.625, 2563), (1.625, 2750), (1.625, 3497), (1.625, 2560), (1.625, 3331), (1.625, 2325), (1.625, 2868), (1.625, 3389), (1.625, 3444), (1.625, 3375), (1.625, 3055), (1.625, 2232), (1.625, 3242), (1.625, 3145), (1.625, 3472), (1.625, 3557), (1.625, 3385), (1.625, 2652), (1.625, 3502), (1.625, 2525), (1.625, 3415), (1.625, 2928), (1.625, 3063), (1.625, 2346), (1.625, 3062), (1.625, 2661), (1.625, 2619), (1.625, 3068), (1.625, 3467), (1.625, 3214), (1.625, 3567), (1.625, 3528), (1.625, 3070), (1.625, 3568), (1.625, 2687), (1.625, 3408), (1.625, 2329), (1.625, 2909), (1.625, 2831), (1.625, 2899), (1.625, 2983), (1.625, 3288), (1.625, 2535), (1.625, 3140), (1.625, 3144), (1.625, 2950), (1.625, 2749), (1.625, 2620), (1.625, 3427), (1.625, 2901), (1.625, 2632), (1.625, 2692), (1.625, 3123), (1.625, 3535), (1.625, 3550), (1.625, 2578), (1.625, 3312), (1.625, 2622), (1.625, 3395), (1.625, 2797), (1.625, 3450), (1.625, 3238), (1.625, 3230), (1.625, 3579), (1.625, 3266), (1.625, 1944), (1.625, 2344), (1.625, 3280), (1.625, 3471), (1.625, 3165), (1.625, 2318), (1.625, 3352), (1.625, 2881), (1.625, 2863), (1.625, 2554), (1.625, 2673), (1.625, 2975), (1.625, 3329), (1.625, 3574), (1.625, 2663), (1.625, 2723), (1.625, 3323), (1.625, 3393), (1.625, 3548), (1.625, 3218), (1.625, 3381), (1.625, 2859), (1.625, 3072), (1.625, 3349), (1.625, 3546), (1.625, 3016), (1.625, 3269), (1.625, 2744), (1.625, 2844), (1.625, 3412), (1.625, 3282), (1.625, 3521), (1.625, 2417), (1.625, 2730), (1.625, 2339), (1.625, 3458), (1.625, 2820), (1.625, 3591), (1.625, 3583), (1.625, 3124), (1.625, 3187), (1.625, 3526), (1.625, 3209), (1.625, 2053), (1.625, 3425), (1.625, 3423), (1.625, 3592), (1.625, 3446), (1.625, 3573), (1.625, 2807), (1.625, 3508), (1.625, 3284), (1.625, 3309), (1.625, 3386), (1.625, 3391), (1.625, 3079), (1.625, 2938), (1.625, 3320), (1.625, 2558), (1.625, 3437), (1.625, 2802), (1.625, 2837), (1.625, 3596), (1.625, 2141), (1.625, 2862), (1.625, 1650), (1.625, 2338), (1.625, 2996), (1.5, 3531), (1.375, 3564), (1.375, 3539), (0.875, 3507), (0.875, 3512), (0.875, 3588), (0.29166666666666663, 3519), (0.29166666666666663, 3545), (0.29166666666666663, 3576), (0.29166666666666663, 3525)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3409
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3487
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2913
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3484
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3414
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 34]
[Computing fitness]
[(1.625, 3594), (1.625, 3494), (1.625, 3667), (1.625, 3267), (1.625, 3249), (1.625, 2568), (1.625, 3454), (1.625, 3396), (1.625, 3605), (1.625, 3104), (1.625, 2935), (1.625, 3053), (1.625, 3404), (1.625, 3055), (1.625, 3547), (1.625, 3214), (1.625, 3122), (1.625, 3315), (1.625, 3408), (1.625, 2877), (1.625, 3675), (1.625, 2826), (1.625, 3562), (1.625, 3426), (1.625, 3021), (1.625, 3450), (1.625, 3316), (1.625, 3557), (1.625, 3318), (1.625, 3067), (1.625, 3684), (1.625, 3660), (1.625, 3489), (1.625, 3036), (1.625, 2548), (1.625, 3613), (1.625, 2928), (1.625, 3678), (1.625, 3671), (1.625, 3653), (1.625, 3649), (1.625, 2950), (1.625, 3473), (1.625, 3252), (1.625, 3530), (1.625, 3702), (1.625, 2543), (1.625, 2930), (1.625, 3664), (1.625, 3694), (1.625, 3063), (1.625, 3658), (1.625, 3714), (1.625, 2583), (1.625, 3695), (1.625, 3676), (1.625, 3144), (1.625, 3375), (1.625, 3427), (1.625, 3608), (1.625, 3453), (1.625, 2797), (1.625, 2919), (1.625, 3360), (1.625, 3497), (1.625, 3370), (1.625, 3541), (1.625, 3286), (1.625, 3074), (1.625, 2803), (1.625, 3331), (1.625, 3119), (1.625, 3493), (1.625, 3630), (1.625, 3552), (1.625, 3087), (1.625, 3598), (1.625, 3500), (1.625, 3018), (1.625, 3041), (1.625, 2232), (1.625, 3563), (1.625, 3229), (1.625, 3247), (1.625, 1180), (1.625, 3584), (1.625, 2857), (1.625, 2739), (1.625, 2869), (1.625, 3135), (1.625, 3582), (1.625, 3307), (1.625, 3038), (1.625, 3599), (1.625, 3642), (1.625, 3659), (1.625, 3586), (1.625, 3650), (1.625, 3687), (1.625, 3413), (1.625, 3698), (1.625, 3579), (1.625, 3073), (1.625, 3514), (1.625, 2327), (1.625, 3628), (1.625, 3467), (1.625, 3464), (1.625, 3517), (1.625, 3312), (1.625, 2798), (1.625, 3354), (1.625, 3266), (1.625, 3308), (1.625, 3607), (1.625, 3335), (1.625, 3480), (1.625, 2617), (1.625, 3554), (1.625, 3334), (1.625, 2740), (1.625, 3600), (1.625, 2466), (1.625, 3672), (1.625, 3433), (1.625, 3126), (1.625, 3440), (1.625, 2434), (1.625, 2570), (1.625, 3046), (1.625, 2983), (1.625, 2653), (1.625, 3651), (1.625, 3486), (1.625, 3235), (1.625, 2560), (1.625, 3123), (1.625, 3442), (1.625, 3227), (1.625, 3485), (1.625, 3402), (1.625, 3188), (1.625, 3201), (1.625, 2325), (1.625, 3502), (1.625, 3436), (1.625, 3448), (1.625, 3444), (1.625, 2945), (1.625, 3159), (1.625, 3609), (1.625, 3595), (1.625, 2224), (1.625, 2578), (1.625, 3372), (1.625, 2520), (1.625, 3115), (1.625, 3382), (1.625, 2750), (1.625, 3655), (1.625, 3558), (1.625, 3230), (1.625, 2893), (1.625, 2909), (1.625, 3537), (1.625, 3304), (1.625, 3623), (1.625, 3183), (1.625, 2567), (1.625, 3414), (1.625, 2346), (1.625, 2984), (1.625, 3110), (1.625, 2629), (1.625, 2845), (1.625, 3666), (1.625, 3495), (1.625, 3568), (1.625, 3561), (1.625, 3633), (1.625, 3620), (1.625, 2619), (1.625, 3550), (1.625, 3221), (1.625, 3275), (1.625, 3528), (1.625, 3611), (1.625, 3701), (1.625, 3585), (1.625, 3527), (1.625, 3415), (1.625, 3068), (1.625, 3516), (1.625, 3626), (1.625, 3192), (1.625, 3645), (1.625, 3700), (1.625, 3535), (1.625, 3253), (1.625, 3501), (1.625, 3559), (1.625, 2652), (1.625, 3150), (1.625, 2790), (1.625, 3706), (1.625, 3487), (1.625, 3581), (1.625, 3371), (1.625, 3317), (1.625, 3389), (1.625, 3409), (1.625, 3488), (1.625, 3242), (1.625, 3602), (1.625, 2435), (1.625, 3410), (1.625, 3265), (1.625, 3431), (1.625, 3540), (1.625, 2692), (1.625, 2620), (1.625, 3447), (1.625, 2632), (1.625, 3469), (1.625, 3039), (1.625, 2579), (1.625, 3342), (1.625, 3567), (1.625, 3301), (1.625, 2680), (1.625, 3662), (1.625, 2926), (1.625, 3481), (1.625, 2661), (1.625, 3680), (1.625, 3690), (1.625, 3015), (1.625, 3014), (1.625, 3683), (1.625, 3571), (1.625, 2773), (1.625, 3191), (1.625, 2676), (1.625, 2622), (1.625, 3577), (1.625, 3081), (1.625, 3634), (1.625, 2920), (1.625, 3359), (1.625, 3280), (1.625, 2792), (1.625, 3184), (1.625, 3070), (1.625, 2784), (1.625, 3325), (1.625, 2687), (1.625, 3472), (1.625, 3590), (1.625, 3439), (1.625, 3657), (1.625, 3023), (1.625, 3614), (1.625, 3638), (1.625, 3379), (1.625, 3322), (1.625, 2518), (1.625, 3145), (1.625, 3532), (1.625, 3688), (1.625, 3565), (1.625, 2804), (1.625, 2344), (1.625, 2838), (1.625, 3691), (1.625, 2805), (1.625, 3424), (1.625, 3430), (1.625, 3357), (1.625, 3697), (1.625, 2921), (1.625, 3062), (1.625, 2563), (1.625, 3696), (1.625, 3130), (1.625, 2657), (1.625, 2870), (1.625, 2333), (1.625, 3689), (1.625, 3536), (1.625, 3510), (1.625, 2899), (1.625, 3460), (1.625, 2525), (1.625, 2901), (1.625, 3523), (1.625, 3385), (1.625, 2831), (1.625, 3589), (1.625, 2143), (1.625, 3056), (1.625, 3339), (1.625, 3710), (1.625, 2789), (1.625, 2718), (1.625, 3248), (1.625, 3258), (1.625, 2329), (1.625, 3429), (1.625, 2939), (1.625, 2552), (1.625, 3543), (1.625, 2535), (1.625, 2728), (1.625, 2444), (1.625, 3647), (1.625, 3686), (1.625, 3042), (1.625, 3403), (1.625, 3422), (1.625, 3045), (1.625, 3288), (1.625, 3503), (1.625, 3597), (1.625, 2913), (1.625, 3640), (1.625, 2332), (1.625, 3239), (1.625, 3610), (1.625, 3004), (1.625, 3621), (1.625, 3139), (1.625, 3052), (1.625, 3076), (1.625, 2927), (1.625, 1944), (1.625, 3238), (1.625, 3232), (1.625, 3555), (1.625, 2647), (1.625, 2348), (1.625, 2868), (1.625, 2135), (1.625, 3712), (1.625, 2788), (1.625, 2871), (1.625, 3050), (1.625, 3616), (1.625, 2642), (1.625, 3692), (1.625, 2134), (1.625, 3673), (1.625, 3663), (1.625, 2138), (1.625, 3296), (1.625, 3263), (1.625, 2875), (1.625, 3617), (1.625, 3225), (1.625, 3009), (1.625, 3305), (1.625, 3310), (1.625, 3373), (1.625, 3466), (1.625, 3505), (1.625, 3709), (1.625, 3380), (1.625, 3604), (1.625, 2667), (1.625, 3533), (1.625, 3646), (1.625, 3133), (1.625, 3140), (1.625, 2655), (1.625, 3395), (1.625, 3681), (1.625, 3705), (1.625, 3593), (1.625, 2317), (1.625, 1847), (1.625, 3428), (1.625, 3443), (1.625, 2462), (1.625, 2458), (1.625, 3168), (1.625, 2749), (1.625, 3484), (1.625, 2547), (1.625, 2449), (1.625, 3569), (1.625, 2336), (1.625, 3194), (1.625, 3277), (1.625, 3708), (0.875, 3625), (0.875, 3644), (0.875, 3704), (0.29166666666666663, 3619), (0.29166666666666663, 3669), (0.29166666666666663, 3632), (0.29166666666666663, 3636)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3494
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3667
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3249
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 35]
[Computing fitness]
[(1.625, 3410), (1.625, 3540), (1.625, 3594), (1.625, 2560), (1.625, 3497), (1.625, 2913), (1.625, 3698), (1.625, 3235), (1.625, 3775), (1.625, 3067), (1.625, 3688), (1.625, 3543), (1.625, 2466), (1.625, 3718), (1.625, 3559), (1.625, 3464), (1.625, 3514), (1.625, 3756), (1.625, 3590), (1.625, 2568), (1.625, 3724), (1.625, 3739), (1.625, 3802), (1.625, 2652), (1.625, 3607), (1.625, 3638), (1.625, 3788), (1.625, 3063), (1.625, 3745), (1.625, 3687), (1.625, 3415), (1.625, 2434), (1.625, 3689), (1.625, 2804), (1.625, 3768), (1.625, 2930), (1.625, 3584), (1.625, 3288), (1.625, 3738), (1.625, 3123), (1.625, 2232), (1.625, 3440), (1.625, 3379), (1.625, 3115), (1.625, 2687), (1.625, 2857), (1.625, 3144), (1.625, 3227), (1.625, 3678), (1.625, 3765), (1.625, 2831), (1.625, 2790), (1.625, 3741), (1.625, 3389), (1.625, 3469), (1.625, 3794), (1.625, 2435), (1.625, 2657), (1.625, 3081), (1.625, 3253), (1.625, 3342), (1.625, 3183), (1.625, 3536), (1.625, 3429), (1.625, 3770), (1.625, 3122), (1.625, 3503), (1.625, 3700), (1.625, 3714), (1.625, 3422), (1.625, 3502), (1.625, 3267), (1.625, 3426), (1.625, 2921), (1.625, 3702), (1.625, 3650), (1.625, 3680), (1.625, 3749), (1.625, 3651), (1.625, 2920), (1.625, 3697), (1.625, 2805), (1.625, 3581), (1.625, 3715), (1.625, 3402), (1.625, 3595), (1.625, 3335), (1.625, 3719), (1.625, 2750), (1.625, 3796), (1.625, 3301), (1.625, 3317), (1.625, 2525), (1.625, 3772), (1.625, 2798), (1.625, 2899), (1.625, 3633), (1.625, 3382), (1.625, 3424), (1.625, 3761), (1.625, 3371), (1.625, 3684), (1.625, 2632), (1.625, 3473), (1.625, 3626), (1.625, 3557), (1.625, 3501), (1.625, 3322), (1.625, 3188), (1.625, 2224), (1.625, 3653), (1.625, 3316), (1.625, 2680), (1.625, 3039), (1.625, 2620), (1.625, 2919), (1.625, 3192), (1.625, 3021), (1.625, 3280), (1.625, 2893), (1.625, 3758), (1.625, 3657), (1.625, 3447), (1.625, 2583), (1.625, 2909), (1.625, 3567), (1.625, 3585), (1.625, 3488), (1.625, 3354), (1.625, 3744), (1.625, 3135), (1.625, 2826), (1.625, 3743), (1.625, 3780), (1.625, 3307), (1.625, 3783), (1.625, 3184), (1.625, 3717), (1.625, 2653), (1.625, 3547), (1.625, 3053), (1.625, 3683), (1.625, 2869), (1.625, 2333), (1.625, 2838), (1.625, 3068), (1.625, 3701), (1.625, 3710), (1.625, 3671), (1.625, 3608), (1.625, 2739), (1.625, 3776), (1.625, 3433), (1.625, 3249), (1.625, 3634), (1.625, 2344), (1.625, 3755), (1.625, 2619), (1.625, 3266), (1.625, 3023), (1.625, 3645), (1.625, 2877), (1.625, 2520), (1.625, 3014), (1.625, 3510), (1.625, 3535), (1.625, 2329), (1.625, 3265), (1.625, 3430), (1.625, 3357), (1.625, 3675), (1.625, 3494), (1.625, 2926), (1.625, 3247), (1.625, 3444), (1.625, 3777), (1.625, 1180), (1.625, 3582), (1.625, 2543), (1.625, 3706), (1.625, 3586), (1.625, 3727), (1.625, 3623), (1.625, 2845), (1.625, 3763), (1.625, 2579), (1.625, 3331), (1.625, 2789), (1.625, 3130), (1.625, 3448), (1.625, 3041), (1.625, 3454), (1.625, 3074), (1.625, 2563), (1.625, 3658), (1.625, 3045), (1.625, 2728), (1.625, 3779), (1.625, 3517), (1.625, 3735), (1.625, 3600), (1.625, 3726), (1.625, 3667), (1.625, 3334), (1.625, 3733), (1.625, 2797), (1.625, 2792), (1.625, 2622), (1.625, 3655), (1.625, 3248), (1.625, 3753), (1.625, 3126), (1.625, 3489), (1.625, 2870), (1.625, 2661), (1.625, 3046), (1.625, 3119), (1.625, 3409), (1.625, 3056), (1.625, 3642), (1.625, 2773), (1.625, 2928), (1.625, 2945), (1.625, 3728), (1.625, 3315), (1.625, 3110), (1.625, 3725), (1.625, 3403), (1.625, 3015), (1.625, 3554), (1.625, 3481), (1.625, 2740), (1.625, 3614), (1.625, 2518), (1.625, 3630), (1.625, 3493), (1.625, 3672), (1.625, 3453), (1.625, 2578), (1.625, 3372), (1.625, 3414), (1.625, 3087), (1.625, 3787), (1.625, 3537), (1.625, 3599), (1.625, 3800), (1.625, 3495), (1.625, 3408), (1.625, 3431), (1.625, 3742), (1.625, 3568), (1.625, 3439), (1.625, 3252), (1.625, 2570), (1.625, 2803), (1.625, 3598), (1.625, 3798), (1.625, 3579), (1.625, 3562), (1.625, 3740), (1.625, 2143), (1.625, 3609), (1.625, 3375), (1.625, 3602), (1.625, 3791), (1.625, 3070), (1.625, 3769), (1.625, 3613), (1.625, 3747), (1.625, 3242), (1.625, 3550), (1.625, 3781), (1.625, 2617), (1.625, 3460), (1.625, 3722), (1.625, 3563), (1.625, 3229), (1.625, 3472), (1.625, 3676), (1.625, 3221), (1.625, 2692), (1.625, 3762), (1.625, 3764), (1.625, 3396), (1.625, 3757), (1.625, 3754), (1.625, 3577), (1.625, 3486), (1.625, 3485), (1.625, 3516), (1.625, 3258), (1.625, 3696), (1.625, 3690), (1.625, 3487), (1.625, 3436), (1.625, 3018), (1.625, 3792), (1.625, 3611), (1.625, 2939), (1.625, 3751), (1.625, 2984), (1.625, 3558), (1.625, 3731), (1.625, 3804), (1.625, 3339), (1.625, 3404), (1.625, 3038), (1.625, 3571), (1.625, 3359), (1.625, 3318), (1.625, 3360), (1.625, 3467), (1.625, 3201), (1.625, 2552), (1.625, 3325), (1.625, 2325), (1.625, 3662), (1.625, 3370), (1.625, 3150), (1.625, 3778), (1.625, 3530), (1.625, 3760), (1.625, 2718), (1.625, 3230), (1.625, 2676), (1.625, 3042), (1.625, 3659), (1.625, 3664), (1.625, 3799), (1.625, 3442), (1.625, 2901), (1.625, 3716), (1.625, 3500), (1.625, 3552), (1.625, 3695), (1.625, 3214), (1.625, 3528), (1.625, 3541), (1.625, 2535), (1.625, 3597), (1.625, 3308), (1.625, 3191), (1.625, 2444), (1.625, 3036), (1.625, 3159), (1.625, 3073), (1.625, 3771), (1.625, 3312), (1.625, 2629), (1.625, 3104), (1.625, 2327), (1.625, 3413), (1.625, 3736), (1.625, 3660), (1.625, 3649), (1.625, 3766), (1.625, 3561), (1.625, 2346), (1.625, 3686), (1.625, 3427), (1.625, 2784), (1.625, 3589), (1.625, 3527), (1.625, 3450), (1.625, 2983), (1.625, 3785), (1.625, 3647), (1.625, 3666), (1.625, 3752), (1.625, 3275), (1.625, 2548), (1.625, 2950), (1.625, 3628), (1.625, 3145), (1.625, 3620), (1.625, 3532), (1.625, 3062), (1.625, 3605), (1.625, 3773), (1.625, 3691), (1.625, 3304), (1.625, 3385), (1.625, 3795), (1.625, 2935), (1.625, 3640), (1.625, 3055), (1.625, 3286), (1.625, 3694), (1.625, 2567), (1.625, 3737), (1.625, 3721), (1.625, 3480), (1.625, 3523), (1.625, 3565), (1.625, 3748), (1.375, 3793), (1.375, 3759), (1.375, 3732), (0.29166666666666663, 3790), (0.29166666666666663, 3730)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3410
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3540
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2560
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3497
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 36]
[Computing fitness]
[(1.625, 3769), (1.625, 3595), (1.625, 3501), (1.625, 3081), (1.625, 2687), (1.625, 3379), (1.625, 3882), (1.625, 3678), (1.625, 3742), (1.625, 2552), (1.625, 2773), (1.625, 3389), (1.625, 3249), (1.625, 3738), (1.625, 3731), (1.625, 3488), (1.625, 2826), (1.625, 2845), (1.625, 3371), (1.625, 3567), (1.625, 3841), (1.625, 3889), (1.625, 3810), (1.625, 3543), (1.625, 3041), (1.625, 3778), (1.625, 2803), (1.625, 2518), (1.625, 2750), (1.625, 3683), (1.625, 3776), (1.625, 3402), (1.625, 3653), (1.625, 2579), (1.625, 3396), (1.625, 3650), (1.625, 3230), (1.625, 3747), (1.625, 2632), (1.625, 3658), (1.625, 2838), (1.625, 3581), (1.625, 3590), (1.625, 3878), (1.625, 3824), (1.625, 2525), (1.625, 3359), (1.625, 3372), (1.625, 3861), (1.625, 3817), (1.625, 3657), (1.625, 3806), (1.625, 3110), (1.625, 3715), (1.625, 3557), (1.625, 3115), (1.625, 3821), (1.625, 3718), (1.625, 3822), (1.625, 3733), (1.625, 3864), (1.625, 3764), (1.625, 2857), (1.625, 3415), (1.625, 3893), (1.625, 2622), (1.625, 3253), (1.625, 2560), (1.625, 3852), (1.625, 3823), (1.625, 3870), (1.625, 3535), (1.625, 3684), (1.625, 3123), (1.625, 3494), (1.625, 2583), (1.625, 3836), (1.625, 3188), (1.625, 3762), (1.625, 2728), (1.625, 3854), (1.625, 3829), (1.625, 3579), (1.625, 3489), (1.625, 3252), (1.625, 2578), (1.625, 3780), (1.625, 3826), (1.625, 2718), (1.625, 3834), (1.625, 2740), (1.625, 2930), (1.625, 3331), (1.625, 3339), (1.625, 3318), (1.625, 2790), (1.625, 2325), (1.625, 2224), (1.625, 3667), (1.625, 3689), (1.625, 3710), (1.625, 3794), (1.625, 3880), (1.625, 3886), (1.625, 3838), (1.625, 3460), (1.625, 3728), (1.625, 3630), (1.625, 3192), (1.625, 3626), (1.625, 2739), (1.625, 3342), (1.625, 2617), (1.625, 3761), (1.625, 3892), (1.625, 3354), (1.625, 3266), (1.625, 3680), (1.625, 3735), (1.625, 3536), (1.625, 3467), (1.625, 3485), (1.625, 3144), (1.625, 3429), (1.625, 3775), (1.625, 3608), (1.625, 3881), (1.625, 2870), (1.625, 3242), (1.625, 3486), (1.625, 3745), (1.625, 3502), (1.625, 2652), (1.625, 3772), (1.625, 3018), (1.625, 3739), (1.625, 3614), (1.625, 3895), (1.625, 3403), (1.625, 3848), (1.625, 3783), (1.625, 3454), (1.625, 3267), (1.625, 3315), (1.625, 2435), (1.625, 3865), (1.625, 3805), (1.625, 2805), (1.625, 3307), (1.625, 3724), (1.625, 3408), (1.625, 3335), (1.625, 3866), (1.625, 3607), (1.625, 2333), (1.625, 3540), (1.625, 3714), (1.625, 3871), (1.625, 3023), (1.625, 3424), (1.625, 3722), (1.625, 2653), (1.625, 3858), (1.625, 3844), (1.625, 3063), (1.625, 3317), (1.625, 3046), (1.625, 3833), (1.625, 3430), (1.625, 3598), (1.625, 2920), (1.625, 3316), (1.625, 3053), (1.625, 2344), (1.625, 2657), (1.625, 3754), (1.625, 3804), (1.625, 3807), (1.625, 3857), (1.625, 3811), (1.625, 3701), (1.625, 3248), (1.625, 3706), (1.625, 3571), (1.625, 2877), (1.625, 3067), (1.625, 3265), (1.625, 3800), (1.625, 2869), (1.625, 2926), (1.625, 3698), (1.625, 3638), (1.625, 2945), (1.625, 3765), (1.625, 3436), (1.625, 3431), (1.625, 3537), (1.625, 3550), (1.625, 3447), (1.625, 3675), (1.625, 3453), (1.625, 3325), (1.625, 3740), (1.625, 3835), (1.625, 3788), (1.625, 3221), (1.625, 3201), (1.625, 3288), (1.625, 3481), (1.625, 1180), (1.625, 2680), (1.625, 3763), (1.625, 3360), (1.625, 3744), (1.625, 3697), (1.625, 3757), (1.625, 3426), (1.625, 3577), (1.625, 3827), (1.625, 3796), (1.625, 3725), (1.625, 3594), (1.625, 3150), (1.625, 3831), (1.625, 3563), (1.625, 3688), (1.625, 3855), (1.625, 3623), (1.625, 3087), (1.625, 3875), (1.625, 3404), (1.625, 3850), (1.625, 3301), (1.625, 3510), (1.625, 2919), (1.625, 3825), (1.625, 3741), (1.625, 2563), (1.625, 3884), (1.625, 3562), (1.625, 2789), (1.625, 2143), (1.625, 3798), (1.625, 3119), (1.625, 3409), (1.625, 3755), (1.625, 3779), (1.625, 3672), (1.625, 3726), (1.625, 3039), (1.625, 3122), (1.625, 3609), (1.625, 3021), (1.625, 3568), (1.625, 3777), (1.625, 3749), (1.625, 3414), (1.625, 3448), (1.625, 3859), (1.625, 3322), (1.625, 2543), (1.625, 3473), (1.625, 3126), (1.625, 3599), (1.625, 3887), (1.625, 2928), (1.625, 3495), (1.625, 3781), (1.625, 3633), (1.625, 3879), (1.625, 3813), (1.625, 3634), (1.625, 3662), (1.625, 3768), (1.625, 3235), (1.625, 3851), (1.625, 3229), (1.625, 3422), (1.625, 3828), (1.625, 3517), (1.625, 3038), (1.625, 2798), (1.625, 3600), (1.625, 2466), (1.625, 2520), (1.625, 3516), (1.625, 3897), (1.625, 3867), (1.625, 3883), (1.625, 2939), (1.625, 3497), (1.625, 3819), (1.625, 3584), (1.625, 3068), (1.625, 3896), (1.625, 3717), (1.625, 2232), (1.625, 3464), (1.625, 3758), (1.625, 3227), (1.625, 3802), (1.625, 3853), (1.625, 3869), (1.625, 2661), (1.625, 3690), (1.625, 3247), (1.625, 2692), (1.625, 3586), (1.625, 2804), (1.625, 3816), (1.625, 2899), (1.625, 3602), (1.625, 3472), (1.625, 2619), (1.625, 2568), (1.625, 3888), (1.625, 3493), (1.625, 3645), (1.625, 3791), (1.625, 3885), (1.625, 3135), (1.625, 3702), (1.625, 3770), (1.625, 3410), (1.625, 3444), (1.625, 2676), (1.625, 3469), (1.625, 3070), (1.625, 3756), (1.625, 2570), (1.625, 2434), (1.625, 3558), (1.625, 3671), (1.625, 3280), (1.625, 2984), (1.625, 2792), (1.625, 3015), (1.625, 3258), (1.625, 2831), (1.625, 3839), (1.625, 3514), (1.625, 3503), (1.625, 3130), (1.625, 3585), (1.625, 3613), (1.625, 3582), (1.625, 3753), (1.625, 3696), (1.625, 3056), (1.625, 3074), (1.625, 3554), (1.625, 3045), (1.625, 3559), (1.625, 3787), (1.625, 3751), (1.625, 3843), (1.625, 3439), (1.625, 2797), (1.625, 3743), (1.625, 3433), (1.625, 3842), (1.625, 3719), (1.625, 3611), (1.625, 3334), (1.625, 2909), (1.625, 3808), (1.625, 3184), (1.625, 3655), (1.625, 3687), (1.625, 2921), (1.625, 3727), (1.625, 3183), (1.625, 3440), (1.625, 3676), (1.625, 3651), (1.625, 3014), (1.625, 3760), (1.625, 3792), (1.625, 3487), (1.625, 2893), (1.625, 3873), (1.625, 3382), (1.625, 3375), (1.625, 3642), (1.625, 3357), (1.625, 2620), (1.625, 3547), (1.625, 3700), (1.625, 3812), (1.625, 3530), (1.625, 3370), (1.625, 2329), (1.625, 3872), (1.625, 2913), (1.5, 3876), (1.5, 3809), (1.375, 3890), (0.875, 3863), (0.29166666666666663, 3815), (0.29166666666666663, 3846)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3769
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3595
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3081
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2687
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 37]
[Computing fitness]
[(1.625, 3562), (1.625, 3667), (1.625, 3046), (1.625, 3662), (1.625, 3904), (1.625, 3821), (1.625, 3021), (1.625, 3912), (1.625, 3794), (1.625, 3317), (1.625, 3288), (1.625, 3408), (1.625, 3805), (1.625, 2926), (1.625, 2869), (1.625, 3123), (1.625, 2687), (1.625, 3853), (1.625, 3981), (1.625, 2333), (1.625, 3979), (1.625, 3122), (1.625, 3540), (1.625, 3914), (1.625, 3568), (1.625, 2619), (1.625, 3867), (1.625, 3959), (1.625, 3857), (1.625, 3472), (1.625, 3717), (1.625, 3267), (1.625, 3953), (1.625, 3594), (1.625, 3768), (1.625, 3762), (1.625, 3884), (1.625, 3834), (1.625, 3835), (1.625, 3738), (1.625, 3715), (1.625, 3680), (1.625, 3740), (1.625, 2773), (1.625, 3678), (1.625, 3567), (1.625, 3776), (1.625, 3331), (1.625, 3930), (1.625, 3744), (1.625, 3227), (1.625, 3710), (1.625, 3749), (1.625, 3608), (1.625, 3817), (1.625, 2857), (1.625, 3409), (1.625, 2803), (1.625, 3881), (1.625, 3359), (1.625, 3806), (1.625, 3824), (1.625, 3488), (1.625, 2789), (1.625, 3955), (1.625, 3963), (1.625, 3754), (1.625, 3454), (1.625, 3859), (1.625, 3990), (1.625, 3634), (1.625, 2560), (1.625, 3975), (1.625, 2798), (1.625, 2652), (1.625, 3600), (1.625, 3430), (1.625, 3444), (1.625, 3788), (1.625, 2579), (1.625, 3965), (1.625, 3557), (1.625, 3081), (1.625, 3804), (1.625, 2804), (1.625, 2518), (1.625, 3543), (1.625, 3919), (1.625, 3825), (1.625, 2525), (1.625, 3852), (1.625, 3672), (1.625, 3931), (1.625, 3221), (1.625, 1180), (1.625, 3614), (1.625, 3563), (1.625, 3769), (1.625, 3396), (1.625, 3402), (1.625, 3315), (1.625, 3657), (1.625, 2877), (1.625, 3870), (1.625, 3360), (1.625, 3316), (1.625, 3725), (1.625, 2578), (1.625, 3537), (1.625, 3961), (1.625, 3135), (1.625, 3726), (1.625, 3415), (1.625, 3497), (1.625, 3689), (1.625, 2692), (1.625, 3970), (1.625, 3595), (1.625, 3829), (1.625, 3266), (1.625, 3902), (1.625, 3502), (1.625, 3988), (1.625, 3858), (1.625, 3827), (1.625, 3115), (1.625, 3897), (1.625, 3833), (1.625, 3878), (1.625, 3602), (1.625, 3018), (1.625, 3645), (1.625, 3934), (1.625, 3448), (1.625, 3896), (1.625, 3939), (1.625, 3898), (1.625, 3379), (1.625, 3928), (1.625, 3252), (1.625, 3493), (1.625, 2568), (1.625, 3728), (1.625, 3869), (1.625, 3851), (1.625, 3447), (1.625, 3501), (1.625, 3192), (1.625, 3888), (1.625, 3882), (1.625, 3201), (1.625, 3516), (1.625, 2657), (1.625, 2661), (1.625, 3372), (1.625, 3718), (1.625, 3733), (1.625, 3658), (1.625, 2739), (1.625, 3985), (1.625, 3739), (1.625, 3536), (1.625, 3453), (1.625, 3633), (1.625, 3775), (1.625, 3690), (1.625, 3724), (1.625, 3436), (1.625, 3325), (1.625, 3464), (1.625, 3403), (1.625, 3983), (1.625, 3986), (1.625, 3875), (1.625, 3865), (1.625, 3906), (1.625, 3822), (1.625, 3688), (1.625, 3892), (1.625, 3265), (1.625, 3976), (1.625, 3339), (1.625, 3916), (1.625, 3954), (1.625, 3838), (1.625, 3626), (1.625, 2583), (1.625, 3581), (1.625, 3935), (1.625, 3781), (1.625, 3828), (1.625, 3941), (1.625, 3982), (1.625, 3883), (1.625, 3947), (1.625, 2632), (1.625, 3584), (1.625, 3247), (1.625, 3956), (1.625, 3811), (1.625, 3495), (1.625, 3041), (1.625, 2435), (1.625, 2552), (1.625, 3623), (1.625, 2325), (1.625, 2838), (1.625, 3763), (1.625, 3038), (1.625, 3598), (1.625, 3426), (1.625, 3609), (1.625, 3777), (1.625, 2466), (1.625, 3949), (1.625, 3826), (1.625, 3987), (1.625, 3960), (1.625, 3971), (1.625, 3494), (1.625, 3126), (1.625, 3944), (1.625, 3473), (1.625, 3761), (1.625, 2826), (1.625, 3854), (1.625, 3798), (1.625, 3813), (1.625, 3889), (1.625, 3918), (1.625, 3871), (1.625, 3796), (1.625, 3937), (1.625, 3414), (1.625, 3150), (1.625, 3783), (1.625, 3235), (1.625, 2740), (1.625, 3486), (1.625, 2939), (1.625, 3577), (1.625, 3485), (1.625, 3389), (1.625, 3110), (1.625, 2870), (1.625, 3429), (1.625, 3422), (1.625, 3630), (1.625, 3248), (1.625, 3144), (1.625, 3968), (1.625, 3966), (1.625, 3823), (1.625, 3900), (1.625, 3063), (1.625, 3706), (1.625, 3951), (1.625, 2520), (1.625, 2622), (1.625, 3957), (1.625, 2945), (1.625, 3467), (1.625, 3758), (1.625, 3879), (1.625, 2143), (1.625, 3404), (1.625, 3772), (1.625, 3253), (1.625, 3933), (1.625, 3800), (1.625, 2563), (1.625, 3903), (1.625, 2718), (1.625, 3921), (1.625, 3770), (1.625, 3607), (1.625, 3915), (1.625, 2232), (1.625, 3735), (1.625, 2928), (1.625, 3517), (1.625, 3301), (1.625, 3684), (1.625, 3958), (1.625, 3864), (1.625, 3638), (1.625, 3911), (1.625, 3697), (1.625, 3887), (1.625, 3936), (1.625, 3590), (1.625, 3807), (1.625, 3922), (1.625, 3322), (1.625, 3335), (1.625, 3424), (1.625, 3229), (1.625, 3489), (1.625, 2805), (1.625, 3653), (1.625, 3819), (1.625, 3972), (1.625, 3764), (1.625, 3893), (1.625, 3698), (1.625, 3481), (1.625, 3599), (1.625, 3802), (1.625, 3702), (1.625, 2653), (1.625, 3579), (1.625, 3923), (1.625, 2845), (1.625, 3810), (1.625, 3917), (1.625, 3535), (1.625, 3755), (1.625, 2790), (1.625, 3053), (1.625, 3230), (1.625, 3910), (1.625, 3907), (1.625, 3371), (1.625, 3886), (1.625, 3765), (1.625, 3683), (1.625, 3942), (1.625, 2680), (1.625, 3571), (1.625, 2728), (1.625, 3855), (1.625, 3885), (1.625, 3354), (1.625, 3848), (1.625, 3460), (1.625, 3880), (1.625, 3510), (1.625, 3899), (1.625, 3550), (1.625, 3741), (1.625, 3087), (1.625, 3844), (1.625, 3742), (1.625, 3410), (1.625, 3945), (1.625, 3861), (1.625, 2617), (1.625, 3977), (1.625, 3675), (1.625, 3836), (1.625, 3779), (1.625, 3908), (1.625, 3039), (1.625, 3831), (1.625, 3650), (1.625, 3745), (1.625, 3722), (1.625, 3909), (1.625, 3067), (1.625, 2750), (1.625, 3431), (1.625, 3926), (1.625, 2543), (1.625, 3586), (1.625, 3925), (1.625, 2899), (1.625, 3841), (1.625, 3929), (1.625, 3866), (1.625, 3964), (1.625, 3895), (1.625, 2930), (1.625, 3023), (1.625, 3068), (1.625, 3342), (1.625, 3318), (1.625, 3188), (1.625, 3943), (1.625, 2344), (1.625, 3242), (1.625, 3816), (1.625, 3757), (1.625, 2920), (1.625, 3701), (1.625, 3119), (1.625, 2919), (1.625, 3714), (1.625, 3962), (1.625, 3791), (1.625, 2224), (1.625, 3731), (1.625, 3780), (1.625, 3850), (1.625, 3747), (1.625, 3778), (1.625, 3249), (1.625, 3307), (1.625, 3901), (1.5, 3946), (0.875, 3974)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3562
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3667
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3046
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3662
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3904
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 38]
[Computing fitness]
[(1.625, 4031), (1.625, 2789), (1.625, 2632), (1.625, 2619), (1.625, 3667), (1.625, 3115), (1.625, 3947), (1.625, 4079), (1.625, 3858), (1.625, 3775), (1.625, 2939), (1.625, 3835), (1.625, 2718), (1.625, 3672), (1.625, 2579), (1.625, 3993), (1.625, 3893), (1.625, 3584), (1.625, 4007), (1.625, 2520), (1.625, 4084), (1.625, 2568), (1.625, 3710), (1.625, 3594), (1.625, 3235), (1.625, 3409), (1.625, 3930), (1.625, 4009), (1.625, 3992), (1.625, 3851), (1.625, 2143), (1.625, 4078), (1.625, 4055), (1.625, 4042), (1.625, 3253), (1.625, 4013), (1.625, 3662), (1.625, 3339), (1.625, 3883), (1.625, 4025), (1.625, 3916), (1.625, 3794), (1.625, 3689), (1.625, 3988), (1.625, 3990), (1.625, 3360), (1.625, 4071), (1.625, 3817), (1.625, 3018), (1.625, 3949), (1.625, 2869), (1.625, 3430), (1.625, 3464), (1.625, 3802), (1.625, 3744), (1.625, 3983), (1.625, 4041), (1.625, 3680), (1.625, 3728), (1.625, 3623), (1.625, 3229), (1.625, 3906), (1.625, 3897), (1.625, 3892), (1.625, 3838), (1.625, 3230), (1.625, 2798), (1.625, 3657), (1.625, 4006), (1.625, 3825), (1.625, 3875), (1.625, 3201), (1.625, 3898), (1.625, 3957), (1.625, 3995), (1.625, 3396), (1.625, 2466), (1.625, 3379), (1.625, 2692), (1.625, 3852), (1.625, 3698), (1.625, 3252), (1.625, 3322), (1.625, 2804), (1.625, 3497), (1.625, 2857), (1.625, 3972), (1.625, 3954), (1.625, 3824), (1.625, 3415), (1.625, 3854), (1.625, 3878), (1.625, 3248), (1.625, 3958), (1.625, 1180), (1.625, 3857), (1.625, 4064), (1.625, 3081), (1.625, 3688), (1.625, 3975), (1.625, 3788), (1.625, 3822), (1.625, 4056), (1.625, 4057), (1.625, 3436), (1.625, 3821), (1.625, 3568), (1.625, 3859), (1.625, 3904), (1.625, 4046), (1.625, 2333), (1.625, 3467), (1.625, 3331), (1.625, 3912), (1.625, 3715), (1.625, 3853), (1.625, 3053), (1.625, 3486), (1.625, 2653), (1.625, 3472), (1.625, 3315), (1.625, 4024), (1.625, 3626), (1.625, 3448), (1.625, 4035), (1.625, 3706), (1.625, 3404), (1.625, 3738), (1.625, 3761), (1.625, 2926), (1.625, 3389), (1.625, 3447), (1.625, 3772), (1.625, 4023), (1.625, 3776), (1.625, 3602), (1.625, 3765), (1.625, 3907), (1.625, 4043), (1.625, 2773), (1.625, 3834), (1.625, 3135), (1.625, 3595), (1.625, 3798), (1.625, 4080), (1.625, 3645), (1.625, 3740), (1.625, 3923), (1.625, 4053), (1.625, 3963), (1.625, 4001), (1.625, 3633), (1.625, 3359), (1.625, 3886), (1.625, 3864), (1.625, 3999), (1.625, 3372), (1.625, 3247), (1.625, 4077), (1.625, 3600), (1.625, 3764), (1.625, 3599), (1.625, 3221), (1.625, 3796), (1.625, 3325), (1.625, 3288), (1.625, 3563), (1.625, 3227), (1.625, 3783), (1.625, 3900), (1.625, 3928), (1.625, 4066), (1.625, 3493), (1.625, 3371), (1.625, 4045), (1.625, 3931), (1.625, 3265), (1.625, 3562), (1.625, 3021), (1.625, 3979), (1.625, 4074), (1.625, 3724), (1.625, 3960), (1.625, 3994), (1.625, 2652), (1.625, 3267), (1.625, 3813), (1.625, 3634), (1.625, 2622), (1.625, 3733), (1.625, 3422), (1.625, 4070), (1.625, 3887), (1.625, 3454), (1.625, 3823), (1.625, 3607), (1.625, 3996), (1.625, 4022), (1.625, 4014), (1.625, 3758), (1.625, 3829), (1.625, 3918), (1.625, 3110), (1.625, 3489), (1.625, 3426), (1.625, 4004), (1.625, 4003), (1.625, 3934), (1.625, 3811), (1.625, 3122), (1.625, 4029), (1.625, 3981), (1.625, 3828), (1.625, 3429), (1.625, 3501), (1.625, 4050), (1.625, 2578), (1.625, 3903), (1.625, 3944), (1.625, 3933), (1.625, 4020), (1.625, 3902), (1.625, 3537), (1.625, 3970), (1.625, 3581), (1.625, 3807), (1.625, 3192), (1.625, 4054), (1.625, 4034), (1.625, 3937), (1.625, 2661), (1.625, 3567), (1.625, 3126), (1.625, 4021), (1.625, 3777), (1.625, 3453), (1.625, 3871), (1.625, 4085), (1.625, 3826), (1.625, 4059), (1.625, 3827), (1.625, 3936), (1.625, 2945), (1.625, 3910), (1.625, 3914), (1.625, 3921), (1.625, 3725), (1.625, 2870), (1.625, 4036), (1.625, 3488), (1.625, 4061), (1.625, 3690), (1.625, 3804), (1.625, 3961), (1.625, 4072), (1.625, 3590), (1.625, 3717), (1.625, 4062), (1.625, 3123), (1.625, 3869), (1.625, 3865), (1.625, 3884), (1.625, 4060), (1.625, 3718), (1.625, 3485), (1.625, 2518), (1.625, 3517), (1.625, 2826), (1.625, 3577), (1.625, 2560), (1.625, 3985), (1.625, 2739), (1.625, 4076), (1.625, 3882), (1.625, 3608), (1.625, 3502), (1.625, 3998), (1.625, 3971), (1.625, 2928), (1.625, 3806), (1.625, 2803), (1.625, 2845), (1.625, 3867), (1.625, 3557), (1.625, 3870), (1.625, 3402), (1.625, 2325), (1.625, 2525), (1.625, 3735), (1.625, 3941), (1.625, 3917), (1.625, 3684), (1.625, 3770), (1.625, 4028), (1.625, 3473), (1.625, 4068), (1.625, 2232), (1.625, 3896), (1.625, 3982), (1.625, 2877), (1.625, 3540), (1.625, 3536), (1.625, 3678), (1.625, 3953), (1.625, 3317), (1.625, 3833), (1.625, 3935), (1.625, 3414), (1.625, 3968), (1.625, 3638), (1.625, 3911), (1.625, 3335), (1.625, 4037), (1.625, 3955), (1.625, 3755), (1.625, 3609), (1.625, 2657), (1.625, 3038), (1.625, 3763), (1.625, 4069), (1.625, 2790), (1.625, 3889), (1.625, 4033), (1.625, 4051), (1.625, 3769), (1.625, 3316), (1.625, 2805), (1.625, 3301), (1.625, 3939), (1.625, 3702), (1.625, 3516), (1.625, 3266), (1.625, 3749), (1.625, 2552), (1.625, 3781), (1.625, 4081), (1.625, 3041), (1.625, 3915), (1.625, 2687), (1.625, 3888), (1.625, 3046), (1.625, 3965), (1.625, 4027), (1.625, 2563), (1.625, 3805), (1.625, 3408), (1.625, 3614), (1.625, 3991), (1.625, 3444), (1.625, 3653), (1.625, 3739), (1.625, 2838), (1.625, 3879), (1.625, 3819), (1.625, 4000), (1.625, 3697), (1.625, 3726), (1.625, 3966), (1.625, 3800), (1.625, 3754), (1.625, 3598), (1.625, 3495), (1.625, 2435), (1.625, 3959), (1.625, 3951), (1.625, 3481), (1.625, 4011), (1.625, 3063), (1.625, 3579), (1.625, 3919), (1.625, 2583), (1.625, 3658), (1.625, 3144), (1.625, 3543), (1.625, 3987), (1.625, 3881), (1.625, 4067), (1.625, 3494), (1.625, 3424), (1.625, 4083), (1.625, 3630), (1.625, 3986), (1.625, 3956), (1.625, 3403), (1.625, 3976), (1.625, 3535), (1.625, 4016), (1.625, 3768), (1.625, 3997), (1.625, 2740), (1.625, 3810), (1.625, 3150), (1.625, 3762), (1.625, 4039), (1.625, 3922), (1.625, 4008), (1.625, 4030), (1.625, 4005), (0.875, 4048), (0.875, 4018)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4031
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2789
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2632
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2619
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3667
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 39]
[Computing fitness]
[(1.625, 4090), (1.625, 4024), (1.625, 3994), (1.625, 3467), (1.625, 3998), (1.625, 3776), (1.625, 2692), (1.625, 4076), (1.625, 3897), (1.625, 4123), (1.625, 3963), (1.625, 3827), (1.625, 3590), (1.625, 4062), (1.625, 3517), (1.625, 3265), (1.625, 3941), (1.625, 3317), (1.625, 3430), (1.625, 3825), (1.625, 4110), (1.625, 3372), (1.625, 2739), (1.625, 3829), (1.625, 4119), (1.625, 3947), (1.625, 4068), (1.625, 4001), (1.625, 3667), (1.625, 3607), (1.625, 3955), (1.625, 3123), (1.625, 3322), (1.625, 3798), (1.625, 3834), (1.625, 4092), (1.625, 3717), (1.625, 3718), (1.625, 3824), (1.625, 4094), (1.625, 3982), (1.625, 2466), (1.625, 3584), (1.625, 2798), (1.625, 4173), (1.625, 4172), (1.625, 3235), (1.625, 4109), (1.625, 4069), (1.625, 3907), (1.625, 4003), (1.625, 3623), (1.625, 1180), (1.625, 3489), (1.625, 4174), (1.625, 3501), (1.625, 3325), (1.625, 3961), (1.625, 4053), (1.625, 4132), (1.625, 3409), (1.625, 4128), (1.625, 4045), (1.625, 4033), (1.625, 4046), (1.625, 3415), (1.625, 3870), (1.625, 2926), (1.625, 3021), (1.625, 4170), (1.625, 4097), (1.625, 3038), (1.625, 3902), (1.625, 2525), (1.625, 3975), (1.625, 3828), (1.625, 4059), (1.625, 3914), (1.625, 3970), (1.625, 4117), (1.625, 3594), (1.625, 4096), (1.625, 4113), (1.625, 3838), (1.625, 3823), (1.625, 2870), (1.625, 3688), (1.625, 3733), (1.625, 4158), (1.625, 4057), (1.625, 3985), (1.625, 4178), (1.625, 3772), (1.625, 4112), (1.625, 3359), (1.625, 4181), (1.625, 3972), (1.625, 4149), (1.625, 4127), (1.625, 4162), (1.625, 4147), (1.625, 4169), (1.625, 3882), (1.625, 3896), (1.625, 2845), (1.625, 3944), (1.625, 3775), (1.625, 4050), (1.625, 3992), (1.625, 2661), (1.625, 3248), (1.625, 3402), (1.625, 3993), (1.625, 3758), (1.625, 3811), (1.625, 3638), (1.625, 3911), (1.625, 3485), (1.625, 2945), (1.625, 3488), (1.625, 3600), (1.625, 3968), (1.625, 4007), (1.625, 3921), (1.625, 3937), (1.625, 4066), (1.625, 3864), (1.625, 3678), (1.625, 3931), (1.625, 3563), (1.625, 3426), (1.625, 3979), (1.625, 2325), (1.625, 3436), (1.625, 4168), (1.625, 3247), (1.625, 3903), (1.625, 3221), (1.625, 3018), (1.625, 3996), (1.625, 3396), (1.625, 2560), (1.625, 3645), (1.625, 3662), (1.625, 3949), (1.625, 4041), (1.625, 3577), (1.625, 3744), (1.625, 4064), (1.625, 4154), (1.625, 4078), (1.625, 3414), (1.625, 2143), (1.625, 4043), (1.625, 3253), (1.625, 3858), (1.625, 3429), (1.625, 3422), (1.625, 3053), (1.625, 2804), (1.625, 3912), (1.625, 2619), (1.625, 3473), (1.625, 3595), (1.625, 4144), (1.625, 3657), (1.625, 3878), (1.625, 4163), (1.625, 4130), (1.625, 4135), (1.625, 3898), (1.625, 3315), (1.625, 3910), (1.625, 4167), (1.625, 2232), (1.625, 3935), (1.625, 4031), (1.625, 4087), (1.625, 3794), (1.625, 3135), (1.625, 3229), (1.625, 3822), (1.625, 3835), (1.625, 3360), (1.625, 3857), (1.625, 3626), (1.625, 3735), (1.625, 3371), (1.625, 3464), (1.625, 3684), (1.625, 3869), (1.625, 4070), (1.625, 4021), (1.625, 4014), (1.625, 4176), (1.625, 4146), (1.625, 2622), (1.625, 3826), (1.625, 3995), (1.625, 4111), (1.625, 3537), (1.625, 4036), (1.625, 3999), (1.625, 3960), (1.625, 4085), (1.625, 3871), (1.625, 2857), (1.625, 3192), (1.625, 4086), (1.625, 3953), (1.625, 3889), (1.625, 3813), (1.625, 3689), (1.625, 4034), (1.625, 4055), (1.625, 4072), (1.625, 3448), (1.625, 3990), (1.625, 4042), (1.625, 3690), (1.625, 3887), (1.625, 4029), (1.625, 3806), (1.625, 2579), (1.625, 4061), (1.625, 3472), (1.625, 4107), (1.625, 3983), (1.625, 3230), (1.625, 3852), (1.625, 3502), (1.625, 4020), (1.625, 3568), (1.625, 4108), (1.625, 3886), (1.625, 4099), (1.625, 3930), (1.625, 3917), (1.625, 3672), (1.625, 4121), (1.625, 3854), (1.625, 3567), (1.625, 3698), (1.625, 2869), (1.625, 4035), (1.625, 3339), (1.625, 2939), (1.625, 3875), (1.625, 3904), (1.625, 3981), (1.625, 3609), (1.625, 4102), (1.625, 4153), (1.625, 3486), (1.625, 3802), (1.625, 3602), (1.625, 3783), (1.625, 4185), (1.625, 2578), (1.625, 4104), (1.625, 4074), (1.625, 4155), (1.625, 3710), (1.625, 4022), (1.625, 3916), (1.625, 3335), (1.625, 3770), (1.625, 2803), (1.625, 4133), (1.625, 3634), (1.625, 3988), (1.625, 3928), (1.625, 4142), (1.625, 3581), (1.625, 3796), (1.625, 3122), (1.625, 4013), (1.625, 3900), (1.625, 2718), (1.625, 4084), (1.625, 3110), (1.625, 3540), (1.625, 2632), (1.625, 3379), (1.625, 3934), (1.625, 4150), (1.625, 3252), (1.625, 3865), (1.625, 3777), (1.625, 3833), (1.625, 2568), (1.625, 4126), (1.625, 4056), (1.625, 2520), (1.625, 4140), (1.625, 4159), (1.625, 3227), (1.625, 4004), (1.625, 3906), (1.625, 3608), (1.625, 3267), (1.625, 3788), (1.625, 2652), (1.625, 3893), (1.625, 3936), (1.625, 4105), (1.625, 4077), (1.625, 3447), (1.625, 4009), (1.625, 4028), (1.625, 4023), (1.625, 3761), (1.625, 3765), (1.625, 3453), (1.625, 2826), (1.625, 3755), (1.625, 3851), (1.625, 3557), (1.625, 3884), (1.625, 3493), (1.625, 3725), (1.625, 3923), (1.625, 3859), (1.625, 2333), (1.625, 4160), (1.625, 4025), (1.625, 4114), (1.625, 2928), (1.625, 3115), (1.625, 4091), (1.625, 3633), (1.625, 3883), (1.625, 3933), (1.625, 3081), (1.625, 3769), (1.625, 3724), (1.625, 4137), (1.625, 4118), (1.625, 2657), (1.625, 4125), (1.625, 4006), (1.625, 3971), (1.625, 3817), (1.625, 3404), (1.625, 3599), (1.625, 2518), (1.625, 2773), (1.625, 4095), (1.625, 3562), (1.625, 2790), (1.625, 3389), (1.625, 3706), (1.625, 4156), (1.625, 3958), (1.625, 3957), (1.625, 4037), (1.625, 3763), (1.625, 4080), (1.625, 3954), (1.625, 4060), (1.625, 3728), (1.625, 3918), (1.625, 4101), (1.625, 3738), (1.625, 3497), (1.625, 3764), (1.625, 3892), (1.625, 3807), (1.625, 4141), (1.625, 3853), (1.625, 3740), (1.625, 3821), (1.625, 3536), (1.625, 3288), (1.625, 3715), (1.625, 4054), (1.625, 3126), (1.625, 3331), (1.625, 3201), (1.625, 4051), (1.625, 2789), (1.625, 4071), (1.625, 2653), (1.625, 4157), (1.625, 2877), (1.625, 3804), (1.625, 3680), (1.625, 4079), (1.625, 3454), (1.625, 4143), (1.625, 3867), (1.5, 4184), (1.375, 4164), (0.875, 4152), (0.875, 4139), (0.29166666666666663, 4166), (0.29166666666666663, 4116), (0.29166666666666663, 4089), (0.29166666666666663, 4183), (0.29166666666666663, 4180)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4090
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4024
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3994
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3467
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3998
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 40]
[Computing fitness]
[(1.625, 2826), (1.625, 4070), (1.625, 3402), (1.625, 3949), (1.625, 2333), (1.625, 3931), (1.625, 4226), (1.625, 2803), (1.625, 4099), (1.625, 3869), (1.625, 3886), (1.625, 3725), (1.625, 4132), (1.625, 3827), (1.625, 3339), (1.625, 3379), (1.625, 3110), (1.625, 3517), (1.625, 3825), (1.625, 4219), (1.625, 4269), (1.625, 3429), (1.625, 3735), (1.625, 4108), (1.625, 4087), (1.625, 4185), (1.625, 3824), (1.625, 3813), (1.625, 3557), (1.625, 3626), (1.625, 3896), (1.625, 4121), (1.625, 4035), (1.625, 4119), (1.625, 4238), (1.625, 3961), (1.625, 4086), (1.625, 3852), (1.625, 4285), (1.625, 4128), (1.625, 3822), (1.625, 3937), (1.625, 4261), (1.625, 3230), (1.625, 3935), (1.625, 4216), (1.625, 4113), (1.625, 4230), (1.625, 3602), (1.625, 3486), (1.625, 4123), (1.625, 3947), (1.625, 4077), (1.625, 3733), (1.625, 2870), (1.625, 3990), (1.625, 4021), (1.625, 3982), (1.625, 4271), (1.625, 4084), (1.625, 4211), (1.625, 3775), (1.625, 3472), (1.625, 3993), (1.625, 3600), (1.625, 3916), (1.625, 4130), (1.625, 4268), (1.625, 4159), (1.625, 4217), (1.625, 3960), (1.625, 4105), (1.625, 4050), (1.625, 4172), (1.625, 4020), (1.625, 3755), (1.625, 3577), (1.625, 4221), (1.625, 3857), (1.625, 3998), (1.625, 3192), (1.625, 4259), (1.625, 3540), (1.625, 4193), (1.625, 3662), (1.625, 3826), (1.625, 3884), (1.625, 4135), (1.625, 3252), (1.625, 3865), (1.625, 3717), (1.625, 3981), (1.625, 2661), (1.625, 4056), (1.625, 3979), (1.625, 4181), (1.625, 3563), (1.625, 4045), (1.625, 4266), (1.625, 4072), (1.625, 4246), (1.625, 4284), (1.625, 3053), (1.625, 4042), (1.625, 4127), (1.625, 3584), (1.625, 3135), (1.625, 3227), (1.625, 4097), (1.625, 4192), (1.625, 4154), (1.625, 4274), (1.625, 3833), (1.625, 4147), (1.625, 3900), (1.625, 4256), (1.625, 3718), (1.625, 3898), (1.625, 3609), (1.625, 4111), (1.625, 4167), (1.625, 4174), (1.625, 2520), (1.625, 3917), (1.625, 3710), (1.625, 3021), (1.625, 4158), (1.625, 3776), (1.625, 4260), (1.625, 2143), (1.625, 3761), (1.625, 1180), (1.625, 3608), (1.625, 3360), (1.625, 3834), (1.625, 4102), (1.625, 3489), (1.625, 4282), (1.625, 2568), (1.625, 2579), (1.625, 4253), (1.625, 4107), (1.625, 4142), (1.625, 3798), (1.625, 2804), (1.625, 3335), (1.625, 2578), (1.625, 4149), (1.625, 4163), (1.625, 3672), (1.625, 4057), (1.625, 3322), (1.625, 4209), (1.625, 4218), (1.625, 4231), (1.625, 3823), (1.625, 4041), (1.625, 3537), (1.625, 3975), (1.625, 4068), (1.625, 3828), (1.625, 4173), (1.625, 4062), (1.625, 3921), (1.625, 3934), (1.625, 4023), (1.625, 4031), (1.625, 3267), (1.625, 3871), (1.625, 4009), (1.625, 3835), (1.625, 3247), (1.625, 3501), (1.625, 2619), (1.625, 3467), (1.625, 4046), (1.625, 3794), (1.625, 2945), (1.625, 3995), (1.625, 3864), (1.625, 3851), (1.625, 3854), (1.625, 3568), (1.625, 4004), (1.625, 4276), (1.625, 4036), (1.625, 4090), (1.625, 2325), (1.625, 4109), (1.625, 4191), (1.625, 3758), (1.625, 4234), (1.625, 3684), (1.625, 3667), (1.625, 4140), (1.625, 4264), (1.625, 4245), (1.625, 3123), (1.625, 4280), (1.625, 2926), (1.625, 2939), (1.625, 4187), (1.625, 3325), (1.625, 4206), (1.625, 2739), (1.625, 3887), (1.625, 4085), (1.625, 3988), (1.625, 3893), (1.625, 3878), (1.625, 3594), (1.625, 3914), (1.625, 3253), (1.625, 4283), (1.625, 2869), (1.625, 3473), (1.625, 4233), (1.625, 3371), (1.625, 3502), (1.625, 4235), (1.625, 3902), (1.625, 3744), (1.625, 2798), (1.625, 3229), (1.625, 4110), (1.625, 4013), (1.625, 3829), (1.625, 4022), (1.625, 4215), (1.625, 3453), (1.625, 2466), (1.625, 3409), (1.625, 3802), (1.625, 4160), (1.625, 3968), (1.625, 4074), (1.625, 3928), (1.625, 4112), (1.625, 3447), (1.625, 4104), (1.625, 4262), (1.625, 3906), (1.625, 3772), (1.625, 4236), (1.625, 3955), (1.625, 3122), (1.625, 3859), (1.625, 3875), (1.625, 4126), (1.625, 4144), (1.625, 4033), (1.625, 3018), (1.625, 3623), (1.625, 4150), (1.625, 3963), (1.625, 4258), (1.625, 3689), (1.625, 3992), (1.625, 3941), (1.625, 4014), (1.625, 3953), (1.625, 2652), (1.625, 4176), (1.625, 4001), (1.625, 4286), (1.625, 3485), (1.625, 3448), (1.625, 4248), (1.625, 3912), (1.625, 3698), (1.625, 3590), (1.625, 3638), (1.625, 4168), (1.625, 2232), (1.625, 2857), (1.625, 4028), (1.625, 3783), (1.625, 3936), (1.625, 3983), (1.625, 3265), (1.625, 4061), (1.625, 3911), (1.625, 4213), (1.625, 3359), (1.625, 4190), (1.625, 4055), (1.625, 3970), (1.625, 3994), (1.625, 4208), (1.625, 4197), (1.625, 4024), (1.625, 4034), (1.625, 4265), (1.625, 3430), (1.625, 4003), (1.625, 4189), (1.625, 3038), (1.625, 3972), (1.625, 4029), (1.625, 4170), (1.625, 3415), (1.625, 4263), (1.625, 3372), (1.625, 4162), (1.625, 3595), (1.625, 3930), (1.625, 3426), (1.625, 3317), (1.625, 3777), (1.625, 2525), (1.625, 4155), (1.625, 4078), (1.625, 4066), (1.625, 3678), (1.625, 3897), (1.625, 3904), (1.625, 3607), (1.625, 3765), (1.625, 2560), (1.625, 4257), (1.625, 3806), (1.625, 4069), (1.625, 3315), (1.625, 3464), (1.625, 4117), (1.625, 3567), (1.625, 3770), (1.625, 4195), (1.625, 3248), (1.625, 2622), (1.625, 3796), (1.625, 3858), (1.625, 4273), (1.625, 3870), (1.625, 3422), (1.625, 4043), (1.625, 3688), (1.625, 3221), (1.625, 3811), (1.625, 4153), (1.625, 3838), (1.625, 3882), (1.625, 4064), (1.625, 3581), (1.625, 4178), (1.625, 4278), (1.625, 4094), (1.625, 2632), (1.625, 4210), (1.625, 3690), (1.625, 4255), (1.625, 3907), (1.625, 2692), (1.625, 3788), (1.625, 4229), (1.625, 3235), (1.625, 4133), (1.625, 4059), (1.625, 4250), (1.625, 3923), (1.625, 3889), (1.625, 4092), (1.625, 4224), (1.625, 4201), (1.625, 3910), (1.625, 4076), (1.625, 3985), (1.625, 4200), (1.625, 3645), (1.625, 3436), (1.625, 4007), (1.625, 4241), (1.625, 4169), (1.625, 2718), (1.625, 4146), (1.625, 3903), (1.625, 3944), (1.625, 3657), (1.625, 4096), (1.625, 3414), (1.625, 3396), (1.625, 2845), (1.625, 3634), (1.625, 3493), (1.625, 4272), (1.625, 4281), (1.625, 3488), (1.625, 3999), (1.625, 4242), (1.625, 4053), (1.625, 3996), (1.375, 4237), (0.875, 4252), (0.875, 4205), (0.875, 4199), (0.875, 4223), (0.875, 4244), (0.875, 4228), (0.875, 4240), (0.29166666666666663, 4203)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2826
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4070
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3402
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3949
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 41]
[Computing fitness]
[(1.625, 4050), (1.625, 4340), (1.625, 4069), (1.625, 4248), (1.625, 3317), (1.625, 2579), (1.625, 4336), (1.625, 3464), (1.625, 4274), (1.625, 3448), (1.625, 3947), (1.625, 2325), (1.625, 4036), (1.625, 4383), (1.625, 3372), (1.625, 4327), (1.625, 4373), (1.625, 4290), (1.625, 4191), (1.625, 3623), (1.625, 4209), (1.625, 4109), (1.625, 3725), (1.625, 3755), (1.625, 4285), (1.625, 3602), (1.625, 4362), (1.625, 3489), (1.625, 4170), (1.625, 4260), (1.625, 3227), (1.625, 3794), (1.625, 4105), (1.625, 3517), (1.625, 3852), (1.625, 4259), (1.625, 3485), (1.625, 4062), (1.625, 4317), (1.625, 4316), (1.625, 4335), (1.625, 3689), (1.625, 3638), (1.625, 4367), (1.625, 4258), (1.625, 3122), (1.625, 4338), (1.625, 4271), (1.625, 4068), (1.625, 3827), (1.625, 3921), (1.625, 4355), (1.625, 3995), (1.625, 4181), (1.625, 4031), (1.625, 3928), (1.625, 4135), (1.625, 3607), (1.625, 4024), (1.625, 4218), (1.625, 3486), (1.625, 4123), (1.625, 3540), (1.625, 4257), (1.625, 4385), (1.625, 3884), (1.625, 4369), (1.625, 3415), (1.625, 2232), (1.625, 3339), (1.625, 3931), (1.625, 4266), (1.625, 2560), (1.625, 4022), (1.625, 1180), (1.625, 4348), (1.625, 3990), (1.625, 3864), (1.625, 3718), (1.625, 4046), (1.625, 3992), (1.625, 4189), (1.625, 4330), (1.625, 4282), (1.625, 3600), (1.625, 3192), (1.625, 3979), (1.625, 4055), (1.625, 4310), (1.625, 3053), (1.625, 3829), (1.625, 4013), (1.625, 3824), (1.625, 4386), (1.625, 4003), (1.625, 3802), (1.625, 3123), (1.625, 4263), (1.625, 4077), (1.625, 4001), (1.625, 3993), (1.625, 3835), (1.625, 2870), (1.625, 4234), (1.625, 4057), (1.625, 3914), (1.625, 3426), (1.625, 4110), (1.625, 3949), (1.625, 4033), (1.625, 4130), (1.625, 4346), (1.625, 3776), (1.625, 3744), (1.625, 3379), (1.625, 4097), (1.625, 3936), (1.625, 4084), (1.625, 4111), (1.625, 3961), (1.625, 3322), (1.625, 4261), (1.625, 4365), (1.625, 3983), (1.625, 4280), (1.625, 3783), (1.625, 4352), (1.625, 4364), (1.625, 4159), (1.625, 3897), (1.625, 3467), (1.625, 4304), (1.625, 3229), (1.625, 3813), (1.625, 3453), (1.625, 3698), (1.625, 4384), (1.625, 4235), (1.625, 3806), (1.625, 3502), (1.625, 4374), (1.625, 3247), (1.625, 3994), (1.625, 3982), (1.625, 3678), (1.625, 4300), (1.625, 4233), (1.625, 4226), (1.625, 2945), (1.625, 3626), (1.625, 4380), (1.625, 4197), (1.625, 4155), (1.625, 3110), (1.625, 4388), (1.625, 3934), (1.625, 3359), (1.625, 3916), (1.625, 4142), (1.625, 2525), (1.625, 4305), (1.625, 3672), (1.625, 4236), (1.625, 3409), (1.625, 3896), (1.625, 3325), (1.625, 4297), (1.625, 4158), (1.625, 3886), (1.625, 4107), (1.625, 4162), (1.625, 4034), (1.625, 3608), (1.625, 2333), (1.625, 2939), (1.625, 4342), (1.625, 4190), (1.625, 3038), (1.625, 4009), (1.625, 4127), (1.625, 4187), (1.625, 4231), (1.625, 3733), (1.625, 4312), (1.625, 4265), (1.625, 3930), (1.625, 2826), (1.625, 2520), (1.625, 3798), (1.625, 4172), (1.625, 3577), (1.625, 3968), (1.625, 4238), (1.625, 4331), (1.625, 4221), (1.625, 3402), (1.625, 4119), (1.625, 4332), (1.625, 4208), (1.625, 4160), (1.625, 3761), (1.625, 4353), (1.625, 2568), (1.625, 4230), (1.625, 3988), (1.625, 3584), (1.625, 3717), (1.625, 4112), (1.625, 4288), (1.625, 4163), (1.625, 3975), (1.625, 2798), (1.625, 4041), (1.625, 4023), (1.625, 4087), (1.625, 4339), (1.625, 3253), (1.625, 4286), (1.625, 4318), (1.625, 3865), (1.625, 4354), (1.625, 4307), (1.625, 4309), (1.625, 3335), (1.625, 4358), (1.625, 4289), (1.625, 3775), (1.625, 3854), (1.625, 4276), (1.625, 3911), (1.625, 3360), (1.625, 4323), (1.625, 4154), (1.625, 3590), (1.625, 4293), (1.625, 4004), (1.625, 3826), (1.625, 3021), (1.625, 4167), (1.625, 3758), (1.625, 3265), (1.625, 2804), (1.625, 2739), (1.625, 4176), (1.625, 4061), (1.625, 3777), (1.625, 3765), (1.625, 4211), (1.625, 4253), (1.625, 4117), (1.625, 2619), (1.625, 4042), (1.625, 4072), (1.625, 4168), (1.625, 4268), (1.625, 4387), (1.625, 3472), (1.625, 3917), (1.625, 4173), (1.625, 2578), (1.625, 3941), (1.625, 3887), (1.625, 4302), (1.625, 4140), (1.625, 3912), (1.625, 3970), (1.625, 3981), (1.625, 4193), (1.625, 4314), (1.625, 3878), (1.625, 4028), (1.625, 3371), (1.625, 3900), (1.625, 4102), (1.625, 3447), (1.625, 3875), (1.625, 2466), (1.625, 2143), (1.625, 4333), (1.625, 3501), (1.625, 4215), (1.625, 3935), (1.625, 4213), (1.625, 4078), (1.625, 4185), (1.625, 3904), (1.625, 4021), (1.625, 4357), (1.625, 3662), (1.625, 4219), (1.625, 3955), (1.625, 4301), (1.625, 3902), (1.625, 4132), (1.625, 4035), (1.625, 4217), (1.625, 3906), (1.625, 3937), (1.625, 4029), (1.625, 3684), (1.625, 4325), (1.625, 3869), (1.625, 4090), (1.625, 4246), (1.625, 3871), (1.625, 4375), (1.625, 4056), (1.625, 4121), (1.625, 2857), (1.625, 4370), (1.625, 4321), (1.625, 2661), (1.625, 4311), (1.625, 3772), (1.625, 2869), (1.625, 4206), (1.625, 3537), (1.625, 3473), (1.625, 3018), (1.625, 4341), (1.625, 3828), (1.625, 4104), (1.625, 4020), (1.625, 3834), (1.625, 4128), (1.625, 2652), (1.625, 3710), (1.625, 4343), (1.625, 3595), (1.625, 4245), (1.625, 4074), (1.625, 4361), (1.625, 3252), (1.625, 4269), (1.625, 3563), (1.625, 4216), (1.625, 3735), (1.625, 3315), (1.625, 4099), (1.625, 4113), (1.625, 4174), (1.625, 3825), (1.625, 4066), (1.625, 4014), (1.625, 3998), (1.625, 4284), (1.625, 4359), (1.625, 4379), (1.625, 3893), (1.625, 4360), (1.625, 3953), (1.625, 4126), (1.625, 3960), (1.625, 4264), (1.625, 3859), (1.625, 3667), (1.625, 3429), (1.625, 4085), (1.625, 3594), (1.625, 4262), (1.625, 4292), (1.625, 4147), (1.625, 2803), (1.625, 4150), (1.625, 3898), (1.625, 4144), (1.625, 3568), (1.625, 3609), (1.625, 3822), (1.625, 3857), (1.625, 3135), (1.625, 4347), (1.625, 4382), (1.625, 4377), (1.625, 3833), (1.625, 4350), (1.625, 3963), (1.625, 3972), (1.625, 3851), (1.625, 4149), (1.625, 3823), (1.625, 4086), (1.625, 4070), (1.625, 4108), (1.625, 3267), (1.625, 4283), (1.625, 4256), (1.625, 4291), (1.625, 4192), (1.625, 3430), (1.625, 2926), (1.625, 3557), (1.625, 4045), (1.625, 3230), (0.875, 4372), (0.875, 4295), (0.875, 4320), (0.29166666666666663, 4329), (0.29166666666666663, 4299), (0.29166666666666663, 4345)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4050
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4340
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4069
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4248
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 42]
[Computing fitness]
[(1.625, 4333), (1.625, 4406), (1.625, 2869), (1.625, 4042), (1.625, 4480), (1.625, 4069), (1.625, 3265), (1.625, 3911), (1.625, 4236), (1.625, 4023), (1.625, 3993), (1.625, 2798), (1.625, 3317), (1.625, 4420), (1.625, 4409), (1.625, 4046), (1.625, 4050), (1.625, 2333), (1.625, 3517), (1.625, 4297), (1.625, 4317), (1.625, 4355), (1.625, 3607), (1.625, 4029), (1.625, 4383), (1.625, 3772), (1.625, 3834), (1.625, 4394), (1.625, 4418), (1.625, 4282), (1.625, 4031), (1.625, 4104), (1.625, 3018), (1.625, 4430), (1.625, 4127), (1.625, 3339), (1.625, 3886), (1.625, 3689), (1.625, 4290), (1.625, 3360), (1.625, 4001), (1.625, 4346), (1.625, 4435), (1.625, 4035), (1.625, 4004), (1.625, 4374), (1.625, 4373), (1.625, 4170), (1.625, 2945), (1.625, 4338), (1.625, 4159), (1.625, 4429), (1.625, 4300), (1.625, 3902), (1.625, 4461), (1.625, 3758), (1.625, 4402), (1.625, 3253), (1.625, 3775), (1.625, 4160), (1.625, 3813), (1.625, 4393), (1.625, 3464), (1.625, 4213), (1.625, 4208), (1.625, 4399), (1.625, 4331), (1.625, 2939), (1.625, 3988), (1.625, 2232), (1.625, 3502), (1.625, 4248), (1.625, 4416), (1.625, 4367), (1.625, 3110), (1.625, 2857), (1.625, 3335), (1.625, 3372), (1.625, 3467), (1.625, 4021), (1.625, 4084), (1.625, 3776), (1.625, 3662), (1.625, 4405), (1.625, 4206), (1.625, 3426), (1.625, 4117), (1.625, 4128), (1.625, 4246), (1.625, 4428), (1.625, 4421), (1.625, 3761), (1.625, 4022), (1.625, 4311), (1.625, 3829), (1.625, 3755), (1.625, 4473), (1.625, 4312), (1.625, 3626), (1.625, 3884), (1.625, 4463), (1.625, 4357), (1.625, 2568), (1.625, 3678), (1.625, 4218), (1.625, 4293), (1.625, 4162), (1.625, 4403), (1.625, 3718), (1.625, 3486), (1.625, 3992), (1.625, 3955), (1.625, 4413), (1.625, 3916), (1.625, 4276), (1.625, 3501), (1.625, 4036), (1.625, 2578), (1.625, 2661), (1.625, 3824), (1.625, 4325), (1.625, 4484), (1.625, 3227), (1.625, 4410), (1.625, 3994), (1.625, 3590), (1.625, 4057), (1.625, 2466), (1.625, 4423), (1.625, 4412), (1.625, 4211), (1.625, 3935), (1.625, 3744), (1.625, 4154), (1.625, 4470), (1.625, 4411), (1.625, 4465), (1.625, 4119), (1.625, 4388), (1.625, 4305), (1.625, 4041), (1.625, 3975), (1.625, 3359), (1.625, 2619), (1.625, 4462), (1.625, 3854), (1.625, 4458), (1.625, 3600), (1.625, 3777), (1.625, 3930), (1.625, 4479), (1.625, 3794), (1.625, 4432), (1.625, 4235), (1.625, 4302), (1.625, 4391), (1.625, 3608), (1.625, 4477), (1.625, 2579), (1.625, 4426), (1.625, 4358), (1.625, 4234), (1.625, 4314), (1.625, 4327), (1.625, 4068), (1.625, 3914), (1.625, 4189), (1.625, 4450), (1.625, 3947), (1.625, 4408), (1.625, 4215), (1.625, 4288), (1.625, 3828), (1.625, 4111), (1.625, 4193), (1.625, 4107), (1.625, 4173), (1.625, 3638), (1.625, 4414), (1.625, 4268), (1.625, 4304), (1.625, 4448), (1.625, 4024), (1.625, 2870), (1.625, 3379), (1.625, 4191), (1.625, 4457), (1.625, 4365), (1.625, 4483), (1.625, 3968), (1.625, 2520), (1.625, 4130), (1.625, 4469), (1.625, 4280), (1.625, 4163), (1.625, 3783), (1.625, 4123), (1.625, 3912), (1.625, 3806), (1.625, 3869), (1.625, 3827), (1.625, 4472), (1.625, 3936), (1.625, 4407), (1.625, 4274), (1.625, 2804), (1.625, 4077), (1.625, 4266), (1.625, 4135), (1.625, 3931), (1.625, 2826), (1.625, 4231), (1.625, 4265), (1.625, 4087), (1.625, 4476), (1.625, 3983), (1.625, 4362), (1.625, 4172), (1.625, 4478), (1.625, 4061), (1.625, 4364), (1.625, 3921), (1.625, 4370), (1.625, 4230), (1.625, 4375), (1.625, 4452), (1.625, 3937), (1.625, 4444), (1.625, 3717), (1.625, 4354), (1.625, 3897), (1.625, 4459), (1.625, 4309), (1.625, 4316), (1.625, 4219), (1.625, 4387), (1.625, 3835), (1.625, 2739), (1.625, 3941), (1.625, 4003), (1.625, 4323), (1.625, 3229), (1.625, 4121), (1.625, 4033), (1.625, 3409), (1.625, 3325), (1.625, 4353), (1.625, 3540), (1.625, 4034), (1.625, 3038), (1.625, 3802), (1.625, 4105), (1.625, 3322), (1.625, 4258), (1.625, 4261), (1.625, 4386), (1.625, 3192), (1.625, 4437), (1.625, 3981), (1.625, 4467), (1.625, 4352), (1.625, 4335), (1.625, 4190), (1.625, 4090), (1.625, 3602), (1.625, 4185), (1.625, 4392), (1.625, 4446), (1.625, 3415), (1.625, 4301), (1.625, 4167), (1.625, 4097), (1.625, 4233), (1.625, 3473), (1.625, 3982), (1.625, 4285), (1.625, 3928), (1.625, 4396), (1.625, 3970), (1.625, 4132), (1.625, 4400), (1.625, 4340), (1.625, 4028), (1.625, 4187), (1.625, 4055), (1.625, 4384), (1.625, 4341), (1.625, 3472), (1.625, 4221), (1.625, 3453), (1.625, 3875), (1.625, 4286), (1.625, 4020), (1.625, 3489), (1.625, 3979), (1.625, 4342), (1.625, 3672), (1.625, 3448), (1.625, 1180), (1.625, 4289), (1.625, 4271), (1.625, 4336), (1.625, 4310), (1.625, 2560), (1.625, 3371), (1.625, 4226), (1.625, 4466), (1.625, 4451), (1.625, 4140), (1.625, 3537), (1.625, 4474), (1.625, 4321), (1.625, 3584), (1.625, 4482), (1.625, 4078), (1.625, 4259), (1.625, 3247), (1.625, 4438), (1.625, 3485), (1.625, 4475), (1.625, 4433), (1.625, 3402), (1.625, 4110), (1.625, 4013), (1.625, 4455), (1.625, 4395), (1.625, 4181), (1.625, 4424), (1.625, 4440), (1.625, 3826), (1.625, 4072), (1.625, 4434), (1.625, 3684), (1.625, 4332), (1.625, 4260), (1.625, 3934), (1.625, 3961), (1.625, 3623), (1.625, 2525), (1.625, 4263), (1.625, 3871), (1.625, 3733), (1.625, 4217), (1.625, 2325), (1.625, 3990), (1.625, 4318), (1.625, 3878), (1.625, 4209), (1.625, 4389), (1.625, 4009), (1.625, 3122), (1.625, 4348), (1.625, 3725), (1.625, 4453), (1.625, 4385), (1.625, 3887), (1.625, 4390), (1.625, 3447), (1.625, 3896), (1.625, 3798), (1.625, 3765), (1.625, 4369), (1.625, 4253), (1.625, 3949), (1.625, 4238), (1.625, 3123), (1.625, 4330), (1.625, 4339), (1.625, 3021), (1.625, 4155), (1.625, 4197), (1.625, 4380), (1.625, 4056), (1.625, 4176), (1.625, 4460), (1.625, 3904), (1.625, 3917), (1.625, 2143), (1.625, 3864), (1.625, 4102), (1.625, 4257), (1.625, 4436), (1.625, 3698), (1.625, 4062), (1.625, 3865), (1.625, 3053), (1.625, 4168), (1.625, 3995), (1.625, 4307), (1.625, 3906), (1.625, 4109), (1.625, 4112), (1.625, 3900), (1.625, 4158), (1.625, 4142), (1.625, 3852), (1.625, 4468), (1.625, 3577), (0.875, 4398), (0, 4442)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4406
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2869
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4042
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4480
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 43]
[Computing fitness]
[(1.625, 4507), (1.625, 4107), (1.625, 4028), (1.625, 2579), (1.625, 2826), (1.625, 3489), (1.625, 3828), (1.625, 4426), (1.625, 4050), (1.625, 4297), (1.625, 4023), (1.625, 4561), (1.625, 4506), (1.625, 3886), (1.625, 4274), (1.625, 3359), (1.625, 3662), (1.625, 4162), (1.625, 3253), (1.625, 4163), (1.625, 4057), (1.625, 3970), (1.625, 4537), (1.625, 4438), (1.625, 3928), (1.625, 3982), (1.625, 4305), (1.625, 4206), (1.625, 3247), (1.625, 4061), (1.625, 4486), (1.625, 4246), (1.625, 4402), (1.625, 4459), (1.625, 3678), (1.625, 4583), (1.625, 3626), (1.625, 4068), (1.625, 4450), (1.625, 4452), (1.625, 4488), (1.625, 4193), (1.625, 4563), (1.625, 4541), (1.625, 4513), (1.625, 4384), (1.625, 4564), (1.625, 2333), (1.625, 4304), (1.625, 3379), (1.625, 4130), (1.625, 4111), (1.625, 4035), (1.625, 4428), (1.625, 3718), (1.625, 4558), (1.625, 4312), (1.625, 4208), (1.625, 3776), (1.625, 4140), (1.625, 4490), (1.625, 4387), (1.625, 4190), (1.625, 4472), (1.625, 3911), (1.625, 4532), (1.625, 2939), (1.625, 4545), (1.625, 3473), (1.625, 4393), (1.625, 4375), (1.625, 3672), (1.625, 4069), (1.625, 4423), (1.625, 4117), (1.625, 3931), (1.625, 4189), (1.625, 4483), (1.625, 4333), (1.625, 3402), (1.625, 3638), (1.625, 3988), (1.625, 4110), (1.625, 4128), (1.625, 3415), (1.625, 3914), (1.625, 4539), (1.625, 4077), (1.625, 3935), (1.625, 4549), (1.625, 4512), (1.625, 4327), (1.625, 4521), (1.625, 4497), (1.625, 3229), (1.625, 2661), (1.625, 4024), (1.625, 3372), (1.625, 4548), (1.625, 4335), (1.625, 4480), (1.625, 4219), (1.625, 4331), (1.625, 4409), (1.625, 4317), (1.625, 3775), (1.625, 4370), (1.625, 4484), (1.625, 4226), (1.625, 4215), (1.625, 2232), (1.625, 4127), (1.625, 4191), (1.625, 4555), (1.625, 4455), (1.625, 4581), (1.625, 3371), (1.625, 3794), (1.625, 4473), (1.625, 3607), (1.625, 4154), (1.625, 4311), (1.625, 3517), (1.625, 3947), (1.625, 4218), (1.625, 4542), (1.625, 4571), (1.625, 4429), (1.625, 2945), (1.625, 4041), (1.625, 4013), (1.625, 3453), (1.625, 4362), (1.625, 4414), (1.625, 4396), (1.625, 4234), (1.625, 4316), (1.625, 3968), (1.625, 4276), (1.625, 4517), (1.625, 4364), (1.625, 3110), (1.625, 4235), (1.625, 4289), (1.625, 3875), (1.625, 4510), (1.625, 4221), (1.625, 4087), (1.625, 4511), (1.625, 3448), (1.625, 3813), (1.625, 3758), (1.625, 4566), (1.625, 4582), (1.625, 3192), (1.625, 3608), (1.625, 4524), (1.625, 4560), (1.625, 4034), (1.625, 4346), (1.625, 4495), (1.625, 3869), (1.625, 4300), (1.625, 4444), (1.625, 4577), (1.625, 4293), (1.625, 4367), (1.625, 4466), (1.625, 4266), (1.625, 4004), (1.625, 4448), (1.625, 4579), (1.625, 3360), (1.625, 4314), (1.625, 3501), (1.625, 3018), (1.625, 4446), (1.625, 4391), (1.625, 4463), (1.625, 1180), (1.625, 4172), (1.625, 4185), (1.625, 3916), (1.625, 3540), (1.625, 4336), (1.625, 3992), (1.625, 4519), (1.625, 4280), (1.625, 4029), (1.625, 4078), (1.625, 4462), (1.625, 4248), (1.625, 4518), (1.625, 4392), (1.625, 4119), (1.625, 4550), (1.625, 3975), (1.625, 3777), (1.625, 3981), (1.625, 4213), (1.625, 4123), (1.625, 2869), (1.625, 3485), (1.625, 3854), (1.625, 4493), (1.625, 4405), (1.625, 3921), (1.625, 4353), (1.625, 4547), (1.625, 4482), (1.625, 3322), (1.625, 4435), (1.625, 4160), (1.625, 3835), (1.625, 4354), (1.625, 3979), (1.625, 4055), (1.625, 3537), (1.625, 4505), (1.625, 3761), (1.625, 4570), (1.625, 4357), (1.625, 2568), (1.625, 4540), (1.625, 3472), (1.625, 4231), (1.625, 3486), (1.625, 4503), (1.625, 4173), (1.625, 3409), (1.625, 4341), (1.625, 4261), (1.625, 4565), (1.625, 4046), (1.625, 4418), (1.625, 3590), (1.625, 4432), (1.625, 4282), (1.625, 4531), (1.625, 4090), (1.625, 3464), (1.625, 4042), (1.625, 4530), (1.625, 4568), (1.625, 4285), (1.625, 4003), (1.625, 4494), (1.625, 4230), (1.625, 3983), (1.625, 4290), (1.625, 3317), (1.625, 3824), (1.625, 4170), (1.625, 4546), (1.625, 3717), (1.625, 4476), (1.625, 2739), (1.625, 3600), (1.625, 4556), (1.625, 4340), (1.625, 4135), (1.625, 4187), (1.625, 4523), (1.625, 3335), (1.625, 4458), (1.625, 4258), (1.625, 4105), (1.625, 4467), (1.625, 4373), (1.625, 4509), (1.625, 4522), (1.625, 3897), (1.625, 4544), (1.625, 4388), (1.625, 4358), (1.625, 4321), (1.625, 4259), (1.625, 4386), (1.625, 4416), (1.625, 2619), (1.625, 3602), (1.625, 3467), (1.625, 4288), (1.625, 4104), (1.625, 4413), (1.625, 4457), (1.625, 4421), (1.625, 2804), (1.625, 4132), (1.625, 4478), (1.625, 3955), (1.625, 2520), (1.625, 4236), (1.625, 4573), (1.625, 3265), (1.625, 3339), (1.625, 4477), (1.625, 4342), (1.625, 4121), (1.625, 4479), (1.625, 4528), (1.625, 4271), (1.625, 3829), (1.625, 4286), (1.625, 4302), (1.625, 3783), (1.625, 4501), (1.625, 4309), (1.625, 4559), (1.625, 4399), (1.625, 4159), (1.625, 4420), (1.625, 4352), (1.625, 4508), (1.625, 4574), (1.625, 4036), (1.625, 4407), (1.625, 4491), (1.625, 4400), (1.625, 3912), (1.625, 4433), (1.625, 4408), (1.625, 4033), (1.625, 4475), (1.625, 3426), (1.625, 4338), (1.625, 4365), (1.625, 3994), (1.625, 2870), (1.625, 4394), (1.625, 3941), (1.625, 4474), (1.625, 4410), (1.625, 4465), (1.625, 4167), (1.625, 3993), (1.625, 4084), (1.625, 2578), (1.625, 4552), (1.625, 3902), (1.625, 4097), (1.625, 3827), (1.625, 4233), (1.625, 4020), (1.625, 4022), (1.625, 4301), (1.625, 4543), (1.625, 3936), (1.625, 3834), (1.625, 4469), (1.625, 3038), (1.625, 3802), (1.625, 4470), (1.625, 3227), (1.625, 4310), (1.625, 4021), (1.625, 4268), (1.625, 4406), (1.625, 3806), (1.625, 4461), (1.625, 4575), (1.625, 3744), (1.625, 4001), (1.625, 2466), (1.625, 4383), (1.625, 3689), (1.625, 3502), (1.625, 4374), (1.625, 4403), (1.625, 4499), (1.625, 4502), (1.625, 4412), (1.625, 4437), (1.625, 3772), (1.625, 4526), (1.625, 4265), (1.625, 4211), (1.625, 3937), (1.625, 4031), (1.625, 4355), (1.625, 4430), (1.625, 4323), (1.625, 4578), (1.625, 4451), (1.625, 3930), (1.625, 4325), (1.625, 2560), (1.625, 3755), (1.625, 2857), (1.625, 4411), (1.625, 4489), (1.625, 2798), (1.625, 3325), (1.625, 3884), (1.625, 3584), (1.625, 4536), (1.5, 4498), (0.29166666666666663, 4534), (0.29166666666666663, 4515), (0.29166666666666663, 4554)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4507
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4107
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4028
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2579
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 2826
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 44]
[Computing fitness]
[(1.625, 4503), (1.625, 4635), (1.625, 4501), (1.625, 4215), (1.625, 3339), (1.625, 3835), (1.625, 4585), (1.625, 4400), (1.625, 4132), (1.625, 4512), (1.625, 3379), (1.625, 3426), (1.625, 4042), (1.625, 4057), (1.625, 4405), (1.625, 4282), (1.625, 2579), (1.625, 4234), (1.625, 3409), (1.625, 3982), (1.625, 4638), (1.625, 4104), (1.625, 4561), (1.625, 3777), (1.625, 4493), (1.625, 4370), (1.625, 4657), (1.625, 4448), (1.625, 3828), (1.625, 4206), (1.625, 4651), (1.625, 4219), (1.625, 4542), (1.625, 4625), (1.625, 4590), (1.625, 4599), (1.625, 4391), (1.625, 2804), (1.625, 3662), (1.625, 2232), (1.625, 4648), (1.625, 3928), (1.625, 3931), (1.625, 4236), (1.625, 3981), (1.625, 4627), (1.625, 4577), (1.625, 4609), (1.625, 4035), (1.625, 4414), (1.625, 3110), (1.625, 4352), (1.625, 4354), (1.625, 4497), (1.625, 4495), (1.625, 2739), (1.625, 3192), (1.625, 4637), (1.625, 4532), (1.625, 4218), (1.625, 4135), (1.625, 4458), (1.625, 4429), (1.625, 3540), (1.625, 4362), (1.625, 3472), (1.625, 4191), (1.625, 4484), (1.625, 4438), (1.625, 3824), (1.625, 4639), (1.625, 4423), (1.625, 4654), (1.625, 4163), (1.625, 4571), (1.625, 4672), (1.625, 4656), (1.625, 4647), (1.625, 4110), (1.625, 4565), (1.625, 4452), (1.625, 4119), (1.625, 2661), (1.625, 3360), (1.625, 4479), (1.625, 4589), (1.625, 4190), (1.625, 4674), (1.625, 4111), (1.625, 3783), (1.625, 3829), (1.625, 4556), (1.625, 4286), (1.625, 4305), (1.625, 4450), (1.625, 4193), (1.625, 4289), (1.625, 4409), (1.625, 4549), (1.625, 3970), (1.625, 4387), (1.625, 4587), (1.625, 4519), (1.625, 3247), (1.625, 3464), (1.625, 4309), (1.625, 2945), (1.625, 3875), (1.625, 3897), (1.625, 4540), (1.625, 4024), (1.625, 4477), (1.625, 4428), (1.625, 4090), (1.625, 3776), (1.625, 4667), (1.625, 4276), (1.625, 3489), (1.625, 4331), (1.625, 3869), (1.625, 3912), (1.625, 4613), (1.625, 4386), (1.625, 2568), (1.625, 3473), (1.625, 4418), (1.625, 4172), (1.625, 4539), (1.625, 4633), (1.625, 3626), (1.625, 4646), (1.625, 4033), (1.625, 4189), (1.625, 4300), (1.625, 4622), (1.625, 4473), (1.625, 4302), (1.625, 4408), (1.625, 4475), (1.625, 4505), (1.625, 4670), (1.625, 4029), (1.625, 4046), (1.625, 3717), (1.625, 4003), (1.625, 4482), (1.625, 4341), (1.625, 3265), (1.625, 4333), (1.625, 4642), (1.625, 4547), (1.625, 4160), (1.625, 4446), (1.625, 3608), (1.625, 4483), (1.625, 3415), (1.625, 3678), (1.625, 4486), (1.625, 4655), (1.625, 4507), (1.625, 3453), (1.625, 4510), (1.625, 4661), (1.625, 4297), (1.625, 4573), (1.625, 4537), (1.625, 4652), (1.625, 4246), (1.625, 2333), (1.625, 4340), (1.625, 3955), (1.625, 4023), (1.625, 4640), (1.625, 4677), (1.625, 4669), (1.625, 4402), (1.625, 4105), (1.625, 4574), (1.625, 4357), (1.625, 4392), (1.625, 4004), (1.625, 4420), (1.625, 3886), (1.625, 4616), (1.625, 4650), (1.625, 3317), (1.625, 4342), (1.625, 2869), (1.625, 3813), (1.625, 4013), (1.625, 4259), (1.625, 4433), (1.625, 4660), (1.625, 3448), (1.625, 4311), (1.625, 4221), (1.625, 3372), (1.625, 4544), (1.625, 4593), (1.625, 4641), (1.625, 4494), (1.625, 3600), (1.625, 4230), (1.625, 4130), (1.625, 3979), (1.625, 4321), (1.625, 4123), (1.625, 4304), (1.625, 4154), (1.625, 4583), (1.625, 4413), (1.625, 4034), (1.625, 4555), (1.625, 4603), (1.625, 4077), (1.625, 3854), (1.625, 3988), (1.625, 4466), (1.625, 4524), (1.625, 4488), (1.625, 4028), (1.625, 4336), (1.625, 4662), (1.625, 4271), (1.625, 4162), (1.625, 4288), (1.625, 1180), (1.625, 4591), (1.625, 4513), (1.625, 4069), (1.625, 4399), (1.625, 4630), (1.625, 4087), (1.625, 4653), (1.625, 4564), (1.625, 4407), (1.625, 4618), (1.625, 4107), (1.625, 4541), (1.625, 4375), (1.625, 3602), (1.625, 4598), (1.625, 3983), (1.625, 4581), (1.625, 2939), (1.625, 4396), (1.625, 4127), (1.625, 4317), (1.625, 4050), (1.625, 4285), (1.625, 4659), (1.625, 4528), (1.625, 4367), (1.625, 4680), (1.625, 4258), (1.625, 4517), (1.625, 4290), (1.625, 4280), (1.625, 4364), (1.625, 3467), (1.625, 4608), (1.625, 4444), (1.625, 3517), (1.625, 4548), (1.625, 3968), (1.625, 3607), (1.625, 4117), (1.625, 4187), (1.625, 4384), (1.625, 3911), (1.625, 3537), (1.625, 4480), (1.625, 2520), (1.625, 4550), (1.625, 4462), (1.625, 3590), (1.625, 4522), (1.625, 4676), (1.625, 3947), (1.625, 4673), (1.625, 4266), (1.625, 4645), (1.625, 3253), (1.625, 4612), (1.625, 4358), (1.625, 3672), (1.625, 4316), (1.625, 4506), (1.625, 4293), (1.625, 4611), (1.625, 4140), (1.625, 4463), (1.625, 4121), (1.625, 4626), (1.625, 2619), (1.625, 3359), (1.625, 4617), (1.625, 4570), (1.625, 4226), (1.625, 4663), (1.625, 4531), (1.625, 4078), (1.625, 4666), (1.625, 4036), (1.625, 4523), (1.625, 4582), (1.625, 4435), (1.625, 3761), (1.625, 4604), (1.625, 4041), (1.625, 4579), (1.625, 4061), (1.625, 4128), (1.625, 4636), (1.625, 4459), (1.625, 4620), (1.625, 4314), (1.625, 4563), (1.625, 4631), (1.625, 3775), (1.625, 3486), (1.625, 4170), (1.625, 4629), (1.625, 4546), (1.625, 4467), (1.625, 4353), (1.625, 4509), (1.625, 3402), (1.625, 4568), (1.625, 4478), (1.625, 4530), (1.625, 3921), (1.625, 4559), (1.625, 2826), (1.625, 4248), (1.625, 4490), (1.625, 3992), (1.625, 4335), (1.625, 4231), (1.625, 4511), (1.625, 3916), (1.625, 4491), (1.625, 3229), (1.625, 3501), (1.625, 3718), (1.625, 4560), (1.625, 4596), (1.625, 4678), (1.625, 4518), (1.625, 4426), (1.625, 4601), (1.625, 4173), (1.625, 4327), (1.625, 3794), (1.625, 4457), (1.625, 4159), (1.625, 4055), (1.625, 3638), (1.625, 4600), (1.625, 4614), (1.625, 4185), (1.625, 3335), (1.625, 4235), (1.625, 4261), (1.625, 4643), (1.625, 3322), (1.625, 3371), (1.625, 4416), (1.625, 4346), (1.625, 4628), (1.625, 3975), (1.625, 4508), (1.625, 4274), (1.625, 3935), (1.625, 4213), (1.625, 4472), (1.625, 4312), (1.625, 3914), (1.625, 4068), (1.625, 4665), (1.625, 4476), (1.625, 4388), (1.625, 3018), (1.625, 4558), (1.625, 4455), (1.625, 3485), (1.625, 4566), (1.625, 4373), (1.625, 4521), (1.625, 4393), (1.625, 4432), (1.625, 4671), (1.625, 4421), (1.625, 3758), (1.625, 4208), (1.625, 4624), (1.625, 4545), (1.5, 4664), (0.875, 4606), (0.875, 4595)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4503
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4215
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 3339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 45]
[Computing fitness]
[(1.625, 4230), (1.625, 4651), (1.625, 4565), (1.625, 4191), (1.625, 4759), (1.625, 4710), (1.625, 4286), (1.625, 4548), (1.625, 4754), (1.625, 3979), (1.625, 4336), (1.625, 4297), (1.625, 4486), (1.625, 4546), (1.625, 4458), (1.625, 4154), (1.625, 3608), (1.625, 4685), (1.625, 4752), (1.625, 3265), (1.625, 4342), (1.625, 4189), (1.625, 4672), (1.625, 4480), (1.625, 4444), (1.625, 4321), (1.625, 2568), (1.625, 4226), (1.625, 4636), (1.625, 4718), (1.625, 4764), (1.625, 4362), (1.625, 4266), (1.625, 4680), (1.625, 4653), (1.625, 4450), (1.625, 4669), (1.625, 4429), (1.625, 4646), (1.625, 4677), (1.625, 4107), (1.625, 3678), (1.625, 3540), (1.625, 4314), (1.625, 4488), (1.625, 4423), (1.625, 3464), (1.625, 4119), (1.625, 3717), (1.625, 4420), (1.625, 4289), (1.625, 4276), (1.625, 4130), (1.625, 3970), (1.625, 4659), (1.625, 3983), (1.625, 4717), (1.625, 4639), (1.625, 4386), (1.625, 4215), (1.625, 4550), (1.625, 4041), (1.625, 3829), (1.625, 4704), (1.625, 3931), (1.625, 4751), (1.625, 4661), (1.625, 4741), (1.625, 4729), (1.625, 3453), (1.625, 4495), (1.625, 3981), (1.625, 4746), (1.625, 4367), (1.625, 4758), (1.625, 3875), (1.625, 2945), (1.625, 4505), (1.625, 4288), (1.625, 4626), (1.625, 4069), (1.625, 4004), (1.625, 4218), (1.625, 4613), (1.625, 4700), (1.625, 4593), (1.625, 4549), (1.625, 4573), (1.625, 3828), (1.625, 4061), (1.625, 4583), (1.625, 4236), (1.625, 4750), (1.625, 4547), (1.625, 4519), (1.625, 4657), (1.625, 4617), (1.625, 4510), (1.625, 4720), (1.625, 4763), (1.625, 4716), (1.625, 3955), (1.625, 4705), (1.625, 4467), (1.625, 4654), (1.625, 4513), (1.625, 3253), (1.625, 4603), (1.625, 4354), (1.625, 4503), (1.625, 4523), (1.625, 1180), (1.625, 4340), (1.625, 3600), (1.625, 4029), (1.625, 4090), (1.625, 3783), (1.625, 3486), (1.625, 3489), (1.625, 4772), (1.625, 3426), (1.625, 4591), (1.625, 4630), (1.625, 4744), (1.625, 4172), (1.625, 4682), (1.625, 4698), (1.625, 3473), (1.625, 4531), (1.625, 4620), (1.625, 4462), (1.625, 4570), (1.625, 4162), (1.625, 4629), (1.625, 4608), (1.625, 4311), (1.625, 4104), (1.625, 4127), (1.625, 4280), (1.625, 4648), (1.625, 4656), (1.625, 4640), (1.625, 4042), (1.625, 4544), (1.625, 4660), (1.625, 3602), (1.625, 2520), (1.625, 4539), (1.625, 4459), (1.625, 4715), (1.625, 3897), (1.625, 3448), (1.625, 4206), (1.625, 4219), (1.625, 4507), (1.625, 4711), (1.625, 3947), (1.625, 4728), (1.625, 4246), (1.625, 4050), (1.625, 4033), (1.625, 2619), (1.625, 4105), (1.625, 4582), (1.625, 4341), (1.625, 4589), (1.625, 4637), (1.625, 4370), (1.625, 4713), (1.625, 4418), (1.625, 4757), (1.625, 4761), (1.625, 4259), (1.625, 3662), (1.625, 3776), (1.625, 4408), (1.625, 4736), (1.625, 4506), (1.625, 4706), (1.625, 4077), (1.625, 4528), (1.625, 4493), (1.625, 3537), (1.625, 4271), (1.625, 3317), (1.625, 3590), (1.625, 4702), (1.625, 4163), (1.625, 4740), (1.625, 4160), (1.625, 4674), (1.625, 2232), (1.625, 4563), (1.625, 4611), (1.625, 4078), (1.625, 4123), (1.625, 2579), (1.625, 4666), (1.625, 4300), (1.625, 4046), (1.625, 4762), (1.625, 3415), (1.625, 4540), (1.625, 4466), (1.625, 4234), (1.625, 4475), (1.625, 4140), (1.625, 4771), (1.625, 4609), (1.625, 3761), (1.625, 4770), (1.625, 4517), (1.625, 4670), (1.625, 4721), (1.625, 4667), (1.625, 3886), (1.625, 3472), (1.625, 4542), (1.625, 2739), (1.625, 4409), (1.625, 4730), (1.625, 4132), (1.625, 3247), (1.625, 4304), (1.625, 4585), (1.625, 4035), (1.625, 4477), (1.625, 4769), (1.625, 4290), (1.625, 3409), (1.625, 4708), (1.625, 4662), (1.625, 4564), (1.625, 4587), (1.625, 4581), (1.625, 4598), (1.625, 4282), (1.625, 4642), (1.625, 3372), (1.625, 2939), (1.625, 4719), (1.625, 4057), (1.625, 3911), (1.625, 4748), (1.625, 4690), (1.625, 4190), (1.625, 4433), (1.625, 4725), (1.625, 4631), (1.625, 4452), (1.625, 4473), (1.625, 4293), (1.625, 4733), (1.625, 3192), (1.625, 3359), (1.625, 4028), (1.625, 4170), (1.625, 4627), (1.625, 4317), (1.625, 4405), (1.625, 4691), (1.625, 4722), (1.625, 3912), (1.625, 4571), (1.625, 4384), (1.625, 4402), (1.625, 4555), (1.625, 4749), (1.625, 4111), (1.625, 4676), (1.625, 4285), (1.625, 4331), (1.625, 4023), (1.625, 4446), (1.625, 2869), (1.625, 3869), (1.625, 2804), (1.625, 3928), (1.625, 4703), (1.625, 4352), (1.625, 4612), (1.625, 4036), (1.625, 3517), (1.625, 4768), (1.625, 4484), (1.625, 4618), (1.625, 4688), (1.625, 4697), (1.625, 4479), (1.625, 4024), (1.625, 4561), (1.625, 4707), (1.625, 4689), (1.625, 4739), (1.625, 3988), (1.625, 4435), (1.625, 4599), (1.625, 4645), (1.625, 4414), (1.625, 3672), (1.625, 4655), (1.625, 4616), (1.625, 4537), (1.625, 4187), (1.625, 4375), (1.625, 4333), (1.625, 4712), (1.625, 4358), (1.625, 4604), (1.625, 4647), (1.625, 4532), (1.625, 4714), (1.625, 4258), (1.625, 2333), (1.625, 3339), (1.625, 4392), (1.625, 4305), (1.625, 4732), (1.625, 4556), (1.625, 4652), (1.625, 4087), (1.625, 4727), (1.625, 4438), (1.625, 4428), (1.625, 4316), (1.625, 4577), (1.625, 4724), (1.625, 4221), (1.625, 4413), (1.625, 4743), (1.625, 4684), (1.625, 4302), (1.625, 4121), (1.625, 4117), (1.625, 4635), (1.625, 4650), (1.625, 3379), (1.625, 3110), (1.625, 2661), (1.625, 4522), (1.625, 4003), (1.625, 3626), (1.625, 4673), (1.625, 4590), (1.625, 4638), (1.625, 4448), (1.625, 4622), (1.625, 4013), (1.625, 3607), (1.625, 4755), (1.625, 4625), (1.625, 4387), (1.625, 4738), (1.625, 4497), (1.625, 4482), (1.625, 4364), (1.625, 4574), (1.625, 3777), (1.625, 4734), (1.625, 4193), (1.625, 4396), (1.625, 4357), (1.625, 4541), (1.625, 4686), (1.625, 3467), (1.625, 4745), (1.625, 4400), (1.625, 3854), (1.625, 4399), (1.625, 3360), (1.625, 4767), (1.625, 3775), (1.625, 4494), (1.625, 3835), (1.625, 4501), (1.625, 4512), (1.625, 4034), (1.625, 3982), (1.625, 4737), (1.625, 4579), (1.625, 4483), (1.625, 4128), (1.625, 4633), (1.625, 4309), (1.625, 3813), (1.625, 4135), (1.625, 4723), (1.625, 4524), (1.625, 4692), (1.625, 3824), (1.625, 4391), (1.625, 3968), (1.625, 4407), (1.625, 4663), (1.625, 4641), (1.625, 4463), (1.625, 4110), (1.625, 4693), (1.625, 4695), (1.375, 4765)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4230
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4651
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4565
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4759
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 46]
[Computing fitness]
[(1.625, 4741), (1.625, 4773), (1.625, 4215), (1.625, 4716), (1.625, 4537), (1.625, 4130), (1.625, 4636), (1.625, 4682), (1.625, 3886), (1.625, 3662), (1.625, 4749), (1.625, 3828), (1.625, 3783), (1.625, 4519), (1.625, 4618), (1.625, 4646), (1.625, 4550), (1.625, 4825), (1.625, 4781), (1.625, 4282), (1.625, 4657), (1.625, 4824), (1.625, 4751), (1.625, 4593), (1.625, 3372), (1.625, 4627), (1.625, 4206), (1.625, 4127), (1.625, 3931), (1.625, 4414), (1.625, 4132), (1.625, 4459), (1.625, 4712), (1.625, 4087), (1.625, 4815), (1.625, 4740), (1.625, 4770), (1.625, 3448), (1.625, 4864), (1.625, 4154), (1.625, 4639), (1.625, 4505), (1.625, 4805), (1.625, 4847), (1.625, 4837), (1.625, 4835), (1.625, 4288), (1.625, 4484), (1.625, 4707), (1.625, 4316), (1.625, 4488), (1.625, 4548), (1.625, 4698), (1.625, 3875), (1.625, 4190), (1.625, 4331), (1.625, 4717), (1.625, 3988), (1.625, 2869), (1.625, 4341), (1.625, 4386), (1.625, 4300), (1.625, 3517), (1.625, 1180), (1.625, 4046), (1.625, 4317), (1.625, 4444), (1.625, 4140), (1.625, 4581), (1.625, 4843), (1.625, 3717), (1.625, 4571), (1.625, 4772), (1.625, 4831), (1.625, 4711), (1.625, 4863), (1.625, 4771), (1.625, 3955), (1.625, 3265), (1.625, 4546), (1.625, 4477), (1.625, 4493), (1.625, 4462), (1.625, 4506), (1.625, 3540), (1.625, 3829), (1.625, 4637), (1.625, 4823), (1.625, 4428), (1.625, 4852), (1.625, 4585), (1.625, 4613), (1.625, 3473), (1.625, 4710), (1.625, 4467), (1.625, 4867), (1.625, 4561), (1.625, 4305), (1.625, 4727), (1.625, 4838), (1.625, 3602), (1.625, 4352), (1.625, 4061), (1.625, 4314), (1.625, 4259), (1.625, 4631), (1.625, 4547), (1.625, 4869), (1.625, 4475), (1.625, 4794), (1.625, 4503), (1.625, 4700), (1.625, 4768), (1.625, 4555), (1.625, 4840), (1.625, 4788), (1.625, 4832), (1.625, 4792), (1.625, 4812), (1.625, 4219), (1.625, 4754), (1.625, 4617), (1.625, 3359), (1.625, 4290), (1.625, 2739), (1.625, 4849), (1.625, 4392), (1.625, 4778), (1.625, 4573), (1.625, 4090), (1.625, 4423), (1.625, 4473), (1.625, 3672), (1.625, 4719), (1.625, 4539), (1.625, 4531), (1.625, 4616), (1.625, 4713), (1.625, 4846), (1.625, 4358), (1.625, 4860), (1.625, 4866), (1.625, 2945), (1.625, 4654), (1.625, 4170), (1.625, 4680), (1.625, 4104), (1.625, 4234), (1.625, 3464), (1.625, 4123), (1.625, 4810), (1.625, 4433), (1.625, 4697), (1.625, 4589), (1.625, 4642), (1.625, 4286), (1.625, 4023), (1.625, 4041), (1.625, 4077), (1.625, 4384), (1.625, 2579), (1.625, 4661), (1.625, 4608), (1.625, 4659), (1.625, 4587), (1.625, 4817), (1.625, 4408), (1.625, 4321), (1.625, 4834), (1.625, 4750), (1.625, 3590), (1.625, 4435), (1.625, 4647), (1.625, 4119), (1.625, 4796), (1.625, 3453), (1.625, 4691), (1.625, 4033), (1.625, 4662), (1.625, 4035), (1.625, 4452), (1.625, 4162), (1.625, 4570), (1.625, 4703), (1.625, 3486), (1.625, 3912), (1.625, 4004), (1.625, 3192), (1.625, 3415), (1.625, 2333), (1.625, 4564), (1.625, 4853), (1.625, 4660), (1.625, 4757), (1.625, 4656), (1.625, 4057), (1.625, 4858), (1.625, 4809), (1.625, 4362), (1.625, 4655), (1.625, 4669), (1.625, 3472), (1.625, 4517), (1.625, 3761), (1.625, 4728), (1.625, 4780), (1.625, 4782), (1.625, 3897), (1.625, 4612), (1.625, 4674), (1.625, 4304), (1.625, 4806), (1.625, 4276), (1.625, 4722), (1.625, 4861), (1.625, 4776), (1.625, 4689), (1.625, 3409), (1.625, 4752), (1.625, 2568), (1.625, 4189), (1.625, 4705), (1.625, 4599), (1.625, 4340), (1.625, 4333), (1.625, 4690), (1.625, 4069), (1.625, 3979), (1.625, 4677), (1.625, 3981), (1.625, 3426), (1.625, 4565), (1.625, 4191), (1.625, 4370), (1.625, 4827), (1.625, 4246), (1.625, 4297), (1.625, 4556), (1.625, 4718), (1.625, 4280), (1.625, 4804), (1.625, 4763), (1.625, 3776), (1.625, 3947), (1.625, 4688), (1.625, 4685), (1.625, 4078), (1.625, 2619), (1.625, 4024), (1.625, 4667), (1.625, 4583), (1.625, 4163), (1.625, 4342), (1.625, 3339), (1.625, 4218), (1.625, 4160), (1.625, 4523), (1.625, 4761), (1.625, 4769), (1.625, 4845), (1.625, 4759), (1.625, 4367), (1.625, 4629), (1.625, 4865), (1.625, 4495), (1.625, 4706), (1.625, 4420), (1.625, 4111), (1.625, 4842), (1.625, 4708), (1.625, 4236), (1.625, 4798), (1.625, 4050), (1.625, 4870), (1.625, 4836), (1.625, 4851), (1.625, 4507), (1.625, 4172), (1.625, 4721), (1.625, 4532), (1.625, 4626), (1.625, 4438), (1.625, 4862), (1.625, 4736), (1.625, 4793), (1.625, 4591), (1.625, 4715), (1.625, 4409), (1.625, 3869), (1.625, 4029), (1.625, 2520), (1.625, 4513), (1.625, 4582), (1.625, 4285), (1.625, 4375), (1.625, 4839), (1.625, 4645), (1.625, 4480), (1.625, 4652), (1.625, 4857), (1.625, 4105), (1.625, 4603), (1.625, 4542), (1.625, 4028), (1.625, 3678), (1.625, 4651), (1.625, 4816), (1.625, 4528), (1.625, 4799), (1.625, 4479), (1.625, 4510), (1.625, 4336), (1.625, 4854), (1.625, 4258), (1.625, 4187), (1.625, 4311), (1.625, 4786), (1.625, 4814), (1.625, 4732), (1.625, 4856), (1.625, 4653), (1.625, 4293), (1.625, 4446), (1.625, 4271), (1.625, 4785), (1.625, 3970), (1.625, 4714), (1.625, 4648), (1.625, 4609), (1.625, 3247), (1.625, 4672), (1.625, 4466), (1.625, 4107), (1.625, 4402), (1.625, 4354), (1.625, 3489), (1.625, 3600), (1.625, 4720), (1.625, 4429), (1.625, 4418), (1.625, 4486), (1.625, 4826), (1.625, 4739), (1.625, 4620), (1.625, 4604), (1.625, 4611), (1.625, 4544), (1.625, 3317), (1.625, 4630), (1.625, 4540), (1.625, 2232), (1.625, 4289), (1.625, 4828), (1.625, 4405), (1.625, 4748), (1.625, 4762), (1.625, 3608), (1.625, 4666), (1.625, 4704), (1.625, 3253), (1.625, 4801), (1.625, 3537), (1.625, 2804), (1.625, 4746), (1.625, 4744), (1.625, 4450), (1.625, 3928), (1.625, 4640), (1.625, 4822), (1.625, 4764), (1.625, 3983), (1.625, 4730), (1.625, 4042), (1.625, 4702), (1.625, 4758), (1.625, 2939), (1.625, 4784), (1.625, 4670), (1.625, 4598), (1.625, 4563), (1.625, 4036), (1.625, 4230), (1.625, 4774), (1.625, 4791), (1.625, 4729), (1.625, 4226), (1.625, 4549), (1.625, 4725), (1.625, 4795), (1.625, 4458), (1.625, 3911), (1.625, 4733), (1.625, 4676), (1.625, 4266), (1.625, 4819), (0.875, 4803), (0.29166666666666663, 4790), (0.29166666666666663, 4808), (0.29166666666666663, 4830), (0.29166666666666663, 4821)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4773
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4215
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4716
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4537
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 47]
[Computing fitness]
[(1.625, 4845), (1.625, 4842), (1.625, 4832), (1.625, 4477), (1.625, 4495), (1.625, 4280), (1.625, 4631), (1.625, 4336), (1.625, 4883), (1.625, 4662), (1.625, 3897), (1.625, 4906), (1.625, 4853), (1.625, 4573), (1.625, 4904), (1.625, 3886), (1.625, 4259), (1.625, 3875), (1.625, 4851), (1.625, 4752), (1.625, 3192), (1.625, 4599), (1.625, 4444), (1.625, 4654), (1.625, 4843), (1.625, 4780), (1.625, 4939), (1.625, 4942), (1.625, 4920), (1.625, 4881), (1.625, 3602), (1.625, 4140), (1.625, 4805), (1.625, 3828), (1.625, 3678), (1.625, 4962), (1.625, 4847), (1.625, 4865), (1.625, 4913), (1.625, 4428), (1.625, 4754), (1.625, 4759), (1.625, 3979), (1.625, 4583), (1.625, 4636), (1.625, 4840), (1.625, 4825), (1.625, 4793), (1.625, 4891), (1.625, 4653), (1.625, 4870), (1.625, 4700), (1.625, 4660), (1.625, 4918), (1.625, 4105), (1.625, 4761), (1.625, 4697), (1.625, 4617), (1.625, 4029), (1.625, 4646), (1.625, 4154), (1.625, 4046), (1.625, 4711), (1.625, 3339), (1.625, 4854), (1.625, 4589), (1.625, 4749), (1.625, 4691), (1.625, 4639), (1.625, 4856), (1.625, 4539), (1.625, 4189), (1.625, 4930), (1.625, 3448), (1.625, 4799), (1.625, 4556), (1.625, 4876), (1.625, 4304), (1.625, 4928), (1.625, 4104), (1.625, 4528), (1.625, 4297), (1.625, 4824), (1.625, 4282), (1.625, 3931), (1.625, 4523), (1.625, 4637), (1.625, 3955), (1.625, 4932), (1.625, 4866), (1.625, 4069), (1.625, 4809), (1.625, 3359), (1.625, 4890), (1.625, 3464), (1.625, 4035), (1.625, 4768), (1.625, 4571), (1.625, 4286), (1.625, 3869), (1.625, 4488), (1.625, 4926), (1.625, 4708), (1.625, 4493), (1.625, 4835), (1.625, 4616), (1.625, 4788), (1.625, 4409), (1.625, 4656), (1.625, 4769), (1.625, 2333), (1.625, 4886), (1.625, 4246), (1.625, 4814), (1.625, 4938), (1.625, 4706), (1.625, 4591), (1.625, 4955), (1.625, 4710), (1.625, 4896), (1.625, 4506), (1.625, 4798), (1.625, 3453), (1.625, 4234), (1.625, 4570), (1.625, 3981), (1.625, 4941), (1.625, 4657), (1.625, 4333), (1.625, 4587), (1.625, 4685), (1.625, 4867), (1.625, 4028), (1.625, 4341), (1.625, 4947), (1.625, 4948), (1.625, 4123), (1.625, 3415), (1.625, 4946), (1.625, 4905), (1.625, 4717), (1.625, 4127), (1.625, 4645), (1.625, 4951), (1.625, 3988), (1.625, 4163), (1.625, 4459), (1.625, 3947), (1.625, 3265), (1.625, 4863), (1.625, 4565), (1.625, 4892), (1.625, 4871), (1.625, 4750), (1.625, 4703), (1.625, 4864), (1.625, 4659), (1.625, 4550), (1.625, 4944), (1.625, 1180), (1.625, 4860), (1.625, 4846), (1.625, 4732), (1.625, 4945), (1.625, 2579), (1.625, 4655), (1.625, 4462), (1.625, 4077), (1.625, 4414), (1.625, 4317), (1.625, 4561), (1.625, 4542), (1.625, 4887), (1.625, 4786), (1.625, 4771), (1.625, 4878), (1.625, 4806), (1.625, 4712), (1.625, 4160), (1.625, 4715), (1.625, 4311), (1.625, 4718), (1.625, 4555), (1.625, 4924), (1.625, 4367), (1.625, 4922), (1.625, 3672), (1.625, 4937), (1.625, 4510), (1.625, 4190), (1.625, 2739), (1.625, 3761), (1.625, 4898), (1.625, 3590), (1.625, 4484), (1.625, 4392), (1.625, 4433), (1.625, 4215), (1.625, 4618), (1.625, 4934), (1.625, 4910), (1.625, 4546), (1.625, 4564), (1.625, 4276), (1.625, 4206), (1.625, 4837), (1.625, 3409), (1.625, 4827), (1.625, 4061), (1.625, 3783), (1.625, 4894), (1.625, 4915), (1.625, 4874), (1.625, 4218), (1.625, 4517), (1.625, 4352), (1.625, 3912), (1.625, 4690), (1.625, 4548), (1.625, 4727), (1.625, 4503), (1.625, 4816), (1.625, 4680), (1.625, 4087), (1.625, 4959), (1.625, 4024), (1.625, 4736), (1.625, 4810), (1.625, 4857), (1.625, 4629), (1.625, 4849), (1.625, 4757), (1.625, 4290), (1.625, 4582), (1.625, 4689), (1.625, 4331), (1.625, 4716), (1.625, 4909), (1.625, 3486), (1.625, 4861), (1.625, 4812), (1.625, 4316), (1.625, 4480), (1.625, 4740), (1.625, 4923), (1.625, 4172), (1.625, 4698), (1.625, 4438), (1.625, 4836), (1.625, 4651), (1.625, 4581), (1.625, 4408), (1.625, 4877), (1.625, 4285), (1.625, 4903), (1.625, 4612), (1.625, 4340), (1.625, 3517), (1.625, 4921), (1.625, 4258), (1.625, 4452), (1.625, 4191), (1.625, 4023), (1.625, 4585), (1.625, 4041), (1.625, 4467), (1.625, 4804), (1.625, 4940), (1.625, 4547), (1.625, 4792), (1.625, 3473), (1.625, 4170), (1.625, 4300), (1.625, 4893), (1.625, 4719), (1.625, 4652), (1.625, 4667), (1.625, 4773), (1.625, 4741), (1.625, 4132), (1.625, 4839), (1.625, 4713), (1.625, 4919), (1.625, 3829), (1.625, 4507), (1.625, 4370), (1.625, 4772), (1.625, 4796), (1.625, 4613), (1.625, 4111), (1.625, 4342), (1.625, 4321), (1.625, 4763), (1.625, 4479), (1.625, 4386), (1.625, 4838), (1.625, 3662), (1.625, 4358), (1.625, 4794), (1.625, 4423), (1.625, 4375), (1.625, 4162), (1.625, 4475), (1.625, 4911), (1.625, 4707), (1.625, 4119), (1.625, 4674), (1.625, 4778), (1.625, 4936), (1.625, 4900), (1.625, 3372), (1.625, 4669), (1.625, 2520), (1.625, 4647), (1.625, 4914), (1.625, 4961), (1.625, 4889), (1.625, 3540), (1.625, 4831), (1.625, 4293), (1.625, 4817), (1.625, 3426), (1.625, 4314), (1.625, 4446), (1.625, 3717), (1.625, 4852), (1.625, 4776), (1.625, 4288), (1.625, 4626), (1.625, 4608), (1.625, 4785), (1.625, 4627), (1.625, 4271), (1.625, 4823), (1.625, 4902), (1.625, 4236), (1.625, 4888), (1.625, 2568), (1.625, 4728), (1.625, 4537), (1.625, 4782), (1.625, 4033), (1.625, 4834), (1.625, 4219), (1.625, 4130), (1.625, 4593), (1.625, 4950), (1.625, 4815), (1.625, 3472), (1.625, 4879), (1.625, 2869), (1.625, 4004), (1.625, 4532), (1.625, 4057), (1.625, 4677), (1.625, 4917), (1.625, 4661), (1.625, 4384), (1.625, 4781), (1.625, 4897), (1.625, 4362), (1.625, 4958), (1.625, 4705), (1.625, 4862), (1.625, 4949), (1.625, 4473), (1.625, 4513), (1.625, 4884), (1.625, 4885), (1.625, 4688), (1.625, 4531), (1.625, 4875), (1.625, 4505), (1.625, 4435), (1.625, 4751), (1.625, 4050), (1.625, 4078), (1.625, 4305), (1.625, 2619), (1.625, 2945), (1.625, 4722), (1.625, 4519), (1.625, 3776), (1.625, 4943), (1.625, 4770), (1.625, 4642), (1.625, 4682), (1.625, 4901), (1.625, 4721), (1.625, 4954), (1.625, 4869), (1.625, 4187), (1.625, 4090), (1.625, 4858), (1.625, 4603), (1.625, 4420), (1.375, 4907), (0.875, 4953), (0.29166666666666663, 4957), (0.29166666666666663, 4873)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4845
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4842
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4832
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4477
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4495
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 48]
[Computing fitness]
[(1.625, 4838), (1.625, 4947), (1.625, 4962), (1.625, 4847), (1.625, 4163), (1.625, 5020), (1.625, 4750), (1.625, 4300), (1.625, 3875), (1.625, 4206), (1.625, 4475), (1.625, 4864), (1.625, 4987), (1.625, 4972), (1.625, 4842), (1.625, 4817), (1.625, 4780), (1.625, 4719), (1.625, 3339), (1.625, 4980), (1.625, 4752), (1.625, 4564), (1.625, 4618), (1.625, 3359), (1.625, 4921), (1.625, 4367), (1.625, 4459), (1.625, 4991), (1.625, 3192), (1.625, 4423), (1.625, 4851), (1.625, 4433), (1.625, 4891), (1.625, 4866), (1.625, 4900), (1.625, 5052), (1.625, 4452), (1.625, 4941), (1.625, 4805), (1.625, 4778), (1.625, 3829), (1.625, 4727), (1.625, 4887), (1.625, 4915), (1.625, 4890), (1.625, 4865), (1.625, 4336), (1.625, 4827), (1.625, 4996), (1.625, 4280), (1.625, 3828), (1.625, 4923), (1.625, 4493), (1.625, 4961), (1.625, 4510), (1.625, 4856), (1.625, 4928), (1.625, 3372), (1.625, 4191), (1.625, 3426), (1.625, 4999), (1.625, 4877), (1.625, 4631), (1.625, 4977), (1.625, 4986), (1.625, 4573), (1.625, 3672), (1.625, 4646), (1.625, 4959), (1.625, 5005), (1.625, 1180), (1.625, 4886), (1.625, 4444), (1.625, 4706), (1.625, 4340), (1.625, 4140), (1.625, 4835), (1.625, 3897), (1.625, 4046), (1.625, 4029), (1.625, 4945), (1.625, 5045), (1.625, 3988), (1.625, 4946), (1.625, 4582), (1.625, 4189), (1.625, 3947), (1.625, 4757), (1.625, 5025), (1.625, 4896), (1.625, 4861), (1.625, 4023), (1.625, 4717), (1.625, 4707), (1.625, 4160), (1.625, 4963), (1.625, 4119), (1.625, 4087), (1.625, 4993), (1.625, 4495), (1.625, 4786), (1.625, 3912), (1.625, 4749), (1.625, 3486), (1.625, 4860), (1.625, 3540), (1.625, 4123), (1.625, 4940), (1.625, 4713), (1.625, 4965), (1.625, 4637), (1.625, 4990), (1.625, 3517), (1.625, 4293), (1.625, 4503), (1.625, 4589), (1.625, 4162), (1.625, 3409), (1.625, 4645), (1.625, 3869), (1.625, 5032), (1.625, 4700), (1.625, 5053), (1.625, 4077), (1.625, 4788), (1.625, 4970), (1.625, 4985), (1.625, 4528), (1.625, 5049), (1.625, 2739), (1.625, 4922), (1.625, 4995), (1.625, 5004), (1.625, 3473), (1.625, 5008), (1.625, 4386), (1.625, 4708), (1.625, 3602), (1.625, 4358), (1.625, 4246), (1.625, 4028), (1.625, 4561), (1.625, 3590), (1.625, 4414), (1.625, 3886), (1.625, 4892), (1.625, 4732), (1.625, 4967), (1.625, 4711), (1.625, 4629), (1.625, 4911), (1.625, 4542), (1.625, 4462), (1.625, 4768), (1.625, 4392), (1.625, 4810), (1.625, 4799), (1.625, 4613), (1.625, 4932), (1.625, 4674), (1.625, 4740), (1.625, 4585), (1.625, 4550), (1.625, 4215), (1.625, 5022), (1.625, 4523), (1.625, 4832), (1.625, 4926), (1.625, 4898), (1.625, 4660), (1.625, 4772), (1.625, 4812), (1.625, 4867), (1.625, 4878), (1.625, 4924), (1.625, 5010), (1.625, 2333), (1.625, 4881), (1.625, 4341), (1.625, 4654), (1.625, 4920), (1.625, 4939), (1.625, 2520), (1.625, 5021), (1.625, 3678), (1.625, 4905), (1.625, 4839), (1.625, 4652), (1.625, 4906), (1.625, 5046), (1.625, 4798), (1.625, 4480), (1.625, 4547), (1.625, 4955), (1.625, 5027), (1.625, 5018), (1.625, 4718), (1.625, 4919), (1.625, 4894), (1.625, 4716), (1.625, 4656), (1.625, 5048), (1.625, 5006), (1.625, 3453), (1.625, 5038), (1.625, 4846), (1.625, 5026), (1.625, 4831), (1.625, 4655), (1.625, 4904), (1.625, 4285), (1.625, 4754), (1.625, 3717), (1.625, 4370), (1.625, 4583), (1.625, 4111), (1.625, 4769), (1.625, 4809), (1.625, 4477), (1.625, 5043), (1.625, 4988), (1.625, 5011), (1.625, 5033), (1.625, 4689), (1.625, 4647), (1.625, 4218), (1.625, 5050), (1.625, 4258), (1.625, 4041), (1.625, 4909), (1.625, 4555), (1.625, 4467), (1.625, 4938), (1.625, 4035), (1.625, 4992), (1.625, 5040), (1.625, 4863), (1.625, 4843), (1.625, 4691), (1.625, 4837), (1.625, 4104), (1.625, 4710), (1.625, 5030), (1.625, 4127), (1.625, 4438), (1.625, 4889), (1.625, 4565), (1.625, 4409), (1.625, 4317), (1.625, 4591), (1.625, 4297), (1.625, 5036), (1.625, 4446), (1.625, 4669), (1.625, 4061), (1.625, 4984), (1.625, 4982), (1.625, 5017), (1.625, 4506), (1.625, 4712), (1.625, 4814), (1.625, 4517), (1.625, 4321), (1.625, 4983), (1.625, 4741), (1.625, 5003), (1.625, 4998), (1.625, 4883), (1.625, 5042), (1.625, 4587), (1.625, 5029), (1.625, 4581), (1.625, 4840), (1.625, 4507), (1.625, 4968), (1.625, 4942), (1.625, 4976), (1.625, 4893), (1.625, 3761), (1.625, 4698), (1.625, 4488), (1.625, 3415), (1.625, 4825), (1.625, 4653), (1.625, 4636), (1.625, 4667), (1.625, 3979), (1.625, 5037), (1.625, 4105), (1.625, 4616), (1.625, 4969), (1.625, 4342), (1.625, 4793), (1.625, 4845), (1.625, 4314), (1.625, 4697), (1.625, 4282), (1.625, 3955), (1.625, 4484), (1.625, 4311), (1.625, 4971), (1.625, 4792), (1.625, 4639), (1.625, 4024), (1.625, 4304), (1.625, 3464), (1.625, 5041), (1.625, 5013), (1.625, 4428), (1.625, 4571), (1.625, 4761), (1.625, 4234), (1.625, 4759), (1.625, 4870), (1.625, 4599), (1.625, 4951), (1.625, 4703), (1.625, 5000), (1.625, 4930), (1.625, 4154), (1.625, 4685), (1.625, 4771), (1.625, 4836), (1.625, 4331), (1.625, 5007), (1.625, 4259), (1.625, 2579), (1.625, 4824), (1.625, 4612), (1.625, 4290), (1.625, 4132), (1.625, 4937), (1.625, 4069), (1.625, 3981), (1.625, 4876), (1.625, 4804), (1.625, 4975), (1.625, 4816), (1.625, 4773), (1.625, 4316), (1.625, 4936), (1.625, 5031), (1.625, 5019), (1.625, 4556), (1.625, 4854), (1.625, 4806), (1.625, 4989), (1.625, 4333), (1.625, 3448), (1.625, 4853), (1.625, 4948), (1.625, 3931), (1.625, 5002), (1.625, 4680), (1.625, 4548), (1.625, 4662), (1.625, 4874), (1.625, 4651), (1.625, 4170), (1.625, 4539), (1.625, 3265), (1.625, 4617), (1.625, 3783), (1.625, 4190), (1.625, 4849), (1.625, 4918), (1.625, 4914), (1.625, 4796), (1.625, 4857), (1.625, 4408), (1.625, 4913), (1.625, 4352), (1.625, 5035), (1.625, 4570), (1.625, 4736), (1.625, 3662), (1.625, 4375), (1.625, 5034), (1.625, 4172), (1.625, 4479), (1.625, 4794), (1.625, 4715), (1.625, 5044), (1.625, 4276), (1.625, 4690), (1.625, 4286), (1.625, 5051), (1.625, 4657), (1.625, 5024), (1.625, 4659), (1.625, 4871), (1.625, 4934), (1.625, 4910), (1.625, 4944), (1.625, 4763), (1.625, 4546), (1.625, 4903), (0.875, 4979), (0.875, 4974), (0.29166666666666663, 5015)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4838
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4947
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4962
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4847
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Generation 49]
[Computing fitness]
[(1.625, 5067), (1.625, 4428), (1.625, 5113), (1.625, 4716), (1.625, 4077), (1.625, 2739), (1.625, 4904), (1.625, 4835), (1.625, 4863), (1.625, 4564), (1.625, 4809), (1.625, 4999), (1.625, 5148), (1.625, 4452), (1.625, 5054), (1.625, 5036), (1.625, 4711), (1.625, 4840), (1.625, 5119), (1.625, 4890), (1.625, 4891), (1.625, 5094), (1.625, 4111), (1.625, 4798), (1.625, 4652), (1.625, 5098), (1.625, 4905), (1.625, 4706), (1.625, 4870), (1.625, 4023), (1.625, 4493), (1.625, 4433), (1.625, 5096), (1.625, 5140), (1.625, 4945), (1.625, 4786), (1.625, 4926), (1.625, 4342), (1.625, 5027), (1.625, 4898), (1.625, 5131), (1.625, 4965), (1.625, 5018), (1.625, 5020), (1.625, 5000), (1.625, 4893), (1.625, 5149), (1.625, 5065), (1.625, 4754), (1.625, 4923), (1.625, 4759), (1.625, 5042), (1.625, 5115), (1.625, 4523), (1.625, 5083), (1.625, 3955), (1.625, 4215), (1.625, 4814), (1.625, 3517), (1.625, 4961), (1.625, 4889), (1.625, 4218), (1.625, 4985), (1.625, 4358), (1.625, 4778), (1.625, 5092), (1.625, 4920), (1.625, 4631), (1.625, 4951), (1.625, 4810), (1.625, 4331), (1.625, 5041), (1.625, 4947), (1.625, 5004), (1.625, 4392), (1.625, 1180), (1.625, 4900), (1.625, 4660), (1.625, 4140), (1.625, 4656), (1.625, 4046), (1.625, 4477), (1.625, 4732), (1.625, 5099), (1.625, 5048), (1.625, 5069), (1.625, 5143), (1.625, 4845), (1.625, 4304), (1.625, 4510), (1.625, 4336), (1.625, 4976), (1.625, 4930), (1.625, 4817), (1.625, 4887), (1.625, 5003), (1.625, 4311), (1.625, 5074), (1.625, 4942), (1.625, 4847), (1.625, 4993), (1.625, 4991), (1.625, 4707), (1.625, 5121), (1.625, 3426), (1.625, 5032), (1.625, 5070), (1.625, 4282), (1.625, 4542), (1.625, 4812), (1.625, 5026), (1.625, 4909), (1.625, 4583), (1.625, 4565), (1.625, 4029), (1.625, 4998), (1.625, 4719), (1.625, 4653), (1.625, 5112), (1.625, 3717), (1.625, 3761), (1.625, 4992), (1.625, 4740), (1.625, 4700), (1.625, 4788), (1.625, 4805), (1.625, 4768), (1.625, 4769), (1.625, 5008), (1.625, 5089), (1.625, 5078), (1.625, 4105), (1.625, 4750), (1.625, 3192), (1.625, 5061), (1.625, 5055), (1.625, 5139), (1.625, 5130), (1.625, 4438), (1.625, 4697), (1.625, 4386), (1.625, 4689), (1.625, 4123), (1.625, 5058), (1.625, 5124), (1.625, 5037), (1.625, 4896), (1.625, 5005), (1.625, 5022), (1.625, 3602), (1.625, 4963), (1.625, 5040), (1.625, 4877), (1.625, 4941), (1.625, 4119), (1.625, 4321), (1.625, 4983), (1.625, 5093), (1.625, 4061), (1.625, 5053), (1.625, 4160), (1.625, 5029), (1.625, 3875), (1.625, 4503), (1.625, 5011), (1.625, 5075), (1.625, 4206), (1.625, 3979), (1.625, 5107), (1.625, 5071), (1.625, 4761), (1.625, 3678), (1.625, 4024), (1.625, 5084), (1.625, 4939), (1.625, 4846), (1.625, 4924), (1.625, 4585), (1.625, 4162), (1.625, 4838), (1.625, 4990), (1.625, 4189), (1.625, 3339), (1.625, 4771), (1.625, 4970), (1.625, 4772), (1.625, 4919), (1.625, 4911), (1.625, 4980), (1.625, 4708), (1.625, 4685), (1.625, 4599), (1.625, 4928), (1.625, 4462), (1.625, 4561), (1.625, 4035), (1.625, 5109), (1.625, 4127), (1.625, 3988), (1.625, 5066), (1.625, 5043), (1.625, 4475), (1.625, 4915), (1.625, 3947), (1.625, 4517), (1.625, 3464), (1.625, 4636), (1.625, 4892), (1.625, 4674), (1.625, 4780), (1.625, 4234), (1.625, 4922), (1.625, 5006), (1.625, 4314), (1.625, 4317), (1.625, 4878), (1.625, 4691), (1.625, 4977), (1.625, 5017), (1.625, 5147), (1.625, 5142), (1.625, 4647), (1.625, 3828), (1.625, 4484), (1.625, 4861), (1.625, 4757), (1.625, 4340), (1.625, 4555), (1.625, 5150), (1.625, 4507), (1.625, 5095), (1.625, 4962), (1.625, 4495), (1.625, 4971), (1.625, 4842), (1.625, 4591), (1.625, 4646), (1.625, 4698), (1.625, 4467), (1.625, 4883), (1.625, 4839), (1.625, 4906), (1.625, 5100), (1.625, 5081), (1.625, 5101), (1.625, 4986), (1.625, 5021), (1.625, 5050), (1.625, 4837), (1.625, 4741), (1.625, 4528), (1.625, 4246), (1.625, 5146), (1.625, 4041), (1.625, 5144), (1.625, 4297), (1.625, 5122), (1.625, 3409), (1.625, 5046), (1.625, 4587), (1.625, 5082), (1.625, 4713), (1.625, 4444), (1.625, 5105), (1.625, 4409), (1.625, 5114), (1.625, 5090), (1.625, 3869), (1.625, 4921), (1.625, 3453), (1.625, 4459), (1.625, 4639), (1.625, 4865), (1.625, 4712), (1.625, 4423), (1.625, 4827), (1.625, 4370), (1.625, 4955), (1.625, 4655), (1.625, 3372), (1.625, 4104), (1.625, 4480), (1.625, 5025), (1.625, 3912), (1.625, 5135), (1.625, 2333), (1.625, 4959), (1.625, 5103), (1.625, 4727), (1.625, 4506), (1.625, 5030), (1.625, 4280), (1.625, 4967), (1.625, 5010), (1.625, 5049), (1.625, 4710), (1.625, 3829), (1.625, 4573), (1.625, 4717), (1.625, 5045), (1.625, 4367), (1.625, 4087), (1.625, 4940), (1.625, 4293), (1.625, 4571), (1.625, 4995), (1.625, 4669), (1.625, 4793), (1.625, 5052), (1.625, 5038), (1.625, 4832), (1.625, 3897), (1.625, 5013), (1.625, 4589), (1.625, 4851), (1.625, 4718), (1.625, 5137), (1.625, 5079), (1.625, 4988), (1.625, 4582), (1.625, 4613), (1.625, 4867), (1.625, 4581), (1.625, 5007), (1.625, 4629), (1.625, 5138), (1.625, 4836), (1.625, 3359), (1.625, 5133), (1.625, 5057), (1.625, 4881), (1.625, 4637), (1.625, 4446), (1.625, 4843), (1.625, 4547), (1.625, 4972), (1.625, 5056), (1.625, 4488), (1.625, 4285), (1.625, 5087), (1.625, 5127), (1.625, 4414), (1.625, 4825), (1.625, 4894), (1.625, 4984), (1.625, 5068), (1.625, 4982), (1.625, 5033), (1.625, 5059), (1.625, 4752), (1.625, 5080), (1.625, 5116), (1.625, 4618), (1.625, 4703), (1.625, 4792), (1.625, 4996), (1.625, 3886), (1.625, 2520), (1.625, 4550), (1.625, 3590), (1.625, 4258), (1.625, 4864), (1.625, 3540), (1.625, 4860), (1.625, 4799), (1.625, 4969), (1.625, 4946), (1.625, 3672), (1.625, 4968), (1.625, 3486), (1.625, 4932), (1.625, 4831), (1.625, 4163), (1.625, 3415), (1.625, 4856), (1.625, 4749), (1.625, 4341), (1.625, 4616), (1.625, 4866), (1.625, 4938), (1.625, 4645), (1.625, 4987), (1.625, 5106), (1.625, 4654), (1.625, 4191), (1.625, 4886), (1.625, 3473), (1.625, 4154), (1.625, 4667), (1.625, 5077), (1.625, 4300), (1.625, 4028), (1.625, 5062), (1.5, 5126), (0.875, 5118), (0.29166666666666663, 5086), (0.29166666666666663, 5129), (0.29166666666666663, 5111), (0.29166666666666663, 5064), (0.29166666666666663, 5073)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 5067
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4428
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 5113
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4716
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 4077
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y 1)) (* y x)))
 nr_nodes: 10]
[Algorithm end]
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (- y 1) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`1`#`#`y`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x (- (- 1 y) 1)) (+ y (* 1 (* y 1)))) x))
 nr_nodes: 18]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(- ? ?)`(- ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) (- (- y (* y (* y y))) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x (* y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (- y 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(- ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(- ? ?)`x`#`#`1`#`#`y`#`#`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (- x (+ (+ 1 x) (- x 1))) y) (* (* (- (* y x) (+ x x)) x) y)))
 nr_nodes: 24]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 1) (+ y y)) (+ x x)))
 nr_nodes: 12]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x (+ x x)) 1) (- y (+ (- 1 1) (* y x)))))
 nr_nodes: 18]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`(- ? ?)`x`#`#`1`#`#`1`#`#`(* ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- y (+ (* x (- x 1)) 1)) (* (- y (- (+ x 1) (+ (* y y) (* y 1)))) (+ y x))))
 nr_nodes: 28]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- x (* (+ (+ x x) y) (- (+ (- 1 x) 1) x))) (+ (+ x x) (- 1 (- y (+ (* 1 x) (+ 1 1)))))))
 nr_nodes: 32]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ x x) x) (- x x)))
 nr_nodes: 10]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`1`#`#`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 1) 1) (* (- y y) (+ 1 x))))
 nr_nodes: 14]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (+ 1 x)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ y (+ 1 y))) (* x (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`x`#`#`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- x y) y) (+ (+ 1 x) (- y 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`(- ? ?)`(- ? ?)`1`#`#`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 (- (- 1 y) 1)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`(- ? ?)`x`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (- (* (* x x) (- x y)) (+ x (* x y))) (- (- (+ y x) (- x y)) (+ (- y 1) (- x y)))) 1) y))
 nr_nodes: 34]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* (- y 1) x) y) 1) x))
 nr_nodes: 12]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (- 1 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`(- ? ?)`y`#`#`1`#`#`(- ? ?)`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- (- y 1) (- y (* (- x 1) (- x 1))))))
 nr_nodes: 16]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`(* ? ?)`1`#`#`(- ? ?)`x`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y (+ (* 1 (- x (- (+ x y) (+ 1 1)))) 1)))
 nr_nodes: 16]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- 1 1) (* (* x (* 1 y)) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(- ? ?)`1`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (- 1 x) (- 1 y)) 1) y))
 nr_nodes: 12]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (+ y 1)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`(* ? ?)`1`#`#`(* ? ?)`(- ? ?)`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 (* 1 (* (- 1 y) x))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`(+ ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- (+ (- 1 x) (* (* 1 x) (* x 1))) (* (+ 1 x) y))))
 nr_nodes: 20]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 1 (- x y)) (+ y y)) y))
 nr_nodes: 12]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (- y y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`(- ? ?)`(* ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (- y (- (* 1 1) (* y x))) (- 1 y)) 1))
 nr_nodes: 16]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- (* x y) (+ y 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ y y) (* (* x (+ x x)) (- 1 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`1`#`#`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`1`#`#`1`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- (* x 1) (- 1 (+ y y))) y) (* y (* (* (+ 1 1) (* 1 1)) (* 1 1)))))
 nr_nodes: 26]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ x (* (- x (* 1 (+ y y))) (+ (+ (+ y 1) y) (- x x))))))
 nr_nodes: 22]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`(- ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y (+ 1 (- 1 (+ (+ x 1) x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 1 y) (+ x 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ 1 (+ (+ x (* y 1)) x))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`(* ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (* (- (* x x) x) (* x (- y x))) (- y x))))
 nr_nodes: 18]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ (* x x) (* y x)) (+ (+ x 1) (* x 1))) (* y (- (- 1 y) (- 1 x)))))
 nr_nodes: 26]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(- ? ?)`(- ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (- x (+ (- x (* 1 x)) (- (- x y) 1)))))
 nr_nodes: 16]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`y`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 1) (* (- 1 (+ (- 1 x) y)) (- (- (+ y x) y) (- y y)))))
 nr_nodes: 22]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 x) (* (- 1 x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 1) x))
 nr_nodes: 6]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`(- ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (* (- x (* y 1)) (- (* x y) x)) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y (- (+ 1 1) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`x`#`#`1`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 (* (- 1 (+ x 1)) y)) (+ (* x y) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- (* 1 (- y 1)) (* (- 1 x) x))))
 nr_nodes: 14]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 1) (* y x)) (* 1 (- x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`1`#`#`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* (- 1 y) (+ x 1)) 1) y) y))
 nr_nodes: 14]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ x (+ x (- y x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (+ 1 1) y) x) (+ (+ (- y x) (- x 1)) (* y (+ 1 1)))))
 nr_nodes: 22]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* 1 y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`y`#`#`(- ? ?)`(- ? ?)`1`#`#`x`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 y) (+ (+ (- 1 1) y) (- (- 1 x) (+ 1 1))))))
 nr_nodes: 20]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- y x) y) (* (+ 1 x) (+ y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (* 1 1)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* x 1)) (* 1 x)))
 nr_nodes: 10]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (* 1 (* (* 1 (- y x)) 1))))
 nr_nodes: 12]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- x x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (- 1 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ (+ y 1) (* (* (* 1 y) 1) (+ x y)))))
 nr_nodes: 16]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* x (* y 1)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`y`#`#`1`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (- (- y 1) (- y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (- 1 1) (+ (- (- (* x y) y) (- x x)) (* (- 1 x) (- 1 1))))))
 nr_nodes: 24]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 (+ (+ 1 x) (* (+ y x) (+ 1 y)))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`1`#`#`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 1) (* x (* (+ (+ x y) (* y y)) 1))))
 nr_nodes: 16]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`1`#`#`1`#`#`(- ? ?)`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`1`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (+ 1 1)) (- (* 1 (+ 1 1)) (- x x))))
 nr_nodes: 16]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 1) (* (+ x (* y (* y x))) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* (* x y) x)) (- y 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 1) x))
 nr_nodes: 6]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- (* 1 x) (- (+ x 1) (* 1 x))) x) x))
 nr_nodes: 16]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- (- y x) x) 1) (* (* (+ x y) (+ x y)) 1)))
 nr_nodes: 18]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (- (+ 1 1) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (- (+ x x) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ x x) (- (+ (+ x y) y) x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`(- ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (* x y)) (* (- x (- (* x x) y)) 1)))
 nr_nodes: 16]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`(- ? ?)`1`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (* x (+ 1 (- 1 y))) (+ 1 y)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ x x) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- y x) (- x (+ y 1))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`1`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (+ 1 (- y x))))
 nr_nodes: 8]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (- (+ 1 1) (+ 1 1)) (* x x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (+ y 1) (* 1 y)) 1) y))
 nr_nodes: 12]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (- 1 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (- x y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`(* ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y (- (+ (+ 1 y) (* 1 (* x 1))) (* (* (* y 1) 1) (* x x)))) 1))
 nr_nodes: 24]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (- 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x 1) x))
 nr_nodes: 6]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- x x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* x y) y) y) x))
 nr_nodes: 10]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (* (- x x) (* x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`1`#`#`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (- 1 (+ x (- 1 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`(- ? ?)`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ x (- 1 (+ (* x (* x x)) (+ x y)))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`x`#`#`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* (+ x x) (* y y)) (- (+ 1 1) (+ y x))) x) (+ (+ (- (- x 1) (- x y)) 1) y)))
 nr_nodes: 30]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (+ y (* x x)) (* x (* x x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* x (+ (* 1 x) (+ y x))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`x`#`#`x`#`#`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- (* (+ y y) x) x) x) (+ x (- x x))))
 nr_nodes: 16]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- y y) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (+ 1 (+ (- (* y 1) x) (* (* 1 y) y)))))
 nr_nodes: 16]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* (- x (* (- (+ x y) x) (* x (* x y)))) x) (+ 1 x)))
 nr_nodes: 20]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (- x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`(+ ? ?)`1`#`#`(* ? ?)`1`#`#`1`#`#`(+ ? ?)`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y x) (+ 1 (+ x (* x x)))) (- (+ (+ (+ 1 y) 1) (+ 1 (* 1 1))) (+ (- x (+ x x)) (+ (+ y 1) x)))))
 nr_nodes: 36]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 (- x y)) (- (* x x) (- y 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`(+ ? ?)`1`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 (+ 1 (+ (- (- x 1) (- y 1)) 1))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (* (+ y y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (+ (- y x) (* 1 y))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(- ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (- (- x x) (- x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (* x (* y x)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`1`#`#`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (* 1 (- (+ y x) 1)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`1`#`#`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`(* ? ?)`1`#`#`1`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* (+ 1 1) 1)) (* (- (* y x) x) (* x (* (* (* x x) (+ 1 y)) (- (* 1 1) (+ 1 y)))))))
 nr_nodes: 32]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`(- ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* (- x y) y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ (- y y) (+ x 1)) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- y (+ 1 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`x`#`#`1`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- (- x 1) (* y y)) (+ (* 1 y) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (- x x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (- x y) (- x (- y y)))))
 nr_nodes: 12]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`1`#`#`(* ? ?)`1`#`#`1`#`#`(* ? ?)`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) (* y (* (* 1 (* 1 1)) (* 1 (+ (* x x) (+ y y)))))))
 nr_nodes: 22]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`1`#`#`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ 1 (- 1 1)) (* y (* (+ 1 (* y (* y 1))) 1))))
 nr_nodes: 18]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- (- y x) y) x) (+ (- y 1) (+ (- 1 x) 1))))
 nr_nodes: 18]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y (- (* (+ x x) x) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* 1 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ y (* y 1)) (+ (* x x) y)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* y y) (- 1 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`1`#`#`(- ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`x`#`#`(* ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`x`#`#`1`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- x (+ (- (* x (* 1 1)) (- y 1)) y)) (- x (* (- (- (* x 1) y) x) y))))
 nr_nodes: 26]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`1`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- x y) (- x 1)) (- (+ 1 1) (+ x y))))
 nr_nodes: 16]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* (+ 1 y) 1) (* x x)))
 nr_nodes: 10]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ (+ x 1) 1)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (- (- x (- x (+ (+ 1 y) (* x x)))) 1)))
 nr_nodes: 16]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (* (* (+ (* y x) (* x (* x x))) (+ 1 x)) (* 1 (- x y)))))
 nr_nodes: 22]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`(- ? ?)`1`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ (- 1 (- y x)) (* (* (+ 1 x) (* 1 1)) y))))
 nr_nodes: 18]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`(- ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 (- 1 1)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`(- ? ?)`(- ? ?)`1`#`#`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- x (- (- 1 y) x)) (+ (- y (* y (* (- 1 1) (* y 1)))) y)))
 nr_nodes: 22]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(- ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* (- (- x x) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x y) 1) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* x x) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ y x) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`(- ? ?)`(- ? ?)`x`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x y)) (- (- x y) (* 1 x))))
 nr_nodes: 14]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ (* y y) (* y 1)) 1) x))
 nr_nodes: 12]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`x`#`#`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 (+ x x)) 1) y))
 nr_nodes: 10]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* x x)) (- 1 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (+ y (+ x (+ x (* (- y 1) y))))))
 nr_nodes: 14]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`(+ ? ?)`(* ? ?)`1`#`#`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* x x) x) (+ (* 1 x) y)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
[Generation 0]
[Computing fitness]
[(1.5, 393), (1.375, 180), (1.375, 261), (1.25, 33), (1.25, 74), (1.25, 140), (1.25, 166), (1.25, 193), (1.25, 221), (1.25, 315), (1.25, 390), (1.125, 54), (1.125, 105), (1.125, 241), (1.125, 268), (1.125, 305), (1.125, 364), (1.125, 377), (1.125, 387), (1.0, 0), (1.0, 122), (1.0, 124), (1.0, 216), (1.0, 262), (1.0, 312), (1.0, 335), (1.0, 354), (1.0, 366), (0.875, 57), (0.875, 71), (0.875, 327), (0.875, 383), (0.75, 10), (0.75, 84), (0.75, 150), (0.75, 170), (0.75, 178), (0.75, 275), (0.75, 308), (0.75, 316), (0.75, 317), (0.75, 378), (0.75, 385), (0.625, 41), (0.625, 50), (0.625, 72), (0.625, 79), (0.625, 97), (0.625, 115), (0.625, 132), (0.625, 179), (0.625, 182), (0.625, 191), (0.625, 206), (0.625, 207), (0.625, 213), (0.625, 228), (0.625, 278), (0.625, 288), (0.625, 304), (0.625, 325), (0.625, 373), (0.5416666666666666, 19), (0.5416666666666666, 81), (0.5416666666666666, 109), (0.5416666666666666, 292), (0.5416666666666666, 318), (0.5416666666666666, 382), (0.5, 21), (0.5, 35), (0.5, 38), (0.5, 60), (0.5, 155), (0.5, 164), (0.5, 185), (0.5, 204), (0.5, 212), (0.5, 219), (0.5, 223), (0.5, 234), (0.5, 253), (0.5, 282), (0.5, 290), (0.5, 302), (0.5, 322), (0.5, 351), (0.5, 356), (0.5, 365), (0.5, 380), (0.5, 384), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 251), (0.41666666666666663, 37), (0.41666666666666663, 39), (0.41666666666666663, 137), (0.41666666666666663, 169), (0.41666666666666663, 190), (0.41666666666666663, 199), (0.41666666666666663, 230), (0.41666666666666663, 232), (0.41666666666666663, 246), (0.41666666666666663, 250), (0.41666666666666663, 260), (0.41666666666666663, 267), (0.41666666666666663, 279), (0.41666666666666663, 303), (0.41666666666666663, 306), (0.41666666666666663, 326), (0.41666666666666663, 367), (0.41666666666666663, 368), (0.41666666666666663, 369), (0.375, 1), (0.375, 4), (0.375, 7), (0.375, 45), (0.375, 61), (0.375, 104), (0.375, 126), (0.375, 143), (0.375, 165), (0.375, 184), (0.375, 229), (0.375, 240), (0.375, 256), (0.375, 274), (0.375, 330), (0.375, 331), (0.375, 333), (0.375, 340), (0.375, 353), (0.375, 355), (0.375, 394), (0.3333333333333333, 139), (0.3214285714285714, 194), (0.3125, 135), (0.29545454545454547, 27), (0.29545454545454547, 313), (0.29166666666666663, 2), (0.29166666666666663, 5), (0.29166666666666663, 13), (0.29166666666666663, 46), (0.29166666666666663, 59), (0.29166666666666663, 64), (0.29166666666666663, 75), (0.29166666666666663, 147), (0.29166666666666663, 148), (0.29166666666666663, 154), (0.29166666666666663, 189), (0.29166666666666663, 201), (0.29166666666666663, 208), (0.29166666666666663, 214), (0.29166666666666663, 215), (0.29166666666666663, 266), (0.29166666666666663, 270), (0.29166666666666663, 276), (0.29166666666666663, 286), (0.29166666666666663, 301), (0.29166666666666663, 332), (0.29166666666666663, 374), (0.29166666666666663, 389), (0.29166666666666663, 397), (0.25, 6), (0.25, 9), (0.25, 12), (0.25, 14), (0.25, 15), (0.25, 20), (0.25, 22), (0.25, 24), (0.25, 26), (0.25, 28), (0.25, 29), (0.25, 30), (0.25, 32), (0.25, 34), (0.25, 36), (0.25, 40), (0.25, 47), (0.25, 49), (0.25, 51), (0.25, 52), (0.25, 53), (0.25, 55), (0.25, 58), (0.25, 67), (0.25, 69), (0.25, 77), (0.25, 78), (0.25, 82), (0.25, 85), (0.25, 86), (0.25, 88), (0.25, 89), (0.25, 91), (0.25, 92), (0.25, 93), (0.25, 94), (0.25, 95), (0.25, 96), (0.25, 99), (0.25, 100), (0.25, 102), (0.25, 107), (0.25, 108), (0.25, 110), (0.25, 112), (0.25, 113), (0.25, 114), (0.25, 116), (0.25, 118), (0.25, 121), (0.25, 123), (0.25, 125), (0.25, 131), (0.25, 133), (0.25, 136), (0.25, 138), (0.25, 141), (0.25, 145), (0.25, 146), (0.25, 149), (0.25, 151), (0.25, 152), (0.25, 153), (0.25, 156), (0.25, 157), (0.25, 162), (0.25, 163), (0.25, 174), (0.25, 175), (0.25, 176), (0.25, 177), (0.25, 183), (0.25, 186), (0.25, 188), (0.25, 196), (0.25, 197), (0.25, 202), (0.25, 203), (0.25, 205), (0.25, 209), (0.25, 211), (0.25, 217), (0.25, 220), (0.25, 222), (0.25, 225), (0.25, 227), (0.25, 231), (0.25, 233), (0.25, 235), (0.25, 236), (0.25, 237), (0.25, 238), (0.25, 243), (0.25, 244), (0.25, 245), (0.25, 252), (0.25, 254), (0.25, 255), (0.25, 259), (0.25, 263), (0.25, 265), (0.25, 269), (0.25, 273), (0.25, 277), (0.25, 283), (0.25, 284), (0.25, 285), (0.25, 289), (0.25, 291), (0.25, 295), (0.25, 296), (0.25, 297), (0.25, 298), (0.25, 307), (0.25, 309), (0.25, 311), (0.25, 314), (0.25, 321), (0.25, 324), (0.25, 334), (0.25, 338), (0.25, 339), (0.25, 341), (0.25, 342), (0.25, 344), (0.25, 345), (0.25, 348), (0.25, 349), (0.25, 350), (0.25, 352), (0.25, 357), (0.25, 358), (0.25, 361), (0.25, 363), (0.25, 370), (0.25, 372), (0.25, 381), (0.25, 386), (0.25, 388), (0.25, 392), (0.25, 395), (0.25, 398), (0.25, 399), (0.225, 172), (0.225, 280), (0.20833333333333331, 328), (0.20833333333333331, 375), (0.1875, 117), (0.1875, 359), (0.18055555555555555, 25), (0.16666666666666666, 56), (0.16666666666666666, 66), (0.16666666666666666, 90), (0.16666666666666666, 98), (0.16666666666666666, 198), (0.16666666666666666, 200), (0.16666666666666666, 218), (0.16666666666666666, 310), (0.16666666666666666, 346), (0.16666666666666666, 360), (0.16666666666666666, 391), (0.125, 3), (0.125, 8), (0.125, 11), (0.125, 16), (0.125, 18), (0.125, 23), (0.125, 31), (0.125, 42), (0.125, 43), (0.125, 44), (0.125, 48), (0.125, 62), (0.125, 63), (0.125, 65), (0.125, 68), (0.125, 70), (0.125, 73), (0.125, 76), (0.125, 80), (0.125, 87), (0.125, 101), (0.125, 103), (0.125, 106), (0.125, 111), (0.125, 119), (0.125, 127), (0.125, 128), (0.125, 129), (0.125, 130), (0.125, 134), (0.125, 142), (0.125, 144), (0.125, 158), (0.125, 159), (0.125, 160), (0.125, 161), (0.125, 168), (0.125, 171), (0.125, 173), (0.125, 181), (0.125, 187), (0.125, 192), (0.125, 195), (0.125, 210), (0.125, 224), (0.125, 226), (0.125, 239), (0.125, 242), (0.125, 247), (0.125, 248), (0.125, 249), (0.125, 257), (0.125, 258), (0.125, 264), (0.125, 271), (0.125, 281), (0.125, 293), (0.125, 294), (0.125, 299), (0.125, 300), (0.125, 319), (0.125, 320), (0.125, 323), (0.125, 329), (0.125, 336), (0.125, 337), (0.125, 343), (0.125, 347), (0.125, 362), (0.125, 376), (0.125, 379), (0.125, 396), (0.08333333333333333, 120), (0.08333333333333333, 371), (0.07142857142857142, 17), (0.05, 272), (0.038461538461538464, 287)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* x 1)) (* 1 x)))
 nr_nodes: 10]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* x y) y) y) x))
 nr_nodes: 10]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ x x) x) (- x x)))
 nr_nodes: 10]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (+ y 1)) 1))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 393), (1.5, 401), (1.375, 180), (1.375, 261), (1.25, 438), (1.25, 221), (1.25, 408), (1.25, 390), (1.25, 455), (1.25, 140), (1.25, 315), (1.25, 405), (1.25, 74), (1.25, 406), (1.25, 193), (1.25, 166), (1.25, 442), (1.25, 33), (1.125, 443), (1.125, 377), (1.125, 413), (1.125, 387), (1.125, 268), (1.125, 105), (1.125, 364), (1.125, 305), (1.125, 465), (1.125, 415), (1.125, 54), (1.125, 404), (1.125, 241), (1.0, 312), (1.0, 0), (1.0, 335), (1.0, 262), (1.0, 366), (1.0, 216), (1.0, 124), (1.0, 417), (1.0, 409), (1.0, 122), (1.0, 462), (1.0, 354), (0.875, 383), (0.875, 57), (0.875, 71), (0.875, 423), (0.875, 327), (0.75, 275), (0.75, 10), (0.75, 478), (0.75, 426), (0.75, 170), (0.75, 385), (0.75, 317), (0.75, 425), (0.75, 84), (0.75, 316), (0.75, 378), (0.75, 308), (0.75, 403), (0.75, 461), (0.75, 178), (0.75, 150), (0.6666666666666666, 424), (0.625, 325), (0.625, 206), (0.625, 191), (0.625, 72), (0.625, 479), (0.625, 228), (0.625, 454), (0.625, 179), (0.625, 498), (0.625, 304), (0.625, 207), (0.625, 97), (0.625, 288), (0.625, 132), (0.625, 79), (0.625, 278), (0.625, 419), (0.625, 41), (0.625, 373), (0.625, 440), (0.625, 50), (0.625, 213), (0.625, 182), (0.625, 444), (0.625, 115), (0.5416666666666666, 318), (0.5416666666666666, 449), (0.5416666666666666, 19), (0.5416666666666666, 450), (0.5416666666666666, 109), (0.5416666666666666, 382), (0.5416666666666666, 292), (0.5416666666666666, 81), (0.5, 463), (0.5, 351), (0.5, 453), (0.5, 464), (0.5, 282), (0.5, 356), (0.5, 212), (0.5, 219), (0.5, 60), (0.5, 234), (0.5, 204), (0.5, 456), (0.5, 253), (0.5, 155), (0.5, 458), (0.5, 21), (0.5, 302), (0.5, 380), (0.5, 290), (0.5, 322), (0.5, 35), (0.5, 223), (0.5, 185), (0.5, 384), (0.5, 365), (0.5, 164), (0.5, 38), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 251), (0.4464285714285714, 467), (0.41666666666666663, 39), (0.41666666666666663, 368), (0.41666666666666663, 246), (0.41666666666666663, 260), (0.41666666666666663, 434), (0.41666666666666663, 190), (0.41666666666666663, 232), (0.41666666666666663, 367), (0.41666666666666663, 267), (0.41666666666666663, 428), (0.41666666666666663, 37), (0.41666666666666663, 470), (0.41666666666666663, 303), (0.41666666666666663, 326), (0.41666666666666663, 230), (0.41666666666666663, 137), (0.41666666666666663, 468), (0.41666666666666663, 279), (0.41666666666666663, 199), (0.41666666666666663, 469), (0.41666666666666663, 477), (0.41666666666666663, 250), (0.41666666666666663, 472), (0.41666666666666663, 169), (0.41666666666666663, 474), (0.41666666666666663, 471), (0.41666666666666663, 369), (0.41666666666666663, 306), (0.41666666666666663, 473), (0.375, 421), (0.375, 61), (0.375, 256), (0.375, 486), (0.375, 333), (0.375, 104), (0.375, 355), (0.375, 446), (0.375, 340), (0.375, 229), (0.375, 274), (0.375, 488), (0.375, 240), (0.375, 484), (0.375, 45), (0.375, 394), (0.375, 400), (0.375, 331), (0.375, 4), (0.375, 7), (0.375, 165), (0.375, 432), (0.375, 126), (0.375, 353), (0.375, 143), (0.375, 411), (0.375, 1), (0.375, 330), (0.375, 184), (0.375, 480), (0.3333333333333333, 139), (0.3214285714285714, 194), (0.3125, 135), (0.29545454545454547, 313), (0.29545454545454547, 27), (0.29166666666666663, 496), (0.29166666666666663, 208), (0.29166666666666663, 286), (0.29166666666666663, 414), (0.29166666666666663, 493), (0.29166666666666663, 2), (0.29166666666666663, 148), (0.29166666666666663, 46), (0.29166666666666663, 497), (0.29166666666666663, 64), (0.29166666666666663, 270), (0.29166666666666663, 430), (0.29166666666666663, 215), (0.29166666666666663, 154), (0.29166666666666663, 147), (0.29166666666666663, 332), (0.29166666666666663, 485), (0.29166666666666663, 276), (0.29166666666666663, 483), (0.29166666666666663, 452), (0.29166666666666663, 436), (0.29166666666666663, 75), (0.29166666666666663, 489), (0.29166666666666663, 301), (0.29166666666666663, 59), (0.29166666666666663, 389), (0.29166666666666663, 495), (0.29166666666666663, 487), (0.29166666666666663, 397), (0.29166666666666663, 491), (0.29166666666666663, 374), (0.29166666666666663, 214), (0.29166666666666663, 5), (0.29166666666666663, 201), (0.29166666666666663, 266), (0.29166666666666663, 13), (0.29166666666666663, 189), (0.29166666666666663, 460), (0.25, 349), (0.25, 324), (0.25, 118), (0.25, 91), (0.25, 121), (0.25, 254), (0.25, 174), (0.25, 47), (0.25, 29), (0.25, 96), (0.25, 209), (0.25, 175), (0.25, 392), (0.25, 163), (0.25, 344), (0.25, 309), (0.25, 133), (0.25, 141), (0.25, 285), (0.25, 34), (0.25, 177), (0.25, 298), (0.25, 231), (0.25, 314), (0.25, 222), (0.25, 92), (0.25, 339), (0.25, 245), (0.25, 265), (0.25, 237), (0.25, 395), (0.25, 67), (0.25, 24), (0.25, 196), (0.25, 295), (0.25, 211), (0.25, 116), (0.25, 235), (0.25, 145), (0.25, 297), (0.25, 186), (0.25, 82), (0.25, 289), (0.25, 58), (0.25, 93), (0.25, 238), (0.25, 85), (0.25, 363), (0.25, 386), (0.25, 131), (0.25, 398), (0.25, 345), (0.25, 296), (0.25, 334), (0.25, 481), (0.25, 114), (0.25, 40), (0.25, 30), (0.25, 243), (0.25, 125), (0.25, 183), (0.25, 151), (0.25, 99), (0.25, 108), (0.25, 197), (0.25, 26), (0.25, 352), (0.25, 284), (0.25, 188), (0.25, 15), (0.25, 136), (0.25, 357), (0.25, 399), (0.25, 283), (0.25, 78), (0.25, 22), (0.25, 36), (0.25, 152), (0.25, 342), (0.25, 94), (0.25, 110), (0.25, 176), (0.25, 123), (0.25, 217), (0.25, 156), (0.25, 291), (0.25, 321), (0.25, 381), (0.25, 6), (0.25, 9), (0.25, 69), (0.25, 153), (0.25, 233), (0.25, 448), (0.25, 244), (0.25, 107), (0.25, 255), (0.25, 338), (0.25, 53), (0.25, 52), (0.25, 77), (0.25, 350), (0.25, 89), (0.25, 100), (0.25, 252), (0.25, 202), (0.25, 203), (0.25, 388), (0.25, 277), (0.25, 307), (0.25, 269), (0.25, 263), (0.25, 28), (0.25, 341), (0.25, 12), (0.25, 88), (0.25, 51), (0.25, 146), (0.25, 113), (0.25, 112), (0.25, 138), (0.25, 236), (0.25, 225), (0.25, 259), (0.25, 55), (0.25, 348), (0.25, 227), (0.25, 157), (0.25, 372), (0.25, 14), (0.25, 32), (0.25, 162), (0.25, 220), (0.25, 102), (0.25, 205), (0.25, 149), (0.25, 86), (0.25, 311), (0.25, 358), (0.25, 49), (0.25, 361), (0.25, 370), (0.25, 20), (0.25, 95), (0.25, 273), (0.225, 172), (0.225, 280), (0.20833333333333331, 328), (0.20833333333333331, 375), (0.19642857142857142, 466), (0.1875, 117), (0.1875, 359), (0.18055555555555555, 25), (0.16666666666666666, 476), (0.16666666666666666, 310), (0.16666666666666666, 499), (0.16666666666666666, 200), (0.16666666666666666, 360), (0.16666666666666666, 391), (0.16666666666666666, 218), (0.16666666666666666, 346), (0.16666666666666666, 98), (0.16666666666666666, 90), (0.16666666666666666, 56), (0.16666666666666666, 66), (0.16666666666666666, 198), (0.125, 8), (0.125, 3), (0.07142857142857142, 492)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* x 1)) (* 1 x)))
 nr_nodes: 10]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* x y) y) y) x))
 nr_nodes: 10]
(CANDIDATE)[id: 438
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (* y (- 1 1))))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 393), (1.5, 500), (1.5, 401), (1.375, 502), (1.375, 180), (1.375, 261), (1.25, 455), (1.25, 408), (1.25, 509), (1.25, 33), (1.25, 193), (1.25, 390), (1.25, 140), (1.25, 438), (1.25, 221), (1.25, 406), (1.25, 315), (1.25, 442), (1.25, 74), (1.25, 518), (1.25, 166), (1.25, 405), (1.125, 268), (1.125, 54), (1.125, 558), (1.125, 505), (1.125, 105), (1.125, 377), (1.125, 443), (1.125, 413), (1.125, 415), (1.125, 512), (1.125, 305), (1.125, 587), (1.125, 387), (1.125, 404), (1.125, 465), (1.125, 364), (1.125, 520), (1.125, 241), (1.125, 516), (1.125, 522), (1.0, 417), (1.0, 462), (1.0, 312), (1.0, 354), (1.0, 366), (1.0, 564), (1.0, 0), (1.0, 409), (1.0, 122), (1.0, 543), (1.0, 124), (1.0, 262), (1.0, 335), (1.0, 216), (1.0, 551), (0.875, 383), (0.875, 71), (0.875, 57), (0.875, 535), (0.875, 548), (0.875, 423), (0.875, 327), (0.75, 378), (0.75, 504), (0.75, 510), (0.75, 461), (0.75, 570), (0.75, 577), (0.75, 178), (0.75, 536), (0.75, 10), (0.75, 425), (0.75, 426), (0.75, 170), (0.75, 275), (0.75, 546), (0.75, 317), (0.75, 403), (0.75, 385), (0.75, 478), (0.75, 531), (0.75, 308), (0.75, 84), (0.75, 545), (0.75, 552), (0.75, 150), (0.75, 316), (0.6666666666666666, 424), (0.625, 547), (0.625, 325), (0.625, 182), (0.625, 533), (0.625, 557), (0.625, 549), (0.625, 79), (0.625, 555), (0.625, 440), (0.625, 228), (0.625, 578), (0.625, 191), (0.625, 179), (0.625, 556), (0.625, 288), (0.625, 479), (0.625, 498), (0.625, 304), (0.625, 550), (0.625, 373), (0.625, 419), (0.625, 444), (0.625, 454), (0.625, 50), (0.625, 554), (0.625, 72), (0.625, 41), (0.625, 206), (0.625, 278), (0.625, 207), (0.625, 97), (0.625, 213), (0.625, 132), (0.625, 115), (0.5416666666666666, 559), (0.5416666666666666, 292), (0.5416666666666666, 562), (0.5416666666666666, 382), (0.5416666666666666, 81), (0.5416666666666666, 109), (0.5416666666666666, 449), (0.5416666666666666, 19), (0.5416666666666666, 450), (0.5416666666666666, 318), (0.5, 464), (0.5, 571), (0.5, 568), (0.5, 553), (0.5, 453), (0.5, 573), (0.5, 60), (0.5, 356), (0.5, 384), (0.5, 380), (0.5, 204), (0.5, 532), (0.5, 456), (0.5, 458), (0.5, 35), (0.5, 282), (0.5, 322), (0.5, 302), (0.5, 582), (0.5, 38), (0.5, 155), (0.5, 223), (0.5, 526), (0.5, 463), (0.5, 351), (0.5, 528), (0.5, 21), (0.5, 212), (0.5, 290), (0.5, 253), (0.5, 234), (0.5, 164), (0.5, 569), (0.5, 580), (0.5, 219), (0.5, 514), (0.5, 566), (0.5, 574), (0.5, 365), (0.5, 185), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 467), (0.4464285714285714, 251), (0.41666666666666663, 37), (0.41666666666666663, 199), (0.41666666666666663, 470), (0.41666666666666663, 477), (0.41666666666666663, 593), (0.41666666666666663, 246), (0.41666666666666663, 472), (0.41666666666666663, 306), (0.41666666666666663, 303), (0.41666666666666663, 469), (0.41666666666666663, 367), (0.41666666666666663, 434), (0.41666666666666663, 589), (0.41666666666666663, 250), (0.41666666666666663, 594), (0.41666666666666663, 169), (0.41666666666666663, 507), (0.41666666666666663, 190), (0.41666666666666663, 260), (0.41666666666666663, 572), (0.41666666666666663, 369), (0.41666666666666663, 541), (0.41666666666666663, 585), (0.41666666666666663, 267), (0.41666666666666663, 468), (0.41666666666666663, 39), (0.41666666666666663, 474), (0.41666666666666663, 595), (0.41666666666666663, 473), (0.41666666666666663, 137), (0.41666666666666663, 588), (0.41666666666666663, 471), (0.41666666666666663, 596), (0.41666666666666663, 279), (0.41666666666666663, 326), (0.41666666666666663, 428), (0.41666666666666663, 232), (0.41666666666666663, 368), (0.41666666666666663, 590), (0.41666666666666663, 230), (0.375, 333), (0.375, 4), (0.375, 484), (0.375, 61), (0.375, 519), (0.375, 184), (0.375, 240), (0.375, 488), (0.375, 537), (0.375, 274), (0.375, 104), (0.375, 542), (0.375, 411), (0.375, 480), (0.375, 256), (0.375, 394), (0.375, 229), (0.375, 503), (0.375, 1), (0.375, 7), (0.375, 421), (0.375, 45), (0.375, 355), (0.375, 446), (0.375, 330), (0.375, 400), (0.375, 486), (0.375, 143), (0.375, 126), (0.375, 340), (0.375, 331), (0.375, 432), (0.375, 165), (0.375, 353), (0.3333333333333333, 139), (0.3214285714285714, 194), (0.3125, 135), (0.29545454545454547, 313), (0.29545454545454547, 27), (0.29166666666666663, 487), (0.29166666666666663, 539), (0.29166666666666663, 286), (0.29166666666666663, 201), (0.29166666666666663, 493), (0.29166666666666663, 430), (0.29166666666666663, 489), (0.29166666666666663, 561), (0.29166666666666663, 374), (0.29166666666666663, 414), (0.29166666666666663, 154), (0.29166666666666663, 584), (0.29166666666666663, 270), (0.29166666666666663, 208), (0.29166666666666663, 5), (0.29166666666666663, 266), (0.29166666666666663, 491), (0.29166666666666663, 397), (0.29166666666666663, 148), (0.29166666666666663, 214), (0.29166666666666663, 452), (0.29166666666666663, 59), (0.29166666666666663, 301), (0.29166666666666663, 64), (0.29166666666666663, 495), (0.29166666666666663, 436), (0.29166666666666663, 13), (0.29166666666666663, 75), (0.29166666666666663, 332), (0.29166666666666663, 483), (0.29166666666666663, 189), (0.29166666666666663, 563), (0.29166666666666663, 460), (0.29166666666666663, 147), (0.29166666666666663, 46), (0.29166666666666663, 215), (0.29166666666666663, 497), (0.29166666666666663, 496), (0.29166666666666663, 2), (0.29166666666666663, 529), (0.29166666666666663, 485), (0.29166666666666663, 389), (0.29166666666666663, 276), (0.25, 125), (0.25, 352), (0.25, 26), (0.25, 231), (0.25, 395), (0.25, 398), (0.25, 47), (0.25, 284), (0.25, 238), (0.25, 222), (0.25, 334), (0.25, 188), (0.25, 108), (0.25, 15), (0.25, 141), (0.25, 196), (0.25, 69), (0.25, 581), (0.25, 9), (0.25, 92), (0.25, 116), (0.25, 291), (0.25, 78), (0.25, 145), (0.25, 321), (0.25, 349), (0.25, 243), (0.25, 114), (0.25, 399), (0.25, 96), (0.25, 211), (0.25, 131), (0.25, 163), (0.25, 392), (0.25, 186), (0.25, 524), (0.25, 183), (0.25, 297), (0.25, 296), (0.25, 156), (0.25, 298), (0.25, 289), (0.25, 94), (0.25, 386), (0.25, 152), (0.25, 123), (0.25, 283), (0.25, 34), (0.25, 217), (0.25, 237), (0.25, 448), (0.25, 209), (0.25, 285), (0.25, 133), (0.25, 314), (0.25, 245), (0.25, 29), (0.25, 363), (0.25, 153), (0.25, 197), (0.25, 136), (0.25, 295), (0.25, 22), (0.25, 176), (0.25, 538), (0.25, 30), (0.25, 235), (0.25, 481), (0.25, 67), (0.25, 110), (0.25, 344), (0.25, 357), (0.25, 342), (0.25, 309), (0.25, 175), (0.25, 121), (0.25, 6), (0.25, 233), (0.25, 82), (0.25, 85), (0.25, 99), (0.25, 174), (0.25, 58), (0.25, 24), (0.25, 254), (0.25, 265), (0.25, 93), (0.25, 151), (0.25, 36), (0.25, 339), (0.25, 381), (0.25, 345), (0.25, 40), (0.25, 324), (0.25, 91), (0.25, 177), (0.25, 575), (0.25, 118), (0.16666666666666666, 591), (0.16666666666666666, 521)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 502
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (* x y) y) y) x))
 nr_nodes: 10]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* x 1)) (* 1 x)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.625, 635), (1.5, 401), (1.5, 500), (1.5, 393), (1.5, 597), (1.375, 261), (1.375, 652), (1.375, 502), (1.375, 613), (1.375, 180), (1.375, 598), (1.25, 140), (1.25, 455), (1.25, 74), (1.25, 408), (1.25, 166), (1.25, 438), (1.25, 33), (1.25, 221), (1.25, 193), (1.25, 599), (1.25, 518), (1.25, 509), (1.25, 406), (1.25, 633), (1.25, 663), (1.25, 601), (1.25, 405), (1.25, 390), (1.25, 315), (1.25, 609), (1.25, 442), (1.125, 631), (1.125, 443), (1.125, 413), (1.125, 512), (1.125, 608), (1.125, 520), (1.125, 241), (1.125, 617), (1.125, 465), (1.125, 682), (1.125, 415), (1.125, 587), (1.125, 670), (1.125, 558), (1.125, 516), (1.125, 364), (1.125, 505), (1.125, 621), (1.125, 387), (1.125, 377), (1.125, 105), (1.125, 404), (1.125, 616), (1.125, 54), (1.125, 268), (1.125, 305), (1.125, 638), (1.125, 522), (1.0, 0), (1.0, 417), (1.0, 124), (1.0, 409), (1.0, 664), (1.0, 312), (1.0, 122), (1.0, 618), (1.0, 543), (1.0, 462), (1.0, 551), (1.0, 354), (1.0, 623), (1.0, 262), (1.0, 216), (1.0, 564), (1.0, 627), (1.0, 366), (1.0, 614), (1.0, 335), (0.875, 383), (0.875, 327), (0.875, 71), (0.875, 548), (0.875, 423), (0.875, 535), (0.875, 57), (0.75, 504), (0.75, 684), (0.75, 647), (0.75, 634), (0.75, 531), (0.75, 642), (0.75, 308), (0.75, 10), (0.75, 661), (0.75, 666), (0.75, 84), (0.75, 170), (0.75, 577), (0.75, 545), (0.75, 385), (0.75, 425), (0.75, 150), (0.75, 478), (0.75, 552), (0.75, 378), (0.75, 178), (0.75, 275), (0.75, 669), (0.75, 546), (0.75, 403), (0.75, 510), (0.75, 316), (0.75, 461), (0.75, 570), (0.75, 426), (0.75, 317), (0.75, 637), (0.75, 636), (0.75, 677), (0.75, 536), (0.6666666666666666, 424), (0.6666666666666666, 646), (0.625, 549), (0.625, 373), (0.625, 213), (0.625, 419), (0.625, 533), (0.625, 206), (0.625, 50), (0.625, 578), (0.625, 41), (0.625, 278), (0.625, 72), (0.625, 115), (0.625, 288), (0.625, 547), (0.625, 132), (0.625, 79), (0.625, 554), (0.625, 207), (0.625, 657), (0.625, 479), (0.625, 612), (0.625, 440), (0.625, 444), (0.625, 454), (0.625, 498), (0.625, 97), (0.625, 182), (0.625, 659), (0.625, 606), (0.625, 228), (0.625, 304), (0.625, 556), (0.625, 555), (0.625, 179), (0.625, 550), (0.625, 656), (0.625, 626), (0.625, 325), (0.625, 640), (0.625, 191), (0.625, 557), (0.5416666666666666, 81), (0.5416666666666666, 450), (0.5416666666666666, 109), (0.5416666666666666, 559), (0.5416666666666666, 318), (0.5416666666666666, 562), (0.5416666666666666, 382), (0.5416666666666666, 673), (0.5416666666666666, 675), (0.5416666666666666, 19), (0.5416666666666666, 292), (0.5416666666666666, 449), (0.5416666666666666, 672), (0.5, 164), (0.5, 253), (0.5, 615), (0.5, 282), (0.5, 681), (0.5, 569), (0.5, 35), (0.5, 683), (0.5, 566), (0.5, 679), (0.5, 464), (0.5, 685), (0.5, 526), (0.5, 603), (0.5, 463), (0.5, 290), (0.5, 302), (0.5, 458), (0.5, 223), (0.5, 573), (0.5, 60), (0.5, 456), (0.5, 582), (0.5, 356), (0.5, 351), (0.5, 532), (0.5, 654), (0.5, 204), (0.5, 574), (0.5, 38), (0.5, 625), (0.5, 553), (0.5, 453), (0.5, 212), (0.5, 568), (0.5, 641), (0.5, 185), (0.5, 514), (0.5, 219), (0.5, 365), (0.5, 21), (0.5, 605), (0.5, 580), (0.5, 628), (0.5, 528), (0.5, 629), (0.5, 384), (0.5, 322), (0.5, 650), (0.5, 155), (0.5, 380), (0.5, 571), (0.5, 234), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 467), (0.4464285714285714, 251), (0.41666666666666663, 644), (0.41666666666666663, 260), (0.41666666666666663, 368), (0.41666666666666663, 279), (0.41666666666666663, 469), (0.41666666666666663, 589), (0.41666666666666663, 246), (0.41666666666666663, 473), (0.41666666666666663, 596), (0.41666666666666663, 250), (0.41666666666666663, 477), (0.41666666666666663, 588), (0.41666666666666663, 585), (0.41666666666666663, 655), (0.41666666666666663, 541), (0.41666666666666663, 230), (0.41666666666666663, 595), (0.41666666666666663, 369), (0.41666666666666663, 39), (0.41666666666666663, 572), (0.41666666666666663, 232), (0.41666666666666663, 367), (0.41666666666666663, 306), (0.41666666666666663, 434), (0.41666666666666663, 470), (0.41666666666666663, 472), (0.41666666666666663, 303), (0.41666666666666663, 468), (0.41666666666666663, 326), (0.41666666666666663, 428), (0.41666666666666663, 169), (0.41666666666666663, 593), (0.41666666666666663, 199), (0.41666666666666663, 590), (0.41666666666666663, 474), (0.41666666666666663, 594), (0.41666666666666663, 37), (0.41666666666666663, 137), (0.41666666666666663, 507), (0.41666666666666663, 471), (0.41666666666666663, 190), (0.41666666666666663, 267), (0.375, 653), (0.375, 126), (0.375, 503), (0.375, 229), (0.375, 662), (0.375, 7), (0.375, 484), (0.375, 607), (0.375, 165), (0.375, 274), (0.375, 353), (0.375, 519), (0.375, 4), (0.375, 660), (0.375, 45), (0.375, 400), (0.375, 446), (0.375, 333), (0.375, 624), (0.375, 240), (0.375, 104), (0.375, 331), (0.375, 355), (0.375, 61), (0.375, 432), (0.375, 486), (0.375, 256), (0.375, 480), (0.375, 340), (0.375, 488), (0.375, 542), (0.375, 411), (0.375, 1), (0.375, 184), (0.375, 421), (0.375, 143), (0.375, 537), (0.375, 394), (0.375, 330), (0.3333333333333333, 648), (0.3333333333333333, 139), (0.3214285714285714, 194), (0.3125, 135), (0.29545454545454547, 27), (0.29545454545454547, 313), (0.29166666666666663, 600), (0.29166666666666663, 201), (0.29166666666666663, 59), (0.29166666666666663, 487), (0.29166666666666663, 266), (0.29166666666666663, 397), (0.29166666666666663, 276), (0.29166666666666663, 676), (0.29166666666666663, 46), (0.29166666666666663, 215), (0.29166666666666663, 489), (0.29166666666666663, 622), (0.29166666666666663, 668), (0.29166666666666663, 189), (0.29166666666666663, 496), (0.29166666666666663, 497), (0.29166666666666663, 154), (0.29166666666666663, 495), (0.29166666666666663, 491), (0.29166666666666663, 208), (0.29166666666666663, 5), (0.29166666666666663, 214), (0.29166666666666663, 301), (0.29166666666666663, 483), (0.29166666666666663, 286), (0.29166666666666663, 485), (0.29166666666666663, 620), (0.29166666666666663, 148), (0.29166666666666663, 493), (0.29166666666666663, 452), (0.29166666666666663, 64), (0.29166666666666663, 611), (0.29166666666666663, 584), (0.29166666666666663, 563), (0.29166666666666663, 270), (0.29166666666666663, 460), (0.29166666666666663, 389), (0.29166666666666663, 2), (0.29166666666666663, 529), (0.29166666666666663, 75), (0.29166666666666663, 561), (0.29166666666666663, 147), (0.29166666666666663, 13), (0.29166666666666663, 436), (0.29166666666666663, 539), (0.29166666666666663, 414), (0.29166666666666663, 674), (0.29166666666666663, 332), (0.29166666666666663, 374), (0.29166666666666663, 430), (0.25, 231), (0.25, 291), (0.25, 108), (0.25, 630), (0.25, 581), (0.25, 680), (0.25, 222), (0.25, 398), (0.25, 69), (0.25, 321), (0.25, 284), (0.25, 334), (0.25, 238), (0.25, 196), (0.25, 92), (0.25, 15), (0.25, 125), (0.25, 26), (0.25, 116), (0.25, 395), (0.25, 78), (0.25, 352), (0.25, 145), (0.25, 141), (0.25, 47), (0.25, 188), (0.25, 9), (0.16666666666666666, 632)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 597
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.625, 635), (1.5, 401), (1.5, 688), (1.5, 393), (1.5, 597), (1.5, 500), (1.375, 180), (1.375, 693), (1.375, 690), (1.375, 652), (1.375, 711), (1.375, 689), (1.375, 613), (1.375, 261), (1.375, 598), (1.375, 502), (1.25, 694), (1.25, 697), (1.25, 601), (1.25, 509), (1.25, 33), (1.25, 518), (1.25, 599), (1.25, 193), (1.25, 718), (1.25, 633), (1.25, 74), (1.25, 408), (1.25, 438), (1.25, 390), (1.25, 406), (1.25, 405), (1.25, 776), (1.25, 698), (1.25, 140), (1.25, 221), (1.25, 707), (1.25, 695), (1.25, 609), (1.25, 663), (1.25, 442), (1.25, 455), (1.25, 767), (1.25, 315), (1.25, 166), (1.125, 617), (1.125, 105), (1.125, 522), (1.125, 268), (1.125, 751), (1.125, 682), (1.125, 558), (1.125, 708), (1.125, 54), (1.125, 387), (1.125, 512), (1.125, 413), (1.125, 670), (1.125, 747), (1.125, 713), (1.125, 305), (1.125, 465), (1.125, 608), (1.125, 730), (1.125, 725), (1.125, 770), (1.125, 364), (1.125, 377), (1.125, 516), (1.125, 241), (1.125, 638), (1.125, 719), (1.125, 443), (1.125, 415), (1.125, 631), (1.125, 616), (1.125, 715), (1.125, 779), (1.125, 621), (1.125, 505), (1.125, 404), (1.125, 587), (1.125, 520), (1.125, 703), (1.0, 216), (1.0, 462), (1.0, 122), (1.0, 623), (1.0, 614), (1.0, 564), (1.0, 704), (1.0, 354), (1.0, 366), (1.0, 543), (1.0, 723), (1.0, 687), (1.0, 262), (1.0, 627), (1.0, 312), (1.0, 551), (1.0, 731), (1.0, 124), (1.0, 417), (1.0, 409), (1.0, 0), (1.0, 335), (1.0, 664), (1.0, 618), (0.875, 742), (0.875, 744), (0.875, 754), (0.875, 327), (0.875, 548), (0.875, 535), (0.875, 423), (0.875, 748), (0.875, 71), (0.875, 57), (0.875, 383), (0.75, 762), (0.75, 426), (0.75, 636), (0.75, 661), (0.75, 669), (0.75, 317), (0.75, 634), (0.75, 308), (0.75, 666), (0.75, 478), (0.75, 510), (0.75, 385), (0.75, 763), (0.75, 178), (0.75, 749), (0.75, 546), (0.75, 461), (0.75, 702), (0.75, 637), (0.75, 425), (0.75, 684), (0.75, 756), (0.75, 552), (0.75, 760), (0.75, 743), (0.75, 570), (0.75, 531), (0.75, 403), (0.75, 170), (0.75, 10), (0.75, 642), (0.75, 84), (0.75, 536), (0.75, 577), (0.75, 545), (0.75, 734), (0.75, 733), (0.75, 378), (0.75, 647), (0.75, 275), (0.75, 504), (0.75, 765), (0.75, 316), (0.75, 677), (0.75, 783), (0.75, 150), (0.6666666666666666, 646), (0.6666666666666666, 424), (0.625, 706), (0.625, 533), (0.625, 373), (0.625, 785), (0.625, 213), (0.625, 50), (0.625, 182), (0.625, 750), (0.625, 547), (0.625, 612), (0.625, 97), (0.625, 640), (0.625, 440), (0.625, 736), (0.625, 740), (0.625, 179), (0.625, 132), (0.625, 726), (0.625, 709), (0.625, 444), (0.625, 717), (0.625, 771), (0.625, 659), (0.625, 557), (0.625, 778), (0.625, 498), (0.625, 72), (0.625, 578), (0.625, 727), (0.625, 773), (0.625, 550), (0.625, 556), (0.625, 606), (0.625, 780), (0.625, 288), (0.625, 206), (0.625, 626), (0.625, 115), (0.625, 191), (0.625, 304), (0.625, 781), (0.625, 774), (0.625, 325), (0.625, 479), (0.625, 549), (0.625, 228), (0.625, 764), (0.625, 454), (0.625, 745), (0.625, 656), (0.625, 758), (0.625, 41), (0.625, 419), (0.625, 278), (0.625, 207), (0.625, 555), (0.625, 554), (0.625, 79), (0.625, 657), (0.5416666666666666, 675), (0.5416666666666666, 318), (0.5416666666666666, 559), (0.5416666666666666, 81), (0.5416666666666666, 673), (0.5416666666666666, 109), (0.5416666666666666, 450), (0.5416666666666666, 672), (0.5416666666666666, 382), (0.5416666666666666, 292), (0.5416666666666666, 449), (0.5416666666666666, 562), (0.5416666666666666, 19), (0.5416666666666666, 729), (0.5, 282), (0.5, 514), (0.5, 603), (0.5, 365), (0.5, 679), (0.5, 625), (0.5, 302), (0.5, 683), (0.5, 253), (0.5, 155), (0.5, 38), (0.5, 615), (0.5, 681), (0.5, 573), (0.5, 728), (0.5, 528), (0.5, 553), (0.5, 580), (0.5, 641), (0.5, 574), (0.5, 380), (0.5, 526), (0.5, 566), (0.5, 351), (0.5, 453), (0.5, 629), (0.5, 458), (0.5, 568), (0.5, 60), (0.5, 290), (0.5, 21), (0.5, 322), (0.5, 35), (0.5, 650), (0.5, 223), (0.5, 569), (0.5, 463), (0.5, 628), (0.5, 582), (0.5, 464), (0.5, 356), (0.5, 605), (0.5, 219), (0.5, 691), (0.5, 532), (0.5, 384), (0.5, 456), (0.5, 204), (0.5, 777), (0.5, 212), (0.5, 654), (0.5, 738), (0.5, 571), (0.5, 234), (0.5, 164), (0.5, 685), (0.5, 185), (0.5, 735), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 251), (0.4464285714285714, 467), (0.41666666666666663, 326), (0.41666666666666663, 468), (0.41666666666666663, 596), (0.41666666666666663, 477), (0.41666666666666663, 199), (0.41666666666666663, 585), (0.41666666666666663, 589), (0.41666666666666663, 267), (0.41666666666666663, 369), (0.41666666666666663, 306), (0.41666666666666663, 260), (0.41666666666666663, 593), (0.41666666666666663, 590), (0.41666666666666663, 595), (0.41666666666666663, 232), (0.41666666666666663, 303), (0.41666666666666663, 428), (0.41666666666666663, 470), (0.41666666666666663, 471), (0.41666666666666663, 572), (0.41666666666666663, 367), (0.41666666666666663, 473), (0.41666666666666663, 655), (0.41666666666666663, 368), (0.41666666666666663, 190), (0.41666666666666663, 588), (0.41666666666666663, 279), (0.41666666666666663, 137), (0.41666666666666663, 472), (0.41666666666666663, 644), (0.41666666666666663, 250), (0.41666666666666663, 757), (0.41666666666666663, 507), (0.41666666666666663, 37), (0.41666666666666663, 246), (0.41666666666666663, 230), (0.41666666666666663, 594), (0.41666666666666663, 474), (0.41666666666666663, 469), (0.41666666666666663, 39), (0.41666666666666663, 541), (0.41666666666666663, 434), (0.41666666666666663, 169), (0.375, 340), (0.375, 143), (0.375, 484), (0.375, 394), (0.375, 274), (0.375, 746), (0.375, 45), (0.375, 229), (0.375, 411), (0.375, 331), (0.375, 1), (0.375, 333), (0.375, 355), (0.375, 488), (0.375, 104), (0.375, 240), (0.375, 624), (0.375, 700), (0.375, 446), (0.375, 400), (0.375, 256), (0.375, 660), (0.375, 607), (0.375, 184), (0.375, 537), (0.375, 353), (0.375, 542), (0.375, 165), (0.375, 480), (0.375, 662), (0.375, 653), (0.375, 7), (0.375, 126), (0.375, 4), (0.375, 486), (0.375, 421), (0.375, 330), (0.375, 721), (0.375, 503), (0.375, 61), (0.375, 432), (0.375, 519), (0.3333333333333333, 648), (0.3333333333333333, 139), (0.3214285714285714, 194), (0.3125, 135), (0.29545454545454547, 313), (0.29545454545454547, 27), (0.29166666666666663, 59), (0.29166666666666663, 753), (0.29166666666666663, 755), (0.29166666666666663, 201), (0.29166666666666663, 600), (0.16666666666666666, 710), (0.16666666666666666, 768)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 688
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 597
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.625, 786), (1.625, 635), (1.5, 500), (1.5, 688), (1.5, 597), (1.5, 787), (1.5, 788), (1.5, 401), (1.5, 393), (1.375, 689), (1.375, 794), (1.375, 502), (1.375, 711), (1.375, 690), (1.375, 693), (1.375, 598), (1.375, 261), (1.375, 613), (1.375, 652), (1.375, 180), (1.25, 698), (1.25, 599), (1.25, 814), (1.25, 807), (1.25, 694), (1.25, 315), (1.25, 193), (1.25, 518), (1.25, 633), (1.25, 695), (1.25, 408), (1.25, 140), (1.25, 609), (1.25, 442), (1.25, 438), (1.25, 406), (1.25, 221), (1.25, 707), (1.25, 33), (1.25, 405), (1.25, 800), (1.25, 697), (1.25, 601), (1.25, 767), (1.25, 166), (1.25, 663), (1.25, 74), (1.25, 718), (1.25, 776), (1.25, 796), (1.25, 390), (1.25, 509), (1.25, 455), (1.125, 558), (1.125, 54), (1.125, 747), (1.125, 516), (1.125, 813), (1.125, 638), (1.125, 617), (1.125, 415), (1.125, 404), (1.125, 751), (1.125, 105), (1.125, 305), (1.125, 708), (1.125, 587), (1.125, 268), (1.125, 871), (1.125, 770), (1.125, 387), (1.125, 505), (1.125, 719), (1.125, 443), (1.125, 795), (1.125, 867), (1.125, 843), (1.125, 841), (1.125, 522), (1.125, 815), (1.125, 520), (1.125, 826), (1.125, 608), (1.125, 836), (1.125, 703), (1.125, 413), (1.125, 377), (1.125, 364), (1.125, 241), (1.125, 616), (1.125, 824), (1.125, 682), (1.125, 621), (1.125, 730), (1.125, 821), (1.125, 820), (1.125, 512), (1.125, 713), (1.125, 465), (1.125, 725), (1.125, 802), (1.125, 670), (1.125, 715), (1.125, 779), (1.125, 631), (1.0, 863), (1.0, 543), (1.0, 216), (1.0, 854), (1.0, 564), (1.0, 409), (1.0, 664), (1.0, 799), (1.0, 124), (1.0, 792), (1.0, 354), (1.0, 262), (1.0, 818), (1.0, 0), (1.0, 335), (1.0, 623), (1.0, 723), (1.0, 122), (1.0, 551), (1.0, 846), (1.0, 312), (1.0, 835), (1.0, 627), (1.0, 366), (1.0, 614), (1.0, 462), (1.0, 618), (1.0, 417), (1.0, 731), (1.0, 687), (1.0, 852), (1.0, 704), (1.0, 850), (0.875, 327), (0.875, 57), (0.875, 383), (0.875, 71), (0.875, 855), (0.875, 742), (0.875, 548), (0.875, 748), (0.875, 423), (0.875, 858), (0.875, 754), (0.875, 535), (0.875, 744), (0.75, 647), (0.75, 378), (0.75, 546), (0.75, 859), (0.75, 783), (0.75, 661), (0.75, 504), (0.75, 756), (0.75, 763), (0.75, 861), (0.75, 749), (0.75, 552), (0.75, 865), (0.75, 870), (0.75, 825), (0.75, 577), (0.75, 878), (0.75, 702), (0.75, 570), (0.75, 150), (0.75, 801), (0.75, 684), (0.75, 403), (0.75, 385), (0.75, 762), (0.75, 877), (0.75, 170), (0.75, 669), (0.75, 804), (0.75, 84), (0.75, 425), (0.75, 308), (0.75, 637), (0.75, 765), (0.75, 178), (0.75, 875), (0.75, 851), (0.75, 426), (0.75, 642), (0.75, 666), (0.75, 545), (0.75, 734), (0.75, 634), (0.75, 803), (0.75, 536), (0.75, 461), (0.75, 316), (0.75, 275), (0.75, 317), (0.75, 636), (0.75, 510), (0.75, 733), (0.75, 743), (0.75, 760), (0.75, 10), (0.75, 872), (0.75, 862), (0.75, 531), (0.75, 478), (0.75, 677), (0.6666666666666666, 646), (0.6666666666666666, 424), (0.625, 745), (0.625, 555), (0.625, 288), (0.625, 79), (0.625, 857), (0.625, 864), (0.625, 115), (0.625, 791), (0.625, 578), (0.625, 709), (0.625, 773), (0.625, 827), (0.625, 182), (0.625, 72), (0.625, 740), (0.625, 750), (0.625, 533), (0.625, 50), (0.625, 556), (0.625, 764), (0.625, 325), (0.625, 213), (0.625, 798), (0.625, 419), (0.625, 656), (0.625, 706), (0.625, 228), (0.625, 554), (0.625, 41), (0.625, 206), (0.625, 822), (0.625, 727), (0.625, 373), (0.625, 97), (0.625, 785), (0.625, 547), (0.625, 847), (0.625, 479), (0.625, 659), (0.625, 207), (0.625, 549), (0.625, 774), (0.625, 557), (0.625, 736), (0.625, 657), (0.625, 809), (0.625, 454), (0.625, 758), (0.625, 717), (0.625, 806), (0.625, 440), (0.625, 132), (0.625, 781), (0.625, 778), (0.625, 606), (0.625, 816), (0.625, 726), (0.625, 550), (0.625, 179), (0.625, 771), (0.625, 780), (0.625, 278), (0.625, 612), (0.625, 444), (0.625, 626), (0.625, 868), (0.625, 304), (0.625, 191), (0.625, 640), (0.625, 498), (0.5416666666666666, 449), (0.5416666666666666, 19), (0.5416666666666666, 81), (0.5416666666666666, 729), (0.5416666666666666, 559), (0.5416666666666666, 672), (0.5416666666666666, 673), (0.5416666666666666, 675), (0.5416666666666666, 793), (0.5416666666666666, 318), (0.5416666666666666, 382), (0.5416666666666666, 109), (0.5416666666666666, 450), (0.5416666666666666, 562), (0.5416666666666666, 292), (0.5, 253), (0.5, 532), (0.5, 21), (0.5, 625), (0.5, 302), (0.5, 691), (0.5, 641), (0.5, 290), (0.5, 514), (0.5, 456), (0.5, 365), (0.5, 234), (0.5, 580), (0.5, 526), (0.5, 681), (0.5, 566), (0.5, 60), (0.5, 683), (0.5, 605), (0.5, 458), (0.5, 185), (0.5, 777), (0.5, 797), (0.5, 453), (0.5, 219), (0.5, 356), (0.5, 35), (0.5, 679), (0.5, 735), (0.5, 728), (0.5, 650), (0.5, 789), (0.5, 322), (0.5, 351), (0.5, 573), (0.5, 738), (0.5, 464), (0.5, 874), (0.5, 615), (0.5, 380), (0.5, 571), (0.5, 204), (0.5, 212), (0.5, 569), (0.5, 603), (0.5, 838), (0.5, 38), (0.5, 685), (0.5, 223), (0.5, 553), (0.5, 574), (0.5, 384), (0.5, 629), (0.5, 463), (0.5, 155), (0.5, 654), (0.5, 528), (0.5, 844), (0.5, 282), (0.5, 829), (0.5, 568), (0.5, 582), (0.5, 164), (0.5, 628), (0.475, 83), (0.4583333333333333, 167), (0.4464285714285714, 251), (0.4464285714285714, 467), (0.41666666666666663, 833), (0.41666666666666663, 593), (0.41666666666666663, 326), (0.41666666666666663, 589), (0.41666666666666663, 471), (0.41666666666666663, 303), (0.41666666666666663, 267), (0.41666666666666663, 590), (0.41666666666666663, 260), (0.41666666666666663, 585), (0.41666666666666663, 572), (0.41666666666666663, 477), (0.41666666666666663, 232), (0.41666666666666663, 470), (0.41666666666666663, 306), (0.41666666666666663, 369), (0.41666666666666663, 840), (0.41666666666666663, 468), (0.41666666666666663, 199), (0.41666666666666663, 473), (0.41666666666666663, 596), (0.41666666666666663, 428), (0.41666666666666663, 595), (0.41666666666666663, 655), (0.41666666666666663, 367), (0.375, 849), (0.375, 823), (0.375, 831), (0.29166666666666663, 805), (0.29166666666666663, 853), (0.29166666666666663, 845), (0.29166666666666663, 860), (0.29166666666666663, 810), (0.16666666666666666, 812)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 688
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 597
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.625, 786), (1.625, 635), (1.625, 879), (1.5, 597), (1.5, 880), (1.5, 688), (1.5, 788), (1.5, 883), (1.5, 500), (1.5, 787), (1.5, 401), (1.5, 393), (1.375, 613), (1.375, 693), (1.375, 885), (1.375, 180), (1.375, 652), (1.375, 794), (1.375, 502), (1.375, 898), (1.375, 884), (1.375, 711), (1.375, 690), (1.375, 598), (1.375, 689), (1.375, 261), (1.25, 406), (1.25, 796), (1.25, 814), (1.25, 140), (1.25, 932), (1.25, 776), (1.25, 663), (1.25, 518), (1.25, 718), (1.25, 601), (1.25, 509), (1.25, 408), (1.25, 166), (1.25, 903), (1.25, 405), (1.25, 695), (1.25, 912), (1.25, 698), (1.25, 455), (1.25, 74), (1.25, 609), (1.25, 697), (1.25, 908), (1.25, 390), (1.25, 922), (1.25, 33), (1.25, 707), (1.25, 694), (1.25, 442), (1.25, 961), (1.25, 438), (1.25, 767), (1.25, 807), (1.25, 221), (1.25, 599), (1.25, 193), (1.25, 633), (1.25, 897), (1.25, 315), (1.25, 800), (1.25, 896), (1.25, 886), (1.125, 725), (1.125, 621), (1.125, 836), (1.125, 516), (1.125, 843), (1.125, 703), (1.125, 105), (1.125, 821), (1.125, 719), (1.125, 813), (1.125, 841), (1.125, 616), (1.125, 520), (1.125, 54), (1.125, 558), (1.125, 670), (1.125, 638), (1.125, 608), (1.125, 824), (1.125, 826), (1.125, 512), (1.125, 925), (1.125, 443), (1.125, 779), (1.125, 924), (1.125, 747), (1.125, 937), (1.125, 751), (1.125, 940), (1.125, 708), (1.125, 305), (1.125, 587), (1.125, 929), (1.125, 713), (1.125, 682), (1.125, 770), (1.125, 867), (1.125, 631), (1.125, 415), (1.125, 377), (1.125, 939), (1.125, 364), (1.125, 919), (1.125, 915), (1.125, 923), (1.125, 522), (1.125, 505), (1.125, 820), (1.125, 241), (1.125, 404), (1.125, 917), (1.125, 795), (1.125, 465), (1.125, 268), (1.125, 730), (1.125, 387), (1.125, 802), (1.125, 914), (1.125, 617), (1.125, 413), (1.125, 930), (1.125, 715), (1.125, 815), (1.125, 871), (1.0, 312), (1.0, 614), (1.0, 956), (1.0, 846), (1.0, 366), (1.0, 664), (1.0, 543), (1.0, 462), (1.0, 124), (1.0, 704), (1.0, 957), (1.0, 863), (1.0, 921), (1.0, 792), (1.0, 882), (1.0, 818), (1.0, 409), (1.0, 354), (1.0, 799), (1.0, 723), (1.0, 852), (1.0, 623), (1.0, 551), (1.0, 262), (1.0, 933), (1.0, 888), (1.0, 687), (1.0, 850), (1.0, 943), (1.0, 835), (1.0, 954), (1.0, 618), (1.0, 122), (1.0, 0), (1.0, 927), (1.0, 564), (1.0, 731), (1.0, 417), (1.0, 854), (1.0, 335), (1.0, 627), (1.0, 216), (0.875, 548), (0.875, 383), (0.875, 57), (0.875, 744), (0.875, 71), (0.875, 423), (0.875, 858), (0.875, 742), (0.875, 535), (0.875, 964), (0.875, 748), (0.875, 754), (0.875, 892), (0.875, 855), (0.875, 327), (0.75, 378), (0.75, 666), (0.75, 545), (0.75, 743), (0.75, 385), (0.75, 510), (0.75, 906), (0.75, 636), (0.75, 825), (0.75, 570), (0.75, 734), (0.75, 504), (0.75, 951), (0.75, 872), (0.75, 763), (0.75, 801), (0.75, 765), (0.75, 859), (0.75, 920), (0.75, 861), (0.75, 733), (0.75, 965), (0.75, 661), (0.75, 677), (0.75, 760), (0.75, 936), (0.75, 403), (0.75, 150), (0.75, 904), (0.75, 684), (0.75, 316), (0.75, 783), (0.75, 910), (0.75, 862), (0.75, 84), (0.75, 461), (0.75, 634), (0.75, 803), (0.75, 647), (0.75, 911), (0.75, 756), (0.75, 317), (0.75, 702), (0.75, 275), (0.75, 851), (0.75, 10), (0.75, 425), (0.75, 669), (0.75, 546), (0.75, 478), (0.75, 552), (0.75, 902), (0.75, 170), (0.75, 875), (0.75, 749), (0.75, 536), (0.75, 577), (0.75, 870), (0.75, 637), (0.75, 531), (0.75, 878), (0.75, 178), (0.75, 762), (0.75, 426), (0.75, 963), (0.75, 865), (0.75, 804), (0.75, 642), (0.75, 877), (0.75, 308), (0.6666666666666666, 424), (0.6666666666666666, 646), (0.625, 764), (0.625, 727), (0.625, 498), (0.625, 781), (0.625, 557), (0.625, 656), (0.625, 207), (0.625, 578), (0.625, 934), (0.625, 555), (0.625, 228), (0.625, 736), (0.625, 946), (0.625, 115), (0.625, 745), (0.625, 809), (0.625, 97), (0.625, 373), (0.625, 847), (0.625, 556), (0.625, 913), (0.625, 50), (0.625, 606), (0.625, 278), (0.625, 550), (0.625, 780), (0.625, 758), (0.625, 785), (0.625, 657), (0.625, 740), (0.625, 659), (0.625, 791), (0.625, 806), (0.625, 288), (0.625, 868), (0.625, 864), (0.625, 717), (0.625, 822), (0.625, 182), (0.625, 191), (0.625, 750), (0.625, 899), (0.625, 41), (0.625, 132), (0.625, 454), (0.625, 325), (0.625, 612), (0.625, 857), (0.625, 952), (0.625, 640), (0.625, 709), (0.625, 953), (0.625, 547), (0.625, 549), (0.625, 774), (0.625, 304), (0.625, 726), (0.625, 554), (0.625, 440), (0.625, 79), (0.625, 213), (0.625, 179), (0.625, 626), (0.625, 827), (0.625, 533), (0.625, 72), (0.625, 773), (0.625, 419), (0.625, 479), (0.625, 706), (0.625, 778), (0.625, 771), (0.625, 798), (0.625, 816), (0.625, 206), (0.625, 444), (0.5416666666666666, 793), (0.5416666666666666, 450), (0.5416666666666666, 449), (0.5416666666666666, 673), (0.5416666666666666, 559), (0.5416666666666666, 382), (0.5416666666666666, 562), (0.5416666666666666, 19), (0.5416666666666666, 672), (0.5416666666666666, 318), (0.5416666666666666, 889), (0.5416666666666666, 292), (0.5416666666666666, 81), (0.5416666666666666, 109), (0.5416666666666666, 729), (0.5416666666666666, 675), (0.5, 356), (0.5, 641), (0.5, 526), (0.5, 683), (0.5, 935), (0.5, 185), (0.5, 302), (0.5, 290), (0.5, 681), (0.5, 566), (0.5, 777), (0.5, 219), (0.5, 60), (0.5, 916), (0.5, 21), (0.5, 605), (0.5, 458), (0.5, 894), (0.5, 797), (0.5, 625), (0.5, 365), (0.5, 891), (0.5, 514), (0.5, 234), (0.5, 691), (0.5, 907), (0.5, 580), (0.5, 532), (0.5, 35), (0.5, 967), (0.5, 453), (0.5, 456), (0.5, 928), (0.5, 948), (0.5, 950), (0.5, 253), (0.475, 962), (0.41666666666666663, 958), (0.41666666666666663, 955), (0.375, 969), (0.375, 949), (0.375, 900), (0.29166666666666663, 931), (0.29166666666666663, 941), (0.25, 959), (0.25, 945), (0.16666666666666666, 947)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 879
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 597
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
(CANDIDATE)[id: 880
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.625, 786), (1.625, 879), (1.625, 635), (1.5, 787), (1.5, 597), (1.5, 393), (1.5, 974), (1.5, 975), (1.5, 883), (1.5, 976), (1.5, 973), (1.5, 688), (1.5, 401), (1.5, 972), (1.5, 1029), (1.5, 500), (1.5, 880), (1.5, 979), (1.5, 788), (1.375, 794), (1.375, 977), (1.375, 997), (1.375, 652), (1.375, 693), (1.375, 1032), (1.375, 690), (1.375, 613), (1.375, 689), (1.375, 1043), (1.375, 711), (1.375, 180), (1.375, 261), (1.375, 885), (1.375, 1058), (1.375, 598), (1.375, 898), (1.375, 884), (1.375, 982), (1.375, 1052), (1.375, 994), (1.375, 502), (1.25, 1028), (1.25, 405), (1.25, 390), (1.25, 518), (1.25, 166), (1.25, 1004), (1.25, 996), (1.25, 912), (1.25, 814), (1.25, 455), (1.25, 509), (1.25, 193), (1.25, 694), (1.25, 903), (1.25, 800), (1.25, 922), (1.25, 74), (1.25, 663), (1.25, 776), (1.25, 986), (1.25, 908), (1.25, 961), (1.25, 140), (1.25, 33), (1.25, 718), (1.25, 1045), (1.25, 807), (1.25, 221), (1.25, 767), (1.25, 1010), (1.25, 599), (1.25, 707), (1.25, 697), (1.25, 406), (1.25, 1009), (1.25, 932), (1.25, 601), (1.25, 315), (1.25, 1050), (1.25, 609), (1.25, 698), (1.25, 442), (1.25, 886), (1.25, 408), (1.25, 1001), (1.25, 897), (1.25, 438), (1.25, 633), (1.25, 695), (1.25, 896), (1.25, 796), (1.25, 1034), (1.25, 1017), (1.25, 987), (1.125, 940), (1.125, 820), (1.125, 1002), (1.125, 465), (1.125, 105), (1.125, 1021), (1.125, 919), (1.125, 305), (1.125, 841), (1.125, 621), (1.125, 387), (1.125, 713), (1.125, 939), (1.125, 815), (1.125, 516), (1.125, 1048), (1.125, 719), (1.125, 241), (1.125, 1035), (1.125, 364), (1.125, 587), (1.125, 443), (1.125, 708), (1.125, 770), (1.125, 725), (1.125, 821), (1.125, 631), (1.125, 802), (1.125, 751), (1.125, 522), (1.125, 617), (1.125, 923), (1.125, 990), (1.125, 747), (1.125, 1030), (1.125, 415), (1.125, 268), (1.125, 980), (1.125, 520), (1.125, 703), (1.125, 1037), (1.125, 843), (1.125, 924), (1.125, 836), (1.125, 715), (1.125, 558), (1.125, 413), (1.125, 1065), (1.125, 914), (1.125, 826), (1.125, 937), (1.125, 1023), (1.125, 377), (1.125, 505), (1.125, 682), (1.125, 1024), (1.125, 779), (1.125, 871), (1.125, 867), (1.125, 795), (1.125, 1018), (1.125, 915), (1.125, 670), (1.125, 512), (1.125, 608), (1.125, 1005), (1.125, 930), (1.125, 54), (1.125, 929), (1.125, 730), (1.125, 1025), (1.125, 917), (1.125, 1051), (1.125, 404), (1.125, 616), (1.125, 824), (1.125, 638), (1.125, 925), (1.125, 813), (1.0, 933), (1.0, 731), (1.0, 799), (1.0, 551), (1.0, 564), (1.0, 954), (1.0, 664), (1.0, 627), (1.0, 704), (1.0, 366), (1.0, 943), (1.0, 846), (1.0, 850), (1.0, 818), (1.0, 723), (1.0, 852), (1.0, 0), (1.0, 623), (1.0, 618), (1.0, 1061), (1.0, 1014), (1.0, 854), (1.0, 124), (1.0, 957), (1.0, 1059), (1.0, 882), (1.0, 543), (1.0, 687), (1.0, 312), (1.0, 409), (1.0, 835), (1.0, 614), (1.0, 792), (1.0, 462), (1.0, 122), (1.0, 354), (1.0, 335), (1.0, 984), (1.0, 921), (1.0, 863), (1.0, 888), (1.0, 417), (1.0, 956), (1.0, 262), (1.0, 1057), (1.0, 927), (1.0, 216), (0.875, 57), (0.875, 748), (0.875, 383), (0.875, 327), (0.875, 855), (0.875, 981), (0.875, 892), (0.875, 548), (0.875, 858), (0.875, 744), (0.875, 1063), (0.875, 754), (0.875, 535), (0.875, 742), (0.875, 971), (0.875, 964), (0.875, 71), (0.875, 423), (0.75, 870), (0.75, 637), (0.75, 902), (0.75, 756), (0.75, 1053), (0.75, 634), (0.75, 461), (0.75, 910), (0.75, 861), (0.75, 403), (0.75, 84), (0.75, 545), (0.75, 872), (0.75, 510), (0.75, 170), (0.75, 702), (0.75, 992), (0.75, 425), (0.75, 684), (0.75, 316), (0.75, 734), (0.75, 877), (0.75, 378), (0.75, 804), (0.75, 760), (0.75, 570), (0.75, 10), (0.75, 749), (0.75, 904), (0.75, 875), (0.75, 951), (0.75, 642), (0.75, 178), (0.75, 275), (0.75, 963), (0.75, 150), (0.75, 878), (0.75, 862), (0.75, 317), (0.75, 765), (0.75, 825), (0.75, 531), (0.75, 669), (0.75, 504), (0.75, 763), (0.75, 801), (0.75, 385), (0.75, 743), (0.75, 546), (0.75, 851), (0.75, 661), (0.75, 859), (0.75, 783), (0.75, 308), (0.75, 666), (0.75, 636), (0.75, 906), (0.75, 647), (0.75, 733), (0.75, 803), (0.75, 478), (0.75, 577), (0.75, 552), (0.75, 426), (0.75, 536), (0.75, 762), (0.75, 677), (0.75, 920), (0.75, 865), (0.75, 911), (0.75, 936), (0.75, 965), (0.6666666666666666, 424), (0.6666666666666666, 646), (0.625, 659), (0.625, 745), (0.625, 736), (0.625, 97), (0.625, 868), (0.625, 946), (0.625, 115), (0.625, 373), (0.625, 656), (0.625, 50), (0.625, 556), (0.625, 864), (0.625, 780), (0.625, 578), (0.625, 809), (0.625, 606), (0.625, 953), (0.625, 1041), (0.625, 550), (0.625, 1038), (0.625, 1006), (0.625, 764), (0.625, 934), (0.625, 640), (0.625, 547), (0.625, 758), (0.625, 1007), (0.625, 1027), (0.625, 791), (0.625, 557), (0.625, 913), (0.625, 440), (0.625, 806), (0.625, 785), (0.625, 179), (0.625, 750), (0.625, 727), (0.625, 304), (0.625, 726), (0.625, 857), (0.625, 952), (0.625, 41), (0.625, 899), (0.625, 709), (0.625, 454), (0.625, 717), (0.625, 1047), (0.625, 498), (0.625, 325), (0.625, 555), (0.625, 554), (0.625, 827), (0.625, 822), (0.625, 612), (0.625, 657), (0.625, 288), (0.625, 207), (0.625, 740), (0.625, 228), (0.625, 781), (0.625, 626), (0.625, 182), (0.625, 549), (0.625, 278), (0.625, 132), (0.625, 213), (0.625, 847), (0.625, 774), (0.625, 191), (0.625, 79), (0.5, 978), (0.5, 1060), (0.5, 1056), (0.41666666666666663, 989), (0.375, 1040), (0.375, 1042), (0.375, 1049), (0.375, 1033), (0.375, 999), (0.29166666666666663, 1019), (0.29166666666666663, 1016), (0.29166666666666663, 1044), (0.29166666666666663, 1046), (0.25, 1055), (0.25, 1012), (0.25, 1031), (0.16666666666666666, 1026)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 879
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 787
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 1 (* (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 597
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.625, 1066), (1.625, 786), (1.625, 635), (1.625, 879), (1.5, 1071), (1.5, 1029), (1.5, 1067), (1.5, 880), (1.5, 500), (1.5, 1073), (1.5, 973), (1.5, 972), (1.5, 401), (1.5, 1074), (1.5, 1079), (1.5, 979), (1.5, 597), (1.5, 976), (1.5, 787), (1.5, 788), (1.5, 883), (1.5, 688), (1.5, 974), (1.5, 393), (1.5, 1070), (1.5, 975), (1.375, 1083), (1.375, 598), (1.375, 994), (1.375, 693), (1.375, 613), (1.375, 1088), (1.375, 1032), (1.375, 977), (1.375, 1043), (1.375, 1090), (1.375, 982), (1.375, 502), (1.375, 884), (1.375, 885), (1.375, 794), (1.375, 997), (1.375, 180), (1.375, 261), (1.375, 689), (1.375, 1052), (1.375, 690), (1.375, 711), (1.375, 898), (1.375, 652), (1.375, 1058), (1.25, 315), (1.25, 601), (1.25, 1010), (1.25, 1028), (1.25, 707), (1.25, 1101), (1.25, 1122), (1.25, 663), (1.25, 1116), (1.25, 406), (1.25, 697), (1.25, 442), (1.25, 807), (1.25, 1034), (1.25, 405), (1.25, 1148), (1.25, 986), (1.25, 1151), (1.25, 1004), (1.25, 796), (1.25, 1050), (1.25, 961), (1.25, 390), (1.25, 1126), (1.25, 987), (1.25, 609), (1.25, 932), (1.25, 140), (1.25, 912), (1.25, 814), (1.25, 74), (1.25, 1114), (1.25, 1009), (1.25, 695), (1.25, 897), (1.25, 694), (1.25, 1017), (1.25, 896), (1.25, 922), (1.25, 193), (1.25, 633), (1.25, 166), (1.25, 1123), (1.25, 33), (1.25, 455), (1.25, 509), (1.25, 776), (1.25, 767), (1.25, 408), (1.25, 1045), (1.25, 518), (1.25, 903), (1.25, 599), (1.25, 886), (1.25, 438), (1.25, 908), (1.25, 996), (1.25, 800), (1.25, 1105), (1.25, 1001), (1.25, 698), (1.25, 221), (1.25, 718), (1.125, 465), (1.125, 404), (1.125, 1133), (1.125, 821), (1.125, 520), (1.125, 512), (1.125, 621), (1.125, 940), (1.125, 1161), (1.125, 1023), (1.125, 54), (1.125, 1048), (1.125, 1051), (1.125, 770), (1.125, 919), (1.125, 980), (1.125, 1018), (1.125, 1030), (1.125, 820), (1.125, 415), (1.125, 608), (1.125, 917), (1.125, 305), (1.125, 670), (1.125, 1159), (1.125, 930), (1.125, 1002), (1.125, 1021), (1.125, 929), (1.125, 867), (1.125, 241), (1.125, 1118), (1.125, 268), (1.125, 638), (1.125, 616), (1.125, 871), (1.125, 1035), (1.125, 703), (1.125, 725), (1.125, 1128), (1.125, 795), (1.125, 802), (1.125, 505), (1.125, 1005), (1.125, 1137), (1.125, 708), (1.125, 1025), (1.125, 836), (1.125, 751), (1.125, 387), (1.125, 826), (1.125, 617), (1.125, 939), (1.125, 925), (1.125, 1024), (1.125, 1037), (1.125, 715), (1.125, 779), (1.125, 522), (1.125, 990), (1.125, 1156), (1.125, 843), (1.125, 1142), (1.125, 1134), (1.125, 364), (1.125, 1121), (1.125, 824), (1.125, 841), (1.125, 1102), (1.125, 719), (1.125, 1097), (1.125, 105), (1.125, 747), (1.125, 730), (1.125, 587), (1.125, 914), (1.125, 1144), (1.125, 815), (1.125, 1153), (1.125, 1141), (1.125, 915), (1.125, 413), (1.125, 631), (1.125, 1107), (1.125, 937), (1.125, 682), (1.125, 1065), (1.125, 1119), (1.125, 713), (1.125, 443), (1.125, 813), (1.125, 923), (1.125, 377), (1.125, 516), (1.125, 924), (1.125, 558), (1.0, 614), (1.0, 462), (1.0, 417), (1.0, 863), (1.0, 1014), (1.0, 354), (1.0, 882), (1.0, 623), (1.0, 984), (1.0, 1061), (1.0, 551), (1.0, 1131), (1.0, 731), (1.0, 854), (1.0, 1059), (1.0, 943), (1.0, 723), (1.0, 124), (1.0, 850), (1.0, 818), (1.0, 216), (1.0, 618), (1.0, 1057), (1.0, 335), (1.0, 921), (1.0, 835), (1.0, 704), (1.0, 792), (1.0, 0), (1.0, 927), (1.0, 627), (1.0, 954), (1.0, 262), (1.0, 957), (1.0, 687), (1.0, 312), (1.0, 799), (1.0, 564), (1.0, 664), (1.0, 543), (1.0, 933), (1.0, 122), (1.0, 366), (1.0, 956), (1.0, 888), (1.0, 846), (1.0, 852), (1.0, 409), (0.875, 1078), (0.875, 971), (0.875, 548), (0.875, 754), (0.875, 423), (0.875, 71), (0.875, 855), (0.875, 964), (0.875, 1089), (0.875, 742), (0.875, 535), (0.875, 744), (0.875, 748), (0.875, 1093), (0.875, 327), (0.875, 383), (0.875, 892), (0.875, 1063), (0.875, 981), (0.875, 858), (0.875, 57), (0.75, 84), (0.75, 992), (0.75, 902), (0.75, 1094), (0.75, 801), (0.75, 1095), (0.75, 1053), (0.75, 749), (0.75, 875), (0.75, 275), (0.75, 760), (0.75, 910), (0.75, 762), (0.75, 951), (0.75, 677), (0.75, 478), (0.75, 862), (0.75, 911), (0.75, 510), (0.75, 804), (0.75, 920), (0.75, 150), (0.75, 10), (0.75, 965), (0.75, 577), (0.75, 1113), (0.75, 851), (0.75, 936), (0.75, 531), (0.75, 803), (0.75, 1111), (0.75, 877), (0.75, 170), (0.75, 426), (0.75, 684), (0.75, 870), (0.75, 743), (0.75, 378), (0.75, 317), (0.75, 666), (0.75, 647), (0.75, 1145), (0.75, 642), (0.75, 702), (0.75, 1152), (0.75, 763), (0.75, 637), (0.75, 963), (0.75, 536), (0.75, 1098), (0.75, 504), (0.75, 734), (0.75, 425), (0.75, 546), (0.75, 385), (0.75, 1092), (0.75, 661), (0.75, 872), (0.75, 178), (0.75, 765), (0.75, 783), (0.75, 865), (0.75, 859), (0.75, 316), (0.75, 545), (0.75, 904), (0.75, 669), (0.75, 906), (0.75, 403), (0.75, 825), (0.75, 570), (0.75, 756), (0.75, 461), (0.75, 636), (0.75, 878), (0.75, 552), (0.75, 308), (0.75, 861), (0.75, 1100), (0.75, 733), (0.75, 634), (0.6666666666666666, 646), (0.6666666666666666, 424), (0.625, 115), (0.625, 656), (0.625, 1127), (0.625, 556), (0.625, 1103), (0.625, 659), (0.625, 1146), (0.625, 373), (0.625, 1110), (0.625, 868), (0.625, 946), (0.625, 745), (0.625, 1140), (0.625, 1085), (0.625, 864), (0.625, 50), (0.625, 736), (0.625, 1076), (0.625, 97), (0.5416666666666666, 1081), (0.5, 1082), (0.5, 1086), (0.5, 1125), (0.5, 1108), (0.5, 1149), (0.41666666666666663, 1068), (0.41666666666666663, 1080), (0.41666666666666663, 1117), (0.375, 1112), (0.375, 1143), (0.375, 1157), (0.375, 1104), (0.375, 1135), (0.29166666666666663, 1150), (0.29166666666666663, 1139), (0.29166666666666663, 1099), (0.25, 1130), (0.25, 1155)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1066
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 879
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1071
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) y) x) x))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.625, 1162), (1.625, 1163), (1.625, 879), (1.625, 635), (1.625, 786), (1.625, 1066), (1.5, 976), (1.5, 1166), (1.5, 597), (1.5, 787), (1.5, 1170), (1.5, 1167), (1.5, 688), (1.5, 1164), (1.5, 1079), (1.5, 500), (1.5, 1071), (1.5, 1067), (1.5, 979), (1.5, 974), (1.5, 401), (1.5, 788), (1.5, 1029), (1.5, 880), (1.5, 883), (1.5, 1172), (1.5, 1175), (1.5, 1168), (1.5, 972), (1.5, 1074), (1.5, 975), (1.5, 393), (1.5, 973), (1.5, 1073), (1.5, 1070), (1.5, 1173), (1.5, 1178), (1.5, 1169), (1.375, 982), (1.375, 1083), (1.375, 994), (1.375, 977), (1.375, 1052), (1.375, 711), (1.375, 884), (1.375, 1182), (1.375, 1088), (1.375, 885), (1.375, 898), (1.375, 261), (1.375, 1090), (1.375, 613), (1.375, 598), (1.375, 690), (1.375, 997), (1.375, 1184), (1.375, 652), (1.375, 794), (1.375, 689), (1.375, 693), (1.375, 1032), (1.375, 1058), (1.375, 502), (1.375, 180), (1.375, 1187), (1.375, 1177), (1.375, 1043), (1.25, 1204), (1.25, 633), (1.25, 1202), (1.25, 408), (1.25, 1101), (1.25, 908), (1.25, 599), (1.25, 1123), (1.25, 903), (1.25, 1148), (1.25, 961), (1.25, 1001), (1.25, 455), (1.25, 390), (1.25, 1193), (1.25, 767), (1.25, 718), (1.25, 922), (1.25, 193), (1.25, 601), (1.25, 896), (1.25, 1243), (1.25, 1151), (1.25, 800), (1.25, 442), (1.25, 987), (1.25, 1207), (1.25, 1191), (1.25, 996), (1.25, 74), (1.25, 1034), (1.25, 1218), (1.25, 897), (1.25, 1179), (1.25, 986), (1.25, 694), (1.25, 663), (1.25, 1126), (1.25, 438), (1.25, 1116), (1.25, 912), (1.25, 405), (1.25, 1004), (1.25, 609), (1.25, 221), (1.25, 695), (1.25, 807), (1.25, 707), (1.25, 1206), (1.25, 315), (1.25, 1122), (1.25, 776), (1.25, 814), (1.25, 1216), (1.25, 1045), (1.25, 518), (1.25, 33), (1.25, 796), (1.25, 1009), (1.25, 140), (1.25, 886), (1.25, 1017), (1.25, 1114), (1.25, 1195), (1.25, 166), (1.25, 1028), (1.25, 698), (1.25, 1212), (1.25, 1010), (1.25, 1105), (1.25, 697), (1.25, 406), (1.25, 932), (1.25, 1050), (1.25, 1255), (1.25, 1234), (1.25, 509), (1.125, 377), (1.125, 1256), (1.125, 1030), (1.125, 730), (1.125, 703), (1.125, 939), (1.125, 1024), (1.125, 105), (1.125, 937), (1.125, 1133), (1.125, 54), (1.125, 1200), (1.125, 1035), (1.125, 616), (1.125, 1227), (1.125, 1222), (1.125, 715), (1.125, 923), (1.125, 925), (1.125, 821), (1.125, 751), (1.125, 1137), (1.125, 867), (1.125, 1021), (1.125, 1232), (1.125, 1134), (1.125, 522), (1.125, 558), (1.125, 1238), (1.125, 1002), (1.125, 1037), (1.125, 719), (1.125, 1219), (1.125, 1107), (1.125, 815), (1.125, 1189), (1.125, 631), (1.125, 608), (1.125, 1025), (1.125, 770), (1.125, 1144), (1.125, 1051), (1.125, 1128), (1.125, 621), (1.125, 1097), (1.125, 1241), (1.125, 1048), (1.125, 1153), (1.125, 387), (1.125, 708), (1.125, 930), (1.125, 841), (1.125, 1180), (1.125, 914), (1.125, 1065), (1.125, 1247), (1.125, 443), (1.125, 980), (1.125, 802), (1.125, 1231), (1.125, 929), (1.125, 1141), (1.125, 1208), (1.125, 843), (1.125, 505), (1.125, 1254), (1.125, 713), (1.125, 1159), (1.125, 364), (1.125, 1018), (1.125, 268), (1.125, 1005), (1.125, 1121), (1.125, 990), (1.125, 725), (1.125, 1161), (1.125, 1156), (1.125, 415), (1.125, 617), (1.125, 682), (1.125, 915), (1.125, 512), (1.125, 836), (1.125, 241), (1.125, 919), (1.125, 305), (1.125, 824), (1.125, 516), (1.125, 1023), (1.125, 826), (1.125, 1102), (1.125, 413), (1.125, 747), (1.125, 465), (1.125, 1142), (1.125, 1253), (1.125, 924), (1.125, 1119), (1.125, 587), (1.125, 940), (1.125, 820), (1.125, 670), (1.125, 779), (1.125, 1118), (1.125, 795), (1.125, 520), (1.125, 404), (1.125, 638), (1.125, 917), (1.125, 871), (1.125, 813), (1.0, 216), (1.0, 543), (1.0, 122), (1.0, 921), (1.0, 852), (1.0, 124), (1.0, 956), (1.0, 366), (1.0, 933), (1.0, 723), (1.0, 1059), (1.0, 312), (1.0, 409), (1.0, 943), (1.0, 618), (1.0, 882), (1.0, 564), (1.0, 704), (1.0, 262), (1.0, 354), (1.0, 835), (1.0, 927), (1.0, 888), (1.0, 818), (1.0, 957), (1.0, 1061), (1.0, 664), (1.0, 614), (1.0, 1057), (1.0, 335), (1.0, 984), (1.0, 623), (1.0, 687), (1.0, 846), (1.0, 462), (1.0, 863), (1.0, 954), (1.0, 1014), (1.0, 0), (1.0, 731), (1.0, 551), (1.0, 850), (1.0, 792), (1.0, 417), (1.0, 799), (1.0, 627), (1.0, 854), (1.0, 1131), (0.875, 1089), (0.875, 855), (0.875, 535), (0.875, 1229), (0.875, 754), (0.875, 981), (0.875, 892), (0.875, 1078), (0.875, 548), (0.875, 748), (0.875, 1244), (0.875, 858), (0.875, 1186), (0.875, 1063), (0.875, 1245), (0.875, 327), (0.875, 964), (0.875, 744), (0.875, 742), (0.875, 383), (0.875, 423), (0.875, 971), (0.875, 1093), (0.875, 57), (0.875, 1190), (0.875, 1185), (0.875, 71), (0.75, 642), (0.75, 749), (0.75, 577), (0.75, 666), (0.75, 760), (0.75, 936), (0.75, 1094), (0.75, 911), (0.75, 851), (0.75, 992), (0.75, 920), (0.75, 1226), (0.75, 684), (0.75, 965), (0.75, 951), (0.75, 478), (0.75, 510), (0.75, 677), (0.75, 803), (0.75, 647), (0.75, 877), (0.75, 1145), (0.75, 910), (0.75, 902), (0.75, 1152), (0.75, 10), (0.75, 702), (0.75, 801), (0.75, 1203), (0.75, 1111), (0.75, 804), (0.75, 763), (0.75, 862), (0.75, 378), (0.75, 275), (0.75, 150), (0.75, 170), (0.75, 531), (0.75, 870), (0.75, 426), (0.75, 743), (0.75, 875), (0.75, 1053), (0.75, 84), (0.75, 1113), (0.75, 762), (0.75, 317), (0.75, 1095), (0.6666666666666666, 1217), (0.625, 1224), (0.625, 1240), (0.625, 1250), (0.625, 1220), (0.625, 1248), (0.625, 1210), (0.625, 1242), (0.625, 1252), (0.5, 1188), (0.5, 1201), (0.41666666666666663, 1171), (0.41666666666666663, 1236), (0.41666666666666663, 1197), (0.41666666666666663, 1214), (0.41666666666666663, 1165), (0.41666666666666663, 1199), (0.375, 1221), (0.375, 1181), (0.29166666666666663, 1211), (0.29166666666666663, 1213), (0.25, 1237)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1162
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1163
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 879
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.625, 1163), (1.625, 1066), (1.625, 1162), (1.625, 786), (1.625, 1259), (1.625, 1260), (1.625, 879), (1.625, 635), (1.625, 1257), (1.5, 1284), (1.5, 1277), (1.5, 1170), (1.5, 1280), (1.5, 393), (1.5, 787), (1.5, 1172), (1.5, 1164), (1.5, 1168), (1.5, 974), (1.5, 1173), (1.5, 1263), (1.5, 1074), (1.5, 688), (1.5, 880), (1.5, 1178), (1.5, 1166), (1.5, 1029), (1.5, 1261), (1.5, 975), (1.5, 597), (1.5, 401), (1.5, 1274), (1.5, 1070), (1.5, 1067), (1.5, 1071), (1.5, 979), (1.5, 1265), (1.5, 1073), (1.5, 1175), (1.5, 976), (1.5, 1282), (1.5, 1271), (1.5, 973), (1.5, 788), (1.5, 500), (1.5, 1169), (1.5, 1266), (1.5, 1167), (1.5, 972), (1.5, 883), (1.5, 1079), (1.375, 1285), (1.375, 1043), (1.375, 711), (1.375, 261), (1.375, 1182), (1.375, 689), (1.375, 1088), (1.375, 885), (1.375, 1319), (1.375, 1299), (1.375, 613), (1.375, 1058), (1.375, 1304), (1.375, 794), (1.375, 1289), (1.375, 982), (1.375, 690), (1.375, 1032), (1.375, 898), (1.375, 1052), (1.375, 598), (1.375, 652), (1.375, 502), (1.375, 1184), (1.375, 1083), (1.375, 180), (1.375, 693), (1.375, 884), (1.375, 1090), (1.375, 977), (1.375, 994), (1.375, 1177), (1.375, 1187), (1.375, 997), (1.25, 1028), (1.25, 221), (1.25, 897), (1.25, 694), (1.25, 1151), (1.25, 1123), (1.25, 1148), (1.25, 1206), (1.25, 1341), (1.25, 315), (1.25, 912), (1.25, 1010), (1.25, 390), (1.25, 633), (1.25, 697), (1.25, 1330), (1.25, 986), (1.25, 698), (1.25, 987), (1.25, 807), (1.25, 1317), (1.25, 1318), (1.25, 932), (1.25, 1334), (1.25, 1204), (1.25, 1195), (1.25, 903), (1.25, 1017), (1.25, 996), (1.25, 961), (1.25, 1207), (1.25, 814), (1.25, 1101), (1.25, 1116), (1.25, 1105), (1.25, 1216), (1.25, 1202), (1.25, 33), (1.25, 406), (1.25, 1342), (1.25, 455), (1.25, 886), (1.25, 1307), (1.25, 140), (1.25, 1122), (1.25, 1324), (1.25, 609), (1.25, 796), (1.25, 405), (1.25, 1034), (1.25, 922), (1.25, 518), (1.25, 1179), (1.25, 1045), (1.25, 1009), (1.25, 663), (1.25, 193), (1.25, 896), (1.25, 718), (1.25, 438), (1.25, 1340), (1.25, 695), (1.25, 1212), (1.25, 707), (1.25, 509), (1.25, 442), (1.25, 908), (1.25, 601), (1.25, 1327), (1.25, 1126), (1.25, 1191), (1.25, 1218), (1.25, 166), (1.25, 1339), (1.25, 1243), (1.25, 1325), (1.25, 800), (1.25, 1193), (1.25, 1351), (1.25, 776), (1.25, 1050), (1.25, 1001), (1.25, 1004), (1.25, 1234), (1.25, 1255), (1.25, 1114), (1.25, 408), (1.25, 767), (1.25, 1306), (1.25, 1320), (1.25, 599), (1.25, 74), (1.125, 1024), (1.125, 1051), (1.125, 1119), (1.125, 1253), (1.125, 719), (1.125, 1102), (1.125, 1037), (1.125, 1134), (1.125, 1030), (1.125, 413), (1.125, 1159), (1.125, 871), (1.125, 512), (1.125, 1153), (1.125, 1208), (1.125, 1256), (1.125, 1180), (1.125, 779), (1.125, 939), (1.125, 465), (1.125, 616), (1.125, 621), (1.125, 1290), (1.125, 795), (1.125, 802), (1.125, 404), (1.125, 820), (1.125, 715), (1.125, 924), (1.125, 1002), (1.125, 1200), (1.125, 1025), (1.125, 917), (1.125, 915), (1.125, 1018), (1.125, 1189), (1.125, 1156), (1.125, 387), (1.125, 826), (1.125, 1023), (1.125, 1128), (1.125, 54), (1.125, 923), (1.125, 1144), (1.125, 682), (1.125, 925), (1.125, 105), (1.125, 919), (1.125, 1227), (1.125, 443), (1.125, 638), (1.125, 1222), (1.125, 377), (1.125, 836), (1.125, 1118), (1.125, 815), (1.125, 1065), (1.125, 522), (1.125, 608), (1.125, 937), (1.125, 1137), (1.125, 516), (1.125, 747), (1.125, 1005), (1.125, 415), (1.125, 929), (1.125, 770), (1.125, 631), (1.125, 813), (1.125, 1161), (1.125, 708), (1.125, 930), (1.125, 1238), (1.125, 1231), (1.125, 914), (1.125, 305), (1.125, 980), (1.125, 558), (1.125, 821), (1.125, 1254), (1.125, 1021), (1.125, 703), (1.125, 520), (1.125, 1247), (1.125, 364), (1.125, 1241), (1.125, 1344), (1.125, 670), (1.125, 725), (1.125, 587), (1.125, 1349), (1.125, 1133), (1.125, 617), (1.125, 1121), (1.125, 1219), (1.125, 867), (1.125, 241), (1.125, 268), (1.125, 841), (1.125, 1315), (1.125, 1232), (1.125, 1354), (1.125, 751), (1.125, 843), (1.125, 1291), (1.125, 1035), (1.125, 1048), (1.125, 505), (1.125, 824), (1.125, 713), (1.125, 1308), (1.125, 730), (1.125, 1142), (1.125, 1141), (1.125, 1337), (1.125, 990), (1.125, 940), (1.125, 1097), (1.125, 1107), (1.0, 984), (1.0, 933), (1.0, 835), (1.0, 704), (1.0, 366), (1.0, 863), (1.0, 618), (1.0, 664), (1.0, 846), (1.0, 1276), (1.0, 723), (1.0, 335), (1.0, 122), (1.0, 927), (1.0, 417), (1.0, 623), (1.0, 888), (1.0, 627), (1.0, 564), (1.0, 614), (1.0, 312), (1.0, 409), (1.0, 1057), (1.0, 124), (1.0, 731), (1.0, 0), (1.0, 852), (1.0, 1338), (1.0, 850), (1.0, 1014), (1.0, 854), (1.0, 956), (1.0, 354), (1.0, 792), (1.0, 462), (1.0, 921), (1.0, 687), (1.0, 1059), (1.0, 799), (1.0, 216), (1.0, 954), (1.0, 943), (1.0, 543), (1.0, 551), (1.0, 1061), (1.0, 818), (1.0, 882), (1.0, 262), (1.0, 1131), (1.0, 957), (0.875, 1244), (0.875, 855), (0.875, 744), (0.875, 892), (0.875, 1245), (0.875, 964), (0.875, 423), (0.875, 548), (0.875, 1273), (0.875, 535), (0.875, 1063), (0.875, 1089), (0.875, 383), (0.875, 981), (0.875, 327), (0.875, 742), (0.875, 1229), (0.875, 754), (0.875, 1078), (0.875, 748), (0.875, 971), (0.875, 1186), (0.875, 858), (0.75, 1322), (0.75, 1326), (0.75, 1328), (0.75, 1313), (0.75, 1296), (0.75, 1295), (0.75, 1329), (0.625, 1310), (0.625, 1311), (0.625, 1305), (0.625, 1301), (0.625, 1346), (0.5416666666666666, 1293), (0.5, 1352), (0.5, 1353), (0.5, 1345), (0.41666666666666663, 1298), (0.41666666666666663, 1348), (0.41666666666666663, 1336), (0.41666666666666663, 1267), (0.41666666666666663, 1269), (0.41666666666666663, 1332), (0.41666666666666663, 1278), (0.41666666666666663, 1262), (0.375, 1303), (0.375, 1335), (0.29166666666666663, 1288), (0.29166666666666663, 1312), (0.29166666666666663, 1287), (0.29166666666666663, 1343), (0.25, 1323)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1163
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1066
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1162
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1259
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.625, 1162), (1.625, 1355), (1.625, 1356), (1.625, 1358), (1.625, 1404), (1.625, 1257), (1.625, 635), (1.625, 1259), (1.625, 1260), (1.625, 1163), (1.625, 879), (1.625, 1357), (1.625, 1066), (1.625, 786), (1.5, 787), (1.5, 500), (1.5, 1073), (1.5, 1167), (1.5, 1366), (1.5, 1261), (1.5, 1265), (1.5, 1274), (1.5, 1079), (1.5, 1378), (1.5, 1380), (1.5, 1365), (1.5, 1373), (1.5, 597), (1.5, 1173), (1.5, 1282), (1.5, 788), (1.5, 1166), (1.5, 979), (1.5, 1067), (1.5, 1164), (1.5, 1263), (1.5, 1178), (1.5, 972), (1.5, 976), (1.5, 1284), (1.5, 1374), (1.5, 1363), (1.5, 1381), (1.5, 1376), (1.5, 1271), (1.5, 1277), (1.5, 1266), (1.5, 1375), (1.5, 1169), (1.5, 883), (1.5, 1437), (1.5, 1280), (1.5, 974), (1.5, 393), (1.5, 1372), (1.5, 401), (1.5, 1379), (1.5, 1367), (1.5, 1074), (1.5, 1172), (1.5, 880), (1.5, 1175), (1.5, 973), (1.5, 1070), (1.5, 1170), (1.5, 1029), (1.5, 975), (1.5, 1377), (1.5, 1071), (1.5, 1168), (1.5, 688), (1.375, 711), (1.375, 1285), (1.375, 982), (1.375, 1319), (1.375, 1386), (1.375, 1401), (1.375, 690), (1.375, 1058), (1.375, 1394), (1.375, 997), (1.375, 613), (1.375, 1088), (1.375, 1182), (1.375, 261), (1.375, 977), (1.375, 1289), (1.375, 1304), (1.375, 1403), (1.375, 884), (1.375, 1032), (1.375, 693), (1.375, 1177), (1.375, 1398), (1.375, 1383), (1.375, 689), (1.375, 1043), (1.375, 1393), (1.375, 1397), (1.375, 1395), (1.375, 180), (1.375, 1187), (1.375, 1299), (1.375, 994), (1.375, 898), (1.375, 1090), (1.375, 794), (1.375, 598), (1.375, 1184), (1.375, 885), (1.375, 1052), (1.375, 1083), (1.375, 652), (1.375, 502), (1.25, 1123), (1.25, 166), (1.25, 1255), (1.25, 1034), (1.25, 1327), (1.25, 932), (1.25, 1206), (1.25, 442), (1.25, 961), (1.25, 1101), (1.25, 1122), (1.25, 1351), (1.25, 140), (1.25, 697), (1.25, 1028), (1.25, 695), (1.25, 1234), (1.25, 767), (1.25, 1334), (1.25, 455), (1.25, 1243), (1.25, 903), (1.25, 518), (1.25, 707), (1.25, 408), (1.25, 509), (1.25, 908), (1.25, 996), (1.25, 922), (1.25, 1341), (1.25, 1191), (1.25, 987), (1.25, 1340), (1.25, 601), (1.25, 633), (1.25, 886), (1.25, 814), (1.25, 1010), (1.25, 315), (1.25, 1207), (1.25, 1339), (1.25, 807), (1.25, 1105), (1.25, 1212), (1.25, 1202), (1.25, 896), (1.25, 698), (1.25, 718), (1.25, 800), (1.25, 193), (1.25, 438), (1.25, 1045), (1.25, 599), (1.25, 1001), (1.25, 694), (1.25, 1193), (1.25, 1009), (1.25, 1050), (1.25, 221), (1.25, 776), (1.25, 1318), (1.25, 74), (1.25, 33), (1.25, 1431), (1.25, 1330), (1.25, 1324), (1.25, 1416), (1.25, 1406), (1.25, 1179), (1.25, 1126), (1.25, 405), (1.25, 406), (1.25, 912), (1.25, 1325), (1.25, 1320), (1.25, 1306), (1.25, 1017), (1.25, 897), (1.25, 1216), (1.25, 1218), (1.25, 796), (1.25, 1429), (1.25, 1151), (1.25, 1004), (1.25, 1412), (1.25, 609), (1.25, 1195), (1.25, 1148), (1.25, 1427), (1.25, 1342), (1.25, 390), (1.25, 663), (1.25, 986), (1.25, 1116), (1.25, 1204), (1.25, 1114), (1.25, 1307), (1.25, 1317), (1.125, 616), (1.125, 917), (1.125, 1119), (1.125, 1253), (1.125, 608), (1.125, 404), (1.125, 1432), (1.125, 1002), (1.125, 516), (1.125, 730), (1.125, 919), (1.125, 914), (1.125, 670), (1.125, 820), (1.125, 54), (1.125, 795), (1.125, 1337), (1.125, 1290), (1.125, 1232), (1.125, 1291), (1.125, 465), (1.125, 871), (1.125, 1444), (1.125, 377), (1.125, 824), (1.125, 1189), (1.125, 1238), (1.125, 1254), (1.125, 1137), (1.125, 1227), (1.125, 923), (1.125, 1097), (1.125, 387), (1.125, 867), (1.125, 1161), (1.125, 1025), (1.125, 638), (1.125, 715), (1.125, 1141), (1.125, 505), (1.125, 725), (1.125, 1156), (1.125, 937), (1.125, 364), (1.125, 1065), (1.125, 1133), (1.125, 1128), (1.125, 1315), (1.125, 751), (1.125, 1200), (1.125, 1408), (1.125, 1391), (1.125, 558), (1.125, 770), (1.125, 939), (1.125, 1354), (1.125, 1308), (1.125, 915), (1.125, 708), (1.125, 930), (1.125, 617), (1.125, 826), (1.125, 836), (1.125, 1005), (1.125, 1037), (1.125, 1021), (1.125, 512), (1.125, 703), (1.125, 929), (1.125, 1121), (1.125, 1241), (1.125, 1018), (1.125, 1048), (1.125, 415), (1.125, 813), (1.125, 940), (1.125, 520), (1.125, 925), (1.125, 990), (1.125, 1030), (1.125, 713), (1.125, 621), (1.125, 924), (1.125, 1180), (1.125, 587), (1.125, 1247), (1.125, 682), (1.125, 1024), (1.125, 719), (1.125, 980), (1.125, 1344), (1.125, 1153), (1.125, 1023), (1.125, 305), (1.125, 1384), (1.125, 105), (1.125, 1219), (1.125, 1051), (1.125, 443), (1.125, 843), (1.125, 821), (1.125, 1434), (1.125, 1144), (1.125, 1256), (1.125, 1102), (1.125, 1134), (1.125, 1118), (1.125, 1142), (1.125, 1222), (1.125, 241), (1.125, 1107), (1.125, 631), (1.125, 747), (1.125, 1159), (1.125, 815), (1.125, 1208), (1.125, 841), (1.125, 413), (1.125, 268), (1.125, 779), (1.125, 1231), (1.125, 1035), (1.125, 522), (1.125, 802), (1.125, 1349), (1.0, 1389), (1.0, 984), (1.0, 417), (1.0, 122), (1.0, 1276), (1.0, 618), (1.0, 1382), (1.0, 627), (1.0, 863), (1.0, 409), (1.0, 1418), (1.0, 124), (1.0, 0), (1.0, 852), (1.0, 564), (1.0, 927), (1.0, 846), (1.0, 623), (1.0, 1338), (1.0, 850), (1.0, 731), (1.0, 614), (1.0, 664), (1.0, 1057), (1.0, 1360), (1.0, 366), (1.0, 312), (1.0, 933), (1.0, 704), (1.0, 335), (1.0, 835), (1.0, 723), (1.0, 888), (0.875, 1359), (0.875, 1369), (0.75, 1415), (0.75, 1433), (0.75, 1411), (0.75, 1409), (0.75, 1413), (0.625, 1371), (0.625, 1430), (0.625, 1424), (0.5, 1440), (0.5, 1407), (0.5, 1436), (0.5, 1426), (0.5, 1438), (0.41666666666666663, 1362), (0.41666666666666663, 1361), (0.41666666666666663, 1390), (0.41666666666666663, 1428), (0.41666666666666663, 1396), (0.375, 1442), (0.375, 1414), (0.375, 1399), (0.375, 1422), (0.29166666666666663, 1421), (0.29166666666666663, 1419), (0.29166666666666663, 1402), (0.25, 1410), (0.16666666666666666, 1387), (0.16666666666666666, 1423)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1162
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1355
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1356
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1358
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1404
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (* x y)) 1))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.625, 879), (1.625, 1451), (1.625, 1358), (1.625, 1506), (1.625, 1257), (1.625, 1449), (1.625, 1445), (1.625, 1357), (1.625, 1260), (1.625, 1163), (1.625, 1355), (1.625, 1162), (1.625, 1446), (1.625, 1404), (1.625, 1259), (1.625, 635), (1.625, 1453), (1.625, 1452), (1.625, 1356), (1.625, 786), (1.625, 1066), (1.5, 1166), (1.5, 976), (1.5, 401), (1.5, 1178), (1.5, 880), (1.5, 1284), (1.5, 1375), (1.5, 1263), (1.5, 1172), (1.5, 1437), (1.5, 972), (1.5, 1486), (1.5, 1170), (1.5, 1456), (1.5, 1482), (1.5, 1073), (1.5, 787), (1.5, 1266), (1.5, 1461), (1.5, 1462), (1.5, 1029), (1.5, 1465), (1.5, 1376), (1.5, 1365), (1.5, 1469), (1.5, 1282), (1.5, 1070), (1.5, 1367), (1.5, 1363), (1.5, 1470), (1.5, 973), (1.5, 688), (1.5, 1366), (1.5, 1164), (1.5, 1265), (1.5, 1380), (1.5, 393), (1.5, 1372), (1.5, 597), (1.5, 1460), (1.5, 1261), (1.5, 1271), (1.5, 1277), (1.5, 1475), (1.5, 1381), (1.5, 1379), (1.5, 1478), (1.5, 883), (1.5, 500), (1.5, 1169), (1.5, 1485), (1.5, 1377), (1.5, 1472), (1.5, 1280), (1.5, 1168), (1.5, 1458), (1.5, 979), (1.5, 1378), (1.5, 1175), (1.5, 1079), (1.5, 1071), (1.5, 1455), (1.5, 1479), (1.5, 1483), (1.5, 1474), (1.5, 1374), (1.5, 974), (1.5, 975), (1.5, 1173), (1.5, 1459), (1.5, 1373), (1.5, 1167), (1.5, 1074), (1.5, 1067), (1.5, 788), (1.5, 1457), (1.5, 1274), (1.375, 1304), (1.375, 1289), (1.375, 1032), (1.375, 693), (1.375, 711), (1.375, 1393), (1.375, 794), (1.375, 502), (1.375, 1177), (1.375, 1319), (1.375, 1492), (1.375, 1383), (1.375, 1523), (1.375, 598), (1.375, 982), (1.375, 1512), (1.375, 1401), (1.375, 1088), (1.375, 652), (1.375, 1182), (1.375, 1083), (1.375, 690), (1.375, 1403), (1.375, 1058), (1.375, 994), (1.375, 1513), (1.375, 613), (1.375, 180), (1.375, 1398), (1.375, 1490), (1.375, 1299), (1.375, 1394), (1.375, 1386), (1.375, 1184), (1.375, 1503), (1.375, 1043), (1.375, 1052), (1.375, 885), (1.375, 261), (1.375, 1397), (1.375, 997), (1.375, 884), (1.375, 977), (1.375, 689), (1.375, 1285), (1.375, 1090), (1.375, 1501), (1.375, 1504), (1.375, 1527), (1.375, 1395), (1.375, 1499), (1.375, 898), (1.375, 1187), (1.25, 166), (1.25, 1179), (1.25, 800), (1.25, 601), (1.25, 796), (1.25, 912), (1.25, 1351), (1.25, 1406), (1.25, 633), (1.25, 1218), (1.25, 599), (1.25, 33), (1.25, 390), (1.25, 1412), (1.25, 961), (1.25, 405), (1.25, 807), (1.25, 1101), (1.25, 1537), (1.25, 718), (1.25, 1318), (1.25, 1122), (1.25, 1010), (1.25, 932), (1.25, 1320), (1.25, 1306), (1.25, 922), (1.25, 406), (1.25, 1339), (1.25, 776), (1.25, 1004), (1.25, 1234), (1.25, 1193), (1.25, 1151), (1.25, 1034), (1.25, 1116), (1.25, 886), (1.25, 1327), (1.25, 707), (1.25, 1464), (1.25, 897), (1.25, 1340), (1.25, 455), (1.25, 1191), (1.25, 1491), (1.25, 1324), (1.25, 1416), (1.25, 663), (1.25, 986), (1.25, 1342), (1.25, 1216), (1.25, 408), (1.25, 193), (1.25, 1207), (1.25, 1206), (1.25, 1204), (1.25, 1045), (1.25, 1325), (1.25, 694), (1.25, 1123), (1.25, 996), (1.25, 1126), (1.25, 1317), (1.25, 442), (1.25, 1431), (1.25, 1341), (1.25, 74), (1.25, 1334), (1.25, 908), (1.25, 1330), (1.25, 1255), (1.25, 1009), (1.25, 697), (1.25, 903), (1.25, 1202), (1.25, 140), (1.25, 1195), (1.25, 1427), (1.25, 221), (1.25, 1105), (1.25, 1307), (1.25, 1050), (1.25, 698), (1.25, 1001), (1.25, 695), (1.25, 1429), (1.25, 438), (1.25, 1212), (1.25, 814), (1.25, 315), (1.25, 518), (1.25, 1243), (1.25, 767), (1.25, 1148), (1.25, 1028), (1.25, 987), (1.25, 1114), (1.25, 896), (1.25, 1507), (1.25, 609), (1.25, 1017), (1.25, 1529), (1.25, 509), (1.125, 1497), (1.125, 1119), (1.125, 1238), (1.125, 770), (1.125, 820), (1.125, 1256), (1.125, 558), (1.125, 1232), (1.125, 1222), (1.125, 54), (1.125, 1134), (1.125, 836), (1.125, 813), (1.125, 1051), (1.125, 1219), (1.125, 1002), (1.125, 843), (1.125, 387), (1.125, 1291), (1.125, 703), (1.125, 1025), (1.125, 616), (1.125, 925), (1.125, 1408), (1.125, 1227), (1.125, 1448), (1.125, 682), (1.125, 1180), (1.125, 1254), (1.125, 415), (1.125, 924), (1.125, 937), (1.125, 608), (1.125, 1065), (1.125, 1107), (1.125, 1290), (1.125, 713), (1.125, 919), (1.125, 923), (1.125, 1142), (1.125, 443), (1.125, 1524), (1.125, 940), (1.125, 512), (1.125, 715), (1.125, 1118), (1.125, 1539), (1.125, 930), (1.125, 1432), (1.125, 1161), (1.125, 747), (1.125, 1133), (1.125, 1189), (1.125, 821), (1.125, 404), (1.125, 929), (1.125, 587), (1.125, 1048), (1.125, 1444), (1.125, 1502), (1.125, 826), (1.125, 871), (1.125, 1137), (1.125, 1156), (1.125, 105), (1.125, 1200), (1.125, 708), (1.125, 1241), (1.125, 241), (1.125, 621), (1.125, 1391), (1.125, 1315), (1.125, 638), (1.125, 670), (1.125, 305), (1.125, 1037), (1.125, 980), (1.125, 1102), (1.125, 914), (1.125, 824), (1.125, 1121), (1.125, 990), (1.125, 505), (1.125, 1337), (1.125, 1468), (1.125, 1247), (1.125, 1253), (1.125, 1354), (1.125, 795), (1.125, 1024), (1.125, 751), (1.125, 730), (1.125, 1308), (1.125, 1021), (1.125, 1030), (1.125, 1141), (1.125, 1384), (1.125, 516), (1.125, 1467), (1.125, 1344), (1.125, 1005), (1.125, 939), (1.125, 465), (1.125, 1023), (1.125, 631), (1.125, 867), (1.125, 915), (1.125, 1128), (1.125, 1097), (1.125, 1434), (1.125, 1528), (1.125, 617), (1.125, 364), (1.125, 1018), (1.125, 520), (1.125, 725), (1.125, 1153), (1.125, 917), (1.125, 377), (1.125, 719), (1.125, 1144), (1.0, 1488), (1.0, 1533), (1.0, 1517), (1.0, 1525), (1.0, 1471), (1.0, 1481), (1.0, 1511), (0.875, 1538), (0.75, 1495), (0.75, 1531), (0.75, 1509), (0.6666666666666666, 1514), (0.625, 1535), (0.625, 1521), (0.625, 1536), (0.625, 1484), (0.625, 1522), (0.5416666666666666, 1515), (0.5, 1519), (0.41666666666666663, 1454), (0.41666666666666663, 1498), (0.41666666666666663, 1476), (0.375, 1505), (0.29166666666666663, 1530), (0.29166666666666663, 1493)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 879
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1451
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1358
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1506
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (* x y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 1257
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.625, 1066), (1.625, 1545), (1.625, 635), (1.625, 1445), (1.625, 786), (1.625, 1451), (1.625, 1540), (1.625, 1162), (1.625, 1257), (1.625, 1548), (1.625, 1544), (1.625, 1453), (1.625, 1446), (1.625, 1506), (1.625, 1355), (1.625, 1163), (1.625, 1260), (1.625, 1259), (1.625, 1550), (1.625, 879), (1.625, 1357), (1.625, 1543), (1.625, 1356), (1.625, 1404), (1.625, 1449), (1.625, 1358), (1.625, 1452), (1.625, 1542), (1.625, 1551), (1.5, 1563), (1.5, 1074), (1.5, 1274), (1.5, 1172), (1.5, 1554), (1.5, 974), (1.5, 1569), (1.5, 1284), (1.5, 1483), (1.5, 1577), (1.5, 1372), (1.5, 1462), (1.5, 1566), (1.5, 1265), (1.5, 1479), (1.5, 1565), (1.5, 1486), (1.5, 1572), (1.5, 1169), (1.5, 1567), (1.5, 393), (1.5, 1437), (1.5, 1164), (1.5, 1457), (1.5, 1580), (1.5, 597), (1.5, 1560), (1.5, 1578), (1.5, 1175), (1.5, 1587), (1.5, 1170), (1.5, 1590), (1.5, 401), (1.5, 1367), (1.5, 1277), (1.5, 1375), (1.5, 1460), (1.5, 1456), (1.5, 1465), (1.5, 1573), (1.5, 787), (1.5, 1470), (1.5, 1363), (1.5, 1598), (1.5, 1166), (1.5, 1584), (1.5, 1374), (1.5, 1378), (1.5, 883), (1.5, 1458), (1.5, 1553), (1.5, 788), (1.5, 1282), (1.5, 1579), (1.5, 1586), (1.5, 1168), (1.5, 1455), (1.5, 1469), (1.5, 1373), (1.5, 1167), (1.5, 1029), (1.5, 1576), (1.5, 1079), (1.5, 1377), (1.5, 1070), (1.5, 1380), (1.5, 1071), (1.5, 1594), (1.5, 1583), (1.5, 1593), (1.5, 979), (1.5, 688), (1.5, 1592), (1.5, 1271), (1.5, 1474), (1.5, 1475), (1.5, 1073), (1.5, 1588), (1.5, 1585), (1.5, 880), (1.5, 1173), (1.5, 1557), (1.5, 1178), (1.5, 1485), (1.5, 972), (1.5, 1558), (1.5, 1581), (1.5, 1261), (1.5, 1381), (1.5, 973), (1.5, 976), (1.5, 1575), (1.5, 1561), (1.5, 1478), (1.5, 1568), (1.5, 1472), (1.5, 1461), (1.5, 1266), (1.5, 1376), (1.5, 1595), (1.5, 1482), (1.5, 1365), (1.5, 1459), (1.5, 1570), (1.5, 1379), (1.5, 1263), (1.5, 975), (1.5, 500), (1.5, 1571), (1.5, 1564), (1.5, 1366), (1.5, 1067), (1.5, 1280), (1.375, 898), (1.375, 652), (1.375, 1395), (1.375, 1386), (1.375, 1523), (1.375, 1398), (1.375, 1499), (1.375, 180), (1.375, 1618), (1.375, 1393), (1.375, 1504), (1.375, 1177), (1.375, 1043), (1.375, 1599), (1.375, 1501), (1.375, 1512), (1.375, 794), (1.375, 1601), (1.375, 1621), (1.375, 613), (1.375, 982), (1.375, 997), (1.375, 1634), (1.375, 1609), (1.375, 1615), (1.375, 1492), (1.375, 689), (1.375, 1602), (1.375, 693), (1.375, 1605), (1.375, 598), (1.375, 1304), (1.375, 1187), (1.375, 1611), (1.375, 1052), (1.375, 1617), (1.375, 1299), (1.375, 1623), (1.375, 1289), (1.375, 1630), (1.375, 1513), (1.375, 502), (1.375, 1285), (1.375, 1403), (1.375, 1541), (1.375, 1088), (1.375, 1319), (1.375, 1058), (1.375, 994), (1.375, 1401), (1.375, 1527), (1.375, 1627), (1.375, 1629), (1.375, 1503), (1.375, 1383), (1.375, 1490), (1.375, 1397), (1.375, 1182), (1.375, 1394), (1.375, 1083), (1.375, 711), (1.375, 977), (1.375, 885), (1.375, 1184), (1.375, 1032), (1.375, 1607), (1.375, 690), (1.375, 884), (1.375, 261), (1.375, 1090), (1.25, 697), (1.25, 1340), (1.25, 518), (1.25, 1320), (1.25, 166), (1.25, 1202), (1.25, 633), (1.25, 767), (1.25, 438), (1.25, 796), (1.25, 1327), (1.25, 1255), (1.25, 1491), (1.25, 1341), (1.25, 1114), (1.25, 509), (1.25, 1193), (1.25, 1195), (1.25, 996), (1.25, 897), (1.25, 74), (1.25, 442), (1.25, 1218), (1.25, 140), (1.25, 601), (1.25, 1334), (1.25, 1050), (1.25, 609), (1.25, 1009), (1.25, 718), (1.25, 932), (1.25, 1339), (1.25, 694), (1.25, 406), (1.25, 1028), (1.25, 1207), (1.25, 1324), (1.25, 599), (1.25, 1212), (1.25, 1614), (1.25, 1330), (1.25, 1604), (1.25, 221), (1.25, 986), (1.25, 922), (1.25, 315), (1.25, 1317), (1.25, 1243), (1.25, 1116), (1.25, 408), (1.25, 1342), (1.25, 961), (1.25, 695), (1.25, 1148), (1.25, 390), (1.25, 1216), (1.25, 1318), (1.25, 1101), (1.25, 1045), (1.25, 1406), (1.25, 1529), (1.25, 1206), (1.25, 1537), (1.25, 987), (1.25, 1017), (1.25, 886), (1.25, 1122), (1.25, 1427), (1.25, 1004), (1.25, 1126), (1.25, 912), (1.25, 1431), (1.25, 33), (1.25, 1151), (1.25, 1105), (1.25, 1351), (1.25, 1412), (1.25, 800), (1.25, 776), (1.25, 1306), (1.25, 908), (1.25, 1010), (1.25, 663), (1.25, 1307), (1.25, 807), (1.25, 1123), (1.25, 707), (1.25, 1204), (1.25, 1034), (1.25, 1507), (1.25, 1464), (1.25, 903), (1.25, 1191), (1.25, 698), (1.25, 1234), (1.25, 455), (1.25, 814), (1.25, 1179), (1.25, 405), (1.25, 1001), (1.25, 896), (1.25, 1416), (1.25, 193), (1.25, 1429), (1.25, 1325), (1.125, 871), (1.125, 1524), (1.125, 747), (1.125, 241), (1.125, 1219), (1.125, 925), (1.125, 1065), (1.125, 813), (1.125, 1448), (1.125, 1025), (1.125, 1156), (1.125, 387), (1.125, 1189), (1.125, 1137), (1.125, 1432), (1.125, 621), (1.125, 1134), (1.125, 713), (1.125, 1290), (1.125, 1142), (1.125, 1555), (1.125, 940), (1.125, 1539), (1.125, 105), (1.125, 1200), (1.125, 1161), (1.125, 826), (1.125, 1051), (1.125, 1002), (1.125, 1222), (1.125, 1241), (1.125, 1256), (1.125, 1232), (1.125, 1133), (1.125, 843), (1.125, 924), (1.125, 821), (1.125, 1254), (1.125, 930), (1.125, 558), (1.125, 1118), (1.125, 682), (1.125, 1227), (1.125, 443), (1.125, 715), (1.125, 919), (1.125, 415), (1.125, 1497), (1.125, 1119), (1.125, 820), (1.125, 937), (1.125, 1107), (1.125, 1502), (1.125, 923), (1.125, 1391), (1.125, 1408), (1.125, 54), (1.125, 929), (1.125, 404), (1.125, 708), (1.125, 836), (1.125, 1291), (1.125, 512), (1.125, 587), (1.125, 1444), (1.125, 1180), (1.125, 1048), (1.125, 770), (1.125, 608), (1.125, 616), (1.125, 703), (1.125, 1238), (1.125, 1547), (1.0, 1625), (1.0, 1552), (1.0, 1600), (0.625, 1613), (0.625, 1632), (0.5, 1620), (0.5, 1606), (0.41666666666666663, 1597), (0.29166666666666663, 1612), (0.29166666666666663, 1608)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1066
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1545
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 635
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1445
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* 1 y)) 1) x))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (- (+ (+ (* x y) y) x) 1))

Process finished with exit code 0
