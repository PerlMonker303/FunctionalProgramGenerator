D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ 4 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x y)) 4))
 nr_nodes: 8]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`4`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`4`#`#`(+ ? ?)`y`#`#`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* 4 (+ x (* y 4)))) (+ y (+ 4 x))))
 nr_nodes: 16]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`4`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* 4 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`4`#`#`y`#`#`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`4`#`#`x`#`#`y`#`#`(* ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* 4 y) (* (* (- y 4) x) y)) (* y 4)))
 nr_nodes: 16]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* 4 4))
 nr_nodes: 4]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* (+ y 4) (- x y)) (* y x)) y))
 nr_nodes: 14]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`4`#`#`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (* 4 (+ (- y (* y y)) (+ (* x x) 4))) 4))
 nr_nodes: 16]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`4`#`#`x`#`#`(+ ? ?)`4`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* (+ 4 x) (+ 4 x)) (+ (- y x) x)) y))
 nr_nodes: 16]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`(* ? ?)`y`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ x x) (- y (- (* y 4) x))))
 nr_nodes: 12]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`x`#`#`4`#`#`4`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(- ? ?)`4`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- x 4) 4) (+ (+ (* x y) (- 4 y)) (- x (+ 4 (+ (+ x y) x))))))
 nr_nodes: 24]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y 4) y))
 nr_nodes: 6]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* y (* x 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`(* ? ?)`(* ? ?)`x`#`#`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(+ ? ?)`(- ? ?)`(* ? ?)`4`#`#`x`#`#`(- ? ?)`4`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 4 (* (* x (- (+ x 4) x)) (+ (- (* 4 x) (- 4 y)) (+ (+ x y) x)))))
 nr_nodes: 24]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x (+ (* y 4) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`4`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- 4 y) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 4 (+ (- y (* y 4)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ x x)) (* x y)))
 nr_nodes: 10]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`4`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`4`#`#`4`#`#`(- ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (- y x) (+ 4 (* y x))) (- (+ (+ (+ x 4) 4) (- (- y x) x)) y)))
 nr_nodes: 24]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`y`#`#`(- ? ?)`4`#`#`(+ ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (- y y) (- 4 (+ x 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`4`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y (+ (+ 4 x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`(+ ? ?)`4`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`4`#`#`(- ? ?)`4`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- x (+ (- (+ 4 x) (+ y y)) (* 4 (- 4 4)))) 4))
 nr_nodes: 18]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`4`#`#`x`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 y) (+ (- y x) (+ (* (* (- y x) (- 4 x)) 4) y))))
 nr_nodes: 20]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`4`#`#`x`#`#`(* ? ?)`x`#`#`4`#`#`4`#`#`(- ? ?)`x`#`#`(- ? ?)`y`#`#`(- ? ?)`x`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y (* (- 4 x) (* x 4))) 4) (- x (- y (- x (- x 4))))))
 nr_nodes: 22]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`4`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ y x) (* 4 x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* y y) (+ x (- x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* x y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`4`#`#`4`#`#`(+ ? ?)`4`#`#`y`#`#`x`#`#`(* ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- (* 4 4) (+ 4 y)) x) (* 4 y)))
 nr_nodes: 14]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`(+ ? ?)`4`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`4`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- (+ 4 (* (+ y x) y)) 4) x) 4))
 nr_nodes: 14]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`4`#`#`(- ? ?)`4`#`#`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) (* 4 (- 4 (* (* (- y y) 4) x)))))
 nr_nodes: 16]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`y`#`#`4`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ (- y x) (* (- y 4) x))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`4`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- y 4) (* y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`4`#`#`x`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* x x) (- y y)) (* (* 4 x) (* 4 x))))
 nr_nodes: 16]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(- ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`4`#`#`(* ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (- (* (+ y x) y) 4)) (* y 4)))
 nr_nodes: 14]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (- x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`(* ? ?)`x`#`#`4`#`#`(- ? ?)`(- ? ?)`4`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (- (* x 4) (- (- 4 4) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`(- ? ?)`(- ? ?)`y`#`#`4`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y (+ (* y y) (- x x))) y) (+ (- (- y 4) y) y)))
 nr_nodes: 20]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(+ ? ?)`4`#`#`(* ? ?)`(- ? ?)`4`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (+ 4 (* (- 4 y) (- (* y y) (- x 4))))))
 nr_nodes: 16]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y (* (* y y) (* 4 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`y`#`#`4`#`#`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`(+ ? ?)`4`#`#`(* ? ?)`4`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* y 4)) (* y (* (- (+ 4 (* 4 y)) y) x))))
 nr_nodes: 18]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`4`#`#`(* ? ?)`4`#`#`(* ? ?)`x`#`#`4`#`#`(* ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`(+ ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ (* x y) 4) (* 4 (* x 4))) (* y (+ (- y 4) (+ y 4)))))
 nr_nodes: 22]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (* x 4)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`4`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* x (+ (* (* 4 x) x) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`y`#`#`4`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`4`#`#`y`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (* (- y 4) (* (* x x) y))) (+ (* (* (- y 4) y) (* x (* y 4))) (- x 4))))
 nr_nodes: 28]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`x`#`#`(* ? ?)`y`#`#`(- ? ?)`x`#`#`(* ? ?)`(+ ? ?)`4`#`#`y`#`#`(* ? ?)`4`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- x (* y (- x (* (+ 4 y) (* 4 4))))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* y x) (* y 4)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- 4 (- (+ x y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (- (+ (+ y x) x) 4) 4)))
 nr_nodes: 12]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`4`#`#`(* ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (- y (+ x (* x (+ x 4)))) (* 4 4)))
 nr_nodes: 14]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`4`#`#`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`4`#`#`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`4`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- y 4) (- x (+ (+ (+ (- y 4) 4) (+ x (- x 4))) (+ x (* (+ x 4) (+ y y)))))))
 nr_nodes: 28]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`4`#`#`(- ? ?)`(* ? ?)`y`#`#`x`#`#`4`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* (+ y (+ y (+ x x))) (- (+ (+ x x) 4) (- (* y x) 4))) 4) x))
 nr_nodes: 24]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`4`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 4 4) x))
 nr_nodes: 6]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`(- ? ?)`4`#`#`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* x x) (* y (+ x y))) (- 4 (- (* (* x y) y) y))))
 nr_nodes: 20]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`4`#`#`x`#`#`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 4 x) y) (- (+ x x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`4`#`#`y`#`#`(* ? ?)`(- ? ?)`4`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 4 y) (* (- 4 x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`4`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`(- ? ?)`4`#`#`4`#`#`(- ? ?)`(* ? ?)`(+ ? ?)`x`#`#`4`#`#`(- ? ?)`y`#`#`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (+ (- (- 4 (+ y x)) (+ (- x y) (- 4 4))) (- (* (+ x 4) (- y y)) (+ (- y 4) x))) (- y 4))))
 nr_nodes: 34]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 4) x))
 nr_nodes: 6]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (* (- y 4) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y x) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`4`#`#`4`#`#`y`#`#`(- ? ?)`(- ? ?)`4`#`#`4`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- 4 4) y) (- (- 4 4) (- y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`(- ? ?)`4`#`#`4`#`#`4`#`#`y`#`#`(- ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`4`#`#`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ (- 4 4) 4) y) (- (* (+ (+ x x) y) 4) (- 4 y))))
 nr_nodes: 20]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`y`#`#`4`#`#`4`#`#`(* ? ?)`y`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (- y 4) 4) (* y (- x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) (- x 4)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* x (- y x)) 4) y))
 nr_nodes: 10]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x 4))
 nr_nodes: 4]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 4 y))
 nr_nodes: 4]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`4`#`#`x`#`#`(* ? ?)`(* ? ?)`y`#`#`4`#`#`y`#`#`(- ? ?)`y`#`#`(* ? ?)`(- ? ?)`4`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- x (+ (* (* y (+ 4 x)) (* (* y 4) y)) (- y (* (- 4 y) y))))))
 nr_nodes: 24]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`4`#`#`(* ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* y (* 4 x)) 4) (* 4 4)))
 nr_nodes: 12]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`4`#`#`(+ ? ?)`4`#`#`(- ? ?)`4`#`#`4`#`#`(+ ? ?)`(* ? ?)`(- ? ?)`4`#`#`4`#`#`4`#`#`(* ? ?)`4`#`#`(+ ? ?)`x`#`#`4`#`#`(* ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 4 (+ 4 (- 4 4))) (+ (* (- 4 4) 4) (* 4 (+ x 4)))) (* x 4)))
 nr_nodes: 24]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`4`#`#`(- ? ?)`4`#`#`(- ? ?)`(* ? ?)`4`#`#`4`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (* 4 (- 4 (- (* 4 4) x))) 4))
 nr_nodes: 12]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`4`#`#`4`#`#`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`4`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (- (+ y 4) 4)) (+ x (* (+ y 4) (+ y x)))))
 nr_nodes: 18]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`4`#`#`(* ? ?)`x`#`#`4`#`#`4`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`4`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`4`#`#`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`4`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (* (* (* (* (+ y 4) (* x 4)) 4) y) (+ (* x (+ (* 4 x) (* y x))) 4)) (+ (- y (* 4 4)) 4)))
 nr_nodes: 32]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`4`#`#`(- ? ?)`y`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x 4) (- y y)) (* (- x x) 4)))
 nr_nodes: 14]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- x (* x 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(- ? ?)`x`#`#`4`#`#`(- ? ?)`(- ? ?)`4`#`#`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (* (- x 4) (- (- 4 y) 4)) 4))
 nr_nodes: 12]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y 4) y))
 nr_nodes: 6]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`4`#`#`x`#`#`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* (* 4 x) x) y) y))
 nr_nodes: 10]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ y x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`4`#`#`4`#`#`(* ? ?)`y`#`#`y`#`#`x`#`#`(+ ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- x y) (+ (* (- (* 4 4) (* y y)) x) (+ 4 y))))
 nr_nodes: 18]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y (* 4 x))))
 nr_nodes: 12]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`4`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- 4 x) (- x y)) (* (+ x x) (- 4 4))))
 nr_nodes: 16]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`(- ? ?)`4`#`#`x`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`4`#`#`4`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ (- 4 x) y) (- (* y x) (* 4 4))) (* (* y y) (+ y (* y 4)))))
 nr_nodes: 24]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* y (- (+ y y) x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`(- ? ?)`4`#`#`(- ? ?)`4`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ y (- y (- 4 (- 4 x)))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`4`#`#`(- ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* y 4)) (- (* y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(- ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (- 4 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`4`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`4`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* (+ x y) y) (* x (* y 4))) (- (+ (+ y 4) 4) y)))
 nr_nodes: 20]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`4`#`#`y`#`#`y`#`#`(* ? ?)`(* ? ?)`4`#`#`(- ? ?)`x`#`#`y`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (+ (* (* (+ y (+ y x)) (+ (- 4 y) y)) (* (* 4 (- x y)) y)) (+ x y))))
 nr_nodes: 26]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`4`#`#`4`#`#`4`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* 4 4) 4) (* (* y x) (* 4 4))))
 nr_nodes: 14]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(* ? ?)`(- ? ?)`x`#`#`y`#`#`4`#`#`(* ? ?)`(+ ? ?)`x`#`#`4`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (* (* y y) x) 4) (- (+ (* y (+ y x)) (- (* (- x y) 4) (* (+ x 4) y))) x)))
 nr_nodes: 28]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`4`#`#`x`#`#`(- ? ?)`(- ? ?)`y`#`#`4`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* (* y 4) x) (- (- y 4) 4)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`4`#`#`4`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ 4 4)) (+ y (* x (- y x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (* y y) 4)))
 nr_nodes: 8]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x (* y (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* y y) y) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`(* ? ?)`x`#`#`4`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- (* x 4) (- x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (* x 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(- ? ?)`y`#`#`(- ? ?)`x`#`#`(- ? ?)`y`#`#`(* ? ?)`(* ? ?)`4`#`#`4`#`#`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (- y (- x (- y (* (* 4 4) (+ 4 x)))))))
 nr_nodes: 16]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`4`#`#`y`#`#`(+ ? ?)`4`#`#`4`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (+ 4 y) (+ 4 4)) x) (* x (* y y))))
 nr_nodes: 16]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`4`#`#`(- ? ?)`(- ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (* (- x (* 4 (- (- y x) y))) x)))
 nr_nodes: 14]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`(- ? ?)`(+ ? ?)`4`#`#`x`#`#`y`#`#`4`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- (+ (- (- (+ 4 x) y) 4) y) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* x y) 4)))
 nr_nodes: 8]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`4`#`#`y`#`#`(+ ? ?)`4`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ 4 y)) (+ 4 (* y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`4`#`#`(* ? ?)`4`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (* (* y (* x y)) x) (+ (- 4 (* 4 4)) 4)))
 nr_nodes: 16]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`4`#`#`(+ ? ?)`x`#`#`4`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 4 (+ x 4)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(* ? ?)`(- ? ?)`4`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y (* (- 4 (+ y x)) (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ y 4))
 nr_nodes: 4]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`4`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ 4 y) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`4`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- 4 4) y))
 nr_nodes: 6]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- y x)) (- y (- 4 x))))
 nr_nodes: 12]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x x))
 nr_nodes: 4]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`4`#`#`x`#`#`(+ ? ?)`y`#`#`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`(- ? ?)`x`#`#`4`#`#`x`#`#`(+ ? ?)`(- ? ?)`y`#`#`y`#`#`x`#`#`y`#`#`(- ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`(- ? ?)`4`#`#`(* ? ?)`(* ? ?)`4`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (- (* (* (- y 4) x) (+ y (- x y))) (+ (* (- x 4) x) (+ (- y y) x))) y) (- (- x x) (* (- 4 (* (* 4 y) (+ y x))) (+ y (+ (- y 4) (- x x)))))))
 nr_nodes: 50]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`4`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`4`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (- (* y x) 4) (+ (* (* (* 4 y) (* x x)) y) (+ (+ x y) x))) (* y y)))
 nr_nodes: 26]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`(- ? ?)`(+ ? ?)`4`#`#`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 4 (- (+ 4 4) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- x y) x) 4))
 nr_nodes: 8]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (* x (+ x y)) 4))
 nr_nodes: 8]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`4`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 4 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`4`#`#`y`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`4`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (+ (+ (* (* 4 y) y) (* y (* (- y x) (- x 4)))) (+ y (* y 4)))))
 nr_nodes: 24]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`4`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 4 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(+ ? ?)`4`#`#`4`#`#`y`#`#`(- ? ?)`x`#`#`(- ? ?)`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (+ 4 4) y) (- x (- 4 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`4`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (- (* 4 x) (* (+ x y) 4)) 4))
 nr_nodes: 12]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`(+ ? ?)`4`#`#`(- ? ?)`(- ? ?)`4`#`#`4`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (- (+ 4 (- (- 4 4) (+ x y))) (* (* (- y x) (+ x y)) x))))
 nr_nodes: 22]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`(* ? ?)`4`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 4 (- (- (+ y y) x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y 4)))
 nr_nodes: 6]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 x))
 nr_nodes: 4]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`4`#`#`4`#`#`(* ? ?)`x`#`#`4`#`#`(- ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`4`#`#`(+ ? ?)`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (* y y) (+ 4 4)) (* x 4)) (- x (* (- y 4) (+ y 4)))))
 nr_nodes: 22]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`4`#`#`(* ? ?)`4`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (+ (* y (- (- (+ x 4) 4) (* 4 (* y x)))) y) y))
 nr_nodes: 18]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`4`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* 4 (+ (* x x) (* x x))) (+ y (+ (- y x) (- y x))))))
 nr_nodes: 22]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (- y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ y (+ y x)) 4) (- (+ x x) (* x x))))
 nr_nodes: 16]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`4`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`(+ ? ?)`4`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (* 4 (+ x x))) (+ (* (- y (+ 4 x)) (- x x)) (+ x (* (+ x x) (+ y y))))))
 nr_nodes: 28]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* y 4) (- x 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`4`#`#`4`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (- (- 4 4) (- y y))))
 nr_nodes: 10]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 4) 4))
 nr_nodes: 6]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- y x))
 nr_nodes: 4]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`(- ? ?)`(- ? ?)`4`#`#`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`y`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- (- (- 4 4) (- (+ x 4) y)) 4)))
 nr_nodes: 14]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`(- ? ?)`(- ? ?)`x`#`#`4`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (- 4 (- (+ x 4) (- (- x 4) y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`(* ? ?)`4`#`#`y`#`#`(+ ? ?)`(- ? ?)`4`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* y 4)) (- (+ x (* 4 y)) (+ (- 4 y) (* y y)))))
 nr_nodes: 20]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`4`#`#`x`#`#`(* ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`4`#`#`x`#`#`x`#`#`y`#`#`(+ ? ?)`y`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- (+ 4 x) (* (- (* (+ 4 x) x) y) (+ y (- x 4)))))
 nr_nodes: 18]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`4`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (* x (+ x (+ 4 x)))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`4`#`#`#
 s_expr: (defun my_func (x y) 4)
 nr_nodes: 2]
[Generation 0]
[Computing fitness]
[(1.125, 55), (1.125, 81), (1.125, 159), (1.125, 267), (1.125, 274), (1.125, 280), (1.0, 54), (1.0, 60), (1.0, 61), (1.0, 75), (1.0, 121), (1.0, 136), (1.0, 140), (1.0, 176), (1.0, 178), (1.0, 218), (1.0, 231), (1.0, 306), (1.0, 353), (1.0, 377), (1.0, 378), (0.875, 336), (0.75, 166), (0.75, 344), (0.75, 349), (0.6666666666666666, 50), (0.6666666666666666, 212), (0.6666666666666666, 228), (0.625, 9), (0.625, 36), (0.625, 130), (0.625, 141), (0.625, 165), (0.625, 192), (0.625, 199), (0.625, 222), (0.625, 227), (0.625, 343), (0.5416666666666666, 18), (0.5416666666666666, 92), (0.5416666666666666, 261), (0.5416666666666666, 339), (0.5416666666666666, 374), (0.5, 6), (0.5, 47), (0.5, 82), (0.5, 85), (0.5, 103), (0.5, 111), (0.5, 113), (0.5, 129), (0.5, 157), (0.5, 172), (0.5, 198), (0.5, 215), (0.5, 234), (0.5, 235), (0.5, 259), (0.5, 263), (0.5, 298), (0.5, 299), (0.5, 310), (0.5, 323), (0.5, 333), (0.5, 350), (0.5, 351), (0.5, 395), (0.41666666666666663, 10), (0.41666666666666663, 74), (0.41666666666666663, 175), (0.41666666666666663, 185), (0.41666666666666663, 204), (0.41666666666666663, 314), (0.41666666666666663, 356), (0.375, 3), (0.375, 4), (0.375, 14), (0.375, 19), (0.375, 21), (0.375, 23), (0.375, 25), (0.375, 26), (0.375, 29), (0.375, 30), (0.375, 32), (0.375, 37), (0.375, 38), (0.375, 42), (0.375, 46), (0.375, 48), (0.375, 64), (0.375, 66), (0.375, 76), (0.375, 79), (0.375, 102), (0.375, 106), (0.375, 109), (0.375, 110), (0.375, 119), (0.375, 124), (0.375, 138), (0.375, 143), (0.375, 147), (0.375, 158), (0.375, 161), (0.375, 162), (0.375, 177), (0.375, 180), (0.375, 182), (0.375, 188), (0.375, 196), (0.375, 206), (0.375, 207), (0.375, 209), (0.375, 214), (0.375, 219), (0.375, 225), (0.375, 237), (0.375, 242), (0.375, 253), (0.375, 254), (0.375, 257), (0.375, 264), (0.375, 266), (0.375, 269), (0.375, 271), (0.375, 286), (0.375, 296), (0.375, 301), (0.375, 302), (0.375, 303), (0.375, 304), (0.375, 311), (0.375, 315), (0.375, 317), (0.375, 329), (0.375, 340), (0.375, 360), (0.375, 365), (0.375, 370), (0.375, 382), (0.375, 399), (0.35, 70), (0.3333333333333333, 352), (0.3055555555555556, 134), (0.29166666666666663, 7), (0.29166666666666663, 22), (0.29166666666666663, 31), (0.29166666666666663, 51), (0.29166666666666663, 58), (0.29166666666666663, 65), (0.29166666666666663, 99), (0.29166666666666663, 174), (0.29166666666666663, 220), (0.29166666666666663, 282), (0.29166666666666663, 284), (0.29166666666666663, 288), (0.29166666666666663, 322), (0.29166666666666663, 359), (0.29166666666666663, 367), (0.25, 1), (0.25, 16), (0.25, 40), (0.25, 41), (0.25, 49), (0.25, 84), (0.25, 95), (0.25, 144), (0.25, 152), (0.25, 164), (0.25, 167), (0.25, 210), (0.25, 211), (0.25, 217), (0.25, 226), (0.25, 241), (0.25, 245), (0.25, 249), (0.25, 252), (0.25, 258), (0.25, 273), (0.25, 278), (0.25, 292), (0.25, 294), (0.25, 316), (0.25, 320), (0.25, 355), (0.25, 371), (0.25, 379), (0.25, 384), (0.25, 389), (0.25, 392), (0.25, 394), (0.225, 153), (0.225, 170), (0.20833333333333331, 369), (0.19642857142857142, 151), (0.19642857142857142, 186), (0.19642857142857142, 345), (0.1875, 246), (0.1875, 332), (0.18055555555555555, 250), (0.18055555555555555, 376), (0.16666666666666666, 12), (0.16666666666666666, 15), (0.16666666666666666, 17), (0.16666666666666666, 35), (0.16666666666666666, 53), (0.16666666666666666, 56), (0.16666666666666666, 83), (0.16666666666666666, 89), (0.16666666666666666, 94), (0.16666666666666666, 101), (0.16666666666666666, 105), (0.16666666666666666, 107), (0.16666666666666666, 118), (0.16666666666666666, 123), (0.16666666666666666, 127), (0.16666666666666666, 135), (0.16666666666666666, 156), (0.16666666666666666, 163), (0.16666666666666666, 183), (0.16666666666666666, 184), (0.16666666666666666, 195), (0.16666666666666666, 216), (0.16666666666666666, 240), (0.16666666666666666, 251), (0.16666666666666666, 256), (0.16666666666666666, 279), (0.16666666666666666, 287), (0.16666666666666666, 300), (0.16666666666666666, 325), (0.16666666666666666, 327), (0.16666666666666666, 375), (0.16666666666666666, 380), (0.16666666666666666, 398), (0.125, 0), (0.125, 2), (0.125, 5), (0.125, 8), (0.125, 11), (0.125, 13), (0.125, 20), (0.125, 24), (0.125, 27), (0.125, 28), (0.125, 33), (0.125, 34), (0.125, 44), (0.125, 45), (0.125, 52), (0.125, 59), (0.125, 62), (0.125, 63), (0.125, 67), (0.125, 68), (0.125, 69), (0.125, 71), (0.125, 73), (0.125, 77), (0.125, 78), (0.125, 80), (0.125, 86), (0.125, 87), (0.125, 88), (0.125, 90), (0.125, 91), (0.125, 93), (0.125, 96), (0.125, 97), (0.125, 98), (0.125, 100), (0.125, 104), (0.125, 108), (0.125, 112), (0.125, 114), (0.125, 115), (0.125, 117), (0.125, 120), (0.125, 122), (0.125, 126), (0.125, 128), (0.125, 131), (0.125, 132), (0.125, 133), (0.125, 137), (0.125, 139), (0.125, 142), (0.125, 145), (0.125, 146), (0.125, 148), (0.125, 150), (0.125, 154), (0.125, 155), (0.125, 160), (0.125, 168), (0.125, 169), (0.125, 171), (0.125, 173), (0.125, 179), (0.125, 181), (0.125, 187), (0.125, 189), (0.125, 190), (0.125, 191), (0.125, 194), (0.125, 197), (0.125, 200), (0.125, 201), (0.125, 203), (0.125, 205), (0.125, 208), (0.125, 213), (0.125, 221), (0.125, 223), (0.125, 224), (0.125, 230), (0.125, 232), (0.125, 233), (0.125, 236), (0.125, 238), (0.125, 239), (0.125, 243), (0.125, 247), (0.125, 248), (0.125, 255), (0.125, 260), (0.125, 262), (0.125, 265), (0.125, 268), (0.125, 270), (0.125, 272), (0.125, 275), (0.125, 276), (0.125, 277), (0.125, 281), (0.125, 283), (0.125, 285), (0.125, 289), (0.125, 290), (0.125, 291), (0.125, 293), (0.125, 295), (0.125, 297), (0.125, 305), (0.125, 307), (0.125, 308), (0.125, 309), (0.125, 312), (0.125, 313), (0.125, 318), (0.125, 319), (0.125, 321), (0.125, 324), (0.125, 326), (0.125, 328), (0.125, 330), (0.125, 334), (0.125, 335), (0.125, 337), (0.125, 338), (0.125, 341), (0.125, 342), (0.125, 346), (0.125, 347), (0.125, 348), (0.125, 354), (0.125, 357), (0.125, 358), (0.125, 361), (0.125, 363), (0.125, 364), (0.125, 366), (0.125, 368), (0.125, 372), (0.125, 373), (0.125, 381), (0.125, 383), (0.125, 385), (0.125, 386), (0.125, 387), (0.125, 388), (0.125, 390), (0.125, 391), (0.125, 396), (0.125, 397), (0.1, 116), (0.1, 244), (0.1, 393), (0.08333333333333333, 72), (0.08333333333333333, 125), (0.08333333333333333, 362), (0.07142857142857142, 39), (0.07142857142857142, 43), (0.07142857142857142, 57), (0.07142857142857142, 193), (0.07142857142857142, 229), (0.05555555555555555, 149), (0.045454545454545456, 202), (0.025, 331)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ x x)) (* x y)))
 nr_nodes: 10]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* y y) (+ x (- x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`4`#`#`y`#`#`(* ? ?)`(- ? ?)`4`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 4 y) (* (- 4 x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* y y) y) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`(* ? ?)`x`#`#`4`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- (* x 4) (- x y))))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.25, 416), (1.125, 267), (1.125, 280), (1.125, 274), (1.125, 412), (1.125, 81), (1.125, 159), (1.125, 55), (1.0, 437), (1.0, 61), (1.0, 353), (1.0, 421), (1.0, 218), (1.0, 378), (1.0, 178), (1.0, 231), (1.0, 377), (1.0, 136), (1.0, 429), (1.0, 306), (1.0, 406), (1.0, 176), (1.0, 121), (1.0, 407), (1.0, 54), (1.0, 75), (1.0, 60), (1.0, 140), (0.875, 336), (0.75, 415), (0.75, 166), (0.75, 411), (0.75, 349), (0.75, 344), (0.75, 402), (0.6666666666666666, 228), (0.6666666666666666, 212), (0.6666666666666666, 50), (0.625, 141), (0.625, 165), (0.625, 36), (0.625, 408), (0.625, 130), (0.625, 418), (0.625, 428), (0.625, 199), (0.625, 409), (0.625, 343), (0.625, 222), (0.625, 192), (0.625, 9), (0.625, 227), (0.5416666666666666, 490), (0.5416666666666666, 261), (0.5416666666666666, 18), (0.5416666666666666, 92), (0.5416666666666666, 339), (0.5416666666666666, 443), (0.5416666666666666, 423), (0.5416666666666666, 374), (0.5416666666666666, 424), (0.5, 333), (0.5, 351), (0.5, 82), (0.5, 395), (0.5, 400), (0.5, 435), (0.5, 129), (0.5, 234), (0.5, 432), (0.5, 235), (0.5, 404), (0.5, 426), (0.5, 323), (0.5, 350), (0.5, 439), (0.5, 198), (0.5, 85), (0.5, 298), (0.5, 103), (0.5, 263), (0.5, 438), (0.5, 157), (0.5, 310), (0.5, 299), (0.5, 113), (0.5, 6), (0.5, 259), (0.5, 111), (0.5, 215), (0.5, 47), (0.5, 172), (0.41666666666666663, 204), (0.41666666666666663, 185), (0.41666666666666663, 175), (0.41666666666666663, 10), (0.41666666666666663, 74), (0.41666666666666663, 314), (0.41666666666666663, 442), (0.41666666666666663, 356), (0.41666666666666663, 440), (0.375, 482), (0.375, 37), (0.375, 66), (0.375, 180), (0.375, 463), (0.375, 447), (0.375, 296), (0.375, 19), (0.375, 106), (0.375, 370), (0.375, 461), (0.375, 382), (0.375, 458), (0.375, 196), (0.375, 311), (0.375, 315), (0.375, 161), (0.375, 329), (0.375, 254), (0.375, 225), (0.375, 472), (0.375, 219), (0.375, 109), (0.375, 460), (0.375, 455), (0.375, 21), (0.375, 46), (0.375, 286), (0.375, 479), (0.375, 188), (0.375, 209), (0.375, 119), (0.375, 478), (0.375, 242), (0.375, 207), (0.375, 340), (0.375, 475), (0.375, 42), (0.375, 237), (0.375, 266), (0.375, 471), (0.375, 124), (0.375, 257), (0.375, 481), (0.375, 476), (0.375, 3), (0.375, 317), (0.375, 269), (0.375, 138), (0.375, 102), (0.375, 452), (0.375, 445), (0.375, 79), (0.375, 448), (0.375, 214), (0.375, 456), (0.375, 483), (0.375, 457), (0.375, 464), (0.375, 143), (0.375, 271), (0.375, 360), (0.375, 14), (0.375, 365), (0.375, 206), (0.375, 399), (0.375, 462), (0.375, 30), (0.375, 253), (0.375, 453), (0.375, 304), (0.375, 162), (0.375, 301), (0.375, 48), (0.375, 484), (0.375, 470), (0.375, 25), (0.375, 446), (0.375, 158), (0.375, 4), (0.375, 466), (0.375, 474), (0.375, 449), (0.375, 110), (0.375, 468), (0.375, 303), (0.375, 264), (0.375, 38), (0.375, 485), (0.375, 302), (0.375, 450), (0.375, 23), (0.375, 64), (0.375, 26), (0.375, 32), (0.375, 76), (0.375, 182), (0.375, 454), (0.375, 177), (0.375, 29), (0.375, 444), (0.375, 147), (0.35, 70), (0.3333333333333333, 352), (0.3055555555555556, 134), (0.29166666666666663, 489), (0.29166666666666663, 31), (0.29166666666666663, 51), (0.29166666666666663, 359), (0.29166666666666663, 322), (0.29166666666666663, 58), (0.29166666666666663, 99), (0.29166666666666663, 7), (0.29166666666666663, 174), (0.29166666666666663, 282), (0.29166666666666663, 284), (0.29166666666666663, 288), (0.29166666666666663, 65), (0.29166666666666663, 22), (0.29166666666666663, 367), (0.29166666666666663, 220), (0.29166666666666663, 425), (0.25, 422), (0.25, 258), (0.25, 401), (0.25, 278), (0.25, 144), (0.25, 379), (0.25, 245), (0.25, 434), (0.25, 217), (0.25, 49), (0.25, 241), (0.25, 273), (0.25, 294), (0.25, 320), (0.25, 316), (0.25, 167), (0.25, 431), (0.25, 249), (0.25, 226), (0.25, 16), (0.25, 252), (0.25, 211), (0.25, 394), (0.25, 164), (0.25, 371), (0.25, 414), (0.25, 392), (0.25, 292), (0.25, 420), (0.25, 1), (0.25, 95), (0.25, 41), (0.25, 384), (0.25, 152), (0.25, 389), (0.25, 40), (0.25, 355), (0.25, 210), (0.25, 84), (0.225, 486), (0.225, 153), (0.225, 170), (0.20833333333333331, 369), (0.19642857142857142, 151), (0.19642857142857142, 345), (0.19642857142857142, 186), (0.1875, 246), (0.1875, 332), (0.18055555555555555, 376), (0.18055555555555555, 250), (0.16666666666666666, 287), (0.16666666666666666, 251), (0.16666666666666666, 279), (0.16666666666666666, 123), (0.16666666666666666, 398), (0.16666666666666666, 35), (0.16666666666666666, 300), (0.16666666666666666, 135), (0.16666666666666666, 156), (0.16666666666666666, 183), (0.16666666666666666, 17), (0.16666666666666666, 94), (0.16666666666666666, 12), (0.16666666666666666, 101), (0.16666666666666666, 107), (0.16666666666666666, 325), (0.16666666666666666, 15), (0.16666666666666666, 118), (0.16666666666666666, 256), (0.16666666666666666, 195), (0.16666666666666666, 127), (0.16666666666666666, 163), (0.16666666666666666, 53), (0.16666666666666666, 413), (0.16666666666666666, 105), (0.16666666666666666, 89), (0.16666666666666666, 184), (0.16666666666666666, 380), (0.16666666666666666, 327), (0.16666666666666666, 83), (0.16666666666666666, 56), (0.16666666666666666, 240), (0.16666666666666666, 375), (0.16666666666666666, 216), (0.16666666666666666, 427), (0.125, 187), (0.125, 52), (0.125, 137), (0.125, 128), (0.125, 181), (0.125, 68), (0.125, 13), (0.125, 430), (0.125, 145), (0.125, 34), (0.125, 155), (0.125, 122), (0.125, 247), (0.125, 86), (0.125, 77), (0.125, 71), (0.125, 168), (0.125, 93), (0.125, 190), (0.125, 171), (0.125, 100), (0.125, 197), (0.125, 62), (0.125, 142), (0.125, 0), (0.125, 44), (0.125, 208), (0.125, 205), (0.125, 108), (0.125, 126), (0.125, 73), (0.125, 146), (0.125, 173), (0.125, 78), (0.125, 11), (0.125, 203), (0.125, 232), (0.125, 131), (0.125, 150), (0.125, 90), (0.125, 213), (0.125, 243), (0.125, 67), (0.125, 201), (0.125, 169), (0.125, 132), (0.125, 179), (0.125, 87), (0.125, 191), (0.125, 114), (0.125, 63), (0.125, 194), (0.125, 115), (0.125, 98), (0.125, 91), (0.125, 104), (0.125, 69), (0.125, 236), (0.125, 96), (0.125, 117), (0.125, 8), (0.125, 120), (0.125, 154), (0.125, 112), (0.125, 230), (0.125, 419), (0.125, 248), (0.125, 5), (0.125, 97), (0.125, 238), (0.125, 27), (0.125, 221), (0.125, 28), (0.125, 88), (0.125, 59), (0.125, 160), (0.125, 239), (0.125, 24), (0.125, 139), (0.125, 80), (0.125, 148), (0.125, 133), (0.125, 45), (0.125, 189), (0.125, 200), (0.125, 223), (0.125, 33), (0.125, 20), (0.125, 224), (0.125, 233), (0.125, 2), (0.05555555555555555, 488)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 416
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (+ x x) (- 4 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* y y) y) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`(* ? ?)`x`#`#`4`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- (* x 4) (- x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 412
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (* y x) (- x 4))))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 511), (1.25, 523), (1.25, 416), (1.25, 492), (1.25, 493), (1.125, 81), (1.125, 274), (1.125, 159), (1.125, 518), (1.125, 55), (1.125, 412), (1.125, 267), (1.125, 280), (1.0, 504), (1.0, 178), (1.0, 353), (1.0, 407), (1.0, 60), (1.0, 218), (1.0, 421), (1.0, 140), (1.0, 500), (1.0, 176), (1.0, 136), (1.0, 538), (1.0, 505), (1.0, 536), (1.0, 437), (1.0, 306), (1.0, 75), (1.0, 231), (1.0, 61), (1.0, 406), (1.0, 496), (1.0, 54), (1.0, 498), (1.0, 429), (1.0, 378), (1.0, 121), (1.0, 377), (1.0, 497), (0.875, 336), (0.875, 533), (0.75, 548), (0.75, 415), (0.75, 349), (0.75, 411), (0.75, 402), (0.75, 510), (0.75, 166), (0.75, 512), (0.75, 344), (0.6666666666666666, 535), (0.6666666666666666, 228), (0.6666666666666666, 212), (0.6666666666666666, 50), (0.6666666666666666, 515), (0.625, 343), (0.625, 418), (0.625, 222), (0.625, 409), (0.625, 199), (0.625, 192), (0.625, 428), (0.625, 36), (0.625, 408), (0.625, 165), (0.625, 141), (0.625, 9), (0.625, 227), (0.625, 130), (0.625, 516), (0.625, 495), (0.5416666666666666, 18), (0.5416666666666666, 339), (0.5416666666666666, 528), (0.5416666666666666, 423), (0.5416666666666666, 261), (0.5416666666666666, 92), (0.5416666666666666, 374), (0.5416666666666666, 443), (0.5416666666666666, 551), (0.5416666666666666, 526), (0.5416666666666666, 424), (0.5416666666666666, 490), (0.5, 198), (0.5, 215), (0.5, 521), (0.5, 113), (0.5, 426), (0.5, 263), (0.5, 522), (0.5, 85), (0.5, 539), (0.5, 540), (0.5, 400), (0.5, 47), (0.5, 103), (0.5, 432), (0.5, 439), (0.5, 323), (0.5, 259), (0.5, 404), (0.5, 234), (0.5, 531), (0.5, 435), (0.5, 299), (0.5, 351), (0.5, 350), (0.5, 310), (0.5, 532), (0.5, 129), (0.5, 514), (0.5, 541), (0.5, 438), (0.5, 82), (0.5, 395), (0.5, 333), (0.5, 172), (0.5, 502), (0.5, 298), (0.5, 157), (0.5, 235), (0.5, 111), (0.5, 544), (0.5, 6), (0.41666666666666663, 556), (0.41666666666666663, 356), (0.41666666666666663, 204), (0.41666666666666663, 314), (0.41666666666666663, 491), (0.41666666666666663, 554), (0.41666666666666663, 442), (0.41666666666666663, 74), (0.41666666666666663, 440), (0.41666666666666663, 550), (0.41666666666666663, 175), (0.41666666666666663, 10), (0.41666666666666663, 185), (0.41666666666666663, 552), (0.375, 461), (0.375, 196), (0.375, 587), (0.375, 266), (0.375, 38), (0.375, 447), (0.375, 446), (0.375, 560), (0.375, 110), (0.375, 311), (0.375, 557), (0.375, 466), (0.375, 572), (0.375, 138), (0.375, 124), (0.375, 207), (0.375, 468), (0.375, 485), (0.375, 588), (0.375, 454), (0.375, 478), (0.375, 370), (0.375, 254), (0.375, 76), (0.375, 329), (0.375, 301), (0.375, 365), (0.375, 102), (0.375, 561), (0.375, 162), (0.375, 214), (0.375, 25), (0.375, 23), (0.375, 225), (0.375, 567), (0.375, 182), (0.375, 42), (0.375, 449), (0.375, 583), (0.375, 460), (0.375, 64), (0.375, 482), (0.375, 304), (0.375, 264), (0.375, 206), (0.375, 453), (0.375, 570), (0.375, 569), (0.375, 161), (0.375, 177), (0.375, 143), (0.375, 462), (0.375, 317), (0.375, 147), (0.375, 66), (0.375, 474), (0.375, 48), (0.375, 476), (0.375, 574), (0.375, 253), (0.375, 445), (0.375, 475), (0.375, 209), (0.375, 565), (0.375, 450), (0.375, 472), (0.375, 458), (0.375, 484), (0.375, 158), (0.375, 471), (0.375, 399), (0.375, 575), (0.375, 563), (0.375, 483), (0.375, 481), (0.375, 545), (0.375, 303), (0.375, 46), (0.375, 29), (0.375, 470), (0.375, 559), (0.375, 14), (0.375, 464), (0.375, 452), (0.375, 109), (0.375, 448), (0.375, 106), (0.375, 257), (0.375, 455), (0.375, 581), (0.375, 286), (0.375, 3), (0.375, 590), (0.375, 463), (0.375, 576), (0.375, 568), (0.375, 584), (0.375, 188), (0.375, 579), (0.375, 180), (0.375, 30), (0.375, 269), (0.375, 302), (0.375, 237), (0.375, 564), (0.375, 219), (0.375, 4), (0.375, 37), (0.375, 340), (0.375, 577), (0.375, 26), (0.375, 271), (0.375, 517), (0.375, 119), (0.375, 79), (0.375, 315), (0.375, 296), (0.375, 382), (0.375, 21), (0.375, 360), (0.375, 479), (0.375, 456), (0.375, 19), (0.375, 586), (0.375, 242), (0.375, 444), (0.375, 457), (0.375, 32), (0.35, 70), (0.3333333333333333, 352), (0.3055555555555556, 134), (0.29166666666666663, 31), (0.29166666666666663, 7), (0.29166666666666663, 99), (0.29166666666666663, 22), (0.29166666666666663, 174), (0.29166666666666663, 506), (0.29166666666666663, 425), (0.29166666666666663, 359), (0.29166666666666663, 527), (0.29166666666666663, 220), (0.29166666666666663, 65), (0.29166666666666663, 58), (0.29166666666666663, 367), (0.29166666666666663, 51), (0.29166666666666663, 288), (0.29166666666666663, 489), (0.29166666666666663, 322), (0.29166666666666663, 282), (0.29166666666666663, 525), (0.29166666666666663, 284), (0.25, 252), (0.25, 152), (0.25, 278), (0.25, 210), (0.25, 401), (0.25, 371), (0.25, 320), (0.25, 16), (0.25, 167), (0.25, 41), (0.25, 292), (0.25, 508), (0.25, 144), (0.25, 294), (0.25, 95), (0.25, 249), (0.25, 226), (0.25, 389), (0.25, 392), (0.25, 420), (0.25, 273), (0.25, 241), (0.25, 164), (0.25, 245), (0.25, 434), (0.25, 384), (0.25, 414), (0.25, 431), (0.25, 316), (0.25, 355), (0.25, 217), (0.25, 422), (0.25, 84), (0.25, 1), (0.25, 379), (0.25, 49), (0.25, 394), (0.25, 258), (0.25, 520), (0.25, 40), (0.25, 549), (0.25, 211), (0.225, 486), (0.225, 153), (0.225, 170), (0.20833333333333331, 369), (0.19642857142857142, 345), (0.19642857142857142, 186), (0.19642857142857142, 151), (0.1875, 332), (0.1875, 246), (0.18055555555555555, 376), (0.18055555555555555, 250), (0.16666666666666666, 135), (0.16666666666666666, 300), (0.16666666666666666, 501), (0.16666666666666666, 53), (0.16666666666666666, 216), (0.16666666666666666, 123), (0.16666666666666666, 325), (0.16666666666666666, 105), (0.16666666666666666, 94), (0.16666666666666666, 287), (0.16666666666666666, 15), (0.16666666666666666, 380), (0.16666666666666666, 413), (0.16666666666666666, 256), (0.16666666666666666, 83), (0.16666666666666666, 184), (0.16666666666666666, 127), (0.16666666666666666, 35), (0.16666666666666666, 240), (0.16666666666666666, 17), (0.16666666666666666, 56), (0.16666666666666666, 101), (0.16666666666666666, 156), (0.16666666666666666, 398), (0.16666666666666666, 279), (0.16666666666666666, 251), (0.16666666666666666, 12), (0.16666666666666666, 427), (0.16666666666666666, 183), (0.16666666666666666, 327), (0.16666666666666666, 89), (0.16666666666666666, 542), (0.16666666666666666, 529), (0.16666666666666666, 107), (0.16666666666666666, 375), (0.16666666666666666, 195), (0.16666666666666666, 546), (0.16666666666666666, 118), (0.16666666666666666, 163), (0.125, 77), (0.125, 187), (0.125, 122), (0.125, 155), (0.125, 168), (0.125, 181), (0.125, 128), (0.125, 34), (0.125, 430), (0.125, 247), (0.125, 13), (0.125, 137), (0.125, 86), (0.125, 145), (0.125, 71), (0.125, 52), (0.125, 68)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 523
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 x) (- y (* 4 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 416
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (+ x x) (- 4 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 492
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 493
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (* y x) (- x x))))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 511), (1.375, 592), (1.375, 603), (1.25, 493), (1.25, 416), (1.25, 492), (1.25, 616), (1.25, 523), (1.125, 267), (1.125, 605), (1.125, 274), (1.125, 55), (1.125, 81), (1.125, 628), (1.125, 518), (1.125, 412), (1.125, 159), (1.125, 597), (1.125, 623), (1.125, 280), (1.0, 407), (1.0, 178), (1.0, 306), (1.0, 611), (1.0, 538), (1.0, 613), (1.0, 231), (1.0, 630), (1.0, 650), (1.0, 75), (1.0, 353), (1.0, 60), (1.0, 498), (1.0, 504), (1.0, 536), (1.0, 406), (1.0, 505), (1.0, 54), (1.0, 136), (1.0, 176), (1.0, 667), (1.0, 429), (1.0, 612), (1.0, 617), (1.0, 378), (1.0, 671), (1.0, 437), (1.0, 496), (1.0, 218), (1.0, 615), (1.0, 421), (1.0, 377), (1.0, 497), (1.0, 61), (1.0, 140), (1.0, 500), (1.0, 121), (1.0, 607), (0.875, 533), (0.875, 336), (0.75, 415), (0.75, 618), (0.75, 622), (0.75, 548), (0.75, 166), (0.75, 595), (0.75, 593), (0.75, 402), (0.75, 349), (0.75, 512), (0.75, 411), (0.75, 344), (0.75, 619), (0.75, 510), (0.6666666666666666, 515), (0.6666666666666666, 50), (0.6666666666666666, 535), (0.6666666666666666, 212), (0.6666666666666666, 228), (0.6666666666666666, 624), (0.625, 634), (0.625, 610), (0.625, 626), (0.625, 516), (0.625, 227), (0.625, 409), (0.625, 408), (0.625, 165), (0.625, 130), (0.625, 428), (0.625, 9), (0.625, 199), (0.625, 629), (0.625, 594), (0.625, 495), (0.625, 141), (0.625, 192), (0.625, 36), (0.625, 600), (0.625, 222), (0.625, 343), (0.625, 418), (0.5416666666666666, 423), (0.5416666666666666, 641), (0.5416666666666666, 677), (0.5416666666666666, 92), (0.5416666666666666, 18), (0.5416666666666666, 551), (0.5416666666666666, 490), (0.5416666666666666, 526), (0.5416666666666666, 528), (0.5416666666666666, 639), (0.5416666666666666, 261), (0.5416666666666666, 443), (0.5416666666666666, 339), (0.5416666666666666, 424), (0.5416666666666666, 374), (0.5416666666666666, 636), (0.5416666666666666, 642), (0.5, 635), (0.5, 668), (0.5, 439), (0.5, 299), (0.5, 82), (0.5, 539), (0.5, 646), (0.5, 263), (0.5, 395), (0.5, 609), (0.5, 113), (0.5, 514), (0.5, 426), (0.5, 111), (0.5, 157), (0.5, 653), (0.5, 310), (0.5, 659), (0.5, 647), (0.5, 670), (0.5, 620), (0.5, 665), (0.5, 215), (0.5, 438), (0.5, 85), (0.5, 663), (0.5, 522), (0.5, 657), (0.5, 47), (0.5, 333), (0.5, 198), (0.5, 521), (0.5, 259), (0.5, 633), (0.5, 654), (0.5, 601), (0.5, 6), (0.5, 404), (0.5, 435), (0.5, 544), (0.5, 350), (0.5, 129), (0.5, 540), (0.5, 172), (0.5, 541), (0.5, 502), (0.5, 531), (0.5, 234), (0.5, 532), (0.5, 400), (0.5, 661), (0.5, 432), (0.5, 351), (0.5, 323), (0.5, 235), (0.5, 103), (0.5, 666), (0.5, 655), (0.5, 298), (0.41666666666666663, 356), (0.41666666666666663, 679), (0.41666666666666663, 673), (0.41666666666666663, 683), (0.41666666666666663, 550), (0.41666666666666663, 681), (0.41666666666666663, 442), (0.41666666666666663, 314), (0.41666666666666663, 10), (0.41666666666666663, 674), (0.41666666666666663, 204), (0.41666666666666663, 175), (0.41666666666666663, 185), (0.41666666666666663, 552), (0.41666666666666663, 491), (0.41666666666666663, 440), (0.41666666666666663, 554), (0.41666666666666663, 74), (0.41666666666666663, 556), (0.375, 560), (0.375, 301), (0.375, 449), (0.375, 587), (0.375, 475), (0.375, 471), (0.375, 456), (0.375, 479), (0.375, 177), (0.375, 365), (0.375, 452), (0.375, 577), (0.375, 269), (0.375, 458), (0.375, 482), (0.375, 563), (0.375, 4), (0.375, 23), (0.375, 685), (0.375, 242), (0.375, 686), (0.375, 48), (0.375, 575), (0.375, 106), (0.375, 568), (0.375, 370), (0.375, 46), (0.375, 576), (0.375, 446), (0.375, 687), (0.375, 207), (0.375, 209), (0.375, 565), (0.375, 470), (0.375, 455), (0.375, 21), (0.375, 119), (0.375, 14), (0.375, 457), (0.375, 64), (0.375, 138), (0.375, 588), (0.375, 124), (0.375, 79), (0.375, 463), (0.375, 583), (0.375, 570), (0.375, 180), (0.375, 311), (0.375, 102), (0.375, 37), (0.375, 286), (0.375, 485), (0.375, 559), (0.375, 468), (0.375, 478), (0.375, 30), (0.375, 42), (0.375, 182), (0.375, 303), (0.375, 143), (0.375, 32), (0.375, 38), (0.375, 590), (0.375, 3), (0.375, 302), (0.375, 257), (0.375, 448), (0.375, 158), (0.375, 579), (0.375, 561), (0.375, 581), (0.375, 584), (0.375, 214), (0.375, 445), (0.375, 574), (0.375, 340), (0.375, 109), (0.375, 472), (0.375, 382), (0.375, 264), (0.375, 460), (0.375, 466), (0.375, 447), (0.375, 304), (0.375, 450), (0.375, 29), (0.375, 25), (0.375, 464), (0.375, 66), (0.375, 225), (0.375, 206), (0.375, 26), (0.375, 266), (0.375, 237), (0.375, 453), (0.375, 484), (0.375, 476), (0.375, 271), (0.375, 572), (0.375, 481), (0.375, 296), (0.375, 462), (0.375, 557), (0.375, 76), (0.375, 360), (0.375, 196), (0.375, 586), (0.375, 517), (0.375, 315), (0.375, 454), (0.375, 161), (0.375, 254), (0.375, 219), (0.375, 329), (0.375, 110), (0.375, 253), (0.375, 569), (0.375, 461), (0.375, 545), (0.375, 564), (0.375, 684), (0.375, 444), (0.375, 19), (0.375, 483), (0.375, 567), (0.375, 162), (0.375, 188), (0.375, 689), (0.375, 317), (0.375, 147), (0.375, 474), (0.375, 399), (0.35, 70), (0.3333333333333333, 352), (0.3055555555555556, 134), (0.29166666666666663, 598), (0.29166666666666663, 31), (0.29166666666666663, 284), (0.29166666666666663, 367), (0.29166666666666663, 527), (0.29166666666666663, 220), (0.29166666666666663, 506), (0.29166666666666663, 322), (0.29166666666666663, 99), (0.29166666666666663, 65), (0.29166666666666663, 425), (0.29166666666666663, 525), (0.29166666666666663, 359), (0.29166666666666663, 51), (0.29166666666666663, 288), (0.29166666666666663, 638), (0.29166666666666663, 282), (0.29166666666666663, 174), (0.29166666666666663, 22), (0.29166666666666663, 7), (0.29166666666666663, 644), (0.29166666666666663, 489), (0.29166666666666663, 58), (0.25, 602), (0.25, 371), (0.25, 84), (0.25, 152), (0.25, 217), (0.25, 252), (0.25, 210), (0.25, 95), (0.25, 164), (0.25, 16), (0.25, 355), (0.25, 278), (0.25, 431), (0.25, 226), (0.25, 144), (0.25, 241), (0.25, 392), (0.25, 292), (0.25, 414), (0.25, 245), (0.25, 1), (0.25, 434), (0.25, 316), (0.25, 320), (0.25, 658), (0.25, 41), (0.25, 384), (0.25, 249), (0.25, 420), (0.25, 422), (0.25, 652), (0.25, 401), (0.25, 389), (0.25, 294), (0.25, 167), (0.25, 508), (0.25, 273), (0.25, 596), (0.16666666666666666, 656), (0.16666666666666666, 649), (0.16666666666666666, 614), (0.16666666666666666, 631), (0.16666666666666666, 645), (0.16666666666666666, 676)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 592
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- y x) (- y (* 4 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 603
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- (+ x y) x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 493
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (* y x) (- x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 416
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(- ? ?)`4`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (+ x x) (- 4 4))))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 511), (1.375, 592), (1.375, 603), (1.25, 492), (1.25, 700), (1.25, 416), (1.25, 616), (1.25, 692), (1.25, 523), (1.25, 742), (1.25, 493), (1.125, 628), (1.125, 702), (1.125, 518), (1.125, 274), (1.125, 623), (1.125, 280), (1.125, 81), (1.125, 743), (1.125, 605), (1.125, 159), (1.125, 267), (1.125, 412), (1.125, 597), (1.125, 55), (1.0, 671), (1.0, 306), (1.0, 703), (1.0, 713), (1.0, 615), (1.0, 538), (1.0, 716), (1.0, 429), (1.0, 353), (1.0, 701), (1.0, 498), (1.0, 75), (1.0, 746), (1.0, 176), (1.0, 136), (1.0, 735), (1.0, 771), (1.0, 378), (1.0, 140), (1.0, 497), (1.0, 377), (1.0, 504), (1.0, 500), (1.0, 536), (1.0, 612), (1.0, 707), (1.0, 617), (1.0, 505), (1.0, 54), (1.0, 699), (1.0, 650), (1.0, 60), (1.0, 693), (1.0, 721), (1.0, 231), (1.0, 690), (1.0, 667), (1.0, 613), (1.0, 607), (1.0, 710), (1.0, 218), (1.0, 496), (1.0, 178), (1.0, 611), (1.0, 421), (1.0, 61), (1.0, 781), (1.0, 437), (1.0, 406), (1.0, 630), (1.0, 121), (1.0, 407), (0.875, 533), (0.875, 730), (0.875, 336), (0.875, 779), (0.75, 411), (0.75, 512), (0.75, 548), (0.75, 593), (0.75, 415), (0.75, 166), (0.75, 695), (0.75, 622), (0.75, 619), (0.75, 618), (0.75, 734), (0.75, 510), (0.75, 402), (0.75, 349), (0.75, 344), (0.75, 595), (0.75, 731), (0.75, 736), (0.75, 772), (0.6666666666666666, 741), (0.6666666666666666, 228), (0.6666666666666666, 515), (0.6666666666666666, 624), (0.6666666666666666, 535), (0.6666666666666666, 740), (0.6666666666666666, 212), (0.6666666666666666, 50), (0.625, 784), (0.625, 343), (0.625, 130), (0.625, 757), (0.625, 626), (0.625, 777), (0.625, 495), (0.625, 409), (0.625, 629), (0.625, 697), (0.625, 428), (0.625, 408), (0.625, 227), (0.625, 418), (0.625, 192), (0.625, 749), (0.625, 634), (0.625, 747), (0.625, 706), (0.625, 726), (0.625, 9), (0.625, 141), (0.625, 718), (0.625, 165), (0.625, 600), (0.625, 594), (0.625, 222), (0.625, 610), (0.625, 199), (0.625, 698), (0.625, 36), (0.625, 516), (0.5416666666666666, 374), (0.5416666666666666, 641), (0.5416666666666666, 423), (0.5416666666666666, 639), (0.5416666666666666, 768), (0.5416666666666666, 642), (0.5416666666666666, 490), (0.5416666666666666, 261), (0.5416666666666666, 424), (0.5416666666666666, 758), (0.5416666666666666, 636), (0.5416666666666666, 766), (0.5416666666666666, 762), (0.5416666666666666, 526), (0.5416666666666666, 528), (0.5416666666666666, 339), (0.5416666666666666, 443), (0.5416666666666666, 92), (0.5416666666666666, 677), (0.5416666666666666, 759), (0.5416666666666666, 712), (0.5416666666666666, 18), (0.5416666666666666, 760), (0.5416666666666666, 551), (0.5, 540), (0.5, 395), (0.5, 6), (0.5, 404), (0.5, 657), (0.5, 663), (0.5, 647), (0.5, 666), (0.5, 723), (0.5, 323), (0.5, 646), (0.5, 235), (0.5, 770), (0.5, 111), (0.5, 668), (0.5, 82), (0.5, 635), (0.5, 661), (0.5, 350), (0.5, 704), (0.5, 215), (0.5, 601), (0.5, 786), (0.5, 351), (0.5, 103), (0.5, 728), (0.5, 157), (0.5, 769), (0.5, 438), (0.5, 541), (0.5, 234), (0.5, 633), (0.5, 785), (0.5, 544), (0.5, 172), (0.5, 659), (0.5, 531), (0.5, 665), (0.5, 717), (0.5, 521), (0.5, 655), (0.5, 670), (0.5, 708), (0.5, 263), (0.5, 789), (0.5, 426), (0.5, 620), (0.5, 788), (0.5, 432), (0.5, 47), (0.5, 113), (0.5, 787), (0.5, 514), (0.5, 609), (0.5, 435), (0.5, 502), (0.5, 539), (0.5, 400), (0.5, 439), (0.5, 733), (0.5, 333), (0.5, 532), (0.5, 198), (0.5, 129), (0.5, 299), (0.5, 85), (0.5, 298), (0.5, 653), (0.5, 753), (0.5, 714), (0.5, 654), (0.5, 724), (0.5, 522), (0.5, 310), (0.5, 259), (0.41666666666666663, 679), (0.41666666666666663, 10), (0.41666666666666663, 550), (0.41666666666666663, 674), (0.41666666666666663, 552), (0.41666666666666663, 74), (0.41666666666666663, 185), (0.41666666666666663, 356), (0.41666666666666663, 556), (0.41666666666666663, 314), (0.41666666666666663, 442), (0.41666666666666663, 683), (0.41666666666666663, 554), (0.41666666666666663, 440), (0.41666666666666663, 673), (0.41666666666666663, 204), (0.41666666666666663, 491), (0.41666666666666663, 175), (0.41666666666666663, 681), (0.375, 26), (0.375, 449), (0.375, 207), (0.375, 479), (0.375, 162), (0.375, 570), (0.375, 254), (0.375, 464), (0.375, 569), (0.375, 32), (0.375, 296), (0.375, 583), (0.375, 447), (0.375, 560), (0.375, 687), (0.375, 584), (0.375, 225), (0.375, 446), (0.375, 271), (0.375, 237), (0.375, 21), (0.375, 586), (0.375, 587), (0.375, 286), (0.375, 66), (0.375, 567), (0.375, 119), (0.375, 266), (0.375, 329), (0.375, 557), (0.375, 444), (0.375, 476), (0.375, 19), (0.375, 177), (0.375, 574), (0.375, 466), (0.375, 110), (0.375, 109), (0.375, 685), (0.375, 253), (0.375, 563), (0.375, 302), (0.375, 365), (0.375, 454), (0.375, 776), (0.375, 568), (0.375, 482), (0.375, 269), (0.375, 209), (0.375, 196), (0.375, 461), (0.375, 30), (0.375, 577), (0.375, 48), (0.375, 303), (0.375, 124), (0.375, 79), (0.375, 304), (0.375, 3), (0.375, 370), (0.375, 64), (0.375, 579), (0.375, 219), (0.375, 106), (0.375, 340), (0.375, 445), (0.375, 686), (0.375, 450), (0.375, 360), (0.375, 188), (0.375, 214), (0.375, 23), (0.375, 452), (0.375, 576), (0.375, 684), (0.375, 264), (0.375, 455), (0.375, 565), (0.375, 483), (0.375, 76), (0.375, 457), (0.375, 453), (0.375, 382), (0.375, 161), (0.375, 545), (0.375, 590), (0.375, 478), (0.375, 559), (0.375, 46), (0.375, 575), (0.375, 564), (0.375, 38), (0.375, 485), (0.375, 456), (0.375, 180), (0.375, 242), (0.375, 311), (0.375, 572), (0.375, 460), (0.375, 463), (0.375, 471), (0.375, 484), (0.375, 102), (0.375, 472), (0.375, 588), (0.375, 138), (0.375, 182), (0.375, 561), (0.375, 14), (0.375, 25), (0.375, 448), (0.375, 468), (0.375, 257), (0.375, 4), (0.375, 481), (0.375, 37), (0.375, 158), (0.375, 462), (0.375, 301), (0.375, 315), (0.375, 42), (0.375, 475), (0.375, 470), (0.375, 581), (0.375, 29), (0.375, 143), (0.375, 517), (0.375, 458), (0.375, 206), (0.29166666666666663, 754), (0.29166666666666663, 774), (0.29166666666666663, 765), (0.29166666666666663, 763), (0.25, 751), (0.25, 752), (0.25, 756), (0.16666666666666666, 744), (0.16666666666666666, 739), (0.16666666666666666, 738), (0.16666666666666666, 782), (0.16666666666666666, 722), (0.16666666666666666, 719)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 592
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- y x) (- y (* 4 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 603
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- (+ x y) x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 492
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 700
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`x`#`#`(- ? ?)`(* ? ?)`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* x (- (* y x) 4))))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 511), (1.5, 790), (1.375, 592), (1.375, 603), (1.25, 493), (1.25, 742), (1.25, 616), (1.25, 792), (1.25, 416), (1.25, 795), (1.25, 862), (1.25, 523), (1.25, 692), (1.25, 700), (1.25, 492), (1.25, 791), (1.125, 864), (1.125, 605), (1.125, 623), (1.125, 804), (1.125, 597), (1.125, 834), (1.125, 159), (1.125, 267), (1.125, 55), (1.125, 743), (1.125, 628), (1.125, 824), (1.125, 797), (1.125, 81), (1.125, 702), (1.125, 518), (1.125, 274), (1.125, 821), (1.125, 280), (1.125, 412), (1.0, 781), (1.0, 407), (1.0, 504), (1.0, 710), (1.0, 121), (1.0, 421), (1.0, 830), (1.0, 429), (1.0, 176), (1.0, 136), (1.0, 60), (1.0, 613), (1.0, 497), (1.0, 808), (1.0, 218), (1.0, 693), (1.0, 54), (1.0, 75), (1.0, 353), (1.0, 378), (1.0, 819), (1.0, 800), (1.0, 437), (1.0, 868), (1.0, 721), (1.0, 615), (1.0, 701), (1.0, 812), (1.0, 505), (1.0, 500), (1.0, 707), (1.0, 406), (1.0, 746), (1.0, 667), (1.0, 837), (1.0, 713), (1.0, 178), (1.0, 231), (1.0, 61), (1.0, 771), (1.0, 612), (1.0, 690), (1.0, 836), (1.0, 536), (1.0, 496), (1.0, 140), (1.0, 854), (1.0, 617), (1.0, 796), (1.0, 699), (1.0, 306), (1.0, 716), (1.0, 611), (1.0, 703), (1.0, 630), (1.0, 607), (1.0, 498), (1.0, 835), (1.0, 538), (1.0, 650), (1.0, 817), (1.0, 814), (1.0, 671), (1.0, 377), (1.0, 735), (0.875, 336), (0.875, 866), (0.875, 794), (0.875, 533), (0.875, 730), (0.875, 779), (0.75, 411), (0.75, 736), (0.75, 548), (0.75, 772), (0.75, 402), (0.75, 619), (0.75, 593), (0.75, 845), (0.75, 595), (0.75, 734), (0.75, 731), (0.75, 415), (0.75, 618), (0.75, 848), (0.75, 852), (0.75, 846), (0.75, 512), (0.75, 349), (0.75, 695), (0.75, 622), (0.75, 344), (0.75, 510), (0.75, 166), (0.6666666666666666, 857), (0.6666666666666666, 50), (0.6666666666666666, 212), (0.6666666666666666, 535), (0.6666666666666666, 515), (0.6666666666666666, 228), (0.6666666666666666, 624), (0.6666666666666666, 741), (0.6666666666666666, 858), (0.6666666666666666, 859), (0.6666666666666666, 855), (0.6666666666666666, 740), (0.625, 343), (0.625, 222), (0.625, 418), (0.625, 600), (0.625, 875), (0.625, 408), (0.625, 36), (0.625, 634), (0.625, 747), (0.625, 698), (0.625, 870), (0.625, 9), (0.625, 706), (0.625, 757), (0.625, 784), (0.625, 629), (0.625, 832), (0.625, 842), (0.625, 516), (0.625, 873), (0.625, 626), (0.625, 192), (0.625, 777), (0.625, 813), (0.625, 697), (0.625, 861), (0.625, 718), (0.625, 227), (0.625, 428), (0.625, 130), (0.625, 825), (0.625, 610), (0.625, 495), (0.625, 726), (0.625, 409), (0.625, 141), (0.625, 863), (0.625, 199), (0.625, 801), (0.625, 165), (0.625, 860), (0.625, 749), (0.625, 594), (0.5416666666666666, 18), (0.5416666666666666, 641), (0.5416666666666666, 883), (0.5416666666666666, 374), (0.5416666666666666, 758), (0.5416666666666666, 339), (0.5416666666666666, 882), (0.5416666666666666, 490), (0.5416666666666666, 528), (0.5416666666666666, 766), (0.5416666666666666, 424), (0.5416666666666666, 642), (0.5416666666666666, 879), (0.5416666666666666, 768), (0.5416666666666666, 759), (0.5416666666666666, 92), (0.5416666666666666, 712), (0.5416666666666666, 639), (0.5416666666666666, 677), (0.5416666666666666, 762), (0.5416666666666666, 443), (0.5416666666666666, 423), (0.5416666666666666, 261), (0.5416666666666666, 636), (0.5416666666666666, 551), (0.5416666666666666, 760), (0.5416666666666666, 880), (0.5416666666666666, 526), (0.5, 351), (0.5, 714), (0.5, 522), (0.5, 785), (0.5, 670), (0.5, 786), (0.5, 876), (0.5, 723), (0.5, 769), (0.5, 532), (0.5, 633), (0.5, 655), (0.5, 395), (0.5, 661), (0.5, 665), (0.5, 601), (0.5, 822), (0.5, 198), (0.5, 544), (0.5, 172), (0.5, 350), (0.5, 541), (0.5, 728), (0.5, 753), (0.5, 310), (0.5, 298), (0.5, 877), (0.5, 539), (0.5, 426), (0.5, 129), (0.5, 770), (0.5, 668), (0.5, 844), (0.5, 103), (0.5, 85), (0.5, 235), (0.5, 609), (0.5, 853), (0.5, 432), (0.5, 111), (0.5, 404), (0.5, 647), (0.5, 47), (0.5, 540), (0.5, 724), (0.5, 323), (0.5, 816), (0.5, 438), (0.5, 521), (0.5, 82), (0.5, 514), (0.5, 263), (0.5, 654), (0.5, 659), (0.5, 646), (0.5, 810), (0.5, 531), (0.5, 259), (0.5, 787), (0.5, 708), (0.5, 663), (0.5, 657), (0.5, 635), (0.5, 717), (0.5, 113), (0.5, 502), (0.5, 333), (0.5, 788), (0.5, 733), (0.5, 157), (0.5, 840), (0.5, 666), (0.5, 843), (0.5, 806), (0.5, 215), (0.5, 439), (0.5, 400), (0.5, 789), (0.5, 299), (0.5, 831), (0.5, 435), (0.5, 234), (0.5, 704), (0.5, 6), (0.5, 829), (0.5, 653), (0.5, 620), (0.41666666666666663, 491), (0.41666666666666663, 440), (0.41666666666666663, 552), (0.41666666666666663, 556), (0.41666666666666663, 442), (0.41666666666666663, 679), (0.41666666666666663, 356), (0.41666666666666663, 204), (0.41666666666666663, 683), (0.41666666666666663, 185), (0.41666666666666663, 74), (0.41666666666666663, 10), (0.41666666666666663, 838), (0.41666666666666663, 314), (0.41666666666666663, 554), (0.41666666666666663, 674), (0.41666666666666663, 550), (0.41666666666666663, 673), (0.41666666666666663, 681), (0.41666666666666663, 175), (0.375, 867), (0.375, 449), (0.375, 570), (0.375, 254), (0.375, 253), (0.375, 370), (0.375, 444), (0.375, 109), (0.375, 196), (0.375, 569), (0.375, 584), (0.375, 266), (0.375, 162), (0.375, 3), (0.375, 574), (0.375, 557), (0.375, 466), (0.375, 461), (0.375, 303), (0.375, 850), (0.375, 110), (0.375, 19), (0.375, 587), (0.375, 269), (0.375, 445), (0.375, 586), (0.375, 583), (0.375, 30), (0.375, 567), (0.375, 237), (0.375, 579), (0.375, 686), (0.375, 271), (0.375, 447), (0.375, 225), (0.375, 209), (0.375, 365), (0.375, 476), (0.375, 26), (0.375, 302), (0.375, 446), (0.375, 219), (0.375, 577), (0.375, 479), (0.375, 329), (0.375, 296), (0.375, 79), (0.375, 687), (0.375, 568), (0.375, 560), (0.375, 802), (0.375, 119), (0.375, 64), (0.375, 464), (0.375, 340), (0.375, 563), (0.375, 207), (0.375, 286), (0.375, 124), (0.375, 685), (0.375, 454), (0.375, 106), (0.375, 482), (0.375, 776), (0.375, 32), (0.375, 48), (0.375, 66), (0.375, 21), (0.375, 304), (0.375, 177), (0.29166666666666663, 865), (0.29166666666666663, 798), (0.29166666666666663, 884), (0.25, 871), (0.25, 827), (0.25, 841), (0.16666666666666666, 803), (0.16666666666666666, 811), (0.16666666666666666, 851), (0.125, 878)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 592
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`(* ? ?)`4`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- y x) (- y (* 4 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 603
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`4`#`#`(- ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- 4 (- (+ x y) x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 493
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (* (* y x) (- x x))))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.5, 885), (1.5, 790), (1.5, 906), (1.5, 511), (1.5, 954), (1.375, 592), (1.375, 603), (1.375, 886), (1.25, 416), (1.25, 894), (1.25, 976), (1.25, 931), (1.25, 700), (1.25, 862), (1.25, 889), (1.25, 493), (1.25, 792), (1.25, 960), (1.25, 742), (1.25, 692), (1.25, 795), (1.25, 523), (1.25, 616), (1.25, 887), (1.25, 791), (1.25, 916), (1.25, 892), (1.25, 907), (1.25, 492), (1.25, 888), (1.125, 159), (1.125, 81), (1.125, 804), (1.125, 623), (1.125, 518), (1.125, 743), (1.125, 280), (1.125, 597), (1.125, 628), (1.125, 267), (1.125, 412), (1.125, 864), (1.125, 919), (1.125, 821), (1.125, 834), (1.125, 702), (1.125, 55), (1.125, 274), (1.125, 824), (1.125, 797), (1.125, 899), (1.125, 605), (1.0, 176), (1.0, 650), (1.0, 60), (1.0, 713), (1.0, 429), (1.0, 935), (1.0, 927), (1.0, 498), (1.0, 121), (1.0, 903), (1.0, 925), (1.0, 915), (1.0, 500), (1.0, 630), (1.0, 746), (1.0, 690), (1.0, 693), (1.0, 607), (1.0, 940), (1.0, 891), (1.0, 819), (1.0, 835), (1.0, 378), (1.0, 505), (1.0, 377), (1.0, 61), (1.0, 941), (1.0, 830), (1.0, 615), (1.0, 771), (1.0, 437), (1.0, 671), (1.0, 937), (1.0, 497), (1.0, 854), (1.0, 613), (1.0, 897), (1.0, 504), (1.0, 611), (1.0, 421), (1.0, 231), (1.0, 701), (1.0, 538), (1.0, 898), (1.0, 703), (1.0, 140), (1.0, 406), (1.0, 536), (1.0, 913), (1.0, 836), (1.0, 944), (1.0, 136), (1.0, 808), (1.0, 699), (1.0, 800), (1.0, 178), (1.0, 667), (1.0, 934), (1.0, 353), (1.0, 407), (1.0, 945), (1.0, 943), (1.0, 837), (1.0, 617), (1.0, 306), (1.0, 75), (1.0, 218), (1.0, 868), (1.0, 707), (1.0, 721), (1.0, 496), (1.0, 817), (1.0, 735), (1.0, 953), (1.0, 781), (1.0, 716), (1.0, 612), (1.0, 796), (1.0, 710), (1.0, 54), (1.0, 812), (1.0, 814), (1.0, 912), (1.0, 938), (0.875, 730), (0.875, 955), (0.875, 866), (0.875, 979), (0.875, 533), (0.875, 336), (0.875, 779), (0.875, 794), (0.75, 618), (0.75, 411), (0.75, 968), (0.75, 969), (0.75, 510), (0.75, 852), (0.75, 731), (0.75, 695), (0.75, 415), (0.75, 344), (0.75, 962), (0.75, 619), (0.75, 402), (0.75, 595), (0.75, 512), (0.75, 166), (0.75, 736), (0.75, 846), (0.75, 349), (0.75, 845), (0.75, 922), (0.75, 548), (0.75, 848), (0.75, 593), (0.75, 963), (0.75, 734), (0.75, 772), (0.75, 622), (0.75, 967), (0.6666666666666666, 50), (0.6666666666666666, 974), (0.6666666666666666, 858), (0.6666666666666666, 975), (0.6666666666666666, 859), (0.6666666666666666, 212), (0.6666666666666666, 857), (0.6666666666666666, 535), (0.6666666666666666, 917), (0.6666666666666666, 855), (0.6666666666666666, 740), (0.6666666666666666, 228), (0.6666666666666666, 970), (0.6666666666666666, 515), (0.6666666666666666, 741), (0.6666666666666666, 971), (0.6666666666666666, 624), (0.625, 860), (0.625, 863), (0.625, 418), (0.625, 901), (0.625, 861), (0.625, 726), (0.625, 343), (0.625, 959), (0.625, 697), (0.625, 813), (0.625, 706), (0.625, 165), (0.625, 408), (0.625, 870), (0.625, 495), (0.625, 610), (0.625, 832), (0.625, 777), (0.625, 36), (0.625, 718), (0.625, 629), (0.625, 199), (0.625, 784), (0.625, 873), (0.625, 825), (0.625, 594), (0.625, 626), (0.625, 141), (0.625, 747), (0.625, 222), (0.625, 921), (0.625, 749), (0.625, 875), (0.625, 9), (0.625, 516), (0.625, 981), (0.625, 409), (0.625, 192), (0.625, 698), (0.625, 801), (0.625, 930), (0.625, 634), (0.625, 428), (0.625, 130), (0.625, 757), (0.625, 227), (0.625, 600), (0.625, 842), (0.5416666666666666, 639), (0.5416666666666666, 490), (0.5416666666666666, 759), (0.5416666666666666, 92), (0.5416666666666666, 882), (0.5416666666666666, 758), (0.5416666666666666, 760), (0.5416666666666666, 339), (0.5416666666666666, 636), (0.5416666666666666, 880), (0.5416666666666666, 641), (0.5416666666666666, 423), (0.5416666666666666, 677), (0.5416666666666666, 883), (0.5416666666666666, 712), (0.5416666666666666, 528), (0.5416666666666666, 768), (0.5416666666666666, 879), (0.5416666666666666, 443), (0.5416666666666666, 642), (0.5416666666666666, 424), (0.5416666666666666, 766), (0.5416666666666666, 374), (0.5416666666666666, 261), (0.5416666666666666, 526), (0.5416666666666666, 18), (0.5416666666666666, 551), (0.5416666666666666, 762), (0.5, 663), (0.5, 822), (0.5, 635), (0.5, 531), (0.5, 620), (0.5, 717), (0.5, 704), (0.5, 129), (0.5, 82), (0.5, 770), (0.5, 215), (0.5, 840), (0.5, 541), (0.5, 831), (0.5, 769), (0.5, 655), (0.5, 876), (0.5, 977), (0.5, 810), (0.5, 198), (0.5, 665), (0.5, 299), (0.5, 936), (0.5, 395), (0.5, 502), (0.5, 544), (0.5, 905), (0.5, 908), (0.5, 235), (0.5, 404), (0.5, 103), (0.5, 647), (0.5, 351), (0.5, 333), (0.5, 111), (0.5, 950), (0.5, 323), (0.5, 601), (0.5, 426), (0.5, 787), (0.5, 350), (0.5, 978), (0.5, 532), (0.5, 633), (0.5, 646), (0.5, 753), (0.5, 973), (0.5, 733), (0.5, 435), (0.5, 816), (0.5, 844), (0.5, 172), (0.5, 540), (0.5, 85), (0.5, 514), (0.5, 234), (0.5, 724), (0.5, 714), (0.5, 6), (0.5, 708), (0.5, 259), (0.5, 785), (0.5, 895), (0.5, 521), (0.5, 933), (0.5, 47), (0.5, 400), (0.5, 786), (0.5, 957), (0.5, 661), (0.5, 439), (0.5, 438), (0.5, 310), (0.5, 853), (0.5, 670), (0.5, 609), (0.5, 829), (0.5, 522), (0.5, 654), (0.5, 157), (0.5, 666), (0.5, 789), (0.5, 877), (0.5, 432), (0.5, 843), (0.5, 539), (0.5, 653), (0.5, 806), (0.5, 668), (0.5, 788), (0.5, 659), (0.5, 723), (0.5, 298), (0.5, 657), (0.5, 728), (0.5, 263), (0.5, 113), (0.41666666666666663, 185), (0.41666666666666663, 683), (0.41666666666666663, 556), (0.41666666666666663, 838), (0.41666666666666663, 951), (0.41666666666666663, 440), (0.41666666666666663, 314), (0.41666666666666663, 552), (0.41666666666666663, 10), (0.41666666666666663, 681), (0.41666666666666663, 442), (0.41666666666666663, 924), (0.41666666666666663, 918), (0.41666666666666663, 204), (0.41666666666666663, 491), (0.41666666666666663, 74), (0.41666666666666663, 674), (0.41666666666666663, 673), (0.41666666666666663, 175), (0.41666666666666663, 554), (0.41666666666666663, 550), (0.41666666666666663, 356), (0.41666666666666663, 679), (0.375, 449), (0.375, 253), (0.375, 254), (0.375, 956), (0.375, 570), (0.375, 867), (0.25, 961), (0.25, 966), (0.25, 910), (0.25, 948), (0.25, 947), (0.25, 911), (0.16666666666666666, 928), (0.16666666666666666, 965)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 885
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 906
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 954
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.5, 954), (1.5, 885), (1.5, 790), (1.5, 982), (1.5, 511), (1.5, 906), (1.375, 603), (1.375, 886), (1.375, 592), (1.25, 700), (1.25, 894), (1.25, 892), (1.25, 1000), (1.25, 976), (1.25, 742), (1.25, 616), (1.25, 931), (1.25, 960), (1.25, 989), (1.25, 416), (1.25, 916), (1.25, 1001), (1.25, 791), (1.25, 888), (1.25, 889), (1.25, 986), (1.25, 795), (1.25, 523), (1.25, 887), (1.25, 692), (1.25, 862), (1.25, 492), (1.25, 792), (1.25, 493), (1.25, 907), (1.125, 628), (1.125, 55), (1.125, 605), (1.125, 797), (1.125, 994), (1.125, 1008), (1.125, 834), (1.125, 81), (1.125, 1054), (1.125, 919), (1.125, 821), (1.125, 1026), (1.125, 1028), (1.125, 1007), (1.125, 412), (1.125, 824), (1.125, 274), (1.125, 597), (1.125, 864), (1.125, 267), (1.125, 743), (1.125, 992), (1.125, 280), (1.125, 899), (1.125, 1013), (1.125, 623), (1.125, 518), (1.125, 1040), (1.125, 804), (1.125, 159), (1.125, 702), (1.0, 1035), (1.0, 498), (1.0, 353), (1.0, 1039), (1.0, 941), (1.0, 671), (1.0, 1052), (1.0, 701), (1.0, 940), (1.0, 808), (1.0, 836), (1.0, 817), (1.0, 943), (1.0, 735), (1.0, 713), (1.0, 781), (1.0, 693), (1.0, 60), (1.0, 178), (1.0, 136), (1.0, 429), (1.0, 497), (1.0, 421), (1.0, 1053), (1.0, 378), (1.0, 898), (1.0, 121), (1.0, 771), (1.0, 615), (1.0, 837), (1.0, 1047), (1.0, 406), (1.0, 1020), (1.0, 1003), (1.0, 891), (1.0, 667), (1.0, 716), (1.0, 1005), (1.0, 505), (1.0, 913), (1.0, 1033), (1.0, 231), (1.0, 812), (1.0, 377), (1.0, 912), (1.0, 1046), (1.0, 613), (1.0, 1006), (1.0, 983), (1.0, 612), (1.0, 800), (1.0, 630), (1.0, 611), (1.0, 854), (1.0, 925), (1.0, 407), (1.0, 710), (1.0, 650), (1.0, 54), (1.0, 690), (1.0, 496), (1.0, 835), (1.0, 1049), (1.0, 707), (1.0, 538), (1.0, 915), (1.0, 607), (1.0, 938), (1.0, 953), (1.0, 1058), (1.0, 819), (1.0, 75), (1.0, 703), (1.0, 935), (1.0, 504), (1.0, 1064), (1.0, 437), (1.0, 868), (1.0, 1059), (1.0, 699), (1.0, 176), (1.0, 721), (1.0, 796), (1.0, 897), (1.0, 944), (1.0, 937), (1.0, 306), (1.0, 927), (1.0, 1031), (1.0, 746), (1.0, 934), (1.0, 536), (1.0, 1030), (1.0, 945), (1.0, 830), (1.0, 500), (1.0, 218), (1.0, 617), (1.0, 1065), (1.0, 903), (1.0, 814), (1.0, 61), (1.0, 140), (0.875, 336), (0.875, 979), (0.875, 533), (0.875, 955), (0.875, 730), (0.875, 1066), (0.875, 866), (0.875, 794), (0.875, 779), (0.75, 922), (0.75, 349), (0.75, 695), (0.75, 731), (0.75, 415), (0.75, 969), (0.75, 736), (0.75, 618), (0.75, 846), (0.75, 734), (0.75, 548), (0.75, 845), (0.75, 852), (0.75, 967), (0.75, 848), (0.75, 344), (0.75, 402), (0.75, 772), (0.75, 963), (0.75, 968), (0.75, 595), (0.75, 510), (0.75, 619), (0.75, 166), (0.75, 411), (0.75, 962), (0.75, 622), (0.75, 593), (0.75, 512), (0.75, 1017), (0.75, 1072), (0.6666666666666666, 971), (0.6666666666666666, 740), (0.6666666666666666, 855), (0.6666666666666666, 970), (0.6666666666666666, 859), (0.6666666666666666, 535), (0.6666666666666666, 515), (0.6666666666666666, 858), (0.6666666666666666, 1015), (0.6666666666666666, 917), (0.6666666666666666, 50), (0.6666666666666666, 212), (0.6666666666666666, 1012), (0.6666666666666666, 974), (0.6666666666666666, 228), (0.6666666666666666, 975), (0.6666666666666666, 857), (0.6666666666666666, 624), (0.6666666666666666, 741), (0.625, 784), (0.625, 409), (0.625, 629), (0.625, 861), (0.625, 801), (0.625, 901), (0.625, 842), (0.625, 921), (0.625, 634), (0.625, 726), (0.625, 227), (0.625, 418), (0.625, 1071), (0.625, 626), (0.625, 860), (0.625, 9), (0.625, 757), (0.625, 516), (0.625, 594), (0.625, 130), (0.625, 698), (0.625, 981), (0.625, 697), (0.625, 1048), (0.625, 863), (0.625, 749), (0.625, 199), (0.625, 1038), (0.625, 996), (0.625, 192), (0.625, 165), (0.625, 706), (0.625, 222), (0.625, 36), (0.625, 875), (0.625, 610), (0.625, 343), (0.625, 495), (0.625, 870), (0.625, 1016), (0.625, 999), (0.625, 825), (0.625, 777), (0.625, 428), (0.625, 813), (0.625, 930), (0.625, 600), (0.625, 959), (0.625, 1050), (0.625, 141), (0.625, 718), (0.625, 408), (0.625, 747), (0.625, 1068), (0.625, 873), (0.625, 832), (0.5416666666666666, 880), (0.5416666666666666, 760), (0.5416666666666666, 423), (0.5416666666666666, 766), (0.5416666666666666, 526), (0.5416666666666666, 641), (0.5416666666666666, 424), (0.5416666666666666, 768), (0.5416666666666666, 677), (0.5416666666666666, 712), (0.5416666666666666, 261), (0.5416666666666666, 490), (0.5416666666666666, 339), (0.5416666666666666, 92), (0.5416666666666666, 883), (0.5416666666666666, 528), (0.5416666666666666, 1024), (0.5416666666666666, 551), (0.5416666666666666, 1023), (0.5416666666666666, 759), (0.5416666666666666, 882), (0.5416666666666666, 758), (0.5416666666666666, 639), (0.5416666666666666, 636), (0.5416666666666666, 18), (0.5416666666666666, 374), (0.5416666666666666, 762), (0.5416666666666666, 443), (0.5416666666666666, 642), (0.5416666666666666, 879), (0.5, 395), (0.5, 950), (0.5, 234), (0.5, 810), (0.5, 172), (0.5, 655), (0.5, 1032), (0.5, 717), (0.5, 936), (0.5, 85), (0.5, 350), (0.5, 1009), (0.5, 844), (0.5, 647), (0.5, 724), (0.5, 753), (0.5, 714), (0.5, 532), (0.5, 908), (0.5, 973), (0.5, 103), (0.5, 977), (0.5, 514), (0.5, 333), (0.5, 235), (0.5, 351), (0.5, 987), (0.5, 111), (0.5, 905), (0.5, 426), (0.5, 840), (0.5, 769), (0.5, 1069), (0.5, 531), (0.5, 876), (0.5, 1067), (0.5, 6), (0.5, 831), (0.5, 816), (0.5, 129), (0.5, 620), (0.5, 733), (0.5, 82), (0.5, 1045), (0.5, 787), (0.5, 404), (0.5, 770), (0.5, 215), (0.5, 978), (0.5, 704), (0.5, 984), (0.5, 435), (0.5, 1044), (0.5, 665), (0.5, 635), (0.5, 646), (0.5, 633), (0.5, 601), (0.5, 822), (0.5, 198), (0.5, 663), (0.5, 299), (0.5, 323), (0.5, 1036), (0.5, 540), (0.5, 1042), (0.5, 541), (0.5, 544), (0.5, 502), (0.41666666666666663, 997), (0.41666666666666663, 991), (0.375, 1011), (0.375, 985), (0.25, 1018), (0.25, 1027), (0.25, 1025), (0.25, 1051), (0.25, 1063), (0.25, 1073), (0.25, 1043), (0.16666666666666666, 1021), (0.16666666666666666, 1022), (0.16666666666666666, 1061), (0.16666666666666666, 1055), (0.16666666666666666, 1034), (0.16666666666666666, 1056)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 954
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 885
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 982
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.5, 790), (1.5, 954), (1.5, 906), (1.5, 511), (1.5, 885), (1.5, 982), (1.5, 1076), (1.375, 603), (1.375, 592), (1.375, 886), (1.375, 1081), (1.375, 1082), (1.25, 700), (1.25, 1088), (1.25, 887), (1.25, 616), (1.25, 916), (1.25, 960), (1.25, 862), (1.25, 692), (1.25, 1092), (1.25, 742), (1.25, 931), (1.25, 1091), (1.25, 492), (1.25, 892), (1.25, 976), (1.25, 1000), (1.25, 1099), (1.25, 888), (1.25, 493), (1.25, 791), (1.25, 1001), (1.25, 907), (1.25, 989), (1.25, 416), (1.25, 889), (1.25, 894), (1.25, 523), (1.25, 1086), (1.25, 986), (1.25, 792), (1.25, 1117), (1.25, 1114), (1.25, 1163), (1.25, 795), (1.125, 919), (1.125, 1158), (1.125, 267), (1.125, 605), (1.125, 518), (1.125, 1120), (1.125, 821), (1.125, 1040), (1.125, 797), (1.125, 899), (1.125, 81), (1.125, 1087), (1.125, 412), (1.125, 280), (1.125, 274), (1.125, 1007), (1.125, 1093), (1.125, 55), (1.125, 824), (1.125, 1013), (1.125, 1119), (1.125, 159), (1.125, 1116), (1.125, 628), (1.125, 1136), (1.125, 1142), (1.125, 992), (1.125, 1054), (1.125, 864), (1.125, 623), (1.125, 1028), (1.125, 1026), (1.125, 994), (1.125, 1107), (1.125, 834), (1.125, 1105), (1.125, 804), (1.125, 702), (1.125, 1008), (1.125, 597), (1.125, 1112), (1.125, 743), (1.0, 1003), (1.0, 671), (1.0, 854), (1.0, 713), (1.0, 505), (1.0, 1031), (1.0, 837), (1.0, 941), (1.0, 1122), (1.0, 1059), (1.0, 746), (1.0, 504), (1.0, 830), (1.0, 1141), (1.0, 1035), (1.0, 1160), (1.0, 54), (1.0, 378), (1.0, 176), (1.0, 1047), (1.0, 1020), (1.0, 897), (1.0, 983), (1.0, 407), (1.0, 140), (1.0, 136), (1.0, 915), (1.0, 690), (1.0, 943), (1.0, 701), (1.0, 710), (1.0, 1033), (1.0, 693), (1.0, 934), (1.0, 735), (1.0, 938), (1.0, 912), (1.0, 500), (1.0, 814), (1.0, 1046), (1.0, 819), (1.0, 1172), (1.0, 836), (1.0, 75), (1.0, 497), (1.0, 898), (1.0, 771), (1.0, 429), (1.0, 1005), (1.0, 925), (1.0, 1064), (1.0, 1162), (1.0, 1164), (1.0, 721), (1.0, 1125), (1.0, 707), (1.0, 1006), (1.0, 716), (1.0, 437), (1.0, 496), (1.0, 937), (1.0, 61), (1.0, 121), (1.0, 650), (1.0, 796), (1.0, 868), (1.0, 231), (1.0, 1058), (1.0, 1146), (1.0, 1126), (1.0, 913), (1.0, 607), (1.0, 944), (1.0, 60), (1.0, 1052), (1.0, 1157), (1.0, 617), (1.0, 812), (1.0, 935), (1.0, 1143), (1.0, 377), (1.0, 611), (1.0, 927), (1.0, 1128), (1.0, 1130), (1.0, 612), (1.0, 817), (1.0, 835), (1.0, 781), (1.0, 538), (1.0, 306), (1.0, 1144), (1.0, 536), (1.0, 1134), (1.0, 498), (1.0, 1159), (1.0, 667), (1.0, 945), (1.0, 218), (1.0, 903), (1.0, 1153), (1.0, 808), (1.0, 703), (1.0, 353), (1.0, 940), (1.0, 178), (1.0, 953), (1.0, 800), (1.0, 891), (1.0, 630), (1.0, 615), (1.0, 1139), (1.0, 406), (1.0, 1049), (1.0, 421), (1.0, 1039), (1.0, 613), (1.0, 1065), (1.0, 1030), (1.0, 1053), (1.0, 699), (1.0, 1165), (1.0, 1149), (0.875, 794), (0.875, 955), (0.875, 1168), (0.875, 866), (0.875, 533), (0.875, 1066), (0.875, 730), (0.875, 336), (0.875, 979), (0.875, 779), (0.75, 510), (0.75, 845), (0.75, 969), (0.75, 349), (0.75, 967), (0.75, 618), (0.75, 963), (0.75, 411), (0.75, 512), (0.75, 593), (0.75, 1017), (0.75, 731), (0.75, 772), (0.75, 344), (0.75, 595), (0.75, 734), (0.75, 622), (0.75, 1072), (0.75, 415), (0.75, 846), (0.75, 968), (0.75, 548), (0.75, 1078), (0.75, 852), (0.75, 402), (0.75, 736), (0.75, 619), (0.75, 848), (0.75, 695), (0.75, 962), (0.75, 166), (0.75, 922), (0.6666666666666666, 971), (0.6666666666666666, 741), (0.6666666666666666, 212), (0.6666666666666666, 1012), (0.6666666666666666, 1015), (0.6666666666666666, 228), (0.6666666666666666, 624), (0.6666666666666666, 515), (0.6666666666666666, 857), (0.6666666666666666, 859), (0.6666666666666666, 975), (0.6666666666666666, 970), (0.6666666666666666, 855), (0.6666666666666666, 974), (0.6666666666666666, 535), (0.6666666666666666, 858), (0.6666666666666666, 917), (0.6666666666666666, 740), (0.6666666666666666, 50), (0.6666666666666666, 1084), (0.625, 634), (0.625, 626), (0.625, 801), (0.625, 726), (0.625, 959), (0.625, 418), (0.625, 428), (0.625, 873), (0.625, 1071), (0.625, 706), (0.625, 408), (0.625, 860), (0.625, 825), (0.625, 842), (0.625, 930), (0.625, 1068), (0.625, 921), (0.625, 629), (0.625, 192), (0.625, 130), (0.625, 698), (0.625, 1111), (0.625, 1109), (0.625, 747), (0.625, 813), (0.625, 981), (0.625, 832), (0.625, 901), (0.625, 1048), (0.625, 1016), (0.625, 36), (0.625, 697), (0.625, 861), (0.625, 1038), (0.625, 9), (0.625, 227), (0.625, 1097), (0.625, 777), (0.625, 600), (0.625, 999), (0.625, 996), (0.625, 594), (0.625, 718), (0.625, 863), (0.625, 165), (0.625, 495), (0.625, 875), (0.625, 610), (0.625, 870), (0.625, 757), (0.625, 1170), (0.625, 199), (0.625, 409), (0.625, 141), (0.625, 516), (0.625, 1050), (0.625, 749), (0.625, 784), (0.625, 343), (0.625, 222), (0.5416666666666666, 636), (0.5416666666666666, 18), (0.5416666666666666, 92), (0.5416666666666666, 759), (0.5416666666666666, 882), (0.5416666666666666, 883), (0.5416666666666666, 424), (0.5416666666666666, 768), (0.5416666666666666, 526), (0.5416666666666666, 879), (0.5416666666666666, 641), (0.5416666666666666, 1023), (0.5416666666666666, 677), (0.5416666666666666, 528), (0.5416666666666666, 642), (0.5416666666666666, 758), (0.5416666666666666, 760), (0.5416666666666666, 551), (0.5416666666666666, 374), (0.5416666666666666, 443), (0.5416666666666666, 712), (0.5416666666666666, 490), (0.5416666666666666, 1024), (0.5416666666666666, 339), (0.5416666666666666, 766), (0.5416666666666666, 639), (0.5416666666666666, 423), (0.5416666666666666, 762), (0.5416666666666666, 880), (0.5416666666666666, 261), (0.5, 350), (0.5, 1132), (0.5, 1032), (0.5, 936), (0.5, 1074), (0.5, 1154), (0.5, 1090), (0.5, 655), (0.5, 234), (0.5, 1138), (0.5, 172), (0.5, 85), (0.5, 950), (0.5, 395), (0.5, 1089), (0.5, 1148), (0.5, 810), (0.5, 717), (0.5, 1151), (0.41666666666666663, 1102), (0.375, 1101), (0.375, 1080), (0.375, 1155), (0.25, 1169), (0.25, 1121), (0.25, 1123), (0.25, 1161), (0.25, 1103), (0.25, 1104), (0.25, 1113), (0.25, 1167), (0.16666666666666666, 1150), (0.16666666666666666, 1173), (0.16666666666666666, 1095), (0.16666666666666666, 1137), (0.16666666666666666, 1135), (0.16666666666666666, 1131)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 954
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 906
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 885
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.5, 954), (1.5, 885), (1.5, 1178), (1.5, 1252), (1.5, 790), (1.5, 906), (1.5, 982), (1.5, 1076), (1.5, 511), (1.375, 1180), (1.375, 1082), (1.375, 592), (1.375, 603), (1.375, 886), (1.375, 1181), (1.375, 1081), (1.25, 616), (1.25, 862), (1.25, 1205), (1.25, 492), (1.25, 1204), (1.25, 416), (1.25, 889), (1.25, 1088), (1.25, 1192), (1.25, 692), (1.25, 1091), (1.25, 1117), (1.25, 742), (1.25, 1000), (1.25, 1197), (1.25, 894), (1.25, 791), (1.25, 931), (1.25, 907), (1.25, 1001), (1.25, 1182), (1.25, 976), (1.25, 795), (1.25, 1199), (1.25, 888), (1.25, 887), (1.25, 523), (1.25, 1185), (1.25, 989), (1.25, 1114), (1.25, 792), (1.25, 1092), (1.25, 1179), (1.25, 700), (1.25, 1183), (1.25, 1099), (1.25, 1163), (1.25, 916), (1.25, 1264), (1.25, 960), (1.25, 986), (1.25, 493), (1.25, 1086), (1.25, 892), (1.125, 821), (1.125, 1116), (1.125, 899), (1.125, 81), (1.125, 159), (1.125, 1190), (1.125, 994), (1.125, 1120), (1.125, 605), (1.125, 1136), (1.125, 267), (1.125, 518), (1.125, 919), (1.125, 1229), (1.125, 1007), (1.125, 55), (1.125, 1142), (1.125, 1026), (1.125, 824), (1.125, 274), (1.125, 743), (1.125, 1158), (1.125, 797), (1.125, 1247), (1.125, 1107), (1.125, 1028), (1.125, 1105), (1.125, 834), (1.125, 1210), (1.125, 1215), (1.125, 623), (1.125, 1228), (1.125, 280), (1.125, 702), (1.125, 1054), (1.125, 992), (1.125, 1112), (1.125, 1119), (1.125, 412), (1.125, 1087), (1.125, 1008), (1.125, 1211), (1.125, 628), (1.125, 1093), (1.125, 1013), (1.125, 1040), (1.125, 597), (1.125, 1217), (1.125, 804), (1.125, 1184), (1.125, 864), (1.0, 935), (1.0, 814), (1.0, 1128), (1.0, 796), (1.0, 1020), (1.0, 1160), (1.0, 819), (1.0, 497), (1.0, 943), (1.0, 1270), (1.0, 953), (1.0, 868), (1.0, 925), (1.0, 1141), (1.0, 1053), (1.0, 54), (1.0, 1033), (1.0, 701), (1.0, 735), (1.0, 1047), (1.0, 1149), (1.0, 60), (1.0, 176), (1.0, 937), (1.0, 1236), (1.0, 607), (1.0, 837), (1.0, 707), (1.0, 836), (1.0, 498), (1.0, 140), (1.0, 945), (1.0, 630), (1.0, 377), (1.0, 231), (1.0, 437), (1.0, 703), (1.0, 800), (1.0, 1187), (1.0, 817), (1.0, 1234), (1.0, 913), (1.0, 808), (1.0, 830), (1.0, 1065), (1.0, 1030), (1.0, 429), (1.0, 407), (1.0, 693), (1.0, 1052), (1.0, 421), (1.0, 1134), (1.0, 721), (1.0, 716), (1.0, 538), (1.0, 934), (1.0, 496), (1.0, 612), (1.0, 613), (1.0, 1130), (1.0, 1125), (1.0, 650), (1.0, 1250), (1.0, 1153), (1.0, 1146), (1.0, 671), (1.0, 1165), (1.0, 1172), (1.0, 306), (1.0, 1255), (1.0, 1005), (1.0, 835), (1.0, 1162), (1.0, 536), (1.0, 136), (1.0, 1222), (1.0, 1031), (1.0, 812), (1.0, 781), (1.0, 1039), (1.0, 699), (1.0, 1006), (1.0, 1049), (1.0, 617), (1.0, 1244), (1.0, 1267), (1.0, 713), (1.0, 912), (1.0, 1126), (1.0, 771), (1.0, 941), (1.0, 1240), (1.0, 1003), (1.0, 1157), (1.0, 710), (1.0, 891), (1.0, 504), (1.0, 615), (1.0, 1213), (1.0, 611), (1.0, 378), (1.0, 1059), (1.0, 505), (1.0, 667), (1.0, 1035), (1.0, 1144), (1.0, 178), (1.0, 1225), (1.0, 406), (1.0, 1271), (1.0, 1058), (1.0, 1046), (1.0, 1245), (1.0, 915), (1.0, 1268), (1.0, 746), (1.0, 944), (1.0, 75), (1.0, 500), (1.0, 1143), (1.0, 927), (1.0, 1139), (1.0, 1257), (1.0, 854), (1.0, 690), (1.0, 938), (1.0, 1164), (1.0, 940), (1.0, 1122), (1.0, 1238), (1.0, 61), (1.0, 1064), (1.0, 1232), (1.0, 903), (1.0, 353), (1.0, 1159), (1.0, 218), (1.0, 983), (1.0, 121), (1.0, 898), (1.0, 897), (0.875, 979), (0.875, 1242), (0.875, 794), (0.875, 779), (0.875, 955), (0.875, 1195), (0.875, 533), (0.875, 336), (0.875, 866), (0.875, 1168), (0.875, 1066), (0.875, 730), (0.75, 962), (0.75, 1202), (0.75, 736), (0.75, 1017), (0.75, 166), (0.75, 967), (0.75, 411), (0.75, 1230), (0.75, 618), (0.75, 846), (0.75, 852), (0.75, 848), (0.75, 731), (0.75, 845), (0.75, 415), (0.75, 622), (0.75, 963), (0.75, 548), (0.75, 969), (0.75, 734), (0.75, 1072), (0.75, 593), (0.75, 510), (0.75, 1078), (0.75, 772), (0.75, 349), (0.75, 344), (0.75, 922), (0.75, 1220), (0.75, 968), (0.75, 512), (0.75, 402), (0.75, 695), (0.75, 619), (0.75, 595), (0.75, 1174), (0.6666666666666666, 515), (0.6666666666666666, 1084), (0.6666666666666666, 858), (0.6666666666666666, 855), (0.6666666666666666, 1015), (0.6666666666666666, 857), (0.6666666666666666, 50), (0.6666666666666666, 859), (0.6666666666666666, 970), (0.6666666666666666, 974), (0.6666666666666666, 624), (0.6666666666666666, 740), (0.6666666666666666, 975), (0.6666666666666666, 971), (0.6666666666666666, 212), (0.6666666666666666, 228), (0.6666666666666666, 535), (0.6666666666666666, 741), (0.6666666666666666, 917), (0.6666666666666666, 1012), (0.625, 626), (0.625, 813), (0.625, 9), (0.625, 873), (0.625, 825), (0.625, 1170), (0.625, 747), (0.625, 495), (0.625, 870), (0.625, 165), (0.625, 901), (0.625, 227), (0.625, 130), (0.625, 594), (0.625, 428), (0.625, 1071), (0.625, 36), (0.625, 921), (0.625, 999), (0.625, 860), (0.625, 981), (0.625, 1016), (0.625, 930), (0.625, 1196), (0.625, 1068), (0.625, 726), (0.625, 777), (0.625, 634), (0.625, 1048), (0.625, 697), (0.625, 875), (0.625, 832), (0.625, 600), (0.625, 718), (0.625, 199), (0.625, 757), (0.625, 863), (0.625, 1237), (0.625, 706), (0.625, 408), (0.625, 192), (0.625, 1038), (0.625, 1111), (0.625, 698), (0.625, 629), (0.625, 1109), (0.625, 996), (0.625, 418), (0.625, 861), (0.625, 610), (0.625, 842), (0.625, 959), (0.625, 1200), (0.625, 801), (0.625, 1097), (0.5, 1239), (0.5, 1221), (0.5, 1206), (0.5, 1235), (0.5, 1262), (0.5, 1266), (0.5, 1246), (0.5, 1193), (0.5, 1249), (0.41666666666666663, 1218), (0.41666666666666663, 1216), (0.375, 1259), (0.375, 1233), (0.375, 1208), (0.29166666666666663, 1226), (0.29166666666666663, 1224), (0.25, 1219), (0.25, 1248), (0.25, 1189), (0.16666666666666666, 1212), (0.16666666666666666, 1227), (0.16666666666666666, 1261), (0.16666666666666666, 1263), (0.16666666666666666, 1176), (0.16666666666666666, 1254)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 954
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 885
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1178
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.5, 906), (1.5, 511), (1.5, 1277), (1.5, 954), (1.5, 1252), (1.5, 1310), (1.5, 982), (1.5, 885), (1.5, 1076), (1.5, 790), (1.5, 1178), (1.375, 603), (1.375, 1082), (1.375, 886), (1.375, 1181), (1.375, 1180), (1.375, 1297), (1.375, 592), (1.375, 1081), (1.25, 916), (1.25, 1305), (1.25, 892), (1.25, 523), (1.25, 1000), (1.25, 692), (1.25, 492), (1.25, 1307), (1.25, 795), (1.25, 1326), (1.25, 742), (1.25, 1185), (1.25, 616), (1.25, 1192), (1.25, 1300), (1.25, 493), (1.25, 791), (1.25, 1088), (1.25, 1290), (1.25, 1183), (1.25, 1086), (1.25, 1199), (1.25, 1182), (1.25, 960), (1.25, 1091), (1.25, 1099), (1.25, 1117), (1.25, 1163), (1.25, 907), (1.25, 1001), (1.25, 1197), (1.25, 1092), (1.25, 888), (1.25, 792), (1.25, 1114), (1.25, 989), (1.25, 889), (1.25, 700), (1.25, 1204), (1.25, 416), (1.25, 1179), (1.25, 887), (1.25, 931), (1.25, 976), (1.25, 1313), (1.25, 862), (1.25, 894), (1.25, 1205), (1.25, 1264), (1.25, 986), (1.125, 1040), (1.125, 1318), (1.125, 1184), (1.125, 1008), (1.125, 1087), (1.125, 1112), (1.125, 1028), (1.125, 159), (1.125, 1229), (1.125, 1119), (1.125, 628), (1.125, 518), (1.125, 1347), (1.125, 55), (1.125, 1190), (1.125, 992), (1.125, 743), (1.125, 899), (1.125, 1327), (1.125, 1136), (1.125, 274), (1.125, 1336), (1.125, 821), (1.125, 1211), (1.125, 1343), (1.125, 834), (1.125, 864), (1.125, 702), (1.125, 1210), (1.125, 1026), (1.125, 1330), (1.125, 824), (1.125, 1007), (1.125, 1283), (1.125, 1107), (1.125, 1217), (1.125, 597), (1.125, 1316), (1.125, 797), (1.125, 919), (1.125, 1105), (1.125, 1341), (1.125, 1158), (1.125, 1013), (1.125, 1319), (1.125, 1116), (1.125, 804), (1.125, 1228), (1.125, 1093), (1.125, 280), (1.125, 1142), (1.125, 267), (1.125, 81), (1.125, 1215), (1.125, 1332), (1.125, 994), (1.125, 1120), (1.125, 1247), (1.125, 605), (1.125, 623), (1.125, 1311), (1.125, 412), (1.125, 1054), (1.0, 1361), (1.0, 1164), (1.0, 953), (1.0, 178), (1.0, 1162), (1.0, 835), (1.0, 231), (1.0, 1047), (1.0, 927), (1.0, 925), (1.0, 61), (1.0, 617), (1.0, 607), (1.0, 935), (1.0, 940), (1.0, 60), (1.0, 1064), (1.0, 1125), (1.0, 934), (1.0, 218), (1.0, 1315), (1.0, 1363), (1.0, 771), (1.0, 1005), (1.0, 800), (1.0, 1144), (1.0, 938), (1.0, 746), (1.0, 903), (1.0, 429), (1.0, 891), (1.0, 1234), (1.0, 808), (1.0, 1213), (1.0, 1149), (1.0, 1352), (1.0, 667), (1.0, 735), (1.0, 817), (1.0, 1353), (1.0, 1031), (1.0, 1354), (1.0, 1052), (1.0, 497), (1.0, 671), (1.0, 504), (1.0, 1366), (1.0, 710), (1.0, 913), (1.0, 1369), (1.0, 819), (1.0, 941), (1.0, 1143), (1.0, 1035), (1.0, 983), (1.0, 898), (1.0, 781), (1.0, 854), (1.0, 937), (1.0, 796), (1.0, 1157), (1.0, 1267), (1.0, 1126), (1.0, 1134), (1.0, 1222), (1.0, 812), (1.0, 943), (1.0, 1059), (1.0, 1128), (1.0, 1236), (1.0, 75), (1.0, 1122), (1.0, 536), (1.0, 868), (1.0, 1271), (1.0, 1232), (1.0, 613), (1.0, 650), (1.0, 615), (1.0, 1049), (1.0, 1270), (1.0, 1146), (1.0, 538), (1.0, 830), (1.0, 1244), (1.0, 437), (1.0, 814), (1.0, 945), (1.0, 721), (1.0, 1331), (1.0, 353), (1.0, 716), (1.0, 837), (1.0, 690), (1.0, 701), (1.0, 500), (1.0, 1058), (1.0, 693), (1.0, 1141), (1.0, 1003), (1.0, 1030), (1.0, 421), (1.0, 630), (1.0, 1245), (1.0, 1006), (1.0, 1039), (1.0, 1165), (1.0, 836), (1.0, 915), (1.0, 54), (1.0, 176), (1.0, 1033), (1.0, 1139), (1.0, 498), (1.0, 1053), (1.0, 1345), (1.0, 1238), (1.0, 140), (1.0, 505), (1.0, 121), (1.0, 707), (1.0, 703), (1.0, 699), (1.0, 1187), (1.0, 306), (1.0, 1370), (1.0, 407), (1.0, 1160), (1.0, 377), (1.0, 612), (1.0, 1065), (1.0, 912), (1.0, 1046), (1.0, 1153), (1.0, 944), (1.0, 713), (1.0, 1240), (1.0, 378), (1.0, 611), (1.0, 1255), (1.0, 1257), (1.0, 1172), (1.0, 406), (1.0, 1250), (1.0, 1159), (1.0, 1130), (1.0, 897), (1.0, 496), (1.0, 1225), (1.0, 1020), (1.0, 1337), (1.0, 1268), (1.0, 136), (0.875, 533), (0.875, 1242), (0.875, 730), (0.875, 1195), (0.875, 866), (0.875, 336), (0.875, 979), (0.875, 1066), (0.875, 794), (0.875, 779), (0.875, 1168), (0.875, 955), (0.875, 1303), (0.75, 1308), (0.75, 731), (0.75, 1174), (0.75, 166), (0.75, 1296), (0.75, 593), (0.75, 772), (0.75, 1017), (0.75, 1317), (0.75, 1282), (0.75, 852), (0.75, 967), (0.75, 1202), (0.75, 349), (0.75, 736), (0.75, 510), (0.75, 402), (0.75, 548), (0.75, 695), (0.75, 963), (0.75, 922), (0.75, 1230), (0.75, 619), (0.75, 1220), (0.75, 1072), (0.75, 512), (0.75, 969), (0.75, 848), (0.75, 344), (0.75, 734), (0.75, 962), (0.75, 622), (0.75, 411), (0.75, 968), (0.75, 1273), (0.75, 845), (0.75, 1078), (0.75, 846), (0.75, 415), (0.75, 595), (0.75, 618), (0.6666666666666666, 917), (0.6666666666666666, 624), (0.6666666666666666, 1084), (0.6666666666666666, 971), (0.6666666666666666, 1015), (0.6666666666666666, 50), (0.6666666666666666, 855), (0.6666666666666666, 858), (0.6666666666666666, 228), (0.6666666666666666, 740), (0.6666666666666666, 212), (0.6666666666666666, 974), (0.6666666666666666, 1012), (0.6666666666666666, 515), (0.6666666666666666, 857), (0.6666666666666666, 741), (0.6666666666666666, 535), (0.6666666666666666, 859), (0.6666666666666666, 1293), (0.6666666666666666, 975), (0.6666666666666666, 970), (0.625, 813), (0.625, 9), (0.625, 873), (0.625, 825), (0.625, 626), (0.625, 1322), (0.625, 1350), (0.625, 1302), (0.625, 1359), (0.625, 1286), (0.5, 1325), (0.5, 1280), (0.5, 1309), (0.5, 1344), (0.5, 1334), (0.41666666666666663, 1298), (0.41666666666666663, 1333), (0.41666666666666663, 1284), (0.41666666666666663, 1314), (0.41666666666666663, 1288), (0.41666666666666663, 1339), (0.41666666666666663, 1292), (0.41666666666666663, 1306), (0.375, 1323), (0.375, 1356), (0.25, 1349), (0.25, 1281), (0.25, 1338), (0.25, 1357), (0.25, 1279), (0.25, 1351), (0.16666666666666666, 1294), (0.16666666666666666, 1364), (0.16666666666666666, 1368), (0.16666666666666666, 1324), (0.16666666666666666, 1328), (0.16666666666666666, 1320), (0.16666666666666666, 1276), (0.16666666666666666, 1342), (0.16666666666666666, 1274)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 906
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1277
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 954
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.5, 885), (1.5, 1076), (1.5, 790), (1.5, 511), (1.5, 982), (1.5, 1372), (1.5, 1178), (1.5, 1374), (1.5, 1310), (1.5, 1426), (1.5, 1376), (1.5, 906), (1.5, 1277), (1.5, 954), (1.5, 1375), (1.5, 1252), (1.375, 592), (1.375, 1082), (1.375, 1181), (1.375, 1435), (1.375, 886), (1.375, 603), (1.375, 1407), (1.375, 1081), (1.375, 1180), (1.375, 1297), (1.25, 416), (1.25, 1099), (1.25, 889), (1.25, 892), (1.25, 1192), (1.25, 1409), (1.25, 1088), (1.25, 792), (1.25, 1300), (1.25, 1199), (1.25, 1395), (1.25, 887), (1.25, 1185), (1.25, 1000), (1.25, 1264), (1.25, 1182), (1.25, 1399), (1.25, 1313), (1.25, 1401), (1.25, 1092), (1.25, 862), (1.25, 1205), (1.25, 960), (1.25, 1398), (1.25, 1197), (1.25, 742), (1.25, 1430), (1.25, 916), (1.25, 1204), (1.25, 907), (1.25, 931), (1.25, 692), (1.25, 1091), (1.25, 1179), (1.25, 1086), (1.25, 791), (1.25, 1183), (1.25, 795), (1.25, 1307), (1.25, 1410), (1.25, 976), (1.25, 493), (1.25, 1117), (1.25, 1393), (1.25, 1305), (1.25, 1382), (1.25, 894), (1.25, 1163), (1.25, 1290), (1.25, 1326), (1.25, 989), (1.25, 492), (1.25, 1405), (1.25, 1402), (1.25, 523), (1.25, 986), (1.25, 1114), (1.25, 888), (1.25, 616), (1.25, 700), (1.25, 1001), (1.25, 1385), (1.125, 1447), (1.125, 1443), (1.125, 1327), (1.125, 1283), (1.125, 1217), (1.125, 994), (1.125, 1142), (1.125, 159), (1.125, 1112), (1.125, 1026), (1.125, 628), (1.125, 1184), (1.125, 1446), (1.125, 1007), (1.125, 1028), (1.125, 1347), (1.125, 1105), (1.125, 1013), (1.125, 834), (1.125, 992), (1.125, 743), (1.125, 1040), (1.125, 1408), (1.125, 864), (1.125, 821), (1.125, 1093), (1.125, 1311), (1.125, 1190), (1.125, 1452), (1.125, 1120), (1.125, 1332), (1.125, 1107), (1.125, 1433), (1.125, 55), (1.125, 1247), (1.125, 1341), (1.125, 1229), (1.125, 1087), (1.125, 1119), (1.125, 518), (1.125, 1439), (1.125, 804), (1.125, 605), (1.125, 702), (1.125, 597), (1.125, 1008), (1.125, 1383), (1.125, 1215), (1.125, 267), (1.125, 1228), (1.125, 797), (1.125, 1318), (1.125, 899), (1.125, 1343), (1.125, 623), (1.125, 1450), (1.125, 824), (1.125, 1158), (1.125, 1316), (1.125, 412), (1.125, 1336), (1.125, 1210), (1.125, 1116), (1.125, 274), (1.125, 1319), (1.125, 1330), (1.125, 919), (1.125, 1458), (1.125, 1136), (1.125, 1418), (1.125, 81), (1.125, 1211), (1.125, 280), (1.125, 1054), (1.0, 496), (1.0, 1234), (1.0, 306), (1.0, 944), (1.0, 1441), (1.0, 735), (1.0, 771), (1.0, 854), (1.0, 1035), (1.0, 1046), (1.0, 1122), (1.0, 868), (1.0, 611), (1.0, 650), (1.0, 1271), (1.0, 178), (1.0, 925), (1.0, 121), (1.0, 953), (1.0, 703), (1.0, 630), (1.0, 1354), (1.0, 1128), (1.0, 1369), (1.0, 716), (1.0, 1222), (1.0, 1006), (1.0, 903), (1.0, 1424), (1.0, 1353), (1.0, 1257), (1.0, 746), (1.0, 812), (1.0, 835), (1.0, 406), (1.0, 1141), (1.0, 1159), (1.0, 1157), (1.0, 1125), (1.0, 671), (1.0, 927), (1.0, 713), (1.0, 1164), (1.0, 429), (1.0, 498), (1.0, 913), (1.0, 75), (1.0, 1455), (1.0, 1345), (1.0, 1033), (1.0, 1268), (1.0, 1064), (1.0, 1250), (1.0, 941), (1.0, 1134), (1.0, 937), (1.0, 800), (1.0, 819), (1.0, 837), (1.0, 1236), (1.0, 1232), (1.0, 1059), (1.0, 945), (1.0, 1238), (1.0, 1361), (1.0, 1039), (1.0, 421), (1.0, 1244), (1.0, 1005), (1.0, 1315), (1.0, 1466), (1.0, 693), (1.0, 938), (1.0, 1165), (1.0, 1047), (1.0, 1160), (1.0, 817), (1.0, 891), (1.0, 1463), (1.0, 1146), (1.0, 943), (1.0, 940), (1.0, 407), (1.0, 667), (1.0, 612), (1.0, 1352), (1.0, 231), (1.0, 1052), (1.0, 1337), (1.0, 140), (1.0, 1411), (1.0, 1363), (1.0, 615), (1.0, 353), (1.0, 983), (1.0, 176), (1.0, 538), (1.0, 613), (1.0, 1003), (1.0, 1058), (1.0, 690), (1.0, 536), (1.0, 500), (1.0, 1225), (1.0, 897), (1.0, 721), (1.0, 836), (1.0, 796), (1.0, 1020), (1.0, 61), (1.0, 377), (1.0, 1130), (1.0, 437), (1.0, 1126), (1.0, 1240), (1.0, 1370), (1.0, 699), (1.0, 1403), (1.0, 898), (1.0, 1267), (1.0, 808), (1.0, 607), (1.0, 934), (1.0, 1139), (1.0, 497), (1.0, 1049), (1.0, 1143), (1.0, 1377), (1.0, 781), (1.0, 1187), (1.0, 707), (1.0, 915), (1.0, 60), (1.0, 505), (1.0, 935), (1.0, 378), (1.0, 54), (1.0, 1144), (1.0, 136), (1.0, 1448), (1.0, 1396), (1.0, 701), (1.0, 1245), (1.0, 1451), (1.0, 1030), (1.0, 814), (1.0, 218), (1.0, 1031), (1.0, 1053), (1.0, 1172), (1.0, 1468), (1.0, 1255), (1.0, 1270), (1.0, 1331), (1.0, 710), (1.0, 1366), (1.0, 912), (1.0, 1213), (1.0, 504), (1.0, 830), (1.0, 1149), (1.0, 1065), (1.0, 1153), (1.0, 1162), (1.0, 617), (0.875, 955), (0.875, 730), (0.875, 533), (0.875, 779), (0.875, 794), (0.875, 1195), (0.875, 1066), (0.875, 1242), (0.875, 866), (0.875, 336), (0.875, 1303), (0.875, 1168), (0.875, 979), (0.75, 736), (0.75, 1296), (0.75, 967), (0.75, 695), (0.75, 548), (0.75, 1072), (0.75, 1017), (0.75, 852), (0.75, 402), (0.75, 593), (0.75, 1317), (0.75, 1282), (0.75, 349), (0.75, 1379), (0.75, 1308), (0.75, 1230), (0.75, 512), (0.75, 1436), (0.75, 166), (0.75, 1387), (0.75, 510), (0.75, 1202), (0.75, 1454), (0.75, 969), (0.75, 772), (0.75, 1174), (0.75, 963), (0.75, 1220), (0.75, 922), (0.75, 731), (0.75, 619), (0.6666666666666666, 1412), (0.625, 1434), (0.625, 1427), (0.625, 1442), (0.625, 1431), (0.625, 1378), (0.5, 1472), (0.5, 1415), (0.5, 1421), (0.5, 1389), (0.5, 1373), (0.5, 1423), (0.5, 1380), (0.5, 1465), (0.5, 1381), (0.41666666666666663, 1391), (0.41666666666666663, 1461), (0.41666666666666663, 1417), (0.41666666666666663, 1457), (0.375, 1438), (0.375, 1444), (0.29166666666666663, 1440), (0.25, 1429), (0.25, 1420), (0.25, 1460), (0.16666666666666666, 1413), (0.16666666666666666, 1470), (0.16666666666666666, 1467), (0.16666666666666666, 1404)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 885
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1076
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 982
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.5, 906), (1.5, 1252), (1.5, 511), (1.5, 1426), (1.5, 1476), (1.5, 1372), (1.5, 1076), (1.5, 1481), (1.5, 1478), (1.5, 1376), (1.5, 1374), (1.5, 790), (1.5, 954), (1.5, 1310), (1.5, 1483), (1.5, 1375), (1.5, 1477), (1.5, 1178), (1.5, 1277), (1.5, 982), (1.5, 1474), (1.5, 885), (1.375, 1081), (1.375, 1435), (1.375, 1082), (1.375, 592), (1.375, 603), (1.375, 886), (1.375, 1297), (1.375, 1181), (1.375, 1407), (1.375, 1180), (1.25, 1313), (1.25, 976), (1.25, 523), (1.25, 960), (1.25, 1395), (1.25, 1512), (1.25, 1205), (1.25, 1091), (1.25, 862), (1.25, 1099), (1.25, 1114), (1.25, 1092), (1.25, 1523), (1.25, 1185), (1.25, 1326), (1.25, 1163), (1.25, 492), (1.25, 791), (1.25, 1305), (1.25, 1300), (1.25, 989), (1.25, 1402), (1.25, 1264), (1.25, 1385), (1.25, 616), (1.25, 888), (1.25, 1307), (1.25, 1393), (1.25, 1204), (1.25, 1290), (1.25, 742), (1.25, 416), (1.25, 1495), (1.25, 887), (1.25, 1382), (1.25, 1511), (1.25, 907), (1.25, 1001), (1.25, 1501), (1.25, 795), (1.25, 1410), (1.25, 1117), (1.25, 1513), (1.25, 1506), (1.25, 986), (1.25, 1430), (1.25, 1519), (1.25, 916), (1.25, 892), (1.25, 931), (1.25, 889), (1.25, 1497), (1.25, 1515), (1.25, 1183), (1.25, 1182), (1.25, 1192), (1.25, 1000), (1.25, 1398), (1.25, 894), (1.25, 1401), (1.25, 1492), (1.25, 1409), (1.25, 700), (1.25, 1088), (1.25, 1199), (1.25, 1197), (1.25, 493), (1.25, 1517), (1.25, 1491), (1.25, 1179), (1.25, 1399), (1.25, 1496), (1.25, 1086), (1.25, 792), (1.25, 692), (1.25, 1405), (1.125, 1028), (1.125, 824), (1.125, 1485), (1.125, 899), (1.125, 1120), (1.125, 623), (1.125, 412), (1.125, 1247), (1.125, 1568), (1.125, 1484), (1.125, 1418), (1.125, 628), (1.125, 518), (1.125, 1553), (1.125, 1458), (1.125, 1330), (1.125, 81), (1.125, 919), (1.125, 1119), (1.125, 1008), (1.125, 743), (1.125, 1215), (1.125, 1552), (1.125, 1105), (1.125, 992), (1.125, 1536), (1.125, 1007), (1.125, 1026), (1.125, 834), (1.125, 1452), (1.125, 605), (1.125, 1107), (1.125, 1332), (1.125, 1547), (1.125, 1217), (1.125, 1116), (1.125, 1319), (1.125, 1557), (1.125, 1158), (1.125, 1228), (1.125, 1013), (1.125, 280), (1.125, 1054), (1.125, 1136), (1.125, 1184), (1.125, 159), (1.125, 1447), (1.125, 1040), (1.125, 1343), (1.125, 1502), (1.125, 1211), (1.125, 55), (1.125, 702), (1.125, 1530), (1.125, 1087), (1.125, 1112), (1.125, 1336), (1.125, 1439), (1.125, 821), (1.125, 1347), (1.125, 1408), (1.125, 1341), (1.125, 1210), (1.125, 994), (1.125, 1383), (1.125, 1311), (1.125, 1327), (1.125, 1433), (1.125, 1190), (1.125, 1443), (1.125, 1142), (1.125, 1550), (1.125, 597), (1.125, 1093), (1.125, 797), (1.125, 1450), (1.125, 1318), (1.125, 1446), (1.125, 1283), (1.125, 1531), (1.125, 274), (1.125, 1316), (1.125, 864), (1.125, 804), (1.125, 1229), (1.125, 1549), (1.125, 267), (1.0, 808), (1.0, 1331), (1.0, 781), (1.0, 817), (1.0, 1366), (1.0, 721), (1.0, 1566), (1.0, 1542), (1.0, 1130), (1.0, 1463), (1.0, 1160), (1.0, 693), (1.0, 1468), (1.0, 1213), (1.0, 178), (1.0, 1403), (1.0, 1058), (1.0, 1122), (1.0, 1064), (1.0, 60), (1.0, 1159), (1.0, 1270), (1.0, 231), (1.0, 1033), (1.0, 498), (1.0, 407), (1.0, 1537), (1.0, 836), (1.0, 1455), (1.0, 701), (1.0, 1146), (1.0, 690), (1.0, 1451), (1.0, 1551), (1.0, 136), (1.0, 1149), (1.0, 1031), (1.0, 54), (1.0, 940), (1.0, 1035), (1.0, 912), (1.0, 925), (1.0, 1039), (1.0, 140), (1.0, 306), (1.0, 1126), (1.0, 1424), (1.0, 1377), (1.0, 868), (1.0, 1065), (1.0, 710), (1.0, 496), (1.0, 1466), (1.0, 1128), (1.0, 353), (1.0, 1244), (1.0, 218), (1.0, 1143), (1.0, 903), (1.0, 671), (1.0, 1363), (1.0, 1006), (1.0, 1441), (1.0, 612), (1.0, 630), (1.0, 935), (1.0, 406), (1.0, 1234), (1.0, 497), (1.0, 1049), (1.0, 927), (1.0, 1059), (1.0, 1370), (1.0, 176), (1.0, 421), (1.0, 944), (1.0, 1352), (1.0, 1172), (1.0, 953), (1.0, 437), (1.0, 75), (1.0, 61), (1.0, 1164), (1.0, 538), (1.0, 1240), (1.0, 913), (1.0, 1255), (1.0, 1250), (1.0, 1268), (1.0, 1225), (1.0, 1125), (1.0, 1555), (1.0, 800), (1.0, 1047), (1.0, 1337), (1.0, 1134), (1.0, 504), (1.0, 1238), (1.0, 983), (1.0, 943), (1.0, 1003), (1.0, 1232), (1.0, 746), (1.0, 1020), (1.0, 1315), (1.0, 607), (1.0, 796), (1.0, 1499), (1.0, 897), (1.0, 613), (1.0, 1448), (1.0, 937), (1.0, 1267), (1.0, 915), (1.0, 1353), (1.0, 1030), (1.0, 1141), (1.0, 1052), (1.0, 699), (1.0, 819), (1.0, 1257), (1.0, 1369), (1.0, 854), (1.0, 611), (1.0, 378), (1.0, 812), (1.0, 898), (1.0, 835), (1.0, 707), (1.0, 1153), (1.0, 938), (1.0, 500), (1.0, 1487), (1.0, 1411), (1.0, 941), (1.0, 1165), (1.0, 536), (1.0, 814), (1.0, 713), (1.0, 1245), (1.0, 830), (1.0, 716), (1.0, 891), (1.0, 1345), (1.0, 1361), (1.0, 945), (1.0, 615), (1.0, 667), (1.0, 735), (1.0, 771), (1.0, 703), (1.0, 1144), (1.0, 505), (1.0, 650), (1.0, 837), (1.0, 1222), (1.0, 1046), (1.0, 377), (1.0, 1187), (1.0, 934), (1.0, 121), (1.0, 1479), (1.0, 1005), (1.0, 1139), (1.0, 429), (1.0, 1354), (1.0, 1236), (1.0, 1157), (1.0, 1271), (1.0, 1396), (1.0, 1053), (0.75, 1545), (0.75, 1493), (0.75, 1541), (0.75, 1525), (0.75, 1510), (0.75, 1488), (0.75, 1509), (0.6666666666666666, 1514), (0.6666666666666666, 1500), (0.625, 1540), (0.625, 1569), (0.625, 1563), (0.625, 1538), (0.625, 1522), (0.625, 1518), (0.625, 1527), (0.625, 1560), (0.5, 1565), (0.5, 1535), (0.5, 1544), (0.5, 1521), (0.5, 1561), (0.5, 1529), (0.5, 1508), (0.375, 1505), (0.375, 1503), (0.375, 1486), (0.375, 1559), (0.375, 1490), (0.375, 1533), (0.375, 1562), (0.25, 1524), (0.16666666666666666, 1480), (0.16666666666666666, 1520)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 906
 encoding: (defun my_func (x y) ?)`(- ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 511
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1426
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`(- ? ?)`y`#`#`4`#`#`(- ? ?)`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- (- y 4) (- x 4))))
 nr_nodes: 10]
(CANDIDATE)[id: 1476
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.5, 1376), (1.5, 1483), (1.5, 1481), (1.5, 1374), (1.5, 1252), (1.5, 1474), (1.5, 1277), (1.5, 790), (1.5, 885), (1.5, 1579), (1.5, 1583), (1.5, 982), (1.5, 1476), (1.5, 906), (1.5, 1372), (1.5, 1310), (1.5, 1178), (1.5, 1426), (1.5, 1478), (1.5, 1580), (1.5, 1582), (1.5, 1375), (1.5, 1572), (1.5, 511), (1.5, 1076), (1.5, 1573), (1.5, 954), (1.5, 1477), (1.375, 1607), (1.375, 1297), (1.375, 1407), (1.375, 1180), (1.375, 603), (1.375, 1082), (1.375, 1181), (1.375, 1435), (1.375, 592), (1.375, 886), (1.375, 1081), (1.25, 1629), (1.25, 960), (1.25, 1001), (1.25, 1399), (1.25, 892), (1.25, 1099), (1.25, 792), (1.25, 1596), (1.25, 907), (1.25, 1591), (1.25, 1409), (1.25, 1385), (1.25, 1000), (1.25, 1197), (1.25, 1610), (1.25, 1512), (1.25, 1395), (1.25, 931), (1.25, 1092), (1.25, 795), (1.25, 1398), (1.25, 1523), (1.25, 889), (1.25, 1307), (1.25, 887), (1.25, 1619), (1.25, 1091), (1.25, 493), (1.25, 1402), (1.25, 492), (1.25, 1326), (1.25, 1492), (1.25, 1313), (1.25, 1410), (1.25, 1491), (1.25, 989), (1.25, 888), (1.25, 862), (1.25, 986), (1.25, 1628), (1.25, 700), (1.25, 1635), (1.25, 1204), (1.25, 1305), (1.25, 1182), (1.25, 1086), (1.25, 1382), (1.25, 1163), (1.25, 1515), (1.25, 1501), (1.25, 1636), (1.25, 523), (1.25, 1497), (1.25, 1601), (1.25, 616), (1.25, 1511), (1.25, 1393), (1.25, 1405), (1.25, 1637), (1.25, 416), (1.25, 1185), (1.25, 1300), (1.25, 1495), (1.25, 916), (1.25, 692), (1.25, 894), (1.25, 1606), (1.25, 1088), (1.25, 1506), (1.25, 791), (1.25, 1401), (1.25, 1205), (1.25, 1264), (1.25, 1183), (1.25, 1199), (1.25, 742), (1.25, 1114), (1.25, 1430), (1.25, 1192), (1.25, 1627), (1.25, 1604), (1.25, 1117), (1.25, 1290), (1.25, 1599), (1.25, 1517), (1.25, 976), (1.25, 1519), (1.25, 1630), (1.25, 1496), (1.25, 1179), (1.25, 1513), (1.125, 1330), (1.125, 1530), (1.125, 804), (1.125, 628), (1.125, 55), (1.125, 1557), (1.125, 1433), (1.125, 280), (1.125, 1013), (1.125, 1443), (1.125, 821), (1.125, 1007), (1.125, 1648), (1.125, 994), (1.125, 1105), (1.125, 1229), (1.125, 1605), (1.125, 597), (1.125, 1550), (1.125, 1447), (1.125, 1450), (1.125, 1319), (1.125, 992), (1.125, 1210), (1.125, 1112), (1.125, 1184), (1.125, 1107), (1.125, 1549), (1.125, 797), (1.125, 743), (1.125, 1439), (1.125, 1228), (1.125, 1643), (1.125, 1568), (1.125, 1536), (1.125, 1217), (1.125, 1552), (1.125, 864), (1.125, 605), (1.125, 1028), (1.125, 1452), (1.125, 1142), (1.125, 1332), (1.125, 1327), (1.125, 1485), (1.125, 267), (1.125, 1589), (1.125, 1026), (1.125, 1054), (1.125, 1347), (1.125, 1446), (1.125, 1247), (1.125, 1190), (1.125, 274), (1.125, 1652), (1.125, 1119), (1.125, 1008), (1.125, 1093), (1.125, 412), (1.125, 1633), (1.125, 1040), (1.125, 1211), (1.125, 1336), (1.125, 623), (1.125, 1343), (1.125, 1215), (1.125, 1283), (1.125, 1116), (1.125, 1341), (1.125, 1120), (1.125, 702), (1.125, 159), (1.125, 1418), (1.125, 1553), (1.125, 1316), (1.125, 824), (1.125, 1408), (1.125, 1158), (1.125, 1657), (1.125, 834), (1.125, 1458), (1.125, 1631), (1.125, 1383), (1.125, 1531), (1.125, 1484), (1.125, 1547), (1.125, 1311), (1.125, 899), (1.125, 1595), (1.125, 1318), (1.125, 1087), (1.125, 1136), (1.125, 81), (1.125, 919), (1.125, 1502), (1.125, 1598), (1.125, 518), (1.0, 781), (1.0, 498), (1.0, 1049), (1.0, 835), (1.0, 1542), (1.0, 1584), (1.0, 140), (1.0, 1244), (1.0, 1065), (1.0, 1128), (1.0, 176), (1.0, 1159), (1.0, 1537), (1.0, 817), (1.0, 630), (1.0, 690), (1.0, 1160), (1.0, 1551), (1.0, 746), (1.0, 1149), (1.0, 607), (1.0, 935), (1.0, 353), (1.0, 1125), (1.0, 1047), (1.0, 496), (1.0, 796), (1.0, 868), (1.0, 1448), (1.0, 437), (1.0, 925), (1.0, 913), (1.0, 671), (1.0, 1172), (1.0, 693), (1.0, 1006), (1.0, 612), (1.0, 1634), (1.0, 1234), (1.0, 1257), (1.0, 1352), (1.0, 1134), (1.0, 944), (1.0, 1623), (1.0, 75), (1.0, 1451), (1.0, 912), (1.0, 1033), (1.0, 1363), (1.0, 1466), (1.0, 1238), (1.0, 1659), (1.0, 1463), (1.0, 378), (1.0, 812), (1.0, 1003), (1.0, 1270), (1.0, 61), (1.0, 1153), (1.0, 983), (1.0, 1370), (1.0, 1058), (1.0, 927), (1.0, 1566), (1.0, 1424), (1.0, 707), (1.0, 897), (1.0, 1143), (1.0, 497), (1.0, 940), (1.0, 1240), (1.0, 406), (1.0, 407), (1.0, 1603), (1.0, 1468), (1.0, 1031), (1.0, 1267), (1.0, 1366), (1.0, 1377), (1.0, 953), (1.0, 1213), (1.0, 854), (1.0, 1164), (1.0, 1353), (1.0, 1499), (1.0, 699), (1.0, 1232), (1.0, 421), (1.0, 1588), (1.0, 937), (1.0, 178), (1.0, 819), (1.0, 306), (1.0, 1130), (1.0, 1455), (1.0, 1369), (1.0, 1039), (1.0, 1268), (1.0, 1403), (1.0, 808), (1.0, 1146), (1.0, 1315), (1.0, 504), (1.0, 613), (1.0, 898), (1.0, 1614), (1.0, 54), (1.0, 1126), (1.0, 1122), (1.0, 943), (1.0, 1052), (1.0, 1255), (1.0, 136), (1.0, 1331), (1.0, 721), (1.0, 1250), (1.0, 1441), (1.0, 1059), (1.0, 1030), (1.0, 710), (1.0, 701), (1.0, 800), (1.0, 1555), (1.0, 1225), (1.0, 538), (1.0, 836), (1.0, 1141), (1.0, 231), (1.0, 60), (1.0, 903), (1.0, 1337), (1.0, 1020), (1.0, 1620), (1.0, 1035), (1.0, 611), (1.0, 1064), (1.0, 915), (1.0, 218), (0.75, 1574), (0.75, 1578), (0.75, 1626), (0.6666666666666666, 1597), (0.6666666666666666, 1641), (0.625, 1586), (0.625, 1608), (0.625, 1593), (0.625, 1661), (0.625, 1660), (0.5, 1571), (0.5, 1649), (0.5, 1621), (0.5, 1645), (0.5, 1625), (0.5, 1654), (0.41666666666666663, 1609), (0.41666666666666663, 1655), (0.41666666666666663, 1615), (0.41666666666666663, 1650), (0.41666666666666663, 1639), (0.375, 1656), (0.375, 1612), (0.375, 1642), (0.375, 1640), (0.29166666666666663, 1638), (0.25, 1646), (0.25, 1587), (0.25, 1617), (0.16666666666666666, 1644), (0.16666666666666666, 1651), (0.16666666666666666, 1576), (0.16666666666666666, 1600), (0.16666666666666666, 1577), (0.16666666666666666, 1618)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1376
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1483
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1481
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`4`#`#`x`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 4) x) (- y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
[(1.5, 1476), (1.5, 982), (1.5, 1374), (1.5, 1580), (1.5, 1483), (1.5, 1178), (1.5, 1478), (1.5, 1375), (1.5, 1573), (1.5, 1372), (1.5, 954), (1.5, 1680), (1.5, 511), (1.5, 1474), (1.5, 1310), (1.5, 1675), (1.5, 1674), (1.5, 1572), (1.5, 1664), (1.5, 1277), (1.5, 1481), (1.5, 1376), (1.5, 1669), (1.5, 1667), (1.5, 906), (1.5, 1426), (1.5, 790), (1.5, 1252), (1.5, 1582), (1.5, 885), (1.5, 1583), (1.5, 1477), (1.5, 1076), (1.5, 1579), (1.5, 1668), (1.5, 1677), (1.5, 1679), (1.375, 886), (1.375, 592), (1.375, 1297), (1.375, 1407), (1.375, 603), (1.375, 1180), (1.375, 1082), (1.375, 1181), (1.375, 1435), (1.375, 1689), (1.375, 1607), (1.375, 1081), (1.25, 1591), (1.25, 1606), (1.25, 1402), (1.25, 1393), (1.25, 492), (1.25, 1693), (1.25, 1398), (1.25, 1601), (1.25, 1385), (1.25, 1091), (1.25, 1199), (1.25, 1192), (1.25, 1630), (1.25, 1512), (1.25, 1719), (1.25, 986), (1.25, 1290), (1.25, 1185), (1.25, 1704), (1.25, 1523), (1.25, 616), (1.25, 523), (1.25, 1506), (1.25, 1751), (1.25, 907), (1.25, 1513), (1.25, 1117), (1.25, 889), (1.25, 1300), (1.25, 1114), (1.25, 1733), (1.25, 1627), (1.25, 1001), (1.25, 1491), (1.25, 1179), (1.25, 1720), (1.25, 1604), (1.25, 493), (1.25, 1264), (1.25, 1313), (1.25, 887), (1.25, 1326), (1.25, 1401), (1.25, 1382), (1.25, 1517), (1.25, 1599), (1.25, 1430), (1.25, 742), (1.25, 1183), (1.25, 1088), (1.25, 1636), (1.25, 888), (1.25, 1000), (1.25, 1204), (1.25, 976), (1.25, 1628), (1.25, 1752), (1.25, 1092), (1.25, 931), (1.25, 792), (1.25, 1701), (1.25, 1691), (1.25, 1395), (1.25, 1718), (1.25, 916), (1.25, 1629), (1.25, 1596), (1.25, 1305), (1.25, 1619), (1.25, 1698), (1.25, 1706), (1.25, 1307), (1.25, 1519), (1.25, 1205), (1.25, 1197), (1.25, 1501), (1.25, 1163), (1.25, 791), (1.25, 1497), (1.25, 1697), (1.25, 960), (1.25, 1511), (1.25, 1492), (1.25, 1399), (1.25, 1726), (1.25, 862), (1.25, 1610), (1.25, 1515), (1.25, 1099), (1.25, 1495), (1.25, 894), (1.25, 1637), (1.25, 692), (1.25, 1405), (1.25, 1410), (1.25, 795), (1.25, 1182), (1.25, 989), (1.25, 1702), (1.25, 1635), (1.25, 700), (1.25, 1086), (1.25, 416), (1.25, 1496), (1.25, 892), (1.25, 1409), (1.125, 1107), (1.125, 1589), (1.125, 1418), (1.125, 1443), (1.125, 1552), (1.125, 1316), (1.125, 81), (1.125, 1433), (1.125, 518), (1.125, 1643), (1.125, 1283), (1.125, 1336), (1.125, 55), (1.125, 919), (1.125, 1550), (1.125, 1724), (1.125, 1758), (1.125, 1343), (1.125, 797), (1.125, 623), (1.125, 1452), (1.125, 1447), (1.125, 1439), (1.125, 412), (1.125, 1553), (1.125, 1484), (1.125, 628), (1.125, 1700), (1.125, 1598), (1.125, 1595), (1.125, 274), (1.125, 1502), (1.125, 1549), (1.125, 1408), (1.125, 994), (1.125, 605), (1.125, 280), (1.125, 1229), (1.125, 1547), (1.125, 1341), (1.125, 1536), (1.125, 992), (1.125, 1105), (1.125, 1311), (1.125, 1605), (1.125, 1648), (1.125, 899), (1.125, 1530), (1.125, 1652), (1.125, 1028), (1.125, 824), (1.125, 1217), (1.125, 1332), (1.125, 1633), (1.125, 1093), (1.125, 1211), (1.125, 1112), (1.125, 1696), (1.125, 1318), (1.125, 1119), (1.125, 834), (1.125, 1708), (1.125, 1136), (1.125, 1347), (1.125, 864), (1.125, 1026), (1.125, 597), (1.125, 1184), (1.125, 1446), (1.125, 1210), (1.125, 159), (1.125, 1247), (1.125, 1450), (1.125, 804), (1.125, 1116), (1.125, 1040), (1.125, 1383), (1.125, 1013), (1.125, 1631), (1.125, 1330), (1.125, 1568), (1.125, 1215), (1.125, 267), (1.125, 1319), (1.125, 1228), (1.125, 702), (1.125, 1657), (1.125, 1008), (1.125, 1557), (1.125, 1087), (1.125, 1007), (1.125, 1327), (1.125, 1142), (1.125, 1054), (1.125, 1458), (1.125, 821), (1.125, 1485), (1.125, 743), (1.125, 1158), (1.125, 1190), (1.125, 1531), (1.125, 1120), (1.0, 607), (1.0, 940), (1.0, 1268), (1.0, 913), (1.0, 707), (1.0, 796), (1.0, 378), (1.0, 1369), (1.0, 1049), (1.0, 935), (1.0, 1125), (1.0, 1006), (1.0, 437), (1.0, 497), (1.0, 1363), (1.0, 1232), (1.0, 1153), (1.0, 1499), (1.0, 1744), (1.0, 983), (1.0, 693), (1.0, 1143), (1.0, 306), (1.0, 1588), (1.0, 1659), (1.0, 1160), (1.0, 1047), (1.0, 817), (1.0, 1033), (1.0, 1684), (1.0, 498), (1.0, 1031), (1.0, 1584), (1.0, 812), (1.0, 1130), (1.0, 1159), (1.0, 1366), (1.0, 944), (1.0, 1424), (1.0, 937), (1.0, 1058), (1.0, 1149), (1.0, 176), (1.0, 854), (1.0, 1234), (1.0, 912), (1.0, 925), (1.0, 1451), (1.0, 953), (1.0, 1455), (1.0, 1353), (1.0, 407), (1.0, 1466), (1.0, 1240), (1.0, 1757), (1.0, 1566), (1.0, 1736), (1.0, 1370), (1.0, 699), (1.0, 1238), (1.0, 1448), (1.0, 1377), (1.0, 1551), (1.0, 690), (1.0, 1352), (1.0, 671), (1.0, 1003), (1.0, 1134), (1.0, 1623), (1.0, 1267), (1.0, 1463), (1.0, 927), (1.0, 897), (1.0, 1270), (1.0, 612), (1.0, 1213), (1.0, 496), (1.0, 421), (1.0, 819), (1.0, 75), (1.0, 353), (1.0, 1039), (1.0, 781), (1.0, 61), (1.0, 140), (1.0, 1128), (1.0, 1244), (1.0, 1537), (1.0, 868), (1.0, 835), (1.0, 178), (1.0, 1065), (1.0, 1734), (1.0, 1754), (1.0, 1172), (1.0, 1603), (1.0, 1634), (1.0, 406), (1.0, 1542), (1.0, 1468), (1.0, 1164), (1.0, 746), (1.0, 1257), (1.0, 630), (0.875, 1663), (0.75, 1746), (0.75, 1747), (0.75, 1722), (0.75, 1695), (0.75, 1760), (0.75, 1705), (0.75, 1735), (0.75, 1738), (0.6666666666666666, 1748), (0.6666666666666666, 1714), (0.625, 1712), (0.625, 1763), (0.625, 1740), (0.625, 1717), (0.625, 1767), (0.625, 1730), (0.625, 1713), (0.625, 1756), (0.5416666666666666, 1742), (0.5, 1690), (0.5, 1762), (0.5, 1721), (0.41666666666666663, 1715), (0.41666666666666663, 1741), (0.41666666666666663, 1710), (0.41666666666666663, 1682), (0.41666666666666663, 1728), (0.41666666666666663, 1703), (0.41666666666666663, 1685), (0.41666666666666663, 1766), (0.41666666666666663, 1750), (0.29166666666666663, 1732), (0.25, 1687), (0.16666666666666666, 1678), (0.16666666666666666, 1765), (0.16666666666666666, 1666), (0.16666666666666666, 1671), (0.16666666666666666, 1673)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1476
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 982
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`4`#`#`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 4 (- y (- (+ x x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1580
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
(CANDIDATE)[id: 1483
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`4`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- (+ y y) x)) 4))
 nr_nodes: 10]
[Generation 15]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (- 4 (- x (- (* y x) y))))

Process finished with exit code 0
