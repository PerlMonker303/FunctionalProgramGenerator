D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`x`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (* 2 x) x) 2) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x (* y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (* (* y y) y)) (+ y (+ (+ y x) (* x 2)))))
 nr_nodes: 18]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`2`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (+ (* x x) y) 2) (* x (* x 2))) x))
 nr_nodes: 16]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* x x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (+ 2 y)) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) (* x y)))
 nr_nodes: 8]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 (* x 2)) (+ 2 (+ 2 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 2) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ (* 2 x) (+ y 2))) (+ (+ 2 y) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 (+ x x))) (* (+ (* y 2) x) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (+ y 2)) (+ (+ x 2) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* (+ x (* y (+ x 2))) (+ (* (+ 2 x) x) 2))))
 nr_nodes: 18]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ x x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x (+ (* y x) (* 2 2))) 2) (* y 2)))
 nr_nodes: 16]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* y (+ (* y y) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y (* y 2)) (+ (* 2 y) (* y x))) 2))
 nr_nodes: 16]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`2`#`#`(* ? ?)`y`#`#`x`#`#`2`#`#`(* ? ?)`2`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (* y x) (* x y)) (+ (* 2 (* y x)) 2)) (* 2 (+ (+ (+ y y) (+ y 2)) 2))))
 nr_nodes: 28]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* y 2) (+ 2 2))))
 nr_nodes: 10]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x (* y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (* y y)) (* (* y x) (+ x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`y`#`#`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 2 x) y) (+ y 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 2) y))
 nr_nodes: 6]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ 2 x) (* y x))) 2))
 nr_nodes: 12]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ x y) (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ (+ 2 x) (* y y)))))
 nr_nodes: 12]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`2`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ 2 2)) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* y (* (* 2 x) (+ x x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`2`#`#`2`#`#`x`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`2`#`#`2`#`#`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`y`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 2 2) x) (* (+ (+ (* (+ y 2) 2) (+ 2 (+ 2 y))) x) (+ y (+ x (* 2 y))))))
 nr_nodes: 28]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (+ x x))))
 nr_nodes: 8]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ x (+ y (* y (+ y x))))))
 nr_nodes: 14]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 2 2) y) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (+ 2 (+ x (+ x x))) (* y y)) (* x y)) y))
 nr_nodes: 18]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (+ y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ (+ y y) (+ x y)) (+ x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ x y) (* (+ x x) x)) y))
 nr_nodes: 12]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x (* (+ 2 2) 2)) 2) y))
 nr_nodes: 12]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (* 2 (+ 2 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`(* ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* (* y 2) 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y (+ y 2))) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ x 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 2 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`x`#`#`y`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (+ (* (+ y x) y) y) (* (* (* 2 2) x) y)) 2) y))
 nr_nodes: 20]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ (* 2 y) (* (+ y y) 2))) y))
 nr_nodes: 14]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 2) x))
 nr_nodes: 6]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`2`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* (* y (+ 2 2)) 2) 2)))
 nr_nodes: 12]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) 2) y))
 nr_nodes: 8]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) (* (* (+ 2 x) y) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`2`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* (+ x x) (+ y x)) (* 2 (+ 2 x))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 (+ y (+ (+ 2 2) (* y y)))))
 nr_nodes: 12]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (* y 2) (+ y y))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 2 (+ x (* 2 (* y x)))) y) (+ (+ x (* y y)) (+ 2 (* y 2)))))
 nr_nodes: 24]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y (+ y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* y y) 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* y x) (+ x (* y (* y x))))))
 nr_nodes: 14]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* 2 x) (+ (+ y 2) x))))
 nr_nodes: 12]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 (+ (* y 2) (+ 2 x))) 2))
 nr_nodes: 12]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x 2) 2) y))
 nr_nodes: 8]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (+ 2 (+ (+ 2 y) x))))
 nr_nodes: 12]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`y`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (+ (+ y 2) (* y (* 2 y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`2`#`#`y`#`#`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (* (* (+ y 2) y) x)) x) 2))
 nr_nodes: 14]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ (+ 2 (* x y)) x)) x))
 nr_nodes: 12]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`y`#`#`2`#`#`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* 2 y) (+ (* (* 2 y) 2) 2)) x) x))
 nr_nodes: 16]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`2`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`2`#`#`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* x (+ 2 x)) (+ (+ (* (* x y) 2) x) (+ x 2)))))
 nr_nodes: 20]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 2 (+ x (+ x 2)))))
 nr_nodes: 10]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`2`#`#`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ 2 2)) (* (+ 2 2) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 2) 2) x))
 nr_nodes: 8]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (* (+ (+ 2 x) 2) x)) x))
 nr_nodes: 12]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`(* ? ?)`y`#`#`2`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (* (* y 2) (* 2 x))))
 nr_nodes: 12]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 2 (+ 2 y)) x) (+ (+ (+ y 2) x) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (* 2 y) (+ (+ 2 2) (* x x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`2`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* (+ y x) 2)) (* x 2)))
 nr_nodes: 12]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`2`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 2 (* y 2)) y) (* x y)))
 nr_nodes: 12]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`2`#`#`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ (* x (+ 2 2)) 2) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
[Generation 0]
[Computing fitness]
[(1.375, 93), (1.25, 149), (1.25, 229), (1.125, 96), (1.125, 104), (1.125, 123), (1.0, 1), (1.0, 153), (1.0, 163), (1.0, 217), (1.0, 231), (1.0, 313), (1.0, 351), (0.75, 107), (0.75, 148), (0.75, 180), (0.75, 262), (0.625, 160), (0.625, 230), (0.625, 260), (0.625, 272), (0.625, 283), (0.625, 362), (0.625, 378), (0.625, 382), (0.5, 19), (0.5, 20), (0.5, 26), (0.5, 43), (0.5, 67), (0.5, 82), (0.5, 90), (0.5, 169), (0.5, 189), (0.5, 209), (0.5, 211), (0.5, 225), (0.5, 279), (0.5, 299), (0.5, 304), (0.5, 307), (0.5, 314), (0.5, 339), (0.5, 340), (0.5, 354), (0.5, 358), (0.5, 364), (0.5, 392), (0.41666666666666663, 0), (0.41666666666666663, 27), (0.41666666666666663, 38), (0.41666666666666663, 44), (0.41666666666666663, 51), (0.41666666666666663, 54), (0.41666666666666663, 99), (0.41666666666666663, 115), (0.41666666666666663, 118), (0.41666666666666663, 150), (0.41666666666666663, 237), (0.41666666666666663, 265), (0.41666666666666663, 294), (0.41666666666666663, 323), (0.41666666666666663, 367), (0.41666666666666663, 395), (0.41666666666666663, 397), (0.375, 10), (0.375, 59), (0.375, 135), (0.375, 154), (0.375, 186), (0.375, 195), (0.375, 247), (0.375, 258), (0.375, 273), (0.375, 293), (0.375, 296), (0.375, 303), (0.375, 332), (0.35, 249), (0.35, 347), (0.29166666666666663, 100), (0.29166666666666663, 342), (0.25, 3), (0.25, 4), (0.25, 6), (0.25, 15), (0.25, 18), (0.25, 21), (0.25, 35), (0.25, 39), (0.25, 46), (0.25, 47), (0.25, 49), (0.25, 52), (0.25, 56), (0.25, 57), (0.25, 63), (0.25, 69), (0.25, 70), (0.25, 78), (0.25, 79), (0.25, 95), (0.25, 98), (0.25, 102), (0.25, 105), (0.25, 108), (0.25, 113), (0.25, 116), (0.25, 120), (0.25, 125), (0.25, 126), (0.25, 133), (0.25, 137), (0.25, 145), (0.25, 152), (0.25, 158), (0.25, 159), (0.25, 162), (0.25, 165), (0.25, 170), (0.25, 174), (0.25, 185), (0.25, 187), (0.25, 197), (0.25, 201), (0.25, 202), (0.25, 203), (0.25, 204), (0.25, 207), (0.25, 210), (0.25, 216), (0.25, 221), (0.25, 222), (0.25, 223), (0.25, 228), (0.25, 233), (0.25, 240), (0.25, 245), (0.25, 248), (0.25, 255), (0.25, 257), (0.25, 259), (0.25, 268), (0.25, 269), (0.25, 270), (0.25, 271), (0.25, 274), (0.25, 277), (0.25, 282), (0.25, 286), (0.25, 300), (0.25, 301), (0.25, 302), (0.25, 312), (0.25, 316), (0.25, 319), (0.25, 328), (0.25, 330), (0.25, 334), (0.25, 345), (0.25, 348), (0.25, 360), (0.25, 361), (0.25, 363), (0.25, 368), (0.25, 373), (0.25, 374), (0.25, 377), (0.25, 381), (0.25, 385), (0.25, 387), (0.25, 391), (0.25, 393), (0.25, 394), (0.25, 396), (0.19642857142857142, 291), (0.16666666666666666, 5), (0.16666666666666666, 12), (0.16666666666666666, 13), (0.16666666666666666, 24), (0.16666666666666666, 33), (0.16666666666666666, 36), (0.16666666666666666, 41), (0.16666666666666666, 45), (0.16666666666666666, 48), (0.16666666666666666, 66), (0.16666666666666666, 72), (0.16666666666666666, 74), (0.16666666666666666, 75), (0.16666666666666666, 76), (0.16666666666666666, 80), (0.16666666666666666, 81), (0.16666666666666666, 87), (0.16666666666666666, 92), (0.16666666666666666, 94), (0.16666666666666666, 110), (0.16666666666666666, 111), (0.16666666666666666, 114), (0.16666666666666666, 134), (0.16666666666666666, 138), (0.16666666666666666, 144), (0.16666666666666666, 146), (0.16666666666666666, 147), (0.16666666666666666, 151), (0.16666666666666666, 166), (0.16666666666666666, 168), (0.16666666666666666, 177), (0.16666666666666666, 179), (0.16666666666666666, 196), (0.16666666666666666, 200), (0.16666666666666666, 206), (0.16666666666666666, 212), (0.16666666666666666, 214), (0.16666666666666666, 226), (0.16666666666666666, 241), (0.16666666666666666, 264), (0.16666666666666666, 266), (0.16666666666666666, 275), (0.16666666666666666, 276), (0.16666666666666666, 278), (0.16666666666666666, 280), (0.16666666666666666, 281), (0.16666666666666666, 285), (0.16666666666666666, 305), (0.16666666666666666, 310), (0.16666666666666666, 318), (0.16666666666666666, 322), (0.16666666666666666, 326), (0.16666666666666666, 327), (0.16666666666666666, 349), (0.16666666666666666, 365), (0.16666666666666666, 369), (0.16666666666666666, 370), (0.16666666666666666, 371), (0.16666666666666666, 376), (0.16666666666666666, 383), (0.16666666666666666, 389), (0.16666666666666666, 399), (0.125, 2), (0.125, 7), (0.125, 8), (0.125, 9), (0.125, 11), (0.125, 14), (0.125, 16), (0.125, 17), (0.125, 22), (0.125, 23), (0.125, 25), (0.125, 28), (0.125, 29), (0.125, 30), (0.125, 31), (0.125, 32), (0.125, 34), (0.125, 37), (0.125, 40), (0.125, 42), (0.125, 50), (0.125, 53), (0.125, 55), (0.125, 58), (0.125, 60), (0.125, 61), (0.125, 62), (0.125, 64), (0.125, 65), (0.125, 68), (0.125, 71), (0.125, 73), (0.125, 77), (0.125, 83), (0.125, 84), (0.125, 85), (0.125, 86), (0.125, 88), (0.125, 89), (0.125, 91), (0.125, 97), (0.125, 103), (0.125, 106), (0.125, 109), (0.125, 112), (0.125, 117), (0.125, 119), (0.125, 121), (0.125, 122), (0.125, 124), (0.125, 127), (0.125, 128), (0.125, 129), (0.125, 130), (0.125, 131), (0.125, 132), (0.125, 136), (0.125, 139), (0.125, 140), (0.125, 141), (0.125, 142), (0.125, 143), (0.125, 155), (0.125, 156), (0.125, 157), (0.125, 161), (0.125, 164), (0.125, 167), (0.125, 171), (0.125, 172), (0.125, 175), (0.125, 176), (0.125, 178), (0.125, 181), (0.125, 182), (0.125, 183), (0.125, 184), (0.125, 188), (0.125, 190), (0.125, 191), (0.125, 192), (0.125, 193), (0.125, 194), (0.125, 198), (0.125, 199), (0.125, 205), (0.125, 208), (0.125, 213), (0.125, 215), (0.125, 218), (0.125, 219), (0.125, 220), (0.125, 224), (0.125, 227), (0.125, 232), (0.125, 234), (0.125, 235), (0.125, 236), (0.125, 238), (0.125, 239), (0.125, 242), (0.125, 243), (0.125, 244), (0.125, 246), (0.125, 250), (0.125, 251), (0.125, 252), (0.125, 253), (0.125, 254), (0.125, 256), (0.125, 261), (0.125, 263), (0.125, 267), (0.125, 284), (0.125, 287), (0.125, 288), (0.125, 289), (0.125, 290), (0.125, 292), (0.125, 295), (0.125, 297), (0.125, 298), (0.125, 306), (0.125, 308), (0.125, 309), (0.125, 311), (0.125, 315), (0.125, 317), (0.125, 320), (0.125, 321), (0.125, 324), (0.125, 325), (0.125, 329), (0.125, 331), (0.125, 333), (0.125, 335), (0.125, 336), (0.125, 337), (0.125, 338), (0.125, 341), (0.125, 343), (0.125, 344), (0.125, 346), (0.125, 350), (0.125, 352), (0.125, 353), (0.125, 355), (0.125, 356), (0.125, 357), (0.125, 359), (0.125, 366), (0.125, 372), (0.125, 375), (0.125, 379), (0.125, 380), (0.125, 384), (0.125, 386), (0.125, 388), (0.125, 390), (0.125, 398), (0.05555555555555555, 101), (0.05555555555555555, 173)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y (+ y 2))) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* y (+ (* y y) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* y 2) (+ 2 2))))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.375, 93), (1.25, 401), (1.25, 149), (1.25, 229), (1.25, 403), (1.125, 96), (1.125, 104), (1.125, 123), (1.125, 404), (1.0, 231), (1.0, 163), (1.0, 313), (1.0, 409), (1.0, 351), (1.0, 153), (1.0, 408), (1.0, 217), (1.0, 1), (0.75, 410), (0.75, 262), (0.75, 107), (0.75, 180), (0.75, 148), (0.75, 414), (0.625, 272), (0.625, 362), (0.625, 378), (0.625, 416), (0.625, 160), (0.625, 428), (0.625, 425), (0.625, 382), (0.625, 283), (0.625, 230), (0.625, 260), (0.5, 392), (0.5, 299), (0.5, 82), (0.5, 424), (0.5, 421), (0.5, 304), (0.5, 426), (0.5, 423), (0.5, 364), (0.5, 418), (0.5, 43), (0.5, 169), (0.5, 339), (0.5, 422), (0.5, 209), (0.5, 189), (0.5, 211), (0.5, 433), (0.5, 474), (0.5, 26), (0.5, 19), (0.5, 354), (0.5, 225), (0.5, 340), (0.5, 90), (0.5, 67), (0.5, 314), (0.5, 307), (0.5, 20), (0.5, 358), (0.5, 279), (0.41666666666666663, 0), (0.41666666666666663, 44), (0.41666666666666663, 406), (0.41666666666666663, 54), (0.41666666666666663, 115), (0.41666666666666663, 27), (0.41666666666666663, 51), (0.41666666666666663, 118), (0.41666666666666663, 436), (0.41666666666666663, 38), (0.41666666666666663, 265), (0.41666666666666663, 99), (0.41666666666666663, 444), (0.41666666666666663, 367), (0.41666666666666663, 435), (0.41666666666666663, 437), (0.41666666666666663, 294), (0.41666666666666663, 237), (0.41666666666666663, 397), (0.41666666666666663, 395), (0.41666666666666663, 150), (0.41666666666666663, 463), (0.41666666666666663, 323), (0.41666666666666663, 442), (0.41666666666666663, 438), (0.375, 195), (0.375, 296), (0.375, 273), (0.375, 332), (0.375, 445), (0.375, 154), (0.375, 293), (0.375, 59), (0.375, 450), (0.375, 447), (0.375, 449), (0.375, 412), (0.375, 258), (0.375, 448), (0.375, 446), (0.375, 247), (0.375, 186), (0.375, 10), (0.375, 303), (0.375, 135), (0.35, 347), (0.35, 249), (0.29166666666666663, 342), (0.29166666666666663, 100), (0.25, 113), (0.25, 158), (0.25, 484), (0.25, 385), (0.25, 360), (0.25, 368), (0.25, 460), (0.25, 374), (0.25, 165), (0.25, 207), (0.25, 268), (0.25, 477), (0.25, 459), (0.25, 145), (0.25, 174), (0.25, 70), (0.25, 465), (0.25, 361), (0.25, 98), (0.25, 328), (0.25, 46), (0.25, 381), (0.25, 363), (0.25, 125), (0.25, 133), (0.25, 222), (0.25, 102), (0.25, 496), (0.25, 79), (0.25, 52), (0.25, 485), (0.25, 419), (0.25, 282), (0.25, 116), (0.25, 126), (0.25, 493), (0.25, 476), (0.25, 429), (0.25, 221), (0.25, 257), (0.25, 271), (0.25, 240), (0.25, 152), (0.25, 216), (0.25, 316), (0.25, 233), (0.25, 345), (0.25, 248), (0.25, 137), (0.25, 120), (0.25, 498), (0.25, 330), (0.25, 312), (0.25, 204), (0.25, 377), (0.25, 3), (0.25, 57), (0.25, 393), (0.25, 47), (0.25, 197), (0.25, 270), (0.25, 203), (0.25, 481), (0.25, 78), (0.25, 274), (0.25, 277), (0.25, 210), (0.25, 18), (0.25, 228), (0.25, 373), (0.25, 491), (0.25, 39), (0.25, 319), (0.25, 269), (0.25, 475), (0.25, 469), (0.25, 483), (0.25, 480), (0.25, 457), (0.25, 69), (0.25, 431), (0.25, 471), (0.25, 472), (0.25, 170), (0.25, 302), (0.25, 185), (0.25, 201), (0.25, 95), (0.25, 49), (0.25, 300), (0.25, 259), (0.25, 348), (0.25, 162), (0.25, 108), (0.25, 470), (0.25, 301), (0.25, 21), (0.25, 334), (0.25, 35), (0.25, 394), (0.25, 499), (0.25, 487), (0.25, 387), (0.25, 105), (0.25, 223), (0.25, 494), (0.25, 454), (0.25, 501), (0.25, 490), (0.25, 495), (0.25, 489), (0.25, 202), (0.25, 6), (0.25, 466), (0.25, 430), (0.25, 417), (0.25, 468), (0.25, 56), (0.25, 455), (0.25, 461), (0.25, 159), (0.25, 391), (0.25, 245), (0.25, 4), (0.25, 286), (0.25, 63), (0.25, 478), (0.25, 187), (0.25, 15), (0.25, 255), (0.25, 396), (0.19642857142857142, 291), (0.16666666666666666, 281), (0.16666666666666666, 80), (0.16666666666666666, 214), (0.16666666666666666, 371), (0.16666666666666666, 45), (0.16666666666666666, 75), (0.16666666666666666, 349), (0.16666666666666666, 266), (0.16666666666666666, 206), (0.16666666666666666, 72), (0.16666666666666666, 94), (0.16666666666666666, 92), (0.16666666666666666, 134), (0.16666666666666666, 439), (0.16666666666666666, 264), (0.16666666666666666, 310), (0.16666666666666666, 5), (0.16666666666666666, 110), (0.16666666666666666, 285), (0.16666666666666666, 196), (0.16666666666666666, 33), (0.16666666666666666, 241), (0.16666666666666666, 66), (0.16666666666666666, 151), (0.16666666666666666, 453), (0.16666666666666666, 138), (0.16666666666666666, 441), (0.16666666666666666, 147), (0.16666666666666666, 166), (0.16666666666666666, 36), (0.16666666666666666, 370), (0.16666666666666666, 146), (0.16666666666666666, 383), (0.16666666666666666, 24), (0.16666666666666666, 275), (0.16666666666666666, 177), (0.16666666666666666, 376), (0.16666666666666666, 114), (0.16666666666666666, 12), (0.16666666666666666, 87), (0.16666666666666666, 200), (0.16666666666666666, 389), (0.16666666666666666, 327), (0.16666666666666666, 276), (0.16666666666666666, 81), (0.16666666666666666, 76), (0.16666666666666666, 318), (0.16666666666666666, 179), (0.16666666666666666, 41), (0.16666666666666666, 280), (0.16666666666666666, 369), (0.16666666666666666, 144), (0.16666666666666666, 13), (0.16666666666666666, 326), (0.16666666666666666, 111), (0.16666666666666666, 399), (0.16666666666666666, 278), (0.16666666666666666, 322), (0.16666666666666666, 226), (0.16666666666666666, 365), (0.16666666666666666, 74), (0.16666666666666666, 305), (0.16666666666666666, 48), (0.16666666666666666, 168), (0.16666666666666666, 212), (0.125, 128), (0.125, 136), (0.125, 37), (0.125, 32), (0.125, 178), (0.125, 191), (0.125, 175), (0.125, 155), (0.125, 68), (0.125, 130), (0.125, 16), (0.125, 199), (0.125, 40), (0.125, 183), (0.125, 131), (0.125, 17), (0.125, 181), (0.125, 143), (0.125, 86), (0.125, 184), (0.125, 64), (0.125, 106), (0.125, 119), (0.125, 34), (0.125, 190), (0.125, 11), (0.125, 58), (0.125, 77), (0.125, 192), (0.125, 198), (0.125, 161), (0.125, 62), (0.125, 172), (0.125, 30), (0.125, 122), (0.125, 14), (0.125, 121), (0.125, 31), (0.125, 171), (0.125, 71), (0.125, 124), (0.125, 164), (0.125, 42), (0.125, 89), (0.125, 23), (0.125, 29), (0.125, 157), (0.125, 208), (0.125, 88), (0.125, 61), (0.125, 142), (0.125, 129), (0.125, 194), (0.125, 2), (0.125, 65), (0.125, 112), (0.125, 188), (0.125, 97), (0.125, 127), (0.125, 28), (0.125, 53), (0.125, 193), (0.125, 25), (0.125, 55), (0.125, 91), (0.125, 205), (0.125, 156), (0.125, 84), (0.125, 9), (0.125, 141), (0.125, 50), (0.125, 176), (0.125, 103), (0.125, 85), (0.125, 8), (0.125, 182), (0.125, 139), (0.125, 60), (0.125, 22), (0.125, 140), (0.125, 83), (0.125, 132), (0.125, 7), (0.125, 109), (0.125, 117), (0.125, 167), (0.125, 73), (0.07142857142857142, 452)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y (+ y 2))) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 403
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y (+ y 2))) 2))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 515), (1.375, 93), (1.25, 149), (1.25, 229), (1.25, 502), (1.25, 401), (1.25, 403), (1.125, 123), (1.125, 509), (1.125, 505), (1.125, 404), (1.125, 96), (1.125, 547), (1.125, 104), (1.125, 506), (1.0, 507), (1.0, 153), (1.0, 1), (1.0, 549), (1.0, 535), (1.0, 504), (1.0, 351), (1.0, 231), (1.0, 409), (1.0, 163), (1.0, 408), (1.0, 217), (1.0, 313), (0.75, 534), (0.75, 529), (0.75, 410), (0.75, 262), (0.75, 148), (0.75, 180), (0.75, 107), (0.75, 414), (0.625, 230), (0.625, 528), (0.625, 378), (0.625, 272), (0.625, 428), (0.625, 382), (0.625, 283), (0.625, 362), (0.625, 533), (0.625, 425), (0.625, 512), (0.625, 568), (0.625, 416), (0.625, 260), (0.625, 160), (0.625, 519), (0.625, 520), (0.5, 299), (0.5, 474), (0.5, 43), (0.5, 189), (0.5, 82), (0.5, 20), (0.5, 169), (0.5, 422), (0.5, 314), (0.5, 364), (0.5, 508), (0.5, 339), (0.5, 527), (0.5, 90), (0.5, 424), (0.5, 536), (0.5, 564), (0.5, 423), (0.5, 211), (0.5, 354), (0.5, 225), (0.5, 279), (0.5, 516), (0.5, 524), (0.5, 307), (0.5, 426), (0.5, 418), (0.5, 525), (0.5, 304), (0.5, 340), (0.5, 532), (0.5, 392), (0.5, 433), (0.5, 19), (0.5, 510), (0.5, 421), (0.5, 26), (0.5, 67), (0.5, 209), (0.5, 555), (0.5, 517), (0.5, 358), (0.41666666666666663, 395), (0.41666666666666663, 323), (0.41666666666666663, 463), (0.41666666666666663, 294), (0.41666666666666663, 545), (0.41666666666666663, 436), (0.41666666666666663, 437), (0.41666666666666663, 44), (0.41666666666666663, 265), (0.41666666666666663, 556), (0.41666666666666663, 51), (0.41666666666666663, 150), (0.41666666666666663, 560), (0.41666666666666663, 442), (0.41666666666666663, 552), (0.41666666666666663, 54), (0.41666666666666663, 27), (0.41666666666666663, 435), (0.41666666666666663, 237), (0.41666666666666663, 118), (0.41666666666666663, 551), (0.41666666666666663, 438), (0.41666666666666663, 554), (0.41666666666666663, 367), (0.41666666666666663, 406), (0.41666666666666663, 38), (0.41666666666666663, 397), (0.41666666666666663, 565), (0.41666666666666663, 558), (0.41666666666666663, 99), (0.41666666666666663, 444), (0.41666666666666663, 115), (0.41666666666666663, 0), (0.375, 412), (0.375, 570), (0.375, 567), (0.375, 445), (0.375, 447), (0.375, 521), (0.375, 448), (0.375, 572), (0.375, 450), (0.375, 575), (0.375, 296), (0.375, 10), (0.375, 186), (0.375, 135), (0.375, 154), (0.375, 446), (0.375, 258), (0.375, 247), (0.375, 303), (0.375, 59), (0.375, 195), (0.375, 273), (0.375, 293), (0.375, 332), (0.375, 449), (0.35, 347), (0.35, 249), (0.29166666666666663, 100), (0.29166666666666663, 342), (0.25, 277), (0.25, 102), (0.25, 430), (0.25, 588), (0.25, 125), (0.25, 373), (0.25, 493), (0.25, 498), (0.25, 602), (0.25, 257), (0.25, 483), (0.25, 584), (0.25, 587), (0.25, 590), (0.25, 368), (0.25, 269), (0.25, 330), (0.25, 393), (0.25, 601), (0.25, 489), (0.25, 15), (0.25, 454), (0.25, 345), (0.25, 255), (0.25, 145), (0.25, 461), (0.25, 470), (0.25, 394), (0.25, 63), (0.25, 566), (0.25, 116), (0.25, 286), (0.25, 137), (0.25, 478), (0.25, 431), (0.25, 490), (0.25, 158), (0.25, 457), (0.25, 468), (0.25, 472), (0.25, 245), (0.25, 3), (0.25, 210), (0.25, 108), (0.25, 18), (0.25, 223), (0.25, 374), (0.25, 589), (0.25, 360), (0.25, 496), (0.25, 485), (0.25, 596), (0.25, 105), (0.25, 477), (0.25, 501), (0.25, 495), (0.25, 47), (0.25, 271), (0.25, 579), (0.25, 259), (0.25, 465), (0.25, 268), (0.25, 491), (0.25, 387), (0.25, 79), (0.25, 197), (0.25, 282), (0.25, 248), (0.25, 574), (0.25, 300), (0.25, 185), (0.25, 49), (0.25, 69), (0.25, 586), (0.25, 95), (0.25, 70), (0.25, 4), (0.25, 52), (0.25, 530), (0.25, 174), (0.25, 228), (0.25, 233), (0.25, 165), (0.25, 348), (0.25, 78), (0.25, 98), (0.25, 204), (0.25, 580), (0.25, 162), (0.25, 475), (0.25, 328), (0.25, 133), (0.25, 274), (0.25, 203), (0.25, 39), (0.25, 56), (0.25, 460), (0.25, 381), (0.25, 598), (0.25, 57), (0.25, 466), (0.25, 113), (0.25, 202), (0.25, 471), (0.25, 201), (0.25, 481), (0.25, 455), (0.25, 126), (0.25, 302), (0.25, 487), (0.25, 46), (0.25, 385), (0.25, 582), (0.25, 35), (0.25, 459), (0.25, 417), (0.25, 480), (0.25, 312), (0.25, 419), (0.25, 221), (0.25, 526), (0.25, 469), (0.25, 476), (0.25, 484), (0.25, 377), (0.25, 577), (0.25, 6), (0.25, 334), (0.25, 597), (0.25, 170), (0.25, 240), (0.25, 319), (0.25, 222), (0.25, 494), (0.25, 363), (0.25, 391), (0.25, 429), (0.25, 270), (0.25, 159), (0.25, 592), (0.25, 216), (0.25, 361), (0.25, 120), (0.25, 207), (0.25, 152), (0.25, 499), (0.25, 301), (0.25, 599), (0.25, 396), (0.25, 187), (0.25, 316), (0.25, 21), (0.25, 540), (0.19642857142857142, 291), (0.16666666666666666, 5), (0.16666666666666666, 13), (0.16666666666666666, 281), (0.16666666666666666, 371), (0.16666666666666666, 166), (0.16666666666666666, 305), (0.16666666666666666, 36), (0.16666666666666666, 151), (0.16666666666666666, 12), (0.16666666666666666, 75), (0.16666666666666666, 87), (0.16666666666666666, 179), (0.16666666666666666, 326), (0.16666666666666666, 548), (0.16666666666666666, 33), (0.16666666666666666, 389), (0.16666666666666666, 594), (0.16666666666666666, 538), (0.16666666666666666, 24), (0.16666666666666666, 45), (0.16666666666666666, 206), (0.16666666666666666, 278), (0.16666666666666666, 80), (0.16666666666666666, 214), (0.16666666666666666, 285), (0.16666666666666666, 523), (0.16666666666666666, 110), (0.16666666666666666, 439), (0.16666666666666666, 376), (0.16666666666666666, 94), (0.16666666666666666, 92), (0.16666666666666666, 48), (0.16666666666666666, 241), (0.16666666666666666, 134), (0.16666666666666666, 41), (0.16666666666666666, 196), (0.16666666666666666, 322), (0.16666666666666666, 370), (0.16666666666666666, 569), (0.16666666666666666, 212), (0.16666666666666666, 72), (0.16666666666666666, 177), (0.16666666666666666, 318), (0.16666666666666666, 81), (0.16666666666666666, 266), (0.16666666666666666, 543), (0.16666666666666666, 138), (0.16666666666666666, 144), (0.16666666666666666, 146), (0.16666666666666666, 513), (0.16666666666666666, 114), (0.16666666666666666, 561), (0.16666666666666666, 542), (0.16666666666666666, 264), (0.16666666666666666, 453), (0.16666666666666666, 399), (0.16666666666666666, 147), (0.16666666666666666, 168), (0.16666666666666666, 66), (0.16666666666666666, 280), (0.16666666666666666, 275), (0.16666666666666666, 74), (0.16666666666666666, 310), (0.16666666666666666, 369), (0.16666666666666666, 76), (0.16666666666666666, 365), (0.16666666666666666, 349), (0.16666666666666666, 327), (0.16666666666666666, 200), (0.16666666666666666, 383), (0.16666666666666666, 226), (0.16666666666666666, 441), (0.16666666666666666, 111), (0.16666666666666666, 562), (0.16666666666666666, 276), (0.125, 191), (0.125, 130), (0.125, 136), (0.125, 155), (0.125, 178), (0.125, 175), (0.125, 199), (0.125, 16), (0.125, 37), (0.125, 128), (0.125, 40), (0.125, 68), (0.125, 32), (0.1, 576)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y (+ y 2))) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 502
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 515), (1.375, 93), (1.375, 684), (1.375, 661), (1.25, 401), (1.25, 149), (1.25, 403), (1.25, 502), (1.25, 607), (1.25, 229), (1.125, 96), (1.125, 611), (1.125, 404), (1.125, 547), (1.125, 506), (1.125, 612), (1.125, 629), (1.125, 509), (1.125, 644), (1.125, 123), (1.125, 104), (1.125, 505), (1.125, 609), (1.0, 504), (1.0, 643), (1.0, 163), (1.0, 689), (1.0, 1), (1.0, 659), (1.0, 153), (1.0, 231), (1.0, 615), (1.0, 313), (1.0, 677), (1.0, 549), (1.0, 605), (1.0, 409), (1.0, 408), (1.0, 351), (1.0, 617), (1.0, 217), (1.0, 507), (1.0, 616), (1.0, 535), (1.0, 663), (0.875, 603), (0.875, 637), (0.75, 262), (0.75, 608), (0.75, 107), (0.75, 529), (0.75, 648), (0.75, 534), (0.75, 180), (0.75, 148), (0.75, 410), (0.75, 626), (0.75, 628), (0.75, 414), (0.625, 272), (0.625, 425), (0.625, 416), (0.625, 378), (0.625, 533), (0.625, 568), (0.625, 520), (0.625, 682), (0.625, 382), (0.625, 512), (0.625, 519), (0.625, 260), (0.625, 428), (0.625, 160), (0.625, 528), (0.625, 631), (0.625, 647), (0.625, 283), (0.625, 230), (0.625, 362), (0.5, 645), (0.5, 364), (0.5, 634), (0.5, 20), (0.5, 510), (0.5, 525), (0.5, 524), (0.5, 279), (0.5, 211), (0.5, 536), (0.5, 354), (0.5, 314), (0.5, 67), (0.5, 307), (0.5, 649), (0.5, 508), (0.5, 209), (0.5, 339), (0.5, 392), (0.5, 169), (0.5, 418), (0.5, 517), (0.5, 635), (0.5, 225), (0.5, 532), (0.5, 304), (0.5, 555), (0.5, 340), (0.5, 19), (0.5, 662), (0.5, 654), (0.5, 668), (0.5, 474), (0.5, 652), (0.5, 527), (0.5, 630), (0.5, 516), (0.5, 638), (0.5, 422), (0.5, 423), (0.5, 655), (0.5, 43), (0.5, 358), (0.5, 564), (0.5, 189), (0.5, 426), (0.5, 299), (0.5, 658), (0.5, 424), (0.5, 421), (0.5, 90), (0.5, 26), (0.5, 641), (0.5, 82), (0.5, 433), (0.41666666666666663, 665), (0.41666666666666663, 680), (0.41666666666666663, 558), (0.41666666666666663, 545), (0.41666666666666663, 565), (0.41666666666666663, 237), (0.41666666666666663, 556), (0.41666666666666663, 551), (0.41666666666666663, 552), (0.41666666666666663, 560), (0.41666666666666663, 651), (0.41666666666666663, 265), (0.41666666666666663, 669), (0.41666666666666663, 436), (0.41666666666666663, 323), (0.41666666666666663, 27), (0.41666666666666663, 115), (0.41666666666666663, 674), (0.41666666666666663, 463), (0.41666666666666663, 0), (0.41666666666666663, 554), (0.41666666666666663, 99), (0.41666666666666663, 681), (0.41666666666666663, 444), (0.41666666666666663, 678), (0.41666666666666663, 442), (0.41666666666666663, 406), (0.41666666666666663, 395), (0.41666666666666663, 54), (0.41666666666666663, 44), (0.41666666666666663, 397), (0.41666666666666663, 435), (0.41666666666666663, 437), (0.41666666666666663, 38), (0.41666666666666663, 51), (0.41666666666666663, 294), (0.41666666666666663, 664), (0.41666666666666663, 675), (0.41666666666666663, 438), (0.41666666666666663, 118), (0.41666666666666663, 671), (0.41666666666666663, 673), (0.41666666666666663, 367), (0.41666666666666663, 150), (0.375, 567), (0.375, 683), (0.375, 296), (0.375, 447), (0.375, 273), (0.375, 679), (0.375, 572), (0.375, 446), (0.375, 445), (0.375, 450), (0.375, 693), (0.375, 521), (0.375, 10), (0.375, 412), (0.375, 332), (0.375, 135), (0.375, 690), (0.375, 686), (0.375, 195), (0.375, 258), (0.375, 627), (0.375, 685), (0.375, 449), (0.375, 691), (0.375, 154), (0.375, 448), (0.375, 186), (0.375, 610), (0.375, 575), (0.375, 293), (0.375, 636), (0.375, 247), (0.375, 59), (0.375, 303), (0.375, 619), (0.375, 570), (0.35, 347), (0.35, 249), (0.29166666666666663, 342), (0.29166666666666663, 100), (0.25, 639), (0.25, 454), (0.25, 328), (0.25, 480), (0.25, 185), (0.25, 471), (0.25, 393), (0.25, 481), (0.25, 419), (0.25, 316), (0.25, 255), (0.25, 396), (0.25, 257), (0.25, 374), (0.25, 493), (0.25, 566), (0.25, 597), (0.25, 582), (0.25, 145), (0.25, 596), (0.25, 330), (0.25, 18), (0.25, 269), (0.25, 203), (0.25, 592), (0.25, 598), (0.25, 274), (0.25, 599), (0.25, 621), (0.25, 56), (0.25, 39), (0.25, 334), (0.25, 113), (0.25, 21), (0.25, 57), (0.25, 300), (0.25, 162), (0.25, 602), (0.25, 466), (0.25, 373), (0.25, 270), (0.25, 152), (0.25, 485), (0.25, 487), (0.25, 159), (0.25, 468), (0.25, 494), (0.25, 312), (0.25, 574), (0.25, 240), (0.25, 49), (0.25, 391), (0.25, 368), (0.25, 271), (0.25, 174), (0.25, 498), (0.25, 126), (0.25, 319), (0.25, 469), (0.25, 540), (0.25, 286), (0.25, 461), (0.25, 430), (0.25, 47), (0.25, 197), (0.25, 282), (0.25, 345), (0.25, 216), (0.25, 207), (0.25, 363), (0.25, 590), (0.25, 201), (0.25, 499), (0.25, 360), (0.25, 15), (0.25, 204), (0.25, 530), (0.25, 692), (0.25, 6), (0.25, 385), (0.25, 476), (0.25, 584), (0.25, 348), (0.25, 614), (0.25, 470), (0.25, 95), (0.25, 580), (0.25, 98), (0.25, 496), (0.25, 489), (0.25, 3), (0.25, 377), (0.25, 632), (0.25, 465), (0.25, 459), (0.25, 228), (0.25, 478), (0.25, 387), (0.25, 455), (0.25, 78), (0.25, 477), (0.25, 483), (0.25, 579), (0.25, 165), (0.25, 472), (0.25, 46), (0.25, 302), (0.25, 116), (0.25, 259), (0.25, 202), (0.25, 4), (0.25, 105), (0.25, 589), (0.25, 381), (0.25, 460), (0.25, 495), (0.25, 577), (0.25, 102), (0.25, 484), (0.25, 69), (0.25, 491), (0.25, 301), (0.25, 431), (0.25, 394), (0.25, 526), (0.25, 221), (0.25, 108), (0.25, 361), (0.25, 187), (0.25, 210), (0.25, 120), (0.25, 170), (0.25, 233), (0.25, 277), (0.25, 268), (0.25, 79), (0.25, 245), (0.25, 52), (0.25, 457), (0.25, 587), (0.25, 588), (0.25, 248), (0.25, 70), (0.25, 35), (0.25, 586), (0.25, 501), (0.25, 222), (0.25, 475), (0.25, 158), (0.25, 137), (0.25, 223), (0.25, 133), (0.25, 601), (0.25, 63), (0.25, 429), (0.25, 125), (0.25, 417), (0.25, 490), (0.19642857142857142, 291), (0.16666666666666666, 656), (0.16666666666666666, 622), (0.16666666666666666, 305), (0.16666666666666666, 624), (0.16666666666666666, 670), (0.16666666666666666, 548), (0.16666666666666666, 166), (0.16666666666666666, 75), (0.16666666666666666, 613), (0.16666666666666666, 653), (0.16666666666666666, 151), (0.16666666666666666, 371), (0.16666666666666666, 13), (0.16666666666666666, 326), (0.16666666666666666, 36), (0.16666666666666666, 5), (0.16666666666666666, 687), (0.16666666666666666, 12), (0.16666666666666666, 666), (0.16666666666666666, 87), (0.16666666666666666, 281), (0.16666666666666666, 179), (0.08333333333333333, 650)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
(CANDIDATE)[id: 684
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 (* (+ x x) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 661
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ (+ 2 x) x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y (+ 2 x)) y) 2))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 728), (1.5, 730), (1.5, 515), (1.5, 741), (1.375, 93), (1.375, 695), (1.375, 661), (1.375, 684), (1.25, 403), (1.25, 696), (1.25, 401), (1.25, 699), (1.25, 607), (1.25, 719), (1.25, 149), (1.25, 502), (1.25, 229), (1.125, 609), (1.125, 96), (1.125, 404), (1.125, 644), (1.125, 629), (1.125, 547), (1.125, 123), (1.125, 611), (1.125, 505), (1.125, 706), (1.125, 704), (1.125, 104), (1.125, 509), (1.125, 612), (1.125, 703), (1.125, 506), (1.0, 698), (1.0, 313), (1.0, 549), (1.0, 715), (1.0, 504), (1.0, 605), (1.0, 535), (1.0, 689), (1.0, 659), (1.0, 663), (1.0, 1), (1.0, 615), (1.0, 616), (1.0, 408), (1.0, 717), (1.0, 677), (1.0, 409), (1.0, 746), (1.0, 617), (1.0, 718), (1.0, 747), (1.0, 163), (1.0, 217), (1.0, 507), (1.0, 153), (1.0, 643), (1.0, 351), (1.0, 231), (0.875, 637), (0.875, 603), (0.875, 772), (0.75, 529), (0.75, 414), (0.75, 107), (0.75, 648), (0.75, 694), (0.75, 702), (0.75, 410), (0.75, 732), (0.75, 701), (0.75, 180), (0.75, 628), (0.75, 608), (0.75, 744), (0.75, 724), (0.75, 262), (0.75, 626), (0.75, 534), (0.75, 148), (0.625, 160), (0.625, 378), (0.625, 428), (0.625, 272), (0.625, 512), (0.625, 416), (0.625, 647), (0.625, 745), (0.625, 735), (0.625, 722), (0.625, 230), (0.625, 382), (0.625, 520), (0.625, 720), (0.625, 533), (0.625, 631), (0.625, 736), (0.625, 425), (0.625, 283), (0.625, 260), (0.625, 528), (0.625, 755), (0.625, 781), (0.625, 682), (0.625, 519), (0.625, 362), (0.625, 568), (0.5, 759), (0.5, 525), (0.5, 777), (0.5, 748), (0.5, 43), (0.5, 392), (0.5, 422), (0.5, 19), (0.5, 536), (0.5, 421), (0.5, 638), (0.5, 527), (0.5, 780), (0.5, 26), (0.5, 763), (0.5, 711), (0.5, 752), (0.5, 754), (0.5, 635), (0.5, 662), (0.5, 426), (0.5, 225), (0.5, 423), (0.5, 630), (0.5, 779), (0.5, 555), (0.5, 768), (0.5, 634), (0.5, 654), (0.5, 773), (0.5, 517), (0.5, 67), (0.5, 564), (0.5, 658), (0.5, 641), (0.5, 169), (0.5, 340), (0.5, 474), (0.5, 90), (0.5, 189), (0.5, 307), (0.5, 354), (0.5, 20), (0.5, 708), (0.5, 652), (0.5, 304), (0.5, 211), (0.5, 82), (0.5, 750), (0.5, 314), (0.5, 649), (0.5, 510), (0.5, 751), (0.5, 279), (0.5, 645), (0.5, 424), (0.5, 516), (0.5, 532), (0.5, 668), (0.5, 339), (0.5, 418), (0.5, 364), (0.5, 524), (0.5, 358), (0.5, 508), (0.5, 433), (0.5, 655), (0.5, 761), (0.5, 299), (0.5, 209), (0.41666666666666663, 793), (0.41666666666666663, 323), (0.41666666666666663, 27), (0.41666666666666663, 436), (0.41666666666666663, 669), (0.41666666666666663, 438), (0.41666666666666663, 118), (0.41666666666666663, 790), (0.41666666666666663, 44), (0.41666666666666663, 785), (0.41666666666666663, 54), (0.41666666666666663, 678), (0.41666666666666663, 38), (0.41666666666666663, 99), (0.41666666666666663, 671), (0.41666666666666663, 791), (0.41666666666666663, 444), (0.41666666666666663, 551), (0.41666666666666663, 664), (0.41666666666666663, 237), (0.41666666666666663, 556), (0.41666666666666663, 437), (0.41666666666666663, 788), (0.41666666666666663, 0), (0.41666666666666663, 651), (0.41666666666666663, 397), (0.41666666666666663, 665), (0.41666666666666663, 51), (0.41666666666666663, 565), (0.41666666666666663, 552), (0.41666666666666663, 674), (0.41666666666666663, 442), (0.41666666666666663, 115), (0.41666666666666663, 367), (0.41666666666666663, 558), (0.41666666666666663, 294), (0.41666666666666663, 560), (0.41666666666666663, 265), (0.41666666666666663, 709), (0.41666666666666663, 675), (0.41666666666666663, 406), (0.41666666666666663, 734), (0.41666666666666663, 545), (0.41666666666666663, 395), (0.41666666666666663, 554), (0.41666666666666663, 435), (0.41666666666666663, 673), (0.41666666666666663, 150), (0.41666666666666663, 680), (0.41666666666666663, 787), (0.41666666666666663, 681), (0.41666666666666663, 463), (0.375, 293), (0.375, 303), (0.375, 59), (0.375, 610), (0.375, 450), (0.375, 449), (0.375, 691), (0.375, 686), (0.375, 572), (0.375, 296), (0.375, 10), (0.375, 570), (0.375, 445), (0.375, 412), (0.375, 683), (0.375, 446), (0.375, 154), (0.375, 195), (0.375, 685), (0.375, 636), (0.375, 619), (0.375, 575), (0.375, 679), (0.375, 332), (0.375, 135), (0.375, 273), (0.375, 247), (0.375, 258), (0.375, 782), (0.375, 690), (0.375, 521), (0.375, 775), (0.375, 186), (0.375, 567), (0.375, 448), (0.375, 693), (0.375, 447), (0.375, 627), (0.375, 707), (0.35, 729), (0.35, 249), (0.35, 347), (0.29166666666666663, 100), (0.29166666666666663, 769), (0.29166666666666663, 342), (0.25, 203), (0.25, 328), (0.25, 15), (0.25, 98), (0.25, 57), (0.25, 185), (0.25, 727), (0.25, 705), (0.25, 574), (0.25, 240), (0.25, 159), (0.25, 602), (0.25, 270), (0.25, 165), (0.25, 598), (0.25, 46), (0.25, 348), (0.25, 126), (0.25, 480), (0.25, 374), (0.25, 614), (0.25, 56), (0.25, 216), (0.25, 271), (0.25, 393), (0.25, 391), (0.25, 579), (0.25, 255), (0.25, 373), (0.25, 21), (0.25, 476), (0.25, 461), (0.25, 113), (0.25, 483), (0.25, 269), (0.25, 39), (0.25, 766), (0.25, 465), (0.25, 319), (0.25, 454), (0.25, 726), (0.25, 145), (0.25, 387), (0.25, 770), (0.25, 360), (0.25, 3), (0.25, 228), (0.25, 466), (0.25, 487), (0.25, 478), (0.25, 201), (0.25, 737), (0.25, 493), (0.25, 377), (0.25, 596), (0.25, 582), (0.25, 47), (0.25, 489), (0.25, 469), (0.25, 530), (0.25, 477), (0.25, 419), (0.25, 580), (0.25, 49), (0.25, 368), (0.25, 498), (0.25, 459), (0.25, 597), (0.25, 471), (0.25, 300), (0.25, 540), (0.25, 18), (0.25, 621), (0.25, 496), (0.25, 330), (0.25, 485), (0.25, 396), (0.25, 599), (0.25, 632), (0.25, 499), (0.25, 162), (0.25, 274), (0.25, 286), (0.25, 481), (0.25, 494), (0.25, 468), (0.25, 78), (0.25, 345), (0.25, 207), (0.25, 334), (0.25, 204), (0.25, 455), (0.25, 584), (0.25, 302), (0.25, 316), (0.25, 282), (0.25, 197), (0.25, 312), (0.25, 590), (0.25, 692), (0.25, 472), (0.25, 739), (0.25, 639), (0.25, 174), (0.25, 152), (0.25, 95), (0.25, 6), (0.25, 592), (0.25, 385), (0.25, 566), (0.25, 430), (0.25, 470), (0.25, 363), (0.25, 713), (0.25, 257), (0.225, 757), (0.16666666666666666, 789), (0.16666666666666666, 753), (0.16666666666666666, 743), (0.16666666666666666, 765), (0.16666666666666666, 784), (0.16666666666666666, 749), (0.16666666666666666, 710), (0.1, 756)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 728
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 741), (1.5, 515), (1.5, 728), (1.5, 730), (1.375, 93), (1.375, 695), (1.375, 843), (1.375, 798), (1.375, 661), (1.375, 684), (1.25, 149), (1.25, 699), (1.25, 401), (1.25, 403), (1.25, 805), (1.25, 803), (1.25, 502), (1.25, 607), (1.25, 813), (1.25, 719), (1.25, 229), (1.25, 696), (1.25, 882), (1.125, 609), (1.125, 706), (1.125, 804), (1.125, 547), (1.125, 839), (1.125, 96), (1.125, 814), (1.125, 808), (1.125, 861), (1.125, 703), (1.125, 612), (1.125, 611), (1.125, 644), (1.125, 851), (1.125, 865), (1.125, 104), (1.125, 854), (1.125, 505), (1.125, 816), (1.125, 629), (1.125, 506), (1.125, 123), (1.125, 704), (1.125, 404), (1.125, 509), (1.0, 163), (1.0, 825), (1.0, 663), (1.0, 832), (1.0, 689), (1.0, 846), (1.0, 313), (1.0, 829), (1.0, 836), (1.0, 549), (1.0, 351), (1.0, 408), (1.0, 698), (1.0, 217), (1.0, 231), (1.0, 818), (1.0, 409), (1.0, 643), (1.0, 715), (1.0, 717), (1.0, 617), (1.0, 504), (1.0, 615), (1.0, 605), (1.0, 824), (1.0, 535), (1.0, 153), (1.0, 827), (1.0, 810), (1.0, 831), (1.0, 1), (1.0, 616), (1.0, 677), (1.0, 746), (1.0, 747), (1.0, 507), (1.0, 820), (1.0, 718), (1.0, 659), (0.875, 637), (0.875, 603), (0.875, 772), (0.75, 648), (0.75, 724), (0.75, 262), (0.75, 628), (0.75, 842), (0.75, 626), (0.75, 410), (0.75, 694), (0.75, 812), (0.75, 847), (0.75, 800), (0.75, 180), (0.75, 841), (0.75, 732), (0.75, 529), (0.75, 702), (0.75, 107), (0.75, 744), (0.75, 414), (0.75, 701), (0.75, 856), (0.75, 795), (0.75, 608), (0.75, 534), (0.75, 148), (0.625, 859), (0.625, 425), (0.625, 745), (0.625, 283), (0.625, 755), (0.625, 519), (0.625, 682), (0.625, 362), (0.625, 378), (0.625, 568), (0.625, 886), (0.625, 230), (0.625, 735), (0.625, 845), (0.625, 720), (0.625, 736), (0.625, 428), (0.625, 272), (0.625, 631), (0.625, 722), (0.625, 533), (0.625, 858), (0.625, 512), (0.625, 528), (0.625, 382), (0.625, 647), (0.625, 160), (0.625, 260), (0.625, 781), (0.625, 520), (0.625, 416), (0.5, 883), (0.5, 307), (0.5, 299), (0.5, 645), (0.5, 874), (0.5, 169), (0.5, 658), (0.5, 780), (0.5, 426), (0.5, 630), (0.5, 19), (0.5, 878), (0.5, 638), (0.5, 668), (0.5, 524), (0.5, 564), (0.5, 751), (0.5, 652), (0.5, 891), (0.5, 340), (0.5, 354), (0.5, 423), (0.5, 364), (0.5, 768), (0.5, 525), (0.5, 887), (0.5, 777), (0.5, 750), (0.5, 225), (0.5, 209), (0.5, 869), (0.5, 641), (0.5, 90), (0.5, 819), (0.5, 754), (0.5, 422), (0.5, 433), (0.5, 211), (0.5, 752), (0.5, 555), (0.5, 339), (0.5, 809), (0.5, 314), (0.5, 67), (0.5, 532), (0.5, 655), (0.5, 822), (0.5, 876), (0.5, 654), (0.5, 20), (0.5, 392), (0.5, 662), (0.5, 421), (0.5, 708), (0.5, 508), (0.5, 871), (0.5, 779), (0.5, 635), (0.5, 748), (0.5, 82), (0.5, 797), (0.5, 189), (0.5, 634), (0.5, 880), (0.5, 763), (0.5, 527), (0.5, 759), (0.5, 875), (0.5, 889), (0.5, 649), (0.5, 892), (0.5, 510), (0.5, 26), (0.5, 358), (0.5, 304), (0.5, 773), (0.5, 516), (0.5, 517), (0.5, 474), (0.5, 711), (0.5, 43), (0.5, 424), (0.5, 279), (0.5, 536), (0.5, 885), (0.5, 872), (0.5, 418), (0.5, 761), (0.41666666666666663, 681), (0.41666666666666663, 367), (0.41666666666666663, 556), (0.41666666666666663, 665), (0.41666666666666663, 785), (0.41666666666666663, 791), (0.41666666666666663, 709), (0.41666666666666663, 674), (0.41666666666666663, 294), (0.41666666666666663, 0), (0.41666666666666663, 436), (0.41666666666666663, 669), (0.41666666666666663, 560), (0.41666666666666663, 51), (0.41666666666666663, 444), (0.41666666666666663, 395), (0.41666666666666663, 118), (0.41666666666666663, 673), (0.41666666666666663, 671), (0.41666666666666663, 237), (0.41666666666666663, 554), (0.41666666666666663, 397), (0.41666666666666663, 323), (0.41666666666666663, 115), (0.41666666666666663, 438), (0.41666666666666663, 435), (0.41666666666666663, 150), (0.41666666666666663, 558), (0.41666666666666663, 793), (0.41666666666666663, 463), (0.41666666666666663, 664), (0.41666666666666663, 788), (0.41666666666666663, 437), (0.41666666666666663, 54), (0.41666666666666663, 552), (0.41666666666666663, 551), (0.41666666666666663, 790), (0.41666666666666663, 38), (0.41666666666666663, 651), (0.41666666666666663, 680), (0.41666666666666663, 565), (0.41666666666666663, 545), (0.41666666666666663, 44), (0.41666666666666663, 853), (0.41666666666666663, 678), (0.41666666666666663, 734), (0.41666666666666663, 787), (0.41666666666666663, 675), (0.41666666666666663, 99), (0.41666666666666663, 27), (0.41666666666666663, 406), (0.41666666666666663, 265), (0.41666666666666663, 821), (0.41666666666666663, 442), (0.375, 848), (0.375, 691), (0.375, 247), (0.375, 782), (0.375, 570), (0.375, 572), (0.375, 293), (0.375, 296), (0.375, 448), (0.375, 679), (0.375, 834), (0.375, 135), (0.375, 636), (0.375, 195), (0.375, 685), (0.375, 446), (0.375, 683), (0.375, 575), (0.375, 412), (0.375, 775), (0.375, 690), (0.375, 707), (0.375, 693), (0.375, 273), (0.375, 879), (0.375, 332), (0.375, 186), (0.375, 450), (0.375, 567), (0.375, 10), (0.375, 59), (0.375, 619), (0.375, 521), (0.375, 258), (0.375, 445), (0.375, 447), (0.375, 801), (0.375, 303), (0.375, 627), (0.375, 610), (0.375, 449), (0.375, 807), (0.375, 686), (0.375, 154), (0.35, 729), (0.35, 249), (0.35, 347), (0.29166666666666663, 100), (0.29166666666666663, 342), (0.29166666666666663, 840), (0.29166666666666663, 769), (0.25, 766), (0.25, 240), (0.25, 465), (0.25, 614), (0.25, 850), (0.25, 216), (0.25, 838), (0.25, 203), (0.25, 487), (0.25, 579), (0.25, 374), (0.25, 57), (0.25, 360), (0.25, 15), (0.25, 185), (0.25, 867), (0.25, 46), (0.25, 483), (0.25, 480), (0.25, 855), (0.25, 574), (0.25, 319), (0.25, 877), (0.25, 348), (0.25, 602), (0.25, 21), (0.25, 255), (0.25, 705), (0.25, 145), (0.25, 476), (0.25, 271), (0.25, 98), (0.25, 328), (0.25, 770), (0.25, 165), (0.25, 894), (0.25, 126), (0.25, 727), (0.25, 387), (0.25, 466), (0.25, 461), (0.25, 159), (0.25, 56), (0.25, 726), (0.25, 39), (0.25, 228), (0.25, 454), (0.25, 391), (0.25, 270), (0.25, 393), (0.25, 3), (0.25, 373), (0.25, 598), (0.25, 269), (0.25, 113), (0.16666666666666666, 870), (0.16666666666666666, 817), (0.16666666666666666, 873), (0.16666666666666666, 806), (0.16666666666666666, 863), (0.1, 884)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 728
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x (* (* y x) y))))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.5, 515), (1.5, 728), (1.5, 741), (1.5, 730), (1.5, 895), (1.5, 934), (1.5, 957), (1.375, 93), (1.375, 695), (1.375, 661), (1.375, 843), (1.375, 898), (1.375, 798), (1.375, 684), (1.25, 696), (1.25, 149), (1.25, 401), (1.25, 905), (1.25, 607), (1.25, 805), (1.25, 907), (1.25, 979), (1.25, 699), (1.25, 403), (1.25, 813), (1.25, 909), (1.25, 902), (1.25, 229), (1.25, 803), (1.25, 922), (1.25, 882), (1.25, 502), (1.25, 719), (1.25, 906), (1.125, 839), (1.125, 644), (1.125, 612), (1.125, 851), (1.125, 814), (1.125, 967), (1.125, 104), (1.125, 900), (1.125, 966), (1.125, 854), (1.125, 123), (1.125, 945), (1.125, 629), (1.125, 703), (1.125, 505), (1.125, 982), (1.125, 547), (1.125, 611), (1.125, 861), (1.125, 816), (1.125, 706), (1.125, 404), (1.125, 808), (1.125, 910), (1.125, 929), (1.125, 911), (1.125, 96), (1.125, 901), (1.125, 609), (1.125, 948), (1.125, 804), (1.125, 704), (1.125, 509), (1.125, 865), (1.125, 506), (1.0, 829), (1.0, 836), (1.0, 351), (1.0, 747), (1.0, 698), (1.0, 659), (1.0, 643), (1.0, 616), (1.0, 504), (1.0, 605), (1.0, 846), (1.0, 832), (1.0, 1), (1.0, 615), (1.0, 689), (1.0, 810), (1.0, 507), (1.0, 824), (1.0, 973), (1.0, 617), (1.0, 677), (1.0, 820), (1.0, 825), (1.0, 947), (1.0, 535), (1.0, 663), (1.0, 408), (1.0, 827), (1.0, 939), (1.0, 924), (1.0, 935), (1.0, 217), (1.0, 313), (1.0, 938), (1.0, 718), (1.0, 831), (1.0, 937), (1.0, 918), (1.0, 818), (1.0, 163), (1.0, 715), (1.0, 949), (1.0, 950), (1.0, 746), (1.0, 549), (1.0, 153), (1.0, 409), (1.0, 941), (1.0, 717), (1.0, 231), (0.875, 603), (0.875, 637), (0.875, 772), (0.875, 897), (0.75, 956), (0.75, 608), (0.75, 921), (0.75, 148), (0.75, 963), (0.75, 529), (0.75, 847), (0.75, 702), (0.75, 414), (0.75, 694), (0.75, 958), (0.75, 628), (0.75, 841), (0.75, 180), (0.75, 107), (0.75, 795), (0.75, 800), (0.75, 534), (0.75, 856), (0.75, 732), (0.75, 962), (0.75, 648), (0.75, 724), (0.75, 262), (0.75, 744), (0.75, 410), (0.75, 626), (0.75, 701), (0.75, 842), (0.75, 812), (0.625, 230), (0.625, 977), (0.625, 858), (0.625, 781), (0.625, 971), (0.625, 953), (0.625, 283), (0.625, 533), (0.625, 845), (0.625, 720), (0.625, 943), (0.625, 568), (0.625, 416), (0.625, 886), (0.625, 520), (0.625, 736), (0.625, 970), (0.625, 989), (0.625, 631), (0.625, 722), (0.625, 160), (0.625, 519), (0.625, 952), (0.625, 382), (0.625, 362), (0.625, 528), (0.625, 931), (0.625, 682), (0.625, 428), (0.625, 913), (0.625, 919), (0.625, 755), (0.625, 512), (0.625, 969), (0.625, 260), (0.625, 976), (0.625, 745), (0.625, 272), (0.625, 425), (0.625, 735), (0.625, 378), (0.625, 647), (0.625, 859), (0.5, 768), (0.5, 314), (0.5, 748), (0.5, 392), (0.5, 630), (0.5, 750), (0.5, 880), (0.5, 433), (0.5, 992), (0.5, 638), (0.5, 655), (0.5, 358), (0.5, 421), (0.5, 635), (0.5, 20), (0.5, 299), (0.5, 169), (0.5, 809), (0.5, 645), (0.5, 340), (0.5, 754), (0.5, 891), (0.5, 752), (0.5, 917), (0.5, 67), (0.5, 225), (0.5, 878), (0.5, 780), (0.5, 354), (0.5, 889), (0.5, 654), (0.5, 928), (0.5, 339), (0.5, 536), (0.5, 424), (0.5, 871), (0.5, 887), (0.5, 43), (0.5, 209), (0.5, 991), (0.5, 822), (0.5, 516), (0.5, 307), (0.5, 418), (0.5, 364), (0.5, 779), (0.5, 708), (0.5, 19), (0.5, 759), (0.5, 189), (0.5, 422), (0.5, 555), (0.5, 876), (0.5, 423), (0.5, 751), (0.5, 641), (0.5, 668), (0.5, 662), (0.5, 819), (0.5, 883), (0.5, 874), (0.5, 763), (0.5, 875), (0.5, 279), (0.5, 892), (0.5, 940), (0.5, 652), (0.5, 564), (0.5, 797), (0.5, 634), (0.5, 872), (0.5, 524), (0.5, 946), (0.5, 885), (0.5, 211), (0.5, 90), (0.5, 532), (0.5, 82), (0.5, 649), (0.5, 26), (0.5, 474), (0.5, 510), (0.5, 525), (0.5, 508), (0.5, 426), (0.5, 658), (0.5, 527), (0.5, 517), (0.5, 761), (0.5, 711), (0.5, 304), (0.5, 773), (0.5, 777), (0.5, 869), (0.41666666666666663, 680), (0.41666666666666663, 99), (0.41666666666666663, 294), (0.41666666666666663, 787), (0.41666666666666663, 790), (0.41666666666666663, 785), (0.41666666666666663, 150), (0.41666666666666663, 671), (0.41666666666666663, 367), (0.41666666666666663, 44), (0.41666666666666663, 665), (0.41666666666666663, 793), (0.41666666666666663, 265), (0.41666666666666663, 681), (0.41666666666666663, 791), (0.41666666666666663, 551), (0.41666666666666663, 853), (0.41666666666666663, 651), (0.41666666666666663, 734), (0.41666666666666663, 437), (0.41666666666666663, 323), (0.41666666666666663, 463), (0.41666666666666663, 673), (0.41666666666666663, 669), (0.41666666666666663, 237), (0.41666666666666663, 54), (0.41666666666666663, 442), (0.41666666666666663, 118), (0.41666666666666663, 560), (0.41666666666666663, 565), (0.41666666666666663, 27), (0.41666666666666663, 115), (0.41666666666666663, 552), (0.41666666666666663, 664), (0.41666666666666663, 435), (0.41666666666666663, 675), (0.41666666666666663, 395), (0.41666666666666663, 788), (0.41666666666666663, 554), (0.41666666666666663, 0), (0.41666666666666663, 556), (0.41666666666666663, 444), (0.41666666666666663, 558), (0.41666666666666663, 678), (0.41666666666666663, 821), (0.41666666666666663, 709), (0.41666666666666663, 436), (0.41666666666666663, 674), (0.41666666666666663, 438), (0.41666666666666663, 960), (0.41666666666666663, 406), (0.41666666666666663, 545), (0.41666666666666663, 397), (0.41666666666666663, 964), (0.41666666666666663, 51), (0.41666666666666663, 38), (0.375, 293), (0.375, 258), (0.375, 619), (0.375, 445), (0.375, 961), (0.375, 683), (0.375, 690), (0.375, 693), (0.375, 247), (0.375, 447), (0.375, 933), (0.375, 450), (0.375, 412), (0.375, 567), (0.375, 273), (0.375, 296), (0.375, 570), (0.375, 575), (0.375, 572), (0.375, 59), (0.375, 679), (0.375, 707), (0.375, 904), (0.375, 775), (0.375, 521), (0.375, 448), (0.375, 10), (0.375, 879), (0.375, 782), (0.375, 926), (0.375, 685), (0.375, 968), (0.375, 446), (0.375, 834), (0.375, 332), (0.375, 691), (0.375, 186), (0.375, 135), (0.375, 848), (0.375, 801), (0.375, 195), (0.375, 636), (0.29166666666666663, 985), (0.25, 955), (0.25, 927), (0.25, 980), (0.25, 983), (0.25, 988), (0.25, 942), (0.25, 975), (0.25, 915), (0.16666666666666666, 987), (0.16666666666666666, 912), (0.16666666666666666, 954)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 728
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.5, 730), (1.5, 515), (1.5, 934), (1.5, 741), (1.5, 1034), (1.5, 895), (1.5, 1075), (1.5, 957), (1.5, 728), (1.375, 1000), (1.375, 798), (1.375, 684), (1.375, 843), (1.375, 661), (1.375, 898), (1.375, 93), (1.375, 695), (1.25, 979), (1.25, 1068), (1.25, 719), (1.25, 1009), (1.25, 1010), (1.25, 803), (1.25, 882), (1.25, 813), (1.25, 401), (1.25, 607), (1.25, 229), (1.25, 922), (1.25, 902), (1.25, 805), (1.25, 1012), (1.25, 1004), (1.25, 1006), (1.25, 699), (1.25, 907), (1.25, 696), (1.25, 1013), (1.25, 502), (1.25, 403), (1.25, 909), (1.25, 905), (1.25, 149), (1.25, 906), (1.125, 865), (1.125, 1036), (1.125, 816), (1.125, 1014), (1.125, 808), (1.125, 851), (1.125, 911), (1.125, 948), (1.125, 703), (1.125, 104), (1.125, 861), (1.125, 910), (1.125, 982), (1.125, 804), (1.125, 839), (1.125, 1020), (1.125, 629), (1.125, 612), (1.125, 1030), (1.125, 706), (1.125, 404), (1.125, 644), (1.125, 1016), (1.125, 1019), (1.125, 506), (1.125, 1023), (1.125, 1026), (1.125, 704), (1.125, 967), (1.125, 901), (1.125, 505), (1.125, 547), (1.125, 123), (1.125, 814), (1.125, 854), (1.125, 966), (1.125, 611), (1.125, 509), (1.125, 929), (1.125, 96), (1.125, 1035), (1.125, 945), (1.125, 900), (1.125, 1047), (1.125, 609), (1.0, 1042), (1.0, 747), (1.0, 827), (1.0, 313), (1.0, 1043), (1.0, 820), (1.0, 643), (1.0, 163), (1.0, 677), (1.0, 939), (1.0, 718), (1.0, 1058), (1.0, 846), (1.0, 507), (1.0, 153), (1.0, 535), (1.0, 818), (1.0, 825), (1.0, 615), (1.0, 938), (1.0, 831), (1.0, 698), (1.0, 689), (1.0, 217), (1.0, 549), (1.0, 941), (1.0, 351), (1.0, 1060), (1.0, 1002), (1.0, 950), (1.0, 1038), (1.0, 829), (1.0, 810), (1.0, 998), (1.0, 1040), (1.0, 1067), (1.0, 408), (1.0, 231), (1.0, 918), (1.0, 1), (1.0, 717), (1.0, 715), (1.0, 1056), (1.0, 949), (1.0, 746), (1.0, 924), (1.0, 659), (1.0, 617), (1.0, 824), (1.0, 605), (1.0, 1062), (1.0, 836), (1.0, 973), (1.0, 935), (1.0, 663), (1.0, 947), (1.0, 616), (1.0, 1017), (1.0, 504), (1.0, 832), (1.0, 1037), (1.0, 409), (1.0, 1050), (1.0, 1039), (1.0, 937), (0.875, 1080), (0.875, 772), (0.875, 1069), (0.875, 603), (0.875, 897), (0.875, 1070), (0.875, 637), (0.875, 993), (0.75, 107), (0.75, 1073), (0.75, 608), (0.75, 724), (0.75, 701), (0.75, 958), (0.75, 180), (0.75, 812), (0.75, 626), (0.75, 847), (0.75, 963), (0.75, 1078), (0.75, 732), (0.75, 1072), (0.75, 744), (0.75, 800), (0.75, 1079), (0.75, 841), (0.75, 702), (0.75, 410), (0.75, 628), (0.75, 1086), (0.75, 534), (0.75, 694), (0.75, 648), (0.75, 414), (0.75, 1046), (0.75, 921), (0.75, 997), (0.75, 529), (0.75, 996), (0.75, 262), (0.75, 856), (0.75, 148), (0.75, 1022), (0.75, 1076), (0.75, 956), (0.75, 842), (0.75, 962), (0.75, 795), (0.625, 720), (0.625, 533), (0.625, 971), (0.625, 631), (0.625, 568), (0.625, 859), (0.625, 735), (0.625, 528), (0.625, 943), (0.625, 736), (0.625, 886), (0.625, 745), (0.625, 845), (0.625, 1077), (0.625, 952), (0.625, 919), (0.625, 382), (0.625, 1049), (0.625, 230), (0.625, 160), (0.625, 970), (0.625, 977), (0.625, 722), (0.625, 931), (0.625, 953), (0.625, 858), (0.625, 362), (0.625, 647), (0.625, 283), (0.625, 969), (0.625, 913), (0.625, 781), (0.625, 755), (0.625, 976), (0.625, 989), (0.625, 995), (0.625, 428), (0.625, 682), (0.625, 519), (0.625, 416), (0.625, 425), (0.625, 272), (0.625, 260), (0.625, 378), (0.625, 512), (0.625, 520), (0.5, 649), (0.5, 711), (0.5, 822), (0.5, 761), (0.5, 630), (0.5, 392), (0.5, 1048), (0.5, 1081), (0.5, 1054), (0.5, 768), (0.5, 418), (0.5, 928), (0.5, 422), (0.5, 878), (0.5, 67), (0.5, 779), (0.5, 555), (0.5, 641), (0.5, 532), (0.5, 946), (0.5, 421), (0.5, 1064), (0.5, 43), (0.5, 189), (0.5, 759), (0.5, 1055), (0.5, 652), (0.5, 634), (0.5, 891), (0.5, 517), (0.5, 748), (0.5, 635), (0.5, 1024), (0.5, 339), (0.5, 872), (0.5, 299), (0.5, 424), (0.5, 1051), (0.5, 90), (0.5, 364), (0.5, 871), (0.5, 510), (0.5, 354), (0.5, 654), (0.5, 940), (0.5, 20), (0.5, 1066), (0.5, 917), (0.5, 819), (0.5, 797), (0.5, 508), (0.5, 880), (0.5, 19), (0.5, 754), (0.5, 655), (0.5, 304), (0.5, 1027), (0.5, 887), (0.5, 750), (0.5, 751), (0.5, 211), (0.5, 777), (0.5, 780), (0.5, 1084), (0.5, 875), (0.5, 433), (0.5, 209), (0.5, 638), (0.5, 1059), (0.5, 869), (0.5, 279), (0.5, 169), (0.5, 358), (0.5, 524), (0.5, 885), (0.5, 1021), (0.5, 773), (0.5, 892), (0.5, 426), (0.5, 423), (0.5, 474), (0.5, 225), (0.5, 516), (0.5, 82), (0.5, 1007), (0.5, 763), (0.5, 527), (0.5, 889), (0.5, 536), (0.5, 26), (0.5, 1053), (0.5, 883), (0.5, 876), (0.5, 991), (0.5, 752), (0.5, 992), (0.5, 1085), (0.5, 662), (0.5, 809), (0.5, 314), (0.5, 708), (0.5, 525), (0.5, 340), (0.5, 658), (0.5, 564), (0.5, 874), (0.5, 668), (0.5, 645), (0.5, 307), (0.41666666666666663, 54), (0.41666666666666663, 671), (0.41666666666666663, 669), (0.41666666666666663, 787), (0.41666666666666663, 27), (0.41666666666666663, 673), (0.41666666666666663, 1029), (0.41666666666666663, 734), (0.41666666666666663, 552), (0.41666666666666663, 99), (0.41666666666666663, 651), (0.41666666666666663, 367), (0.41666666666666663, 463), (0.41666666666666663, 44), (0.41666666666666663, 785), (0.41666666666666663, 680), (0.41666666666666663, 115), (0.41666666666666663, 999), (0.41666666666666663, 790), (0.41666666666666663, 560), (0.41666666666666663, 323), (0.41666666666666663, 265), (0.41666666666666663, 565), (0.41666666666666663, 294), (0.41666666666666663, 551), (0.41666666666666663, 853), (0.41666666666666663, 664), (0.41666666666666663, 681), (0.41666666666666663, 437), (0.41666666666666663, 435), (0.41666666666666663, 665), (0.41666666666666663, 442), (0.41666666666666663, 237), (0.41666666666666663, 791), (0.41666666666666663, 150), (0.41666666666666663, 793), (0.41666666666666663, 118), (0.375, 1044), (0.375, 1018), (0.25, 1083), (0.25, 1052), (0.16666666666666666, 1033), (0.16666666666666666, 1032)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 934
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ 2 y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1034
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 y) (* (+ x x) y)))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.5, 1075), (1.5, 515), (1.5, 730), (1.5, 957), (1.5, 1034), (1.5, 728), (1.5, 741), (1.5, 895), (1.5, 1126), (1.5, 1089), (1.5, 934), (1.375, 1138), (1.375, 1000), (1.375, 661), (1.375, 898), (1.375, 695), (1.375, 843), (1.375, 93), (1.375, 684), (1.375, 798), (1.375, 1093), (1.25, 1112), (1.25, 1115), (1.25, 1006), (1.25, 979), (1.25, 1010), (1.25, 1088), (1.25, 719), (1.25, 699), (1.25, 805), (1.25, 905), (1.25, 401), (1.25, 1106), (1.25, 1114), (1.25, 229), (1.25, 696), (1.25, 902), (1.25, 607), (1.25, 502), (1.25, 1109), (1.25, 1102), (1.25, 1107), (1.25, 1009), (1.25, 1013), (1.25, 906), (1.25, 1012), (1.25, 803), (1.25, 1110), (1.25, 1068), (1.25, 403), (1.25, 813), (1.25, 1113), (1.25, 922), (1.25, 909), (1.25, 907), (1.25, 149), (1.25, 882), (1.25, 1004), (1.125, 929), (1.125, 1127), (1.125, 703), (1.125, 861), (1.125, 1026), (1.125, 1047), (1.125, 982), (1.125, 104), (1.125, 629), (1.125, 804), (1.125, 1016), (1.125, 814), (1.125, 1179), (1.125, 948), (1.125, 609), (1.125, 1124), (1.125, 611), (1.125, 1120), (1.125, 1137), (1.125, 1023), (1.125, 123), (1.125, 509), (1.125, 706), (1.125, 506), (1.125, 911), (1.125, 1131), (1.125, 1036), (1.125, 704), (1.125, 612), (1.125, 1119), (1.125, 96), (1.125, 816), (1.125, 1014), (1.125, 901), (1.125, 1125), (1.125, 1174), (1.125, 1030), (1.125, 910), (1.125, 900), (1.125, 854), (1.125, 404), (1.125, 1019), (1.125, 1132), (1.125, 839), (1.125, 967), (1.125, 1020), (1.125, 966), (1.125, 1035), (1.125, 851), (1.125, 547), (1.125, 808), (1.125, 865), (1.125, 945), (1.125, 644), (1.125, 505), (1.0, 918), (1.0, 1149), (1.0, 831), (1.0, 939), (1.0, 313), (1.0, 820), (1.0, 615), (1.0, 818), (1.0, 827), (1.0, 1062), (1.0, 937), (1.0, 825), (1.0, 1002), (1.0, 832), (1.0, 1128), (1.0, 998), (1.0, 1163), (1.0, 1177), (1.0, 616), (1.0, 549), (1.0, 1175), (1.0, 698), (1.0, 935), (1.0, 1172), (1.0, 924), (1.0, 1087), (1.0, 746), (1.0, 1157), (1.0, 1153), (1.0, 504), (1.0, 1017), (1.0, 153), (1.0, 1058), (1.0, 1043), (1.0, 836), (1.0, 1168), (1.0, 824), (1.0, 1152), (1.0, 663), (1.0, 409), (1.0, 941), (1.0, 1037), (1.0, 1039), (1.0, 231), (1.0, 677), (1.0, 1050), (1.0, 718), (1.0, 643), (1.0, 1), (1.0, 846), (1.0, 605), (1.0, 1056), (1.0, 938), (1.0, 1038), (1.0, 747), (1.0, 1042), (1.0, 1067), (1.0, 535), (1.0, 163), (1.0, 1040), (1.0, 1169), (1.0, 950), (1.0, 507), (1.0, 1060), (1.0, 810), (1.0, 1164), (1.0, 715), (1.0, 217), (1.0, 973), (1.0, 1156), (1.0, 717), (1.0, 1146), (1.0, 689), (1.0, 351), (1.0, 408), (1.0, 947), (1.0, 949), (1.0, 659), (1.0, 1158), (1.0, 829), (1.0, 617), (0.875, 1134), (0.875, 993), (0.875, 637), (0.875, 1080), (0.875, 897), (0.875, 772), (0.875, 1070), (0.875, 1069), (0.875, 603), (0.75, 148), (0.75, 847), (0.75, 841), (0.75, 997), (0.75, 107), (0.75, 856), (0.75, 958), (0.75, 1141), (0.75, 956), (0.75, 1078), (0.75, 962), (0.75, 529), (0.75, 1086), (0.75, 648), (0.75, 1079), (0.75, 180), (0.75, 800), (0.75, 414), (0.75, 702), (0.75, 626), (0.75, 410), (0.75, 744), (0.75, 1098), (0.75, 921), (0.75, 1076), (0.75, 732), (0.75, 1171), (0.75, 608), (0.75, 996), (0.75, 1046), (0.75, 1073), (0.75, 963), (0.75, 628), (0.75, 534), (0.75, 701), (0.75, 694), (0.75, 1072), (0.75, 262), (0.75, 795), (0.75, 1022), (0.75, 812), (0.75, 842), (0.75, 724), (0.625, 970), (0.625, 160), (0.625, 230), (0.625, 425), (0.625, 533), (0.625, 519), (0.625, 952), (0.625, 382), (0.625, 735), (0.625, 631), (0.625, 568), (0.625, 720), (0.625, 931), (0.625, 512), (0.625, 919), (0.625, 682), (0.625, 913), (0.625, 416), (0.625, 1135), (0.625, 971), (0.625, 953), (0.625, 989), (0.625, 362), (0.625, 736), (0.625, 976), (0.625, 1049), (0.625, 260), (0.625, 1180), (0.625, 745), (0.625, 858), (0.625, 378), (0.625, 528), (0.625, 722), (0.625, 977), (0.625, 647), (0.625, 969), (0.625, 283), (0.625, 428), (0.625, 520), (0.625, 995), (0.625, 1077), (0.625, 781), (0.625, 886), (0.625, 859), (0.625, 755), (0.625, 272), (0.625, 943), (0.625, 845), (0.5, 1054), (0.5, 1154), (0.5, 630), (0.5, 19), (0.5, 773), (0.5, 634), (0.5, 1150), (0.5, 872), (0.5, 768), (0.5, 761), (0.5, 759), (0.5, 750), (0.5, 90), (0.5, 751), (0.5, 891), (0.5, 279), (0.5, 1027), (0.5, 299), (0.5, 1145), (0.5, 649), (0.5, 1066), (0.5, 1142), (0.5, 508), (0.5, 871), (0.5, 510), (0.5, 869), (0.5, 878), (0.5, 946), (0.5, 777), (0.5, 822), (0.5, 638), (0.5, 358), (0.5, 1048), (0.5, 654), (0.5, 67), (0.5, 917), (0.5, 1155), (0.5, 1160), (0.5, 1024), (0.5, 1021), (0.5, 1081), (0.5, 517), (0.5, 748), (0.5, 1055), (0.5, 635), (0.5, 532), (0.5, 652), (0.5, 20), (0.5, 524), (0.5, 424), (0.5, 887), (0.5, 364), (0.5, 339), (0.5, 304), (0.5, 169), (0.5, 43), (0.5, 189), (0.5, 1064), (0.5, 418), (0.5, 1051), (0.5, 421), (0.5, 211), (0.5, 354), (0.5, 555), (0.5, 885), (0.5, 1162), (0.5, 797), (0.5, 754), (0.5, 1100), (0.5, 779), (0.5, 819), (0.5, 1151), (0.5, 433), (0.5, 1116), (0.5, 711), (0.5, 209), (0.5, 422), (0.5, 940), (0.5, 1148), (0.5, 928), (0.5, 780), (0.5, 1084), (0.5, 641), (0.5, 655), (0.5, 875), (0.5, 1130), (0.5, 392), (0.5, 1059), (0.5, 880), (0.375, 1166), (0.375, 1143), (0.375, 1104), (0.375, 1122), (0.375, 1133), (0.375, 1167), (0.29166666666666663, 1095), (0.29166666666666663, 1091), (0.25, 1118), (0.25, 1139), (0.25, 1147), (0.25, 1092), (0.25, 1170), (0.16666666666666666, 1097), (0.16666666666666666, 1099), (0.16666666666666666, 1094), (0.16666666666666666, 1117)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 957
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ x (+ x 2)))))
 nr_nodes: 10]
(CANDIDATE)[id: 1034
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 y) (* (+ x x) y)))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.5, 1075), (1.5, 895), (1.5, 515), (1.5, 1034), (1.5, 934), (1.5, 728), (1.5, 1089), (1.5, 1126), (1.5, 1256), (1.5, 741), (1.5, 1184), (1.5, 730), (1.5, 957), (1.375, 1093), (1.375, 93), (1.375, 661), (1.375, 1138), (1.375, 695), (1.375, 843), (1.375, 1000), (1.375, 1190), (1.375, 1193), (1.375, 798), (1.375, 684), (1.375, 898), (1.25, 1207), (1.25, 902), (1.25, 1204), (1.25, 906), (1.25, 1203), (1.25, 907), (1.25, 1199), (1.25, 1196), (1.25, 1208), (1.25, 922), (1.25, 1102), (1.25, 1114), (1.25, 1006), (1.25, 979), (1.25, 229), (1.25, 699), (1.25, 1110), (1.25, 1209), (1.25, 1107), (1.25, 1013), (1.25, 1112), (1.25, 1115), (1.25, 803), (1.25, 1088), (1.25, 1236), (1.25, 719), (1.25, 805), (1.25, 1106), (1.25, 1004), (1.25, 1229), (1.25, 401), (1.25, 1113), (1.25, 905), (1.25, 1009), (1.25, 1188), (1.25, 607), (1.25, 149), (1.25, 403), (1.25, 1201), (1.25, 909), (1.25, 502), (1.25, 882), (1.25, 1216), (1.25, 696), (1.25, 1109), (1.25, 1200), (1.25, 1012), (1.25, 1068), (1.25, 1197), (1.25, 813), (1.25, 1010), (1.125, 1244), (1.125, 945), (1.125, 851), (1.125, 612), (1.125, 948), (1.125, 644), (1.125, 1221), (1.125, 1124), (1.125, 1035), (1.125, 966), (1.125, 1228), (1.125, 1179), (1.125, 1127), (1.125, 611), (1.125, 901), (1.125, 861), (1.125, 123), (1.125, 506), (1.125, 1120), (1.125, 1131), (1.125, 1023), (1.125, 609), (1.125, 900), (1.125, 1026), (1.125, 1132), (1.125, 1249), (1.125, 547), (1.125, 1234), (1.125, 1220), (1.125, 1014), (1.125, 1219), (1.125, 703), (1.125, 104), (1.125, 96), (1.125, 816), (1.125, 982), (1.125, 929), (1.125, 808), (1.125, 1174), (1.125, 404), (1.125, 509), (1.125, 629), (1.125, 814), (1.125, 967), (1.125, 1119), (1.125, 1020), (1.125, 804), (1.125, 1240), (1.125, 1030), (1.125, 505), (1.125, 854), (1.125, 1137), (1.125, 911), (1.125, 1016), (1.125, 1019), (1.125, 1125), (1.125, 706), (1.125, 910), (1.125, 865), (1.125, 1036), (1.125, 1047), (1.125, 704), (1.125, 839), (1.0, 1232), (1.0, 663), (1.0, 535), (1.0, 935), (1.0, 507), (1.0, 1060), (1.0, 616), (1.0, 231), (1.0, 1149), (1.0, 1169), (1.0, 998), (1.0, 1067), (1.0, 836), (1.0, 947), (1.0, 1164), (1.0, 831), (1.0, 1175), (1.0, 941), (1.0, 1062), (1.0, 746), (1.0, 938), (1.0, 818), (1.0, 827), (1.0, 824), (1.0, 717), (1.0, 1263), (1.0, 1128), (1.0, 659), (1.0, 825), (1.0, 1042), (1.0, 918), (1.0, 1058), (1.0, 949), (1.0, 677), (1.0, 698), (1.0, 605), (1.0, 1259), (1.0, 1039), (1.0, 1002), (1.0, 351), (1.0, 937), (1.0, 1087), (1.0, 1050), (1.0, 1), (1.0, 409), (1.0, 1157), (1.0, 1172), (1.0, 643), (1.0, 504), (1.0, 1264), (1.0, 1043), (1.0, 1189), (1.0, 217), (1.0, 617), (1.0, 832), (1.0, 408), (1.0, 718), (1.0, 1177), (1.0, 689), (1.0, 950), (1.0, 163), (1.0, 1269), (1.0, 1274), (1.0, 820), (1.0, 1163), (1.0, 153), (1.0, 549), (1.0, 1056), (1.0, 1158), (1.0, 1253), (1.0, 1017), (1.0, 1266), (1.0, 1040), (1.0, 924), (1.0, 313), (1.0, 1037), (1.0, 1152), (1.0, 1038), (1.0, 1250), (1.0, 810), (1.0, 1168), (1.0, 829), (1.0, 939), (1.0, 715), (1.0, 1146), (1.0, 747), (1.0, 1270), (1.0, 1153), (1.0, 1273), (1.0, 1156), (1.0, 973), (1.0, 846), (1.0, 615), (0.875, 1080), (0.875, 1224), (0.875, 993), (0.875, 1070), (0.875, 897), (0.875, 772), (0.875, 1185), (0.875, 637), (0.875, 1134), (0.875, 603), (0.875, 1069), (0.75, 997), (0.75, 1046), (0.75, 847), (0.75, 795), (0.75, 628), (0.75, 1098), (0.75, 958), (0.75, 1247), (0.75, 841), (0.75, 856), (0.75, 1141), (0.75, 262), (0.75, 410), (0.75, 1076), (0.75, 732), (0.75, 996), (0.75, 1072), (0.75, 812), (0.75, 694), (0.75, 1171), (0.75, 414), (0.75, 724), (0.75, 1192), (0.75, 800), (0.75, 962), (0.75, 842), (0.75, 529), (0.75, 1206), (0.75, 701), (0.75, 626), (0.75, 1251), (0.75, 648), (0.75, 963), (0.75, 1022), (0.75, 1078), (0.75, 534), (0.75, 921), (0.75, 107), (0.75, 702), (0.75, 1086), (0.75, 956), (0.75, 148), (0.75, 608), (0.75, 1079), (0.75, 1073), (0.75, 180), (0.75, 744), (0.625, 533), (0.625, 512), (0.625, 977), (0.625, 1198), (0.625, 260), (0.625, 283), (0.625, 425), (0.625, 631), (0.625, 995), (0.625, 736), (0.625, 1226), (0.625, 378), (0.625, 735), (0.625, 919), (0.625, 1265), (0.625, 720), (0.625, 230), (0.625, 976), (0.625, 647), (0.625, 568), (0.625, 969), (0.625, 989), (0.625, 1271), (0.625, 1260), (0.625, 428), (0.625, 943), (0.625, 859), (0.625, 1135), (0.625, 953), (0.625, 886), (0.625, 858), (0.625, 519), (0.625, 952), (0.625, 755), (0.625, 362), (0.625, 520), (0.625, 1231), (0.625, 1077), (0.625, 160), (0.625, 913), (0.625, 1222), (0.625, 845), (0.625, 931), (0.625, 1049), (0.625, 1248), (0.625, 682), (0.625, 416), (0.625, 722), (0.625, 781), (0.625, 970), (0.625, 382), (0.625, 971), (0.625, 528), (0.625, 1180), (0.625, 745), (0.625, 272), (0.5, 1235), (0.5, 946), (0.5, 630), (0.5, 1145), (0.5, 638), (0.5, 878), (0.5, 869), (0.5, 1261), (0.5, 768), (0.5, 1054), (0.5, 1066), (0.5, 1027), (0.5, 634), (0.5, 90), (0.5, 891), (0.5, 279), (0.5, 1150), (0.5, 759), (0.5, 822), (0.5, 777), (0.5, 750), (0.5, 508), (0.5, 1246), (0.5, 1217), (0.5, 19), (0.5, 1142), (0.5, 773), (0.5, 649), (0.5, 872), (0.5, 510), (0.5, 1258), (0.5, 1154), (0.5, 871), (0.5, 1186), (0.5, 299), (0.5, 1187), (0.5, 751), (0.5, 1239), (0.5, 761), (0.41666666666666663, 1255), (0.41666666666666663, 1195), (0.41666666666666663, 1213), (0.41666666666666663, 1233), (0.41666666666666663, 1243), (0.41666666666666663, 1267), (0.375, 1202), (0.375, 1230), (0.375, 1276), (0.375, 1211), (0.375, 1238), (0.29166666666666663, 1215), (0.25, 1241), (0.16666666666666666, 1182), (0.16666666666666666, 1223)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 515
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1034
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 y) (* (+ x x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 934
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ 2 y) x)))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.5, 1184), (1.5, 1075), (1.5, 741), (1.5, 728), (1.5, 957), (1.5, 730), (1.5, 515), (1.5, 1089), (1.5, 1278), (1.5, 1280), (1.5, 895), (1.5, 1284), (1.5, 934), (1.5, 1126), (1.5, 1369), (1.5, 1256), (1.5, 1034), (1.375, 1287), (1.375, 898), (1.375, 1291), (1.375, 695), (1.375, 93), (1.375, 1193), (1.375, 798), (1.375, 1093), (1.375, 661), (1.375, 1138), (1.375, 684), (1.375, 1190), (1.375, 843), (1.375, 1290), (1.375, 1000), (1.25, 1009), (1.25, 805), (1.25, 1113), (1.25, 1068), (1.25, 1236), (1.25, 922), (1.25, 1004), (1.25, 1209), (1.25, 1314), (1.25, 1006), (1.25, 1199), (1.25, 1309), (1.25, 719), (1.25, 979), (1.25, 149), (1.25, 902), (1.25, 1324), (1.25, 909), (1.25, 905), (1.25, 1229), (1.25, 1311), (1.25, 1319), (1.25, 1325), (1.25, 1295), (1.25, 1109), (1.25, 1207), (1.25, 401), (1.25, 1197), (1.25, 1200), (1.25, 803), (1.25, 502), (1.25, 1012), (1.25, 1203), (1.25, 1102), (1.25, 1088), (1.25, 403), (1.25, 1321), (1.25, 813), (1.25, 1107), (1.25, 1294), (1.25, 906), (1.25, 1316), (1.25, 607), (1.25, 1208), (1.25, 1299), (1.25, 1201), (1.25, 1307), (1.25, 1305), (1.25, 1110), (1.25, 1010), (1.25, 1188), (1.25, 1216), (1.25, 696), (1.25, 1112), (1.25, 1297), (1.25, 1115), (1.25, 699), (1.25, 1106), (1.25, 1013), (1.25, 1196), (1.25, 1204), (1.25, 882), (1.25, 229), (1.25, 1302), (1.25, 1114), (1.25, 1328), (1.25, 907), (1.125, 629), (1.125, 1020), (1.125, 1220), (1.125, 1125), (1.125, 96), (1.125, 1344), (1.125, 804), (1.125, 900), (1.125, 948), (1.125, 1119), (1.125, 506), (1.125, 1023), (1.125, 967), (1.125, 1221), (1.125, 1016), (1.125, 861), (1.125, 509), (1.125, 1026), (1.125, 911), (1.125, 1362), (1.125, 1367), (1.125, 1030), (1.125, 1127), (1.125, 404), (1.125, 1347), (1.125, 851), (1.125, 1137), (1.125, 547), (1.125, 1240), (1.125, 1132), (1.125, 611), (1.125, 814), (1.125, 839), (1.125, 1343), (1.125, 1346), (1.125, 1219), (1.125, 1330), (1.125, 808), (1.125, 505), (1.125, 1047), (1.125, 1336), (1.125, 929), (1.125, 1036), (1.125, 1228), (1.125, 1244), (1.125, 1234), (1.125, 865), (1.125, 612), (1.125, 1179), (1.125, 104), (1.125, 966), (1.125, 982), (1.125, 1279), (1.125, 1357), (1.125, 1120), (1.125, 1174), (1.125, 945), (1.125, 1019), (1.125, 704), (1.125, 1249), (1.125, 1124), (1.125, 1131), (1.125, 854), (1.125, 1014), (1.125, 1361), (1.125, 1035), (1.125, 644), (1.125, 910), (1.125, 703), (1.125, 609), (1.125, 1342), (1.125, 901), (1.125, 706), (1.125, 123), (1.125, 816), (1.125, 1360), (1.0, 947), (1.0, 1189), (1.0, 718), (1.0, 535), (1.0, 1153), (1.0, 1042), (1.0, 1157), (1.0, 1313), (1.0, 1232), (1.0, 507), (1.0, 1350), (1.0, 1373), (1.0, 1056), (1.0, 924), (1.0, 504), (1.0, 698), (1.0, 831), (1.0, 313), (1.0, 1175), (1.0, 1152), (1.0, 643), (1.0, 818), (1.0, 549), (1.0, 153), (1.0, 810), (1.0, 1177), (1.0, 941), (1.0, 1067), (1.0, 1164), (1.0, 1050), (1.0, 1039), (1.0, 617), (1.0, 1250), (1.0, 1356), (1.0, 1337), (1.0, 1375), (1.0, 1087), (1.0, 949), (1.0, 1366), (1.0, 1264), (1.0, 1043), (1.0, 1263), (1.0, 1274), (1.0, 973), (1.0, 824), (1.0, 1358), (1.0, 918), (1.0, 1326), (1.0, 231), (1.0, 605), (1.0, 950), (1.0, 937), (1.0, 935), (1.0, 836), (1.0, 677), (1.0, 409), (1.0, 747), (1.0, 1060), (1.0, 1146), (1.0, 1), (1.0, 1273), (1.0, 663), (1.0, 1158), (1.0, 1156), (1.0, 163), (1.0, 1058), (1.0, 829), (1.0, 351), (1.0, 825), (1.0, 1038), (1.0, 832), (1.0, 1266), (1.0, 1354), (1.0, 1335), (1.0, 689), (1.0, 1017), (1.0, 846), (1.0, 1062), (1.0, 939), (1.0, 1172), (1.0, 1253), (1.0, 1168), (1.0, 1270), (1.0, 659), (1.0, 1169), (1.0, 1163), (1.0, 1037), (1.0, 217), (1.0, 1040), (1.0, 1002), (1.0, 998), (1.0, 1128), (1.0, 1259), (1.0, 1318), (1.0, 408), (1.0, 746), (1.0, 616), (1.0, 1269), (1.0, 827), (1.0, 820), (1.0, 717), (1.0, 715), (1.0, 938), (1.0, 615), (1.0, 1149), (0.875, 1352), (0.875, 1224), (0.875, 1069), (0.875, 637), (0.875, 1185), (0.875, 772), (0.875, 993), (0.875, 1070), (0.875, 1080), (0.875, 1134), (0.875, 897), (0.875, 603), (0.75, 1086), (0.75, 648), (0.75, 1022), (0.75, 800), (0.75, 732), (0.75, 956), (0.75, 410), (0.75, 921), (0.75, 702), (0.75, 1283), (0.75, 701), (0.75, 996), (0.75, 841), (0.75, 1098), (0.75, 262), (0.75, 608), (0.75, 1251), (0.75, 1072), (0.75, 1073), (0.75, 148), (0.75, 724), (0.75, 1076), (0.75, 694), (0.75, 414), (0.75, 180), (0.75, 1192), (0.75, 626), (0.75, 529), (0.75, 997), (0.75, 962), (0.75, 1079), (0.75, 1171), (0.75, 534), (0.75, 1323), (0.75, 812), (0.75, 1247), (0.75, 963), (0.75, 107), (0.75, 1206), (0.75, 628), (0.75, 1046), (0.75, 856), (0.75, 1141), (0.75, 744), (0.75, 842), (0.75, 795), (0.75, 847), (0.75, 958), (0.75, 1078), (0.625, 378), (0.625, 858), (0.625, 735), (0.625, 953), (0.625, 943), (0.625, 1198), (0.625, 1260), (0.625, 230), (0.625, 886), (0.625, 995), (0.625, 989), (0.625, 755), (0.625, 362), (0.625, 976), (0.625, 512), (0.625, 977), (0.625, 631), (0.625, 1265), (0.625, 647), (0.625, 260), (0.625, 1226), (0.625, 1135), (0.625, 859), (0.625, 919), (0.625, 428), (0.625, 1271), (0.625, 519), (0.625, 1349), (0.625, 283), (0.625, 425), (0.625, 568), (0.625, 736), (0.625, 952), (0.625, 969), (0.625, 1334), (0.625, 720), (0.625, 1340), (0.625, 533), (0.5, 1300), (0.5, 1376), (0.5, 1345), (0.5, 1348), (0.41666666666666663, 1304), (0.41666666666666663, 1315), (0.41666666666666663, 1364), (0.375, 1320), (0.29166666666666663, 1292), (0.29166666666666663, 1288), (0.25, 1282), (0.25, 1332), (0.25, 1331), (0.25, 1377), (0.25, 1312), (0.25, 1372), (0.16666666666666666, 1370), (0.16666666666666666, 1339), (0.16666666666666666, 1293), (0.16666666666666666, 1285), (0.16666666666666666, 1359)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 1075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 728
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 957
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ x (+ x 2)))))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.75, 1380), (1.5, 1278), (1.5, 1126), (1.5, 741), (1.5, 1075), (1.5, 1184), (1.5, 1034), (1.5, 1390), (1.5, 1284), (1.5, 728), (1.5, 1451), (1.5, 1446), (1.5, 1369), (1.5, 895), (1.5, 1089), (1.5, 957), (1.5, 515), (1.5, 934), (1.5, 1379), (1.5, 1256), (1.5, 1389), (1.5, 1420), (1.5, 1387), (1.5, 1280), (1.5, 1441), (1.5, 730), (1.375, 1190), (1.375, 1287), (1.375, 1464), (1.375, 798), (1.375, 695), (1.375, 1396), (1.375, 93), (1.375, 1138), (1.375, 661), (1.375, 1093), (1.375, 898), (1.375, 1391), (1.375, 843), (1.375, 1290), (1.375, 684), (1.375, 1291), (1.375, 1193), (1.375, 1000), (1.25, 1009), (1.25, 1319), (1.25, 696), (1.25, 502), (1.25, 1216), (1.25, 1006), (1.25, 1114), (1.25, 979), (1.25, 1204), (1.25, 1404), (1.25, 1102), (1.25, 907), (1.25, 1307), (1.25, 1112), (1.25, 1302), (1.25, 401), (1.25, 906), (1.25, 1197), (1.25, 803), (1.25, 1207), (1.25, 1294), (1.25, 1423), (1.25, 1311), (1.25, 1436), (1.25, 1110), (1.25, 922), (1.25, 1424), (1.25, 1324), (1.25, 905), (1.25, 1305), (1.25, 1109), (1.25, 1203), (1.25, 403), (1.25, 909), (1.25, 1200), (1.25, 1010), (1.25, 1199), (1.25, 1115), (1.25, 1208), (1.25, 1299), (1.25, 1426), (1.25, 1412), (1.25, 1295), (1.25, 1229), (1.25, 1106), (1.25, 1413), (1.25, 1418), (1.25, 813), (1.25, 607), (1.25, 1314), (1.25, 1437), (1.25, 805), (1.25, 1188), (1.25, 1236), (1.25, 1406), (1.25, 1297), (1.25, 1328), (1.25, 1309), (1.25, 1429), (1.25, 1004), (1.25, 719), (1.25, 1321), (1.25, 1201), (1.25, 1445), (1.25, 902), (1.25, 1107), (1.25, 1434), (1.25, 149), (1.25, 1013), (1.25, 1113), (1.25, 1428), (1.25, 1403), (1.25, 1068), (1.25, 1012), (1.25, 1316), (1.25, 1405), (1.25, 1088), (1.25, 699), (1.25, 1409), (1.25, 1425), (1.25, 1325), (1.25, 882), (1.25, 1209), (1.25, 1410), (1.25, 229), (1.25, 1196), (1.125, 967), (1.125, 1124), (1.125, 816), (1.125, 1249), (1.125, 865), (1.125, 1014), (1.125, 929), (1.125, 1461), (1.125, 1240), (1.125, 123), (1.125, 900), (1.125, 808), (1.125, 612), (1.125, 1467), (1.125, 861), (1.125, 911), (1.125, 1127), (1.125, 1336), (1.125, 547), (1.125, 1174), (1.125, 948), (1.125, 96), (1.125, 1381), (1.125, 1234), (1.125, 1019), (1.125, 1016), (1.125, 706), (1.125, 506), (1.125, 1244), (1.125, 1132), (1.125, 509), (1.125, 404), (1.125, 1219), (1.125, 1343), (1.125, 910), (1.125, 1137), (1.125, 839), (1.125, 854), (1.125, 1455), (1.125, 1119), (1.125, 1360), (1.125, 1367), (1.125, 644), (1.125, 703), (1.125, 1346), (1.125, 945), (1.125, 901), (1.125, 1342), (1.125, 1279), (1.125, 1125), (1.125, 1026), (1.125, 1131), (1.125, 1030), (1.125, 1047), (1.125, 104), (1.125, 1330), (1.125, 1020), (1.125, 1357), (1.125, 1220), (1.125, 1036), (1.125, 1457), (1.125, 851), (1.125, 609), (1.125, 1459), (1.125, 1395), (1.125, 966), (1.125, 1179), (1.125, 804), (1.125, 1462), (1.125, 611), (1.125, 1023), (1.125, 1120), (1.125, 629), (1.125, 982), (1.125, 505), (1.125, 704), (1.125, 1447), (1.125, 1221), (1.125, 1456), (1.125, 1228), (1.125, 1362), (1.125, 814), (1.125, 1347), (1.125, 1361), (1.125, 1344), (1.125, 1035), (1.0, 810), (1.0, 1158), (1.0, 1253), (1.0, 1037), (1.0, 1259), (1.0, 153), (1.0, 1163), (1.0, 1232), (1.0, 1189), (1.0, 938), (1.0, 746), (1.0, 1335), (1.0, 689), (1.0, 1326), (1.0, 1149), (1.0, 1273), (1.0, 1152), (1.0, 827), (1.0, 1060), (1.0, 1038), (1.0, 1156), (1.0, 1270), (1.0, 718), (1.0, 998), (1.0, 1337), (1.0, 351), (1.0, 924), (1.0, 1146), (1.0, 950), (1.0, 698), (1.0, 939), (1.0, 846), (1.0, 1264), (1.0, 1417), (1.0, 973), (1.0, 616), (1.0, 820), (1.0, 163), (1.0, 1443), (1.0, 1), (1.0, 1002), (1.0, 504), (1.0, 937), (1.0, 659), (1.0, 1373), (1.0, 1274), (1.0, 832), (1.0, 1062), (1.0, 643), (1.0, 605), (1.0, 1169), (1.0, 1250), (1.0, 941), (1.0, 313), (1.0, 663), (1.0, 231), (1.0, 408), (1.0, 949), (1.0, 1039), (1.0, 1058), (1.0, 1269), (1.0, 715), (1.0, 1168), (1.0, 1043), (1.0, 1056), (1.0, 818), (1.0, 1266), (1.0, 535), (1.0, 1358), (1.0, 747), (1.0, 1354), (1.0, 1350), (1.0, 825), (1.0, 1177), (1.0, 836), (1.0, 1164), (1.0, 1356), (1.0, 1040), (1.0, 1017), (1.0, 1175), (1.0, 409), (1.0, 217), (1.0, 1128), (1.0, 1375), (1.0, 1366), (1.0, 1157), (1.0, 947), (1.0, 717), (1.0, 677), (1.0, 1263), (1.0, 1318), (1.0, 831), (1.0, 824), (1.0, 1087), (1.0, 1050), (1.0, 615), (1.0, 829), (1.0, 1067), (1.0, 617), (1.0, 935), (1.0, 1172), (1.0, 1042), (1.0, 918), (1.0, 507), (1.0, 1153), (1.0, 549), (1.0, 1313), (0.875, 772), (0.875, 897), (0.875, 1069), (0.875, 603), (0.875, 1134), (0.875, 637), (0.875, 1080), (0.875, 1224), (0.875, 1469), (0.875, 1070), (0.875, 1352), (0.875, 993), (0.875, 1185), (0.75, 648), (0.75, 1079), (0.75, 529), (0.75, 1171), (0.75, 921), (0.75, 1251), (0.75, 1076), (0.75, 956), (0.75, 732), (0.75, 1399), (0.75, 996), (0.75, 626), (0.75, 1466), (0.75, 701), (0.75, 1192), (0.75, 608), (0.75, 1072), (0.75, 262), (0.75, 148), (0.75, 724), (0.75, 1086), (0.75, 1098), (0.75, 1442), (0.75, 414), (0.75, 841), (0.75, 1022), (0.75, 410), (0.75, 702), (0.75, 962), (0.75, 694), (0.75, 180), (0.75, 534), (0.75, 997), (0.75, 1283), (0.75, 1383), (0.75, 1073), (0.75, 800), (0.625, 1408), (0.625, 1458), (0.625, 1432), (0.5, 1471), (0.5, 1470), (0.5, 1438), (0.5, 1473), (0.41666666666666663, 1440), (0.41666666666666663, 1419), (0.41666666666666663, 1397), (0.41666666666666663, 1415), (0.41666666666666663, 1402), (0.41666666666666663, 1411), (0.41666666666666663, 1444), (0.41666666666666663, 1452), (0.41666666666666663, 1394), (0.375, 1454), (0.375, 1449), (0.375, 1400), (0.375, 1439), (0.375, 1385), (0.375, 1388), (0.29166666666666663, 1392), (0.29166666666666663, 1463), (0.29166666666666663, 1430), (0.16666666666666666, 1414), (0.16666666666666666, 1422)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1126
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ x (+ (+ y 2) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.75, 1380), (1.5, 1280), (1.5, 1476), (1.5, 957), (1.5, 741), (1.5, 1284), (1.5, 1451), (1.5, 1278), (1.5, 895), (1.5, 1420), (1.5, 1390), (1.5, 934), (1.5, 1256), (1.5, 1477), (1.5, 1482), (1.5, 1369), (1.5, 1389), (1.5, 1075), (1.5, 1184), (1.5, 1569), (1.5, 1441), (1.5, 1379), (1.5, 1126), (1.5, 730), (1.5, 515), (1.5, 1446), (1.5, 1089), (1.5, 728), (1.5, 1034), (1.5, 1387), (1.375, 93), (1.375, 1464), (1.375, 1493), (1.375, 1563), (1.375, 661), (1.375, 684), (1.375, 1138), (1.375, 1291), (1.375, 1501), (1.375, 695), (1.375, 1499), (1.375, 843), (1.375, 798), (1.375, 1290), (1.375, 898), (1.375, 1093), (1.375, 1190), (1.375, 1287), (1.375, 1396), (1.375, 1193), (1.375, 1000), (1.375, 1391), (1.25, 1106), (1.25, 1199), (1.25, 1413), (1.25, 1540), (1.25, 922), (1.25, 907), (1.25, 1424), (1.25, 979), (1.25, 1299), (1.25, 1525), (1.25, 699), (1.25, 1006), (1.25, 1557), (1.25, 1114), (1.25, 1196), (1.25, 1507), (1.25, 1204), (1.25, 882), (1.25, 1010), (1.25, 1109), (1.25, 1319), (1.25, 1445), (1.25, 1418), (1.25, 1533), (1.25, 1295), (1.25, 1410), (1.25, 1316), (1.25, 696), (1.25, 1545), (1.25, 1403), (1.25, 1519), (1.25, 1324), (1.25, 1203), (1.25, 1412), (1.25, 1115), (1.25, 1188), (1.25, 1302), (1.25, 1487), (1.25, 401), (1.25, 1236), (1.25, 1558), (1.25, 1530), (1.25, 1510), (1.25, 1216), (1.25, 1309), (1.25, 607), (1.25, 1537), (1.25, 1428), (1.25, 1107), (1.25, 1515), (1.25, 1209), (1.25, 1200), (1.25, 1012), (1.25, 1434), (1.25, 1425), (1.25, 1426), (1.25, 1409), (1.25, 1552), (1.25, 1504), (1.25, 1554), (1.25, 909), (1.25, 1307), (1.25, 1531), (1.25, 149), (1.25, 1201), (1.25, 1197), (1.25, 1009), (1.25, 1088), (1.25, 1423), (1.25, 1404), (1.25, 905), (1.25, 1207), (1.25, 1229), (1.25, 1321), (1.25, 1429), (1.25, 1314), (1.25, 403), (1.25, 1436), (1.25, 1528), (1.25, 813), (1.25, 719), (1.25, 1004), (1.25, 1546), (1.25, 1522), (1.25, 1406), (1.25, 1113), (1.25, 1526), (1.25, 1311), (1.25, 1328), (1.25, 1517), (1.25, 902), (1.25, 1520), (1.25, 1511), (1.25, 1068), (1.25, 1110), (1.25, 1437), (1.25, 1112), (1.25, 906), (1.25, 1013), (1.25, 1297), (1.25, 1503), (1.25, 1505), (1.25, 1513), (1.25, 1325), (1.25, 1102), (1.25, 1294), (1.25, 1305), (1.25, 1527), (1.25, 803), (1.25, 1405), (1.25, 805), (1.25, 1208), (1.25, 229), (1.25, 502), (1.125, 854), (1.125, 1279), (1.125, 1221), (1.125, 404), (1.125, 1455), (1.125, 703), (1.125, 1367), (1.125, 96), (1.125, 1228), (1.125, 945), (1.125, 1035), (1.125, 1127), (1.125, 929), (1.125, 1179), (1.125, 1357), (1.125, 612), (1.125, 644), (1.125, 1020), (1.125, 804), (1.125, 505), (1.125, 1456), (1.125, 1174), (1.125, 1478), (1.125, 1459), (1.125, 851), (1.125, 1240), (1.125, 1461), (1.125, 808), (1.125, 1220), (1.125, 1381), (1.125, 1362), (1.125, 1568), (1.125, 609), (1.125, 1343), (1.125, 1447), (1.125, 1137), (1.125, 547), (1.125, 1395), (1.125, 1125), (1.125, 814), (1.125, 629), (1.125, 982), (1.125, 1346), (1.125, 1131), (1.125, 967), (1.125, 1124), (1.125, 1336), (1.125, 123), (1.125, 1036), (1.125, 1119), (1.125, 1023), (1.125, 910), (1.125, 1016), (1.125, 911), (1.125, 1330), (1.125, 1342), (1.125, 839), (1.125, 865), (1.125, 706), (1.125, 1234), (1.125, 966), (1.125, 900), (1.125, 1361), (1.125, 1219), (1.125, 509), (1.125, 1019), (1.125, 1030), (1.125, 901), (1.125, 1132), (1.125, 704), (1.125, 611), (1.125, 1026), (1.125, 1120), (1.125, 1014), (1.125, 1249), (1.125, 1244), (1.125, 1467), (1.125, 861), (1.125, 1344), (1.125, 506), (1.125, 1360), (1.125, 1491), (1.125, 1347), (1.125, 1462), (1.125, 1047), (1.125, 104), (1.125, 1457), (1.125, 816), (1.125, 948), (1.0, 504), (1.0, 1443), (1.0, 935), (1.0, 535), (1.0, 939), (1.0, 1172), (1.0, 409), (1.0, 1335), (1.0, 1373), (1.0, 1253), (1.0, 998), (1.0, 831), (1.0, 1250), (1.0, 1264), (1.0, 1318), (1.0, 1565), (1.0, 1087), (1.0, 1358), (1.0, 1042), (1.0, 1153), (1.0, 818), (1.0, 1156), (1.0, 1354), (1.0, 1566), (1.0, 950), (1.0, 663), (1.0, 1043), (1.0, 1002), (1.0, 1), (1.0, 313), (1.0, 937), (1.0, 1062), (1.0, 1356), (1.0, 643), (1.0, 698), (1.0, 1152), (1.0, 1177), (1.0, 947), (1.0, 836), (1.0, 924), (1.0, 677), (1.0, 1058), (1.0, 163), (1.0, 1259), (1.0, 718), (1.0, 973), (1.0, 1189), (1.0, 1146), (1.0, 715), (1.0, 1495), (1.0, 1326), (1.0, 1337), (1.0, 617), (1.0, 659), (1.0, 1056), (1.0, 1039), (1.0, 1350), (1.0, 746), (1.0, 1270), (1.0, 605), (1.0, 717), (1.0, 1164), (1.0, 1157), (1.0, 689), (1.0, 1266), (1.0, 829), (1.0, 1038), (1.0, 949), (1.0, 820), (1.0, 351), (1.0, 1417), (1.0, 1067), (1.0, 846), (1.0, 408), (1.0, 217), (1.0, 1274), (1.0, 1050), (1.0, 1273), (1.0, 153), (1.0, 1040), (1.0, 1366), (1.0, 1535), (1.0, 938), (1.0, 832), (1.0, 918), (1.0, 1313), (1.0, 1489), (1.0, 1263), (1.0, 810), (1.0, 1486), (1.0, 507), (1.0, 549), (1.0, 1175), (1.0, 824), (1.0, 1232), (1.0, 827), (1.0, 1169), (1.0, 1149), (1.0, 1017), (1.0, 825), (1.0, 1128), (1.0, 231), (1.0, 1163), (1.0, 1060), (1.0, 1375), (1.0, 1037), (1.0, 1269), (1.0, 616), (1.0, 941), (1.0, 615), (1.0, 747), (1.0, 1158), (1.0, 1168), (0.875, 772), (0.875, 897), (0.75, 1497), (0.75, 1509), (0.75, 1539), (0.75, 1494), (0.625, 1567), (0.625, 1485), (0.625, 1560), (0.625, 1562), (0.5, 1553), (0.5, 1475), (0.5, 1480), (0.5, 1555), (0.5, 1479), (0.5, 1561), (0.5, 1544), (0.41666666666666663, 1498), (0.41666666666666663, 1506), (0.375, 1524), (0.375, 1549), (0.375, 1564), (0.29166666666666663, 1547), (0.29166666666666663, 1529), (0.29166666666666663, 1518), (0.25, 1474), (0.25, 1483), (0.25, 1481), (0.16666666666666666, 1538), (0.16666666666666666, 1542), (0.16666666666666666, 1514), (0.16666666666666666, 1550)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1280
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 2) (+ (+ 2 y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1476
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 957
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ x (+ x 2)))))
 nr_nodes: 10]
(CANDIDATE)[id: 741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ y 2) x)))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.75, 1380), (1.5, 1075), (1.5, 1369), (1.5, 1451), (1.5, 895), (1.5, 515), (1.5, 1583), (1.5, 1420), (1.5, 1582), (1.5, 1608), (1.5, 1446), (1.5, 1280), (1.5, 741), (1.5, 1569), (1.5, 1645), (1.5, 730), (1.5, 1482), (1.5, 1284), (1.5, 1476), (1.5, 1577), (1.5, 1278), (1.5, 1387), (1.5, 1588), (1.5, 1477), (1.5, 1379), (1.5, 1389), (1.5, 1390), (1.5, 934), (1.5, 1184), (1.5, 957), (1.5, 1089), (1.5, 728), (1.5, 1126), (1.5, 1256), (1.5, 1441), (1.5, 1034), (1.5, 1587), (1.375, 1594), (1.375, 1391), (1.375, 1287), (1.375, 1138), (1.375, 1291), (1.375, 1499), (1.375, 1602), (1.375, 1000), (1.375, 661), (1.375, 93), (1.375, 1093), (1.375, 1396), (1.375, 1493), (1.375, 1563), (1.375, 1193), (1.375, 1464), (1.375, 695), (1.375, 1604), (1.375, 1190), (1.375, 1599), (1.375, 1598), (1.375, 843), (1.375, 684), (1.375, 898), (1.375, 1501), (1.375, 1290), (1.375, 798), (1.25, 699), (1.25, 1540), (1.25, 805), (1.25, 1068), (1.25, 1526), (1.25, 1590), (1.25, 1656), (1.25, 1208), (1.25, 1309), (1.25, 1316), (1.25, 1607), (1.25, 1613), (1.25, 1520), (1.25, 1557), (1.25, 1610), (1.25, 907), (1.25, 1631), (1.25, 1552), (1.25, 1437), (1.25, 1426), (1.25, 1507), (1.25, 1236), (1.25, 1311), (1.25, 1010), (1.25, 1413), (1.25, 1436), (1.25, 1102), (1.25, 229), (1.25, 1302), (1.25, 1405), (1.25, 1614), (1.25, 1537), (1.25, 607), (1.25, 1611), (1.25, 1530), (1.25, 1424), (1.25, 1621), (1.25, 909), (1.25, 1649), (1.25, 1115), (1.25, 1196), (1.25, 1554), (1.25, 905), (1.25, 1522), (1.25, 1009), (1.25, 1505), (1.25, 1112), (1.25, 1409), (1.25, 1418), (1.25, 1662), (1.25, 1305), (1.25, 1328), (1.25, 1510), (1.25, 1199), (1.25, 1012), (1.25, 1429), (1.25, 1503), (1.25, 1434), (1.25, 1188), (1.25, 696), (1.25, 1297), (1.25, 902), (1.25, 922), (1.25, 1623), (1.25, 1652), (1.25, 1403), (1.25, 403), (1.25, 1513), (1.25, 1632), (1.25, 1229), (1.25, 1013), (1.25, 1646), (1.25, 1113), (1.25, 1637), (1.25, 1641), (1.25, 1314), (1.25, 1406), (1.25, 1410), (1.25, 1294), (1.25, 979), (1.25, 1639), (1.25, 1428), (1.25, 1088), (1.25, 1109), (1.25, 1295), (1.25, 1107), (1.25, 1319), (1.25, 1663), (1.25, 1517), (1.25, 1207), (1.25, 1321), (1.25, 1658), (1.25, 1504), (1.25, 1004), (1.25, 401), (1.25, 1657), (1.25, 1201), (1.25, 1307), (1.25, 1622), (1.25, 1545), (1.25, 882), (1.25, 1635), (1.25, 1216), (1.25, 1114), (1.25, 1487), (1.25, 1110), (1.25, 1626), (1.25, 149), (1.25, 1638), (1.25, 719), (1.25, 1299), (1.25, 1660), (1.25, 1209), (1.25, 1423), (1.25, 1203), (1.25, 906), (1.25, 1515), (1.25, 1106), (1.25, 803), (1.25, 1197), (1.25, 1546), (1.25, 1204), (1.25, 1200), (1.25, 1445), (1.25, 1531), (1.25, 502), (1.25, 1511), (1.25, 813), (1.25, 1528), (1.25, 1425), (1.25, 1655), (1.25, 1525), (1.25, 1640), (1.25, 1606), (1.25, 1642), (1.25, 1324), (1.25, 1519), (1.25, 1527), (1.25, 1558), (1.25, 1404), (1.25, 1006), (1.25, 1533), (1.25, 1325), (1.25, 1412), (1.125, 945), (1.125, 1014), (1.125, 966), (1.125, 1568), (1.125, 1244), (1.125, 901), (1.125, 839), (1.125, 509), (1.125, 547), (1.125, 1019), (1.125, 1360), (1.125, 1137), (1.125, 1395), (1.125, 104), (1.125, 982), (1.125, 861), (1.125, 1127), (1.125, 404), (1.125, 1120), (1.125, 1179), (1.125, 900), (1.125, 851), (1.125, 1220), (1.125, 611), (1.125, 1343), (1.125, 505), (1.125, 1221), (1.125, 1119), (1.125, 123), (1.125, 1125), (1.125, 1124), (1.125, 814), (1.125, 703), (1.125, 804), (1.125, 612), (1.125, 1131), (1.125, 1455), (1.125, 506), (1.125, 629), (1.125, 910), (1.125, 1362), (1.125, 1447), (1.125, 1174), (1.125, 1240), (1.125, 1047), (1.125, 1228), (1.125, 1330), (1.125, 1132), (1.125, 1491), (1.125, 706), (1.125, 1654), (1.125, 1279), (1.125, 808), (1.125, 1346), (1.125, 1478), (1.125, 1249), (1.125, 1035), (1.125, 1344), (1.125, 1457), (1.125, 865), (1.125, 1219), (1.125, 948), (1.125, 1367), (1.125, 1589), (1.125, 609), (1.125, 1592), (1.125, 1361), (1.125, 704), (1.125, 1459), (1.125, 1461), (1.125, 1036), (1.125, 1462), (1.125, 1234), (1.125, 911), (1.125, 1336), (1.125, 1381), (1.125, 1026), (1.125, 96), (1.125, 1467), (1.125, 1347), (1.125, 1030), (1.125, 1016), (1.125, 644), (1.125, 1023), (1.125, 1342), (1.125, 1357), (1.125, 854), (1.125, 967), (1.125, 929), (1.125, 816), (1.125, 1020), (1.125, 1456), (1.0, 1350), (1.0, 935), (1.0, 1253), (1.0, 1156), (1.0, 1335), (1.0, 677), (1.0, 659), (1.0, 715), (1.0, 643), (1.0, 1042), (1.0, 1358), (1.0, 820), (1.0, 818), (1.0, 937), (1.0, 1495), (1.0, 605), (1.0, 535), (1.0, 1266), (1.0, 617), (1.0, 1039), (1.0, 973), (1.0, 1), (1.0, 1189), (1.0, 1062), (1.0, 829), (1.0, 1566), (1.0, 1153), (1.0, 1152), (1.0, 1625), (1.0, 1574), (1.0, 1356), (1.0, 939), (1.0, 998), (1.0, 718), (1.0, 1157), (1.0, 1164), (1.0, 1058), (1.0, 1250), (1.0, 1337), (1.0, 924), (1.0, 409), (1.0, 717), (1.0, 1002), (1.0, 504), (1.0, 949), (1.0, 1443), (1.0, 1177), (1.0, 1172), (1.0, 836), (1.0, 1326), (1.0, 1565), (1.0, 351), (1.0, 831), (1.0, 1651), (1.0, 163), (1.0, 663), (1.0, 1373), (1.0, 746), (1.0, 689), (1.0, 1354), (1.0, 1318), (1.0, 1087), (1.0, 1270), (1.0, 1043), (1.0, 698), (1.0, 950), (1.0, 1264), (1.0, 1056), (1.0, 1620), (1.0, 1146), (1.0, 1259), (1.0, 947), (1.0, 313), (1.0, 1038), (0.75, 1628), (0.75, 1579), (0.75, 1584), (0.75, 1618), (0.75, 1571), (0.5, 1576), (0.5, 1580), (0.41666666666666663, 1644), (0.41666666666666663, 1648), (0.41666666666666663, 1609), (0.41666666666666663, 1601), (0.41666666666666663, 1616), (0.375, 1585), (0.375, 1586), (0.375, 1596), (0.29166666666666663, 1572), (0.29166666666666663, 1627), (0.25, 1615), (0.16666666666666666, 1665), (0.16666666666666666, 1634), (0.16666666666666666, 1591), (0.16666666666666666, 1633), (0.16666666666666666, 1643), (0.16666666666666666, 1630), (0.16666666666666666, 1593), (0.16666666666666666, 1647)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1075
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* x 2)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1369
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ y (+ x 2))))
 nr_nodes: 10]
(CANDIDATE)[id: 1451
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (+ x (+ x 2)))))
 nr_nodes: 10]
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
[(1.75, 1380), (1.5, 1569), (1.5, 934), (1.5, 730), (1.5, 1587), (1.5, 1280), (1.5, 895), (1.5, 1369), (1.5, 1389), (1.5, 728), (1.5, 1608), (1.5, 1482), (1.5, 957), (1.5, 1184), (1.5, 1477), (1.5, 1089), (1.5, 1588), (1.5, 1379), (1.5, 1645), (1.5, 1390), (1.5, 1387), (1.5, 1420), (1.5, 1451), (1.5, 1075), (1.5, 1681), (1.5, 741), (1.5, 1126), (1.5, 1256), (1.5, 1582), (1.5, 1441), (1.5, 1476), (1.5, 1583), (1.5, 1278), (1.5, 1284), (1.5, 1446), (1.5, 1577), (1.5, 515), (1.5, 1668), (1.5, 1034), (1.375, 1701), (1.375, 898), (1.375, 695), (1.375, 1391), (1.375, 1287), (1.375, 684), (1.375, 1138), (1.375, 1501), (1.375, 1396), (1.375, 1699), (1.375, 1690), (1.375, 1000), (1.375, 1594), (1.375, 1598), (1.375, 1093), (1.375, 1691), (1.375, 1702), (1.375, 1563), (1.375, 1706), (1.375, 1694), (1.375, 1193), (1.375, 1190), (1.375, 1499), (1.375, 1599), (1.375, 1697), (1.375, 661), (1.375, 1703), (1.375, 798), (1.375, 1602), (1.375, 93), (1.375, 1604), (1.375, 1696), (1.375, 1290), (1.375, 1464), (1.375, 1291), (1.375, 1493), (1.375, 843), (1.25, 1640), (1.25, 1115), (1.25, 1413), (1.25, 1658), (1.25, 1229), (1.25, 1311), (1.25, 1113), (1.25, 1200), (1.25, 1718), (1.25, 1748), (1.25, 502), (1.25, 1437), (1.25, 1006), (1.25, 1642), (1.25, 1622), (1.25, 1204), (1.25, 1631), (1.25, 1114), (1.25, 1404), (1.25, 979), (1.25, 1545), (1.25, 1424), (1.25, 1012), (1.25, 1652), (1.25, 1517), (1.25, 1613), (1.25, 1714), (1.25, 1720), (1.25, 1757), (1.25, 1013), (1.25, 1762), (1.25, 696), (1.25, 1743), (1.25, 1307), (1.25, 1236), (1.25, 1554), (1.25, 1418), (1.25, 1109), (1.25, 1729), (1.25, 1328), (1.25, 1731), (1.25, 1632), (1.25, 1196), (1.25, 1207), (1.25, 1649), (1.25, 813), (1.25, 1406), (1.25, 1511), (1.25, 1614), (1.25, 1515), (1.25, 1305), (1.25, 1637), (1.25, 1626), (1.25, 1316), (1.25, 1610), (1.25, 1010), (1.25, 1299), (1.25, 1558), (1.25, 1309), (1.25, 1405), (1.25, 1319), (1.25, 1623), (1.25, 1641), (1.25, 1409), (1.25, 1295), (1.25, 1216), (1.25, 805), (1.25, 1503), (1.25, 1412), (1.25, 1302), (1.25, 1088), (1.25, 1660), (1.25, 1321), (1.25, 1727), (1.25, 905), (1.25, 1106), (1.25, 1540), (1.25, 1533), (1.25, 1428), (1.25, 909), (1.25, 1656), (1.25, 1685), (1.25, 1527), (1.25, 1528), (1.25, 1403), (1.25, 1716), (1.25, 1199), (1.25, 1197), (1.25, 1203), (1.25, 1507), (1.25, 1112), (1.25, 1325), (1.25, 1201), (1.25, 401), (1.25, 607), (1.25, 1513), (1.25, 1754), (1.25, 1708), (1.25, 1519), (1.25, 1756), (1.25, 1751), (1.25, 1429), (1.25, 1410), (1.25, 882), (1.25, 1504), (1.25, 1004), (1.25, 1425), (1.25, 922), (1.25, 1732), (1.25, 1436), (1.25, 403), (1.25, 1009), (1.25, 1752), (1.25, 1557), (1.25, 1730), (1.25, 1742), (1.25, 1552), (1.25, 1646), (1.25, 803), (1.25, 1655), (1.25, 1102), (1.25, 229), (1.25, 1522), (1.25, 1721), (1.25, 1679), (1.25, 1673), (1.25, 1525), (1.25, 699), (1.25, 1068), (1.25, 1314), (1.25, 1639), (1.25, 1723), (1.25, 1638), (1.25, 906), (1.25, 1423), (1.25, 1526), (1.25, 907), (1.25, 1663), (1.25, 719), (1.25, 1434), (1.25, 1590), (1.25, 1607), (1.25, 1520), (1.25, 1621), (1.25, 1635), (1.25, 1426), (1.25, 1531), (1.25, 1744), (1.25, 1546), (1.25, 1662), (1.25, 1657), (1.25, 902), (1.25, 1110), (1.25, 1487), (1.25, 1759), (1.25, 1733), (1.25, 1209), (1.25, 1324), (1.25, 1728), (1.25, 149), (1.25, 1188), (1.25, 1297), (1.25, 1530), (1.25, 1505), (1.25, 1510), (1.25, 1606), (1.25, 1719), (1.25, 1611), (1.25, 1734), (1.25, 1537), (1.25, 1208), (1.25, 1445), (1.25, 1107), (1.25, 1749), (1.25, 1294), (1.125, 1357), (1.125, 547), (1.125, 1361), (1.125, 1347), (1.125, 967), (1.125, 861), (1.125, 611), (1.125, 966), (1.125, 1026), (1.125, 1240), (1.125, 1362), (1.125, 505), (1.125, 506), (1.125, 1036), (1.125, 1568), (1.125, 1030), (1.125, 1020), (1.125, 1344), (1.125, 609), (1.125, 704), (1.125, 1360), (1.125, 804), (1.125, 1137), (1.125, 1249), (1.125, 1455), (1.125, 703), (1.125, 1330), (1.125, 1491), (1.125, 839), (1.125, 404), (1.125, 1654), (1.125, 910), (1.125, 1132), (1.125, 1019), (1.125, 982), (1.125, 1120), (1.125, 1220), (1.125, 1342), (1.125, 808), (1.125, 1478), (1.125, 851), (1.125, 1125), (1.125, 1395), (1.125, 1279), (1.125, 929), (1.125, 1672), (1.125, 1119), (1.125, 1461), (1.125, 123), (1.125, 900), (1.125, 1462), (1.125, 1336), (1.125, 1459), (1.125, 1219), (1.125, 816), (1.125, 1179), (1.125, 1127), (1.125, 1221), (1.125, 1456), (1.125, 865), (1.125, 1244), (1.125, 854), (1.125, 1131), (1.125, 1016), (1.125, 1589), (1.125, 1346), (1.125, 1447), (1.125, 948), (1.125, 612), (1.125, 1228), (1.125, 706), (1.125, 1047), (1.125, 644), (1.125, 1234), (1.125, 104), (1.125, 96), (1.125, 629), (1.125, 509), (1.125, 1174), (1.125, 814), (1.125, 911), (1.125, 1367), (1.125, 1343), (1.125, 1023), (1.125, 1457), (1.125, 1035), (1.125, 1014), (1.125, 1381), (1.125, 1683), (1.125, 945), (1.125, 1592), (1.125, 901), (1.125, 1467), (1.125, 1124), (1.0, 1062), (1.0, 677), (1.0, 820), (1.0, 937), (1.0, 1495), (1.0, 1667), (1.0, 1675), (1.0, 1358), (1.0, 1156), (1.0, 643), (1.0, 1253), (1.0, 659), (1.0, 715), (1.0, 818), (1.0, 1189), (1.0, 1039), (1.0, 605), (1.0, 1335), (1.0, 935), (1.0, 1), (1.0, 535), (1.0, 829), (1.0, 973), (1.0, 1266), (1.0, 1350), (1.0, 617), (1.0, 1042), (0.75, 1725), (0.75, 1666), (0.75, 1677), (0.75, 1687), (0.75, 1686), (0.75, 1693), (0.625, 1736), (0.625, 1676), (0.625, 1680), (0.5, 1740), (0.5, 1760), (0.5, 1671), (0.41666666666666663, 1758), (0.41666666666666663, 1709), (0.41666666666666663, 1747), (0.41666666666666663, 1707), (0.375, 1746), (0.375, 1669), (0.29166666666666663, 1712), (0.29166666666666663, 1704), (0.29166666666666663, 1713), (0.16666666666666666, 1722), (0.16666666666666666, 1750), (0.16666666666666666, 1678), (0.16666666666666666, 1711), (0.16666666666666666, 1738), (0.16666666666666666, 1688), (0.16666666666666666, 1753)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1569
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ x y) (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 934
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 2) (+ (+ 2 y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 730
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) x) (* x 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 1587
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
[Generation 15]
[Computing fitness]
[(1.75, 1380), (1.625, 1764), (1.5, 1775), (1.5, 1767), (1.5, 1588), (1.5, 1587), (1.5, 957), (1.5, 1790), (1.5, 1476), (1.5, 1608), (1.5, 1379), (1.5, 515), (1.5, 1256), (1.5, 1681), (1.5, 1778), (1.5, 1768), (1.5, 1668), (1.5, 1477), (1.5, 934), (1.5, 1387), (1.5, 730), (1.5, 741), (1.5, 1786), (1.5, 1280), (1.5, 1645), (1.5, 1446), (1.5, 1441), (1.5, 1075), (1.5, 1792), (1.5, 1583), (1.5, 1482), (1.5, 1284), (1.5, 1390), (1.5, 1781), (1.5, 1126), (1.5, 1089), (1.5, 1783), (1.5, 1420), (1.5, 1582), (1.5, 728), (1.5, 895), (1.5, 1278), (1.5, 1451), (1.5, 1184), (1.5, 1369), (1.5, 1784), (1.5, 1577), (1.5, 1569), (1.5, 1389), (1.5, 1034), (1.375, 1493), (1.375, 1706), (1.375, 1594), (1.375, 1193), (1.375, 1563), (1.375, 93), (1.375, 898), (1.375, 1602), (1.375, 1287), (1.375, 1000), (1.375, 1701), (1.375, 1800), (1.375, 1699), (1.375, 684), (1.375, 1190), (1.375, 1290), (1.375, 1291), (1.375, 1812), (1.375, 1702), (1.375, 1391), (1.375, 1499), (1.375, 1604), (1.375, 1816), (1.375, 1690), (1.375, 1396), (1.375, 1501), (1.375, 1820), (1.375, 1804), (1.375, 1796), (1.375, 1697), (1.375, 1696), (1.375, 695), (1.375, 1694), (1.375, 1817), (1.375, 1811), (1.375, 1598), (1.375, 1799), (1.375, 1691), (1.375, 1818), (1.375, 1599), (1.375, 1138), (1.375, 1464), (1.375, 798), (1.375, 1093), (1.375, 843), (1.375, 1703), (1.375, 661), (1.25, 1110), (1.25, 1623), (1.25, 1849), (1.25, 1730), (1.25, 1115), (1.25, 1200), (1.25, 1836), (1.25, 1743), (1.25, 902), (1.25, 1203), (1.25, 1530), (1.25, 906), (1.25, 1862), (1.25, 1554), (1.25, 1197), (1.25, 1729), (1.25, 1107), (1.25, 1621), (1.25, 1526), (1.25, 1295), (1.25, 1013), (1.25, 1869), (1.25, 1662), (1.25, 1403), (1.25, 1720), (1.25, 1106), (1.25, 696), (1.25, 1657), (1.25, 1728), (1.25, 1505), (1.25, 1639), (1.25, 1614), (1.25, 1216), (1.25, 607), (1.25, 1515), (1.25, 699), (1.25, 1009), (1.25, 1731), (1.25, 1733), (1.25, 502), (1.25, 1307), (1.25, 1426), (1.25, 1611), (1.25, 149), (1.25, 1652), (1.25, 1102), (1.25, 1723), (1.25, 1751), (1.25, 1324), (1.25, 1558), (1.25, 1297), (1.25, 1305), (1.25, 1852), (1.25, 1314), (1.25, 1207), (1.25, 907), (1.25, 1754), (1.25, 1557), (1.25, 1517), (1.25, 1088), (1.25, 1607), (1.25, 1827), (1.25, 1826), (1.25, 401), (1.25, 1510), (1.25, 1719), (1.25, 1522), (1.25, 1831), (1.25, 1635), (1.25, 1109), (1.25, 1201), (1.25, 1405), (1.25, 1528), (1.25, 1714), (1.25, 1640), (1.25, 1590), (1.25, 1655), (1.25, 1824), (1.25, 1199), (1.25, 1854), (1.25, 1010), (1.25, 1410), (1.25, 1762), (1.25, 1823), (1.25, 1236), (1.25, 229), (1.25, 1428), (1.25, 1752), (1.25, 1006), (1.25, 1229), (1.25, 1841), (1.25, 1294), (1.25, 1545), (1.25, 1527), (1.25, 1204), (1.25, 1424), (1.25, 1716), (1.25, 719), (1.25, 1749), (1.25, 1658), (1.25, 1660), (1.25, 1718), (1.25, 1418), (1.25, 1319), (1.25, 1742), (1.25, 1537), (1.25, 1656), (1.25, 1649), (1.25, 1112), (1.25, 1513), (1.25, 1637), (1.25, 1828), (1.25, 905), (1.25, 1552), (1.25, 1721), (1.25, 1196), (1.25, 1540), (1.25, 403), (1.25, 1830), (1.25, 1825), (1.25, 1734), (1.25, 1423), (1.25, 1188), (1.25, 1412), (1.25, 1404), (1.25, 1855), (1.25, 1316), (1.25, 1209), (1.25, 1436), (1.25, 1520), (1.25, 1844), (1.25, 1732), (1.25, 979), (1.25, 1788), (1.25, 1663), (1.25, 1708), (1.25, 1068), (1.25, 1321), (1.25, 1757), (1.25, 1004), (1.25, 1858), (1.25, 1606), (1.25, 1622), (1.25, 813), (1.25, 909), (1.25, 805), (1.25, 1525), (1.25, 1759), (1.25, 1309), (1.25, 1328), (1.25, 1685), (1.25, 1437), (1.25, 1311), (1.25, 1012), (1.25, 1642), (1.25, 1299), (1.25, 1114), (1.25, 1842), (1.25, 1748), (1.25, 1406), (1.25, 1626), (1.25, 1613), (1.25, 1425), (1.25, 1835), (1.25, 1856), (1.25, 1610), (1.25, 1531), (1.25, 1445), (1.25, 1756), (1.25, 1776), (1.25, 1504), (1.25, 1434), (1.25, 1487), (1.25, 1821), (1.25, 1641), (1.25, 1503), (1.25, 1744), (1.25, 1413), (1.25, 803), (1.25, 1838), (1.25, 1840), (1.25, 1208), (1.25, 1519), (1.25, 1325), (1.25, 1646), (1.25, 1113), (1.25, 1631), (1.25, 882), (1.25, 1857), (1.25, 1679), (1.25, 1546), (1.25, 1638), (1.25, 1833), (1.25, 1632), (1.25, 1866), (1.25, 1409), (1.25, 1727), (1.25, 1533), (1.25, 1832), (1.25, 1429), (1.25, 1673), (1.25, 1511), (1.25, 1507), (1.25, 922), (1.25, 1302), (1.25, 1848), (1.125, 1344), (1.125, 1395), (1.125, 404), (1.125, 1249), (1.125, 1016), (1.125, 1455), (1.125, 1362), (1.125, 1036), (1.125, 1179), (1.125, 1220), (1.125, 910), (1.125, 1047), (1.125, 900), (1.125, 1342), (1.125, 808), (1.125, 966), (1.125, 1137), (1.125, 506), (1.125, 1491), (1.125, 123), (1.125, 1361), (1.125, 1219), (1.125, 948), (1.125, 1030), (1.125, 1777), (1.125, 1360), (1.125, 839), (1.125, 1447), (1.125, 851), (1.125, 1346), (1.125, 1221), (1.125, 612), (1.125, 1568), (1.125, 865), (1.125, 644), (1.125, 611), (1.125, 706), (1.125, 1330), (1.125, 967), (1.125, 1131), (1.125, 1654), (1.125, 1234), (1.125, 1019), (1.125, 1125), (1.125, 1336), (1.125, 861), (1.125, 1672), (1.125, 1347), (1.125, 1357), (1.125, 609), (1.125, 505), (1.125, 1132), (1.125, 704), (1.125, 1279), (1.125, 1127), (1.125, 854), (1.125, 804), (1.125, 1456), (1.125, 1462), (1.125, 1244), (1.125, 1589), (1.125, 1228), (1.125, 1020), (1.125, 982), (1.125, 703), (1.125, 1459), (1.125, 1026), (1.125, 547), (1.125, 1119), (1.125, 1478), (1.125, 1461), (1.125, 1120), (1.125, 1240), (1.125, 816), (1.125, 929), (1.0, 1802), (1.0, 1770), (1.0, 1810), (1.0, 1813), (1.0, 1861), (0.75, 1782), (0.75, 1806), (0.75, 1794), (0.5, 1766), (0.5, 1771), (0.41666666666666663, 1814), (0.41666666666666663, 1845), (0.29166666666666663, 1859), (0.29166666666666663, 1846), (0.29166666666666663, 1798), (0.25, 1773), (0.25, 1868), (0.16666666666666666, 1850), (0.16666666666666666, 1808), (0.16666666666666666, 1779), (0.16666666666666666, 1839), (0.16666666666666666, 1864)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1764
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1775
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 y) (+ (+ y x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1767
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 2) (+ (+ y y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1588
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) (+ (+ y x) y)))
 nr_nodes: 10]
[Generation 16]
[Computing fitness]
[(1.75, 1380), (1.625, 1764), (1.625, 1871), (1.5, 1778), (1.5, 1387), (1.5, 741), (1.5, 1884), (1.5, 728), (1.5, 1441), (1.5, 1792), (1.5, 1284), (1.5, 1608), (1.5, 1034), (1.5, 515), (1.5, 1280), (1.5, 934), (1.5, 1889), (1.5, 1420), (1.5, 1587), (1.5, 1786), (1.5, 1482), (1.5, 895), (1.5, 730), (1.5, 1897), (1.5, 1390), (1.5, 1089), (1.5, 1075), (1.5, 1477), (1.5, 1256), (1.5, 1379), (1.5, 1881), (1.5, 1369), (1.5, 1790), (1.5, 1278), (1.5, 1451), (1.5, 1783), (1.5, 1875), (1.5, 1899), (1.5, 1887), (1.5, 1446), (1.5, 1872), (1.5, 1126), (1.5, 1768), (1.5, 1582), (1.5, 1784), (1.5, 1476), (1.5, 1645), (1.5, 1681), (1.5, 1937), (1.5, 1583), (1.5, 1668), (1.5, 1389), (1.5, 1886), (1.5, 1767), (1.5, 957), (1.5, 1588), (1.5, 1775), (1.5, 1184), (1.5, 1577), (1.5, 1569), (1.5, 1874), (1.5, 1781), (1.375, 1690), (1.375, 1799), (1.375, 1464), (1.375, 1706), (1.375, 798), (1.375, 661), (1.375, 1287), (1.375, 1691), (1.375, 1563), (1.375, 1696), (1.375, 1501), (1.375, 1905), (1.375, 695), (1.375, 1701), (1.375, 1598), (1.375, 1931), (1.375, 1921), (1.375, 1694), (1.375, 1816), (1.375, 1396), (1.375, 1916), (1.375, 1703), (1.375, 1922), (1.375, 1602), (1.375, 1291), (1.375, 1493), (1.375, 1093), (1.375, 684), (1.375, 1933), (1.375, 843), (1.375, 1817), (1.375, 1820), (1.375, 1907), (1.375, 1818), (1.375, 1811), (1.375, 898), (1.375, 1796), (1.375, 1000), (1.375, 1923), (1.375, 1599), (1.375, 1391), (1.375, 1929), (1.375, 93), (1.375, 1912), (1.375, 1906), (1.375, 1697), (1.375, 1138), (1.375, 1604), (1.375, 1190), (1.375, 1909), (1.375, 1193), (1.375, 1913), (1.375, 1914), (1.375, 1699), (1.375, 1800), (1.375, 1499), (1.375, 1812), (1.375, 1904), (1.375, 1924), (1.375, 1594), (1.375, 1290), (1.375, 1804), (1.375, 1702), (1.375, 1930), (1.25, 1208), (1.25, 1757), (1.25, 1836), (1.25, 1199), (1.25, 1009), (1.25, 1754), (1.25, 1590), (1.25, 1945), (1.25, 1830), (1.25, 1968), (1.25, 1866), (1.25, 979), (1.25, 813), (1.25, 607), (1.25, 1294), (1.25, 1959), (1.25, 699), (1.25, 1418), (1.25, 803), (1.25, 1639), (1.25, 1434), (1.25, 1752), (1.25, 1655), (1.25, 1425), (1.25, 229), (1.25, 1826), (1.25, 1112), (1.25, 1540), (1.25, 1503), (1.25, 149), (1.25, 1652), (1.25, 1311), (1.25, 1939), (1.25, 1204), (1.25, 1731), (1.25, 719), (1.25, 1525), (1.25, 1734), (1.25, 1511), (1.25, 1203), (1.25, 1944), (1.25, 1656), (1.25, 1708), (1.25, 1941), (1.25, 1295), (1.25, 1951), (1.25, 1856), (1.25, 1854), (1.25, 1954), (1.25, 1749), (1.25, 1614), (1.25, 502), (1.25, 1309), (1.25, 1842), (1.25, 1729), (1.25, 1776), (1.25, 1201), (1.25, 1445), (1.25, 1662), (1.25, 1519), (1.25, 1960), (1.25, 1607), (1.25, 1821), (1.25, 1006), (1.25, 1404), (1.25, 1723), (1.25, 1316), (1.25, 1554), (1.25, 1852), (1.25, 1531), (1.25, 1010), (1.25, 1657), (1.25, 1632), (1.25, 1743), (1.25, 1642), (1.25, 1635), (1.25, 1110), (1.25, 1733), (1.25, 1962), (1.25, 1679), (1.25, 1841), (1.25, 1216), (1.25, 1517), (1.25, 1788), (1.25, 1762), (1.25, 1307), (1.25, 1714), (1.25, 1107), (1.25, 1949), (1.25, 1522), (1.25, 1526), (1.25, 1115), (1.25, 1827), (1.25, 1857), (1.25, 1297), (1.25, 1718), (1.25, 1533), (1.25, 1756), (1.25, 1405), (1.25, 1948), (1.25, 1012), (1.25, 1832), (1.25, 1200), (1.25, 1898), (1.25, 1721), (1.25, 1901), (1.25, 1113), (1.25, 1824), (1.25, 1660), (1.25, 909), (1.25, 1505), (1.25, 1606), (1.25, 1849), (1.25, 1658), (1.25, 1102), (1.25, 1424), (1.25, 1732), (1.25, 1209), (1.25, 1426), (1.25, 1109), (1.25, 1114), (1.25, 1325), (1.25, 1946), (1.25, 1305), (1.25, 1236), (1.25, 1328), (1.25, 1068), (1.25, 1947), (1.25, 403), (1.25, 1855), (1.25, 1942), (1.25, 1613), (1.25, 1412), (1.25, 905), (1.25, 1831), (1.25, 1611), (1.25, 1955), (1.25, 1641), (1.25, 401), (1.25, 1504), (1.25, 1649), (1.25, 882), (1.25, 1197), (1.25, 1188), (1.25, 1640), (1.25, 1673), (1.25, 1835), (1.25, 1869), (1.25, 1507), (1.25, 1838), (1.25, 1299), (1.25, 1940), (1.25, 1728), (1.25, 1423), (1.25, 1844), (1.25, 1324), (1.25, 1685), (1.25, 1013), (1.25, 1545), (1.25, 1730), (1.25, 1623), (1.25, 1748), (1.25, 1429), (1.25, 1319), (1.25, 1229), (1.25, 1528), (1.25, 1840), (1.25, 1751), (1.25, 1413), (1.25, 906), (1.25, 1558), (1.25, 1719), (1.25, 1862), (1.25, 1727), (1.25, 1622), (1.25, 1530), (1.25, 1637), (1.25, 1410), (1.25, 696), (1.25, 1302), (1.25, 1967), (1.25, 1513), (1.25, 1825), (1.25, 1088), (1.25, 907), (1.25, 1409), (1.25, 1437), (1.25, 1663), (1.25, 1823), (1.25, 1487), (1.25, 1744), (1.25, 1966), (1.25, 1953), (1.25, 1106), (1.25, 922), (1.25, 1436), (1.25, 1527), (1.25, 1610), (1.25, 1858), (1.25, 1828), (1.25, 1515), (1.25, 1314), (1.25, 1406), (1.25, 1833), (1.25, 1848), (1.25, 1720), (1.25, 1621), (1.25, 1638), (1.25, 1196), (1.25, 1510), (1.25, 1546), (1.25, 902), (1.25, 1321), (1.25, 1403), (1.25, 1520), (1.25, 1742), (1.25, 1716), (1.25, 1759), (1.25, 1207), (1.25, 1626), (1.25, 1004), (1.25, 1428), (1.25, 1936), (1.25, 1552), (1.25, 1557), (1.25, 1646), (1.25, 1631), (1.25, 805), (1.25, 1537), (1.125, 1361), (1.125, 1491), (1.125, 808), (1.125, 1137), (1.125, 1395), (1.125, 966), (1.125, 1362), (1.125, 1179), (1.125, 1036), (1.125, 123), (1.125, 1896), (1.125, 900), (1.125, 1219), (1.125, 1342), (1.125, 910), (1.125, 1455), (1.125, 404), (1.125, 506), (1.125, 1016), (1.125, 1249), (1.125, 1047), (1.125, 1344), (1.125, 1220), (1.0, 1893), (1.0, 1958), (1.0, 1964), (1.0, 1891), (0.75, 1918), (0.75, 1911), (0.75, 1885), (0.75, 1928), (0.75, 1878), (0.75, 1895), (0.75, 1882), (0.625, 1890), (0.5, 1880), (0.5, 1903), (0.5, 1920), (0.375, 1956), (0.29166666666666663, 1950), (0.29166666666666663, 1934), (0.29166666666666663, 1876), (0.29166666666666663, 1888), (0.16666666666666666, 1926), (0.16666666666666666, 1952)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1764
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1778
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 2) (+ (+ y y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1387
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y x) (+ x x))))
 nr_nodes: 10]
[Generation 17]
[Computing fitness]
[(1.75, 1380), (1.75, 1970), (1.625, 1871), (1.625, 1764), (1.5, 1389), (1.5, 1778), (1.5, 1278), (1.5, 1387), (1.5, 730), (1.5, 1884), (1.5, 934), (1.5, 1420), (1.5, 1897), (1.5, 1482), (1.5, 1872), (1.5, 957), (1.5, 1379), (1.5, 515), (1.5, 2003), (1.5, 1645), (1.5, 1280), (1.5, 1587), (1.5, 1446), (1.5, 1451), (1.5, 1993), (1.5, 1369), (1.5, 1786), (1.5, 1997), (1.5, 1089), (1.5, 1477), (1.5, 1441), (1.5, 2002), (1.5, 1608), (1.5, 1184), (1.5, 1887), (1.5, 1256), (1.5, 1986), (1.5, 1781), (1.5, 1577), (1.5, 1075), (1.5, 1668), (1.5, 1792), (1.5, 1996), (1.5, 1583), (1.5, 1874), (1.5, 1886), (1.5, 741), (1.5, 1981), (1.5, 1767), (1.5, 1284), (1.5, 895), (1.5, 1790), (1.5, 1681), (1.5, 1126), (1.5, 1775), (1.5, 1875), (1.5, 1995), (1.5, 1990), (1.5, 1937), (1.5, 728), (1.5, 1994), (1.5, 1768), (1.5, 1889), (1.5, 1569), (1.5, 2006), (1.5, 1783), (1.5, 1390), (1.5, 1582), (1.5, 1784), (1.5, 1899), (1.5, 1881), (1.5, 1476), (1.5, 2005), (1.5, 1588), (1.5, 1034), (1.5, 2000), (1.375, 2052), (1.375, 1929), (1.375, 2056), (1.375, 1702), (1.375, 1291), (1.375, 1811), (1.375, 1820), (1.375, 1933), (1.375, 2045), (1.375, 1703), (1.375, 2039), (1.375, 2049), (1.375, 2038), (1.375, 1706), (1.375, 1499), (1.375, 2057), (1.375, 1812), (1.375, 1138), (1.375, 1696), (1.375, 1921), (1.375, 1904), (1.375, 1931), (1.375, 843), (1.375, 1922), (1.375, 1799), (1.375, 2029), (1.375, 661), (1.375, 2028), (1.375, 2051), (1.375, 1914), (1.375, 1000), (1.375, 1909), (1.375, 1391), (1.375, 1701), (1.375, 1290), (1.375, 898), (1.375, 1563), (1.375, 1905), (1.375, 2042), (1.375, 1193), (1.375, 1816), (1.375, 1396), (1.375, 2040), (1.375, 1690), (1.375, 2027), (1.375, 1924), (1.375, 1930), (1.375, 2013), (1.375, 1697), (1.375, 1804), (1.375, 2035), (1.375, 1907), (1.375, 2030), (1.375, 2043), (1.375, 1493), (1.375, 798), (1.375, 1796), (1.375, 1190), (1.375, 1694), (1.375, 695), (1.375, 2024), (1.375, 1594), (1.375, 1599), (1.375, 1817), (1.375, 1818), (1.375, 1604), (1.375, 1691), (1.375, 1923), (1.375, 1501), (1.375, 1912), (1.375, 2022), (1.375, 93), (1.375, 2023), (1.375, 1464), (1.375, 1598), (1.375, 1699), (1.375, 1906), (1.375, 1602), (1.375, 684), (1.375, 1800), (1.375, 1916), (1.375, 1093), (1.375, 1287), (1.375, 2025), (1.375, 2026), (1.375, 1913), (1.25, 1590), (1.25, 1526), (1.25, 1988), (1.25, 1866), (1.25, 2060), (1.25, 1530), (1.25, 1948), (1.25, 1708), (1.25, 1316), (1.25, 1299), (1.25, 1821), (1.25, 1208), (1.25, 1947), (1.25, 813), (1.25, 1533), (1.25, 1410), (1.25, 1610), (1.25, 1826), (1.25, 1944), (1.25, 1305), (1.25, 1732), (1.25, 1849), (1.25, 1949), (1.25, 1662), (1.25, 1972), (1.25, 1606), (1.25, 1754), (1.25, 1409), (1.25, 401), (1.25, 1966), (1.25, 1434), (1.25, 1527), (1.25, 803), (1.25, 1540), (1.25, 1827), (1.25, 1504), (1.25, 2071), (1.25, 1209), (1.25, 1832), (1.25, 907), (1.25, 1854), (1.25, 2072), (1.25, 1204), (1.25, 1424), (1.25, 1954), (1.25, 1855), (1.25, 1751), (1.25, 607), (1.25, 1614), (1.25, 1010), (1.25, 1679), (1.25, 1487), (1.25, 1199), (1.25, 1734), (1.25, 1203), (1.25, 1718), (1.25, 1656), (1.25, 1838), (1.25, 1311), (1.25, 2008), (1.25, 1841), (1.25, 1857), (1.25, 922), (1.25, 1068), (1.25, 1962), (1.25, 1835), (1.25, 1114), (1.25, 1858), (1.25, 1640), (1.25, 1729), (1.25, 2059), (1.25, 1762), (1.25, 1088), (1.25, 1622), (1.25, 1637), (1.25, 1776), (1.25, 1517), (1.25, 1731), (1.25, 1405), (1.25, 1113), (1.25, 1642), (1.25, 1009), (1.25, 1404), (1.25, 882), (1.25, 1429), (1.25, 1939), (1.25, 1830), (1.25, 1953), (1.25, 1511), (1.25, 1513), (1.25, 229), (1.25, 1012), (1.25, 1831), (1.25, 1836), (1.25, 1307), (1.25, 1531), (1.25, 1294), (1.25, 1649), (1.25, 1727), (1.25, 1309), (1.25, 1862), (1.25, 403), (1.25, 1723), (1.25, 1302), (1.25, 1685), (1.25, 1197), (1.25, 1752), (1.25, 1844), (1.25, 1655), (1.25, 1951), (1.25, 719), (1.25, 1842), (1.25, 1749), (1.25, 1006), (1.25, 1673), (1.25, 1941), (1.25, 1229), (1.25, 1412), (1.25, 1632), (1.25, 1611), (1.25, 1554), (1.25, 1613), (1.25, 699), (1.25, 1607), (1.25, 1728), (1.25, 1418), (1.25, 1852), (1.25, 1107), (1.25, 1721), (1.25, 1297), (1.25, 2010), (1.25, 1216), (1.25, 1200), (1.25, 1558), (1.25, 1110), (1.25, 1639), (1.25, 1188), (1.25, 1436), (1.25, 1955), (1.25, 1658), (1.25, 1825), (1.25, 1942), (1.25, 1652), (1.25, 1201), (1.25, 1426), (1.25, 696), (1.25, 1525), (1.25, 1663), (1.25, 1413), (1.25, 1823), (1.25, 1013), (1.25, 1522), (1.25, 1295), (1.25, 1319), (1.25, 1719), (1.25, 1940), (1.25, 1968), (1.25, 1960), (1.25, 1898), (1.25, 1528), (1.25, 1869), (1.25, 1901), (1.25, 909), (1.25, 2069), (1.25, 1324), (1.25, 1660), (1.25, 1967), (1.25, 1112), (1.25, 1519), (1.25, 1445), (1.25, 1657), (1.25, 1788), (1.25, 1325), (1.25, 502), (1.25, 1505), (1.25, 1236), (1.25, 1744), (1.25, 1976), (1.25, 149), (1.25, 1545), (1.25, 1756), (1.25, 979), (1.25, 1328), (1.25, 1623), (1.25, 1714), (1.25, 1437), (1.25, 1106), (1.25, 1507), (1.25, 2065), (1.25, 1425), (1.25, 1946), (1.25, 1115), (1.25, 906), (1.25, 1503), (1.25, 1109), (1.25, 1733), (1.25, 1102), (1.25, 1945), (1.25, 1840), (1.25, 1743), (1.25, 1757), (1.25, 1959), (1.25, 1635), (1.25, 1423), (1.25, 905), (1.25, 1824), (1.25, 1748), (1.25, 1730), (1.25, 1856), (1.25, 1641), (1.125, 2034), (1.0, 1987), (1.0, 2075), (1.0, 2064), (1.0, 2015), (1.0, 1979), (1.0, 2037), (0.875, 1978), (0.75, 2032), (0.75, 1998), (0.75, 2062), (0.75, 2048), (0.5, 1980), (0.5, 2007), (0.5, 1974), (0.5, 2054), (0.41666666666666663, 2067), (0.41666666666666663, 2046), (0.41666666666666663, 2019), (0.375, 2012), (0.375, 2061), (0.375, 2021), (0.375, 1983), (0.29166666666666663, 2004), (0.25, 1991), (0.16666666666666666, 2017), (0.16666666666666666, 2073), (0.16666666666666666, 1984)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1970
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1764
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1389
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ 2 (+ x (+ x x)))))
 nr_nodes: 10]
[Generation 18]
[Computing fitness]
[(1.75, 1970), (1.75, 2076), (1.75, 1380), (1.625, 2078), (1.625, 1871), (1.625, 1764), (1.5, 1792), (1.5, 741), (1.5, 2118), (1.5, 515), (1.5, 1184), (1.5, 1881), (1.5, 1476), (1.5, 1446), (1.5, 1884), (1.5, 728), (1.5, 1390), (1.5, 1387), (1.5, 1126), (1.5, 895), (1.5, 1899), (1.5, 934), (1.5, 1278), (1.5, 1583), (1.5, 1790), (1.5, 2002), (1.5, 1778), (1.5, 1872), (1.5, 1981), (1.5, 2113), (1.5, 1875), (1.5, 2091), (1.5, 1768), (1.5, 1937), (1.5, 1089), (1.5, 1389), (1.5, 1886), (1.5, 1996), (1.5, 1897), (1.5, 1280), (1.5, 1441), (1.5, 2123), (1.5, 1075), (1.5, 2087), (1.5, 2006), (1.5, 1588), (1.5, 1784), (1.5, 2110), (1.5, 1577), (1.5, 2003), (1.5, 1256), (1.5, 1995), (1.5, 2079), (1.5, 1767), (1.5, 1569), (1.5, 1369), (1.5, 1645), (1.5, 1477), (1.5, 1451), (1.5, 1582), (1.5, 2099), (1.5, 1993), (1.5, 1874), (1.5, 1420), (1.5, 1783), (1.5, 1668), (1.5, 957), (1.5, 1681), (1.5, 1990), (1.5, 1034), (1.5, 730), (1.5, 1608), (1.5, 2000), (1.5, 1482), (1.5, 2080), (1.5, 1997), (1.5, 1887), (1.5, 2005), (1.5, 2093), (1.5, 1786), (1.5, 1284), (1.5, 1986), (1.5, 1781), (1.5, 1379), (1.5, 1994), (1.5, 1775), (1.5, 1889), (1.5, 1587), (1.375, 2056), (1.375, 1912), (1.375, 1290), (1.375, 2168), (1.375, 1501), (1.375, 2045), (1.375, 1499), (1.375, 1291), (1.375, 93), (1.375, 2027), (1.375, 2128), (1.375, 2176), (1.375, 2140), (1.375, 1694), (1.375, 2028), (1.375, 2030), (1.375, 2160), (1.375, 2165), (1.375, 1602), (1.375, 2157), (1.375, 1594), (1.375, 2039), (1.375, 1811), (1.375, 661), (1.375, 1818), (1.375, 2051), (1.375, 2029), (1.375, 1923), (1.375, 2143), (1.375, 1816), (1.375, 2167), (1.375, 1138), (1.375, 2162), (1.375, 2024), (1.375, 2022), (1.375, 2013), (1.375, 2052), (1.375, 2161), (1.375, 2177), (1.375, 1916), (1.375, 1696), (1.375, 1598), (1.375, 684), (1.375, 2130), (1.375, 1930), (1.375, 2153), (1.375, 2134), (1.375, 2043), (1.375, 2132), (1.375, 1391), (1.375, 1913), (1.375, 1800), (1.375, 2170), (1.375, 1820), (1.375, 1000), (1.375, 1697), (1.375, 1796), (1.375, 2164), (1.375, 1464), (1.375, 1922), (1.375, 1799), (1.375, 1914), (1.375, 695), (1.375, 2174), (1.375, 1093), (1.375, 2137), (1.375, 1906), (1.375, 1905), (1.375, 2026), (1.375, 2171), (1.375, 843), (1.375, 2057), (1.375, 1933), (1.375, 2038), (1.375, 2144), (1.375, 1690), (1.375, 1924), (1.375, 2178), (1.375, 798), (1.375, 1907), (1.375, 1699), (1.375, 898), (1.375, 1701), (1.375, 1929), (1.375, 1493), (1.375, 2023), (1.375, 2145), (1.375, 2042), (1.375, 1396), (1.375, 1931), (1.375, 1804), (1.375, 1817), (1.375, 2155), (1.375, 1193), (1.375, 1599), (1.375, 1909), (1.375, 1691), (1.375, 1190), (1.375, 2146), (1.375, 1812), (1.375, 1706), (1.375, 1287), (1.375, 2035), (1.375, 1702), (1.375, 1703), (1.375, 2025), (1.375, 1904), (1.375, 1921), (1.375, 1604), (1.375, 1563), (1.375, 2040), (1.375, 2049), (1.375, 2148), (1.25, 1652), (1.25, 1294), (1.25, 1295), (1.25, 1412), (1.25, 2089), (1.25, 1299), (1.25, 1410), (1.25, 2120), (1.25, 1844), (1.25, 1642), (1.25, 1854), (1.25, 1429), (1.25, 1517), (1.25, 1606), (1.25, 1972), (1.25, 1960), (1.25, 1832), (1.25, 1311), (1.25, 1013), (1.25, 1110), (1.25, 1525), (1.25, 922), (1.25, 1662), (1.25, 1849), (1.25, 1673), (1.25, 1685), (1.25, 1776), (1.25, 882), (1.25, 1954), (1.25, 1658), (1.25, 2060), (1.25, 1010), (1.25, 1947), (1.25, 1749), (1.25, 401), (1.25, 1962), (1.25, 1866), (1.25, 1528), (1.25, 1838), (1.25, 1842), (1.25, 1727), (1.25, 1708), (1.25, 1857), (1.25, 1639), (1.25, 1209), (1.25, 1504), (1.25, 1434), (1.25, 1637), (1.25, 1825), (1.25, 1723), (1.25, 1939), (1.25, 1940), (1.25, 1424), (1.25, 1540), (1.25, 1988), (1.25, 1554), (1.25, 1511), (1.25, 1114), (1.25, 1835), (1.25, 2072), (1.25, 2010), (1.25, 1614), (1.25, 1941), (1.25, 1729), (1.25, 803), (1.25, 1199), (1.25, 1316), (1.25, 909), (1.25, 1942), (1.25, 1533), (1.25, 607), (1.25, 813), (1.25, 2083), (1.25, 1632), (1.25, 1590), (1.25, 1830), (1.25, 1862), (1.25, 1718), (1.25, 1679), (1.25, 1852), (1.25, 1527), (1.25, 1607), (1.25, 1869), (1.25, 1827), (1.25, 1009), (1.25, 1613), (1.25, 1901), (1.25, 1558), (1.25, 1088), (1.25, 1610), (1.25, 1201), (1.25, 696), (1.25, 1836), (1.25, 1898), (1.25, 2071), (1.25, 1622), (1.25, 699), (1.25, 1948), (1.25, 1640), (1.25, 907), (1.25, 1655), (1.25, 1426), (1.25, 1719), (1.25, 1203), (1.25, 1732), (1.25, 1197), (1.25, 1513), (1.25, 1405), (1.25, 1526), (1.25, 1319), (1.25, 2008), (1.25, 1721), (1.25, 1006), (1.25, 1531), (1.25, 1487), (1.25, 2101), (1.25, 1305), (1.25, 1731), (1.25, 1752), (1.25, 1823), (1.25, 719), (1.25, 1297), (1.25, 2116), (1.25, 1656), (1.25, 1436), (1.25, 1831), (1.25, 1302), (1.25, 1949), (1.25, 1307), (1.25, 1728), (1.25, 1522), (1.25, 1200), (1.25, 1734), (1.25, 1955), (1.25, 1858), (1.25, 1751), (1.25, 1953), (1.25, 1649), (1.25, 1611), (1.25, 1841), (1.25, 1530), (1.25, 1309), (1.25, 1012), (1.25, 403), (1.25, 1107), (1.25, 1663), (1.25, 1413), (1.25, 1754), (1.25, 1409), (1.25, 1951), (1.25, 1826), (1.25, 1216), (1.25, 1204), (1.25, 2059), (1.25, 1404), (1.25, 1966), (1.25, 1418), (1.25, 1113), (1.25, 1968), (1.25, 1229), (1.25, 229), (1.25, 1855), (1.25, 1188), (1.25, 1821), (1.25, 1208), (1.25, 1068), (1.25, 1762), (1.25, 1944), (1.125, 2147), (1.125, 2106), (1.0, 2115), (1.0, 2142), (0.875, 2100), (0.875, 2095), (0.75, 2121), (0.75, 2139), (0.75, 2112), (0.75, 2173), (0.75, 2084), (0.625, 2092), (0.625, 2086), (0.5, 2127), (0.5, 2108), (0.5, 2126), (0.5, 2085), (0.5, 2104), (0.41666666666666663, 2159), (0.41666666666666663, 2082), (0.375, 2117), (0.375, 2097), (0.29166666666666663, 2094), (0.29166666666666663, 2156), (0.29166666666666663, 2150), (0.25, 2124), (0.25, 2090), (0.16666666666666666, 2136), (0.16666666666666666, 2152), (0.16666666666666666, 2102), (0.16666666666666666, 2154)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1970
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2076
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2078
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
[Generation 19]
[Computing fitness]
[(1.75, 1380), (1.75, 2180), (1.75, 1970), (1.75, 2076), (1.625, 2182), (1.625, 2078), (1.625, 1764), (1.625, 1871), (1.625, 2181), (1.5, 730), (1.5, 1986), (1.5, 1390), (1.5, 1897), (1.5, 1387), (1.5, 1767), (1.5, 1996), (1.5, 2087), (1.5, 1994), (1.5, 1990), (1.5, 2227), (1.5, 2225), (1.5, 1645), (1.5, 2220), (1.5, 1126), (1.5, 1441), (1.5, 2206), (1.5, 1981), (1.5, 1583), (1.5, 2193), (1.5, 1792), (1.5, 1256), (1.5, 2113), (1.5, 1993), (1.5, 1781), (1.5, 2195), (1.5, 934), (1.5, 1874), (1.5, 1588), (1.5, 1899), (1.5, 2184), (1.5, 2118), (1.5, 2213), (1.5, 1997), (1.5, 2110), (1.5, 2212), (1.5, 1995), (1.5, 1886), (1.5, 1775), (1.5, 1786), (1.5, 1608), (1.5, 1790), (1.5, 1476), (1.5, 1420), (1.5, 1783), (1.5, 2201), (1.5, 2005), (1.5, 2099), (1.5, 1034), (1.5, 2093), (1.5, 2003), (1.5, 895), (1.5, 1768), (1.5, 2079), (1.5, 1937), (1.5, 2228), (1.5, 2197), (1.5, 1881), (1.5, 1875), (1.5, 728), (1.5, 1889), (1.5, 1681), (1.5, 2204), (1.5, 1482), (1.5, 1668), (1.5, 1477), (1.5, 1278), (1.5, 1184), (1.5, 2000), (1.5, 1089), (1.5, 1075), (1.5, 2002), (1.5, 1280), (1.5, 1284), (1.5, 1451), (1.5, 1369), (1.5, 1887), (1.5, 1569), (1.5, 957), (1.5, 2091), (1.5, 1872), (1.5, 1389), (1.5, 1587), (1.5, 1577), (1.5, 515), (1.5, 2080), (1.5, 1582), (1.5, 1778), (1.5, 1446), (1.5, 2123), (1.5, 2209), (1.5, 1784), (1.5, 2192), (1.5, 2006), (1.5, 1379), (1.5, 1884), (1.5, 741), (1.375, 2167), (1.375, 1594), (1.375, 2161), (1.375, 1799), (1.375, 93), (1.375, 2170), (1.375, 2049), (1.375, 1287), (1.375, 2043), (1.375, 2245), (1.375, 2238), (1.375, 2162), (1.375, 2130), (1.375, 2042), (1.375, 2271), (1.375, 2056), (1.375, 2145), (1.375, 1190), (1.375, 2140), (1.375, 2155), (1.375, 2146), (1.375, 1820), (1.375, 1396), (1.375, 2240), (1.375, 1804), (1.375, 1604), (1.375, 2128), (1.375, 1290), (1.375, 2027), (1.375, 1907), (1.375, 1818), (1.375, 1800), (1.375, 1291), (1.375, 1912), (1.375, 2176), (1.375, 2246), (1.375, 1691), (1.375, 684), (1.375, 1499), (1.375, 1391), (1.375, 1931), (1.375, 1138), (1.375, 2263), (1.375, 2052), (1.375, 1817), (1.375, 695), (1.375, 1599), (1.375, 2174), (1.375, 2237), (1.375, 2247), (1.375, 2269), (1.375, 1922), (1.375, 1921), (1.375, 1000), (1.375, 1702), (1.375, 2252), (1.375, 1916), (1.375, 1690), (1.375, 2261), (1.375, 1699), (1.375, 2023), (1.375, 1796), (1.375, 2279), (1.375, 2143), (1.375, 1811), (1.375, 2241), (1.375, 1933), (1.375, 1929), (1.375, 2144), (1.375, 1696), (1.375, 1563), (1.375, 2251), (1.375, 1697), (1.375, 2239), (1.375, 1602), (1.375, 1464), (1.375, 1913), (1.375, 2013), (1.375, 1909), (1.375, 1906), (1.375, 2178), (1.375, 1905), (1.375, 2236), (1.375, 1193), (1.375, 2259), (1.375, 1816), (1.375, 2164), (1.375, 2256), (1.375, 2160), (1.375, 2262), (1.375, 2137), (1.375, 2148), (1.375, 2153), (1.375, 2040), (1.375, 2171), (1.375, 1812), (1.375, 1924), (1.375, 1501), (1.375, 2165), (1.375, 1694), (1.375, 1701), (1.375, 843), (1.375, 2276), (1.375, 2168), (1.375, 2039), (1.375, 2265), (1.375, 2035), (1.375, 2157), (1.375, 898), (1.375, 661), (1.375, 2028), (1.375, 1930), (1.375, 2022), (1.375, 2249), (1.375, 1706), (1.375, 2026), (1.375, 2024), (1.375, 1093), (1.375, 2267), (1.375, 2132), (1.375, 1914), (1.375, 2030), (1.375, 2045), (1.375, 2057), (1.375, 2273), (1.375, 2029), (1.375, 798), (1.375, 2257), (1.375, 2272), (1.375, 2051), (1.375, 2134), (1.375, 1904), (1.375, 2038), (1.375, 1598), (1.375, 2025), (1.375, 1493), (1.375, 2248), (1.375, 2177), (1.375, 1923), (1.375, 1703), (1.25, 1424), (1.25, 1825), (1.25, 1658), (1.25, 1540), (1.25, 1862), (1.25, 2277), (1.25, 1941), (1.25, 1954), (1.25, 1637), (1.25, 1517), (1.25, 1662), (1.25, 1718), (1.25, 719), (1.25, 1719), (1.25, 1685), (1.25, 1632), (1.25, 1305), (1.25, 1513), (1.25, 2207), (1.25, 882), (1.25, 1295), (1.25, 813), (1.25, 1642), (1.25, 1960), (1.25, 1940), (1.25, 1203), (1.25, 1558), (1.25, 803), (1.25, 1613), (1.25, 1679), (1.25, 1640), (1.25, 1731), (1.25, 2010), (1.25, 1487), (1.25, 1533), (1.25, 1297), (1.25, 1299), (1.25, 1844), (1.25, 1607), (1.25, 1009), (1.25, 1294), (1.25, 2191), (1.25, 1721), (1.25, 1114), (1.25, 2072), (1.25, 2008), (1.25, 1939), (1.25, 1727), (1.25, 1511), (1.25, 2215), (1.25, 1426), (1.25, 696), (1.25, 1410), (1.25, 1656), (1.25, 1898), (1.25, 1723), (1.25, 1835), (1.25, 1832), (1.25, 1531), (1.25, 1749), (1.25, 1209), (1.25, 1838), (1.25, 1752), (1.25, 1088), (1.25, 909), (1.25, 1610), (1.25, 2083), (1.25, 1708), (1.25, 1526), (1.25, 607), (1.25, 1948), (1.25, 1197), (1.25, 1854), (1.25, 2200), (1.25, 1006), (1.25, 1962), (1.25, 1842), (1.25, 2120), (1.25, 1830), (1.25, 2116), (1.25, 1434), (1.25, 2208), (1.25, 2210), (1.25, 1972), (1.25, 1947), (1.25, 1869), (1.25, 1429), (1.25, 1866), (1.25, 1590), (1.25, 1988), (1.25, 1652), (1.25, 1776), (1.25, 401), (1.25, 1622), (1.25, 1606), (1.25, 1673), (1.25, 1504), (1.25, 1311), (1.25, 1614), (1.25, 2101), (1.25, 1823), (1.25, 1554), (1.25, 1942), (1.25, 1732), (1.25, 1527), (1.25, 1199), (1.25, 1110), (1.25, 1827), (1.25, 907), (1.25, 2089), (1.25, 1405), (1.25, 1655), (1.25, 1013), (1.25, 1525), (1.25, 699), (1.25, 1528), (1.25, 1201), (1.25, 1849), (1.25, 2071), (1.25, 1010), (1.25, 2060), (1.25, 1639), (1.25, 1729), (1.25, 1316), (1.25, 1857), (1.25, 1852), (1.25, 1836), (1.25, 1412), (1.25, 1319), (1.25, 1901), (1.25, 922), (1.125, 2183), (1.0, 2243), (1.0, 2190), (1.0, 2226), (0.75, 2275), (0.75, 2188), (0.75, 2214), (0.75, 2221), (0.75, 2199), (0.75, 2223), (0.75, 2217), (0.75, 2186), (0.75, 2234), (0.625, 2219), (0.625, 2229), (0.625, 2230), (0.5, 2233), (0.5, 2205), (0.5, 2202), (0.41666666666666663, 2254), (0.29166666666666663, 2196), (0.25, 2232), (0.16666666666666666, 2235)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1970
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2076
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2182
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ y x))))
 nr_nodes: 10]
[Generation 20]
[Computing fitness]
[(1.75, 2281), (1.75, 2282), (1.75, 1380), (1.75, 2076), (1.75, 2180), (1.75, 1970), (1.625, 2182), (1.625, 2181), (1.625, 1764), (1.625, 2283), (1.625, 2285), (1.625, 1871), (1.625, 2078), (1.5, 1034), (1.5, 1887), (1.5, 2118), (1.5, 1768), (1.5, 1389), (1.5, 1420), (1.5, 1899), (1.5, 1884), (1.5, 2351), (1.5, 2314), (1.5, 895), (1.5, 741), (1.5, 1875), (1.5, 2225), (1.5, 2195), (1.5, 1587), (1.5, 2003), (1.5, 2201), (1.5, 1790), (1.5, 1996), (1.5, 2355), (1.5, 1075), (1.5, 1582), (1.5, 1986), (1.5, 1089), (1.5, 1775), (1.5, 2093), (1.5, 730), (1.5, 2228), (1.5, 1767), (1.5, 1280), (1.5, 1990), (1.5, 2343), (1.5, 1889), (1.5, 2297), (1.5, 2193), (1.5, 1369), (1.5, 1645), (1.5, 1681), (1.5, 1886), (1.5, 1446), (1.5, 515), (1.5, 1588), (1.5, 1881), (1.5, 728), (1.5, 1278), (1.5, 2342), (1.5, 2087), (1.5, 1792), (1.5, 1126), (1.5, 2311), (1.5, 1994), (1.5, 1477), (1.5, 1569), (1.5, 2204), (1.5, 1874), (1.5, 2339), (1.5, 1981), (1.5, 1387), (1.5, 1583), (1.5, 2192), (1.5, 1872), (1.5, 2322), (1.5, 1786), (1.5, 1784), (1.5, 2005), (1.5, 2286), (1.5, 2091), (1.5, 1577), (1.5, 2079), (1.5, 1482), (1.5, 1284), (1.5, 1390), (1.5, 1778), (1.5, 1897), (1.5, 2006), (1.5, 2337), (1.5, 2212), (1.5, 1668), (1.5, 2289), (1.5, 2306), (1.5, 1993), (1.5, 1937), (1.5, 2209), (1.5, 2290), (1.5, 2110), (1.5, 1184), (1.5, 1256), (1.5, 1997), (1.5, 2206), (1.5, 2113), (1.5, 2227), (1.5, 2080), (1.5, 1608), (1.5, 1995), (1.5, 1441), (1.5, 934), (1.5, 1476), (1.5, 1783), (1.5, 2213), (1.5, 2197), (1.5, 2002), (1.5, 957), (1.5, 2220), (1.5, 2000), (1.5, 1379), (1.5, 2123), (1.5, 1781), (1.5, 2099), (1.5, 2184), (1.5, 1451), (1.375, 2028), (1.375, 2237), (1.375, 2148), (1.375, 2367), (1.375, 2170), (1.375, 2143), (1.375, 1818), (1.375, 2157), (1.375, 2049), (1.375, 1922), (1.375, 2174), (1.375, 2259), (1.375, 1906), (1.375, 2161), (1.375, 2040), (1.375, 1799), (1.375, 2249), (1.375, 2378), (1.375, 2043), (1.375, 1931), (1.375, 1193), (1.375, 2240), (1.375, 2145), (1.375, 1923), (1.375, 695), (1.375, 1093), (1.375, 2029), (1.375, 1697), (1.375, 2052), (1.375, 2247), (1.375, 2051), (1.375, 2265), (1.375, 1287), (1.375, 1907), (1.375, 1924), (1.375, 1501), (1.375, 2130), (1.375, 2246), (1.375, 898), (1.375, 2042), (1.375, 2256), (1.375, 1820), (1.375, 2153), (1.375, 1690), (1.375, 661), (1.375, 2162), (1.375, 1291), (1.375, 2024), (1.375, 2045), (1.375, 1905), (1.375, 2236), (1.375, 1604), (1.375, 2368), (1.375, 2356), (1.375, 2022), (1.375, 1921), (1.375, 2333), (1.375, 2271), (1.375, 2167), (1.375, 2276), (1.375, 1804), (1.375, 2023), (1.375, 843), (1.375, 1696), (1.375, 1913), (1.375, 2359), (1.375, 1190), (1.375, 2144), (1.375, 2128), (1.375, 1699), (1.375, 2155), (1.375, 1493), (1.375, 2177), (1.375, 1909), (1.375, 2140), (1.375, 2030), (1.375, 2380), (1.375, 1000), (1.375, 2137), (1.375, 1290), (1.375, 1138), (1.375, 2035), (1.375, 2248), (1.375, 2272), (1.375, 2171), (1.375, 1914), (1.375, 2239), (1.375, 2013), (1.375, 1599), (1.375, 1912), (1.375, 1598), (1.375, 1464), (1.375, 2025), (1.375, 2176), (1.375, 1904), (1.375, 1817), (1.375, 1391), (1.375, 2168), (1.375, 1703), (1.375, 1701), (1.375, 2026), (1.375, 2165), (1.375, 93), (1.375, 2238), (1.375, 1499), (1.375, 2273), (1.375, 2377), (1.375, 1396), (1.375, 2164), (1.375, 2267), (1.375, 1594), (1.375, 2251), (1.375, 1800), (1.375, 1929), (1.375, 2375), (1.375, 2245), (1.375, 2132), (1.375, 2269), (1.375, 2027), (1.375, 1694), (1.375, 2372), (1.375, 2241), (1.375, 2263), (1.375, 1930), (1.375, 2178), (1.375, 2146), (1.375, 2279), (1.375, 2257), (1.375, 2056), (1.375, 1816), (1.375, 2160), (1.375, 798), (1.375, 2261), (1.375, 2262), (1.375, 1691), (1.375, 2038), (1.375, 2363), (1.375, 2376), (1.375, 2134), (1.375, 2039), (1.375, 2057), (1.375, 2383), (1.375, 1563), (1.375, 1602), (1.375, 1702), (1.375, 1812), (1.375, 2362), (1.375, 1796), (1.375, 684), (1.375, 1916), (1.375, 2365), (1.375, 1933), (1.375, 1811), (1.375, 1706), (1.375, 2370), (1.375, 2252), (1.25, 696), (1.25, 1752), (1.25, 1708), (1.25, 1844), (1.25, 1088), (1.25, 1610), (1.25, 1854), (1.25, 813), (1.25, 1825), (1.25, 2191), (1.25, 1526), (1.25, 2008), (1.25, 1637), (1.25, 2353), (1.25, 1960), (1.25, 803), (1.25, 1842), (1.25, 1642), (1.25, 1940), (1.25, 1607), (1.25, 1299), (1.25, 1114), (1.25, 1297), (1.25, 1006), (1.25, 1203), (1.25, 1862), (1.25, 1656), (1.25, 1954), (1.25, 1295), (1.25, 1426), (1.25, 1540), (1.25, 1640), (1.25, 1305), (1.25, 719), (1.25, 1533), (1.25, 1718), (1.25, 1662), (1.25, 1898), (1.25, 2010), (1.25, 1294), (1.25, 2072), (1.25, 1832), (1.25, 1723), (1.25, 1658), (1.25, 2321), (1.25, 2207), (1.25, 1009), (1.25, 1731), (1.25, 1209), (1.25, 1719), (1.25, 1685), (1.25, 1424), (1.25, 1197), (1.25, 1962), (1.25, 909), (1.25, 1835), (1.25, 1948), (1.25, 1830), (1.25, 1727), (1.25, 1613), (1.25, 1632), (1.25, 1838), (1.25, 882), (1.25, 607), (1.25, 2326), (1.25, 2200), (1.25, 1487), (1.25, 1721), (1.25, 2215), (1.25, 2120), (1.25, 1679), (1.25, 1531), (1.25, 2083), (1.25, 1941), (1.25, 2277), (1.25, 1558), (1.25, 1511), (1.25, 1517), (1.25, 1939), (1.25, 2300), (1.25, 1410), (1.25, 1749), (1.25, 1513), (1.125, 2312), (1.125, 2305), (1.125, 2348), (1.125, 2320), (1.0, 2304), (1.0, 2291), (0.875, 2336), (0.75, 2325), (0.75, 2358), (0.75, 2328), (0.75, 2382), (0.75, 2302), (0.75, 2335), (0.75, 2316), (0.75, 2374), (0.75, 2332), (0.75, 2299), (0.75, 2288), (0.75, 2385), (0.75, 2330), (0.625, 2293), (0.625, 2347), (0.5, 2295), (0.5, 2310), (0.5, 2324), (0.5, 2345), (0.5, 2309), (0.5, 2296), (0.5, 2318), (0.5, 2308), (0.5, 2341), (0.41666666666666663, 2366), (0.375, 2329), (0.29166666666666663, 2364), (0.29166666666666663, 2360), (0.16666666666666666, 2349), (0.16666666666666666, 2315)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2282
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1380
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2076
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ 2 (+ x x))))
 nr_nodes: 10]
[Generation 21]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (+ (* x y) (+ y (+ x 2))))

Process finished with exit code 0
