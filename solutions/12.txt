D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`x`#`#`6`#`#`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`y`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (+ (+ x 6) (* x 6)) (* x (+ 6 y))) 6) y))
 nr_nodes: 18]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ 6 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 y) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x 6) y) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`y`#`#`(* ? ?)`6`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y 6) y) (* 6 (* x (+ y x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* x y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) (+ (* 6 y) 6)))
 nr_nodes: 10]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`6`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* y 6) (+ 6 6)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* (+ x 6) 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`6`#`#`6`#`#`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ (+ 6 6) (+ (+ 6 x) x))))
 nr_nodes: 12]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`y`#`#`(* ? ?)`6`#`#`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* y (* 6 (* 6 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 6 x) y) (+ x y)))
 nr_nodes: 10]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (* y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* y (* x y)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 6) (* (* (+ x y) 6) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ 6 (+ y y))) (+ x (+ 6 x))))
 nr_nodes: 14]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* (+ (* y x) y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (+ x 6)) (* (+ y x) (* y x))))
 nr_nodes: 16]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ 6 x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* (* (+ (+ y 6) x) y) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (* 6 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 6) (* 6 y)))
 nr_nodes: 8]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`6`#`#`6`#`#`(+ ? ?)`y`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x (* 6 6)) (+ y x)) 6))
 nr_nodes: 12]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* 6 y)) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ 6 y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 6) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`6`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* y (* 6 y)) (* x x)) (+ (+ y y) (+ (* x y) (* 6 6)))) y))
 nr_nodes: 24]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* (* y x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`6`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y y) (* (* y (+ 6 6)) y))))
 nr_nodes: 14]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* (+ y (+ y (+ (+ y 6) y))) (* (+ y x) (+ (+ 6 y) x)))))
 nr_nodes: 22]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y x) (+ (+ x x) x)) y))
 nr_nodes: 12]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (+ y 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* 6 (+ (* y (* 6 x)) y)) x)))
 nr_nodes: 14]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (+ (+ 6 y) y)) x))
 nr_nodes: 12]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`6`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* (* x x) (* (+ y 6) (* x x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 6) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`(* ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y (* x (* (* 6 x) 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* (* y x) 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ y 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 y) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 6) (+ 6 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x x) (+ 6 6)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`(* ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`(* ? ?)`(* ? ?)`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 6 (* (* y 6) (+ x x))) x) (* (* 6 y) x)))
 nr_nodes: 18]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y (* y 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 6 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* x x)) (* x (* 6 x))))
 nr_nodes: 12]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`6`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) (* x (* y 6))) (* y (* y x))))
 nr_nodes: 16]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`x`#`#`y`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 y) (* (* (* (+ x 6) (* x y)) 6) 6)))
 nr_nodes: 16]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ y x) (* y 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`6`#`#`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (* 6 x) (+ y y)) 6) (+ 6 (+ y y))))
 nr_nodes: 16]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* (* (* y y) (* x y)) (* x y))))
 nr_nodes: 14]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`(+ ? ?)`6`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 y) (+ 6 (+ x 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ 6 y) 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (* x 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 6 x) y) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ y (+ 6 (+ y 6)))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* y x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`6`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (* 6 (+ 6 6)) y) (* y (* y 6))) x))
 nr_nodes: 16]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ y (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`6`#`#`6`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* 6 (+ 6 (+ y (* 6 6))))) (+ (+ (* y (* (+ y x) (* x y))) y) 6)))
 nr_nodes: 26]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ 6 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`6`#`#`x`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* x 6) (* y y)) (+ 6 x)) (+ (* (+ 6 y) x) y)))
 nr_nodes: 20]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`6`#`#`(+ ? ?)`6`#`#`6`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(+ ? ?)`x`#`#`6`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`y`#`#`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ (+ 6 (+ 6 6)) (* (+ (* y y) x) (+ x 6)))) (+ (* (* 6 y) (+ 6 (* y x))) 6)))
 nr_nodes: 30]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`6`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* 6 x) (+ y x)) (* y (+ y x))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(* ? ?)`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 y) (* (+ x 6) (* (+ y (+ (* y 6) (* y y))) 6))))
 nr_nodes: 20]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* x 6)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 6 (+ y x)) (+ 6 (* y y))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 6 (+ x 6)) y) y))
 nr_nodes: 10]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* (* y y) (* x 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x (+ x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ (* y 6) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x (* x x)) y) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`(* ? ?)`(+ ? ?)`6`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 (* (+ 6 x) y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`(* ? ?)`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* 6 (* x (* (+ (* 6 y) (* 6 x)) x)))))
 nr_nodes: 16]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`6`#`#`6`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* 6 6) (+ y y))))
 nr_nodes: 10]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`6`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 6 (+ y (* (+ 6 x) (* x y))))))
 nr_nodes: 14]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* 6 6)) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ (+ (* y x) y) (+ 6 (+ 6 x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (* 6 x) (+ x x)) x) 6))
 nr_nodes: 12]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`6`#`#`x`#`#`y`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 6 x) y) (* (* y y) (+ 6 6))))
 nr_nodes: 14]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 y) (* (* (* y 6) x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) 6) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* y 6) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* 6 (+ y (+ (+ x 6) y))) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ (* x 6) x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`x`#`#`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ x (* 6 6))))
 nr_nodes: 8]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`6`#`#`(* ? ?)`6`#`#`x`#`#`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y (+ (+ x y) (* x y))) (+ x x)) (* (* y x) (+ (* 6 (* 6 x)) (* x 6)))))
 nr_nodes: 28]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`6`#`#`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 6 y) x) (+ (* x y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
[Generation 0]
[Computing fitness]
[(1.5, 212), (1.5, 296), (1.25, 191), (1.125, 41), (1.125, 77), (1.125, 243), (1.125, 308), (1.0, 42), (1.0, 56), (1.0, 63), (1.0, 67), (1.0, 155), (1.0, 165), (1.0, 200), (1.0, 302), (1.0, 332), (1.0, 333), (1.0, 342), (1.0, 391), (0.75, 144), (0.625, 12), (0.625, 96), (0.625, 149), (0.625, 158), (0.625, 159), (0.625, 275), (0.625, 305), (0.625, 373), (0.5416666666666666, 79), (0.5, 30), (0.5, 48), (0.5, 52), (0.5, 64), (0.5, 75), (0.5, 80), (0.5, 86), (0.5, 91), (0.5, 93), (0.5, 95), (0.5, 98), (0.5, 101), (0.5, 112), (0.5, 136), (0.5, 151), (0.5, 163), (0.5, 175), (0.5, 209), (0.5, 221), (0.5, 222), (0.5, 226), (0.5, 231), (0.5, 264), (0.5, 318), (0.5, 319), (0.5, 348), (0.5, 355), (0.5, 368), (0.5, 393), (0.5, 397), (0.41666666666666663, 17), (0.41666666666666663, 49), (0.41666666666666663, 74), (0.41666666666666663, 114), (0.41666666666666663, 120), (0.41666666666666663, 134), (0.41666666666666663, 207), (0.41666666666666663, 213), (0.41666666666666663, 251), (0.41666666666666663, 254), (0.41666666666666663, 256), (0.41666666666666663, 276), (0.41666666666666663, 360), (0.41666666666666663, 370), (0.375, 50), (0.375, 137), (0.375, 147), (0.375, 148), (0.375, 161), (0.375, 173), (0.375, 247), (0.375, 313), (0.375, 344), (0.25, 1), (0.25, 4), (0.25, 5), (0.25, 8), (0.25, 10), (0.25, 13), (0.25, 14), (0.25, 15), (0.25, 20), (0.25, 24), (0.25, 25), (0.25, 27), (0.25, 28), (0.25, 34), (0.25, 39), (0.25, 45), (0.25, 54), (0.25, 60), (0.25, 61), (0.25, 66), (0.25, 73), (0.25, 76), (0.25, 85), (0.25, 97), (0.25, 102), (0.25, 103), (0.25, 104), (0.25, 105), (0.25, 106), (0.25, 113), (0.25, 117), (0.25, 122), (0.25, 124), (0.25, 125), (0.25, 127), (0.25, 142), (0.25, 150), (0.25, 154), (0.25, 164), (0.25, 168), (0.25, 171), (0.25, 172), (0.25, 176), (0.25, 181), (0.25, 182), (0.25, 183), (0.25, 187), (0.25, 189), (0.25, 190), (0.25, 195), (0.25, 197), (0.25, 198), (0.25, 202), (0.25, 204), (0.25, 218), (0.25, 220), (0.25, 224), (0.25, 227), (0.25, 234), (0.25, 240), (0.25, 241), (0.25, 248), (0.25, 252), (0.25, 255), (0.25, 258), (0.25, 259), (0.25, 261), (0.25, 266), (0.25, 279), (0.25, 281), (0.25, 283), (0.25, 284), (0.25, 286), (0.25, 289), (0.25, 290), (0.25, 291), (0.25, 294), (0.25, 295), (0.25, 298), (0.25, 303), (0.25, 307), (0.25, 311), (0.25, 320), (0.25, 323), (0.25, 328), (0.25, 329), (0.25, 330), (0.25, 334), (0.25, 335), (0.25, 346), (0.25, 353), (0.25, 354), (0.25, 358), (0.25, 363), (0.25, 364), (0.25, 366), (0.25, 367), (0.25, 372), (0.25, 376), (0.25, 378), (0.25, 383), (0.25, 387), (0.25, 390), (0.25, 395), (0.25, 396), (0.225, 253), (0.1875, 246), (0.16666666666666666, 2), (0.16666666666666666, 3), (0.16666666666666666, 16), (0.16666666666666666, 21), (0.16666666666666666, 40), (0.16666666666666666, 55), (0.16666666666666666, 71), (0.16666666666666666, 84), (0.16666666666666666, 108), (0.16666666666666666, 111), (0.16666666666666666, 116), (0.16666666666666666, 129), (0.16666666666666666, 179), (0.16666666666666666, 180), (0.16666666666666666, 184), (0.16666666666666666, 188), (0.16666666666666666, 192), (0.16666666666666666, 194), (0.16666666666666666, 199), (0.16666666666666666, 201), (0.16666666666666666, 203), (0.16666666666666666, 214), (0.16666666666666666, 216), (0.16666666666666666, 232), (0.16666666666666666, 233), (0.16666666666666666, 244), (0.16666666666666666, 263), (0.16666666666666666, 268), (0.16666666666666666, 271), (0.16666666666666666, 278), (0.16666666666666666, 285), (0.16666666666666666, 287), (0.16666666666666666, 301), (0.16666666666666666, 304), (0.16666666666666666, 306), (0.16666666666666666, 317), (0.16666666666666666, 321), (0.16666666666666666, 338), (0.16666666666666666, 341), (0.16666666666666666, 349), (0.16666666666666666, 377), (0.16666666666666666, 379), (0.16666666666666666, 385), (0.16666666666666666, 388), (0.16666666666666666, 392), (0.16666666666666666, 398), (0.16666666666666666, 399), (0.125, 0), (0.125, 6), (0.125, 7), (0.125, 9), (0.125, 11), (0.125, 18), (0.125, 19), (0.125, 22), (0.125, 23), (0.125, 26), (0.125, 29), (0.125, 31), (0.125, 32), (0.125, 33), (0.125, 35), (0.125, 36), (0.125, 37), (0.125, 38), (0.125, 43), (0.125, 44), (0.125, 46), (0.125, 47), (0.125, 51), (0.125, 53), (0.125, 57), (0.125, 58), (0.125, 59), (0.125, 62), (0.125, 65), (0.125, 68), (0.125, 69), (0.125, 70), (0.125, 72), (0.125, 78), (0.125, 81), (0.125, 82), (0.125, 83), (0.125, 87), (0.125, 88), (0.125, 89), (0.125, 90), (0.125, 92), (0.125, 94), (0.125, 99), (0.125, 100), (0.125, 107), (0.125, 110), (0.125, 115), (0.125, 118), (0.125, 119), (0.125, 121), (0.125, 123), (0.125, 126), (0.125, 128), (0.125, 131), (0.125, 132), (0.125, 133), (0.125, 135), (0.125, 138), (0.125, 139), (0.125, 140), (0.125, 141), (0.125, 143), (0.125, 145), (0.125, 146), (0.125, 152), (0.125, 153), (0.125, 156), (0.125, 157), (0.125, 160), (0.125, 162), (0.125, 166), (0.125, 167), (0.125, 169), (0.125, 170), (0.125, 174), (0.125, 177), (0.125, 178), (0.125, 185), (0.125, 186), (0.125, 193), (0.125, 196), (0.125, 205), (0.125, 206), (0.125, 208), (0.125, 210), (0.125, 211), (0.125, 215), (0.125, 217), (0.125, 219), (0.125, 223), (0.125, 225), (0.125, 228), (0.125, 229), (0.125, 230), (0.125, 235), (0.125, 236), (0.125, 237), (0.125, 238), (0.125, 239), (0.125, 242), (0.125, 245), (0.125, 249), (0.125, 250), (0.125, 257), (0.125, 262), (0.125, 265), (0.125, 267), (0.125, 269), (0.125, 272), (0.125, 273), (0.125, 274), (0.125, 277), (0.125, 280), (0.125, 282), (0.125, 288), (0.125, 292), (0.125, 293), (0.125, 297), (0.125, 299), (0.125, 300), (0.125, 309), (0.125, 310), (0.125, 312), (0.125, 314), (0.125, 315), (0.125, 316), (0.125, 322), (0.125, 324), (0.125, 325), (0.125, 326), (0.125, 327), (0.125, 331), (0.125, 336), (0.125, 337), (0.125, 339), (0.125, 340), (0.125, 343), (0.125, 345), (0.125, 347), (0.125, 350), (0.125, 351), (0.125, 352), (0.125, 356), (0.125, 357), (0.125, 359), (0.125, 361), (0.125, 362), (0.125, 365), (0.125, 369), (0.125, 371), (0.125, 374), (0.125, 375), (0.125, 380), (0.125, 381), (0.125, 382), (0.125, 384), (0.125, 386), (0.125, 389), (0.1, 270), (0.08333333333333333, 130), (0.07142857142857142, 109), (0.05555555555555555, 394), (0.05, 260)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ y x) (* y 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) (+ (* 6 y) 6)))
 nr_nodes: 10]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* (+ (* y x) y) x)))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 212), (1.5, 296), (1.25, 411), (1.25, 191), (1.125, 77), (1.125, 41), (1.125, 243), (1.125, 402), (1.125, 308), (1.0, 409), (1.0, 333), (1.0, 56), (1.0, 67), (1.0, 155), (1.0, 404), (1.0, 417), (1.0, 165), (1.0, 342), (1.0, 42), (1.0, 63), (1.0, 200), (1.0, 332), (1.0, 302), (1.0, 391), (0.75, 436), (0.75, 144), (0.625, 149), (0.625, 158), (0.625, 373), (0.625, 12), (0.625, 419), (0.625, 413), (0.625, 275), (0.625, 159), (0.625, 96), (0.625, 305), (0.625, 415), (0.5416666666666666, 400), (0.5416666666666666, 79), (0.5, 264), (0.5, 437), (0.5, 421), (0.5, 222), (0.5, 209), (0.5, 95), (0.5, 423), (0.5, 98), (0.5, 425), (0.5, 438), (0.5, 48), (0.5, 422), (0.5, 221), (0.5, 319), (0.5, 136), (0.5, 427), (0.5, 80), (0.5, 75), (0.5, 426), (0.5, 355), (0.5, 226), (0.5, 318), (0.5, 430), (0.5, 86), (0.5, 368), (0.5, 434), (0.5, 431), (0.5, 231), (0.5, 432), (0.5, 480), (0.5, 163), (0.5, 348), (0.5, 64), (0.5, 397), (0.5, 91), (0.5, 151), (0.5, 52), (0.5, 403), (0.5, 491), (0.5, 30), (0.5, 393), (0.5, 112), (0.5, 101), (0.5, 428), (0.5, 175), (0.5, 93), (0.41666666666666663, 213), (0.41666666666666663, 254), (0.41666666666666663, 440), (0.41666666666666663, 443), (0.41666666666666663, 276), (0.41666666666666663, 450), (0.41666666666666663, 114), (0.41666666666666663, 439), (0.41666666666666663, 448), (0.41666666666666663, 370), (0.41666666666666663, 17), (0.41666666666666663, 441), (0.41666666666666663, 49), (0.41666666666666663, 447), (0.41666666666666663, 444), (0.41666666666666663, 360), (0.41666666666666663, 256), (0.41666666666666663, 134), (0.41666666666666663, 207), (0.41666666666666663, 120), (0.41666666666666663, 251), (0.41666666666666663, 74), (0.375, 50), (0.375, 147), (0.375, 137), (0.375, 161), (0.375, 451), (0.375, 449), (0.375, 247), (0.375, 173), (0.375, 344), (0.375, 452), (0.375, 313), (0.375, 148), (0.25, 307), (0.25, 106), (0.25, 202), (0.25, 460), (0.25, 103), (0.25, 248), (0.25, 183), (0.25, 117), (0.25, 311), (0.25, 105), (0.25, 376), (0.25, 154), (0.25, 474), (0.25, 8), (0.25, 104), (0.25, 455), (0.25, 364), (0.25, 481), (0.25, 76), (0.25, 330), (0.25, 259), (0.25, 387), (0.25, 469), (0.25, 20), (0.25, 171), (0.25, 73), (0.25, 125), (0.25, 172), (0.25, 187), (0.25, 494), (0.25, 102), (0.25, 258), (0.25, 241), (0.25, 408), (0.25, 54), (0.25, 483), (0.25, 122), (0.25, 396), (0.25, 27), (0.25, 490), (0.25, 472), (0.25, 395), (0.25, 113), (0.25, 224), (0.25, 218), (0.25, 290), (0.25, 295), (0.25, 164), (0.25, 234), (0.25, 328), (0.25, 255), (0.25, 261), (0.25, 150), (0.25, 124), (0.25, 495), (0.25, 406), (0.25, 334), (0.25, 323), (0.25, 61), (0.25, 358), (0.25, 372), (0.25, 1), (0.25, 39), (0.25, 34), (0.25, 24), (0.25, 197), (0.25, 289), (0.25, 204), (0.25, 479), (0.25, 60), (0.25, 291), (0.25, 353), (0.25, 468), (0.25, 195), (0.25, 182), (0.25, 10), (0.25, 284), (0.25, 189), (0.25, 366), (0.25, 489), (0.25, 15), (0.25, 329), (0.25, 303), (0.25, 286), (0.25, 252), (0.25, 378), (0.25, 471), (0.25, 466), (0.25, 470), (0.25, 477), (0.25, 454), (0.25, 45), (0.25, 190), (0.25, 456), (0.25, 320), (0.25, 283), (0.25, 168), (0.25, 176), (0.25, 66), (0.25, 25), (0.25, 279), (0.25, 240), (0.25, 298), (0.25, 475), (0.25, 142), (0.25, 97), (0.25, 363), (0.25, 467), (0.25, 281), (0.25, 13), (0.25, 294), (0.25, 14), (0.25, 383), (0.25, 354), (0.25, 227), (0.25, 496), (0.25, 485), (0.25, 335), (0.25, 85), (0.25, 198), (0.25, 497), (0.25, 367), (0.25, 488), (0.25, 493), (0.25, 486), (0.25, 181), (0.25, 5), (0.25, 462), (0.25, 464), (0.25, 28), (0.25, 390), (0.25, 459), (0.25, 453), (0.25, 457), (0.25, 127), (0.25, 346), (0.25, 220), (0.25, 4), (0.25, 266), (0.225, 253), (0.1875, 246), (0.16666666666666666, 55), (0.16666666666666666, 188), (0.16666666666666666, 21), (0.16666666666666666, 16), (0.16666666666666666, 180), (0.16666666666666666, 317), (0.16666666666666666, 179), (0.16666666666666666, 111), (0.16666666666666666, 304), (0.16666666666666666, 416), (0.16666666666666666, 184), (0.16666666666666666, 278), (0.16666666666666666, 301), (0.16666666666666666, 388), (0.16666666666666666, 321), (0.16666666666666666, 232), (0.16666666666666666, 201), (0.16666666666666666, 71), (0.16666666666666666, 446), (0.16666666666666666, 214), (0.16666666666666666, 203), (0.16666666666666666, 399), (0.16666666666666666, 392), (0.16666666666666666, 40), (0.16666666666666666, 263), (0.16666666666666666, 194), (0.16666666666666666, 268), (0.16666666666666666, 377), (0.16666666666666666, 108), (0.16666666666666666, 3), (0.16666666666666666, 349), (0.16666666666666666, 271), (0.16666666666666666, 424), (0.16666666666666666, 244), (0.16666666666666666, 116), (0.16666666666666666, 2), (0.16666666666666666, 398), (0.16666666666666666, 199), (0.16666666666666666, 287), (0.16666666666666666, 385), (0.16666666666666666, 129), (0.16666666666666666, 341), (0.16666666666666666, 84), (0.16666666666666666, 285), (0.16666666666666666, 338), (0.16666666666666666, 233), (0.16666666666666666, 379), (0.16666666666666666, 306), (0.16666666666666666, 412), (0.16666666666666666, 192), (0.16666666666666666, 216), (0.125, 119), (0.125, 78), (0.125, 62), (0.125, 92), (0.125, 26), (0.125, 32), (0.125, 83), (0.125, 170), (0.125, 68), (0.125, 19), (0.125, 153), (0.125, 38), (0.125, 118), (0.125, 69), (0.125, 7), (0.125, 36), (0.125, 166), (0.125, 145), (0.125, 156), (0.125, 211), (0.125, 121), (0.125, 46), (0.125, 89), (0.125, 132), (0.125, 139), (0.125, 43), (0.125, 35), (0.125, 174), (0.125, 107), (0.125, 146), (0.125, 185), (0.125, 100), (0.125, 141), (0.125, 133), (0.125, 206), (0.125, 99), (0.125, 37), (0.125, 88), (0.125, 23), (0.125, 87), (0.125, 22), (0.125, 57), (0.125, 205), (0.125, 169), (0.125, 58), (0.125, 196), (0.125, 0), (0.125, 160), (0.125, 94), (0.125, 53), (0.125, 193), (0.125, 178), (0.125, 143), (0.125, 70), (0.125, 215), (0.125, 44), (0.125, 152), (0.125, 31), (0.125, 90), (0.125, 208), (0.125, 128), (0.125, 210), (0.125, 51), (0.125, 33), (0.125, 138), (0.125, 47), (0.125, 81), (0.125, 123), (0.125, 177), (0.125, 110), (0.125, 18), (0.125, 167), (0.125, 72), (0.125, 157), (0.125, 131), (0.125, 115), (0.125, 65), (0.125, 11), (0.125, 217), (0.125, 6), (0.125, 126), (0.125, 162), (0.125, 59), (0.125, 29), (0.125, 140), (0.125, 82), (0.125, 135), (0.125, 9), (0.125, 186)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 411
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x (+ x 6)) y) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ y x) (* y 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* (+ (* y x) y) x)))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 212), (1.5, 296), (1.5, 498), (1.25, 191), (1.25, 517), (1.25, 411), (1.125, 500), (1.125, 503), (1.125, 402), (1.125, 308), (1.125, 41), (1.125, 77), (1.125, 243), (1.0, 342), (1.0, 543), (1.0, 63), (1.0, 67), (1.0, 404), (1.0, 507), (1.0, 42), (1.0, 505), (1.0, 302), (1.0, 525), (1.0, 510), (1.0, 155), (1.0, 409), (1.0, 333), (1.0, 200), (1.0, 417), (1.0, 506), (1.0, 391), (1.0, 502), (1.0, 504), (1.0, 56), (1.0, 165), (1.0, 332), (0.75, 144), (0.75, 436), (0.75, 511), (0.625, 159), (0.625, 415), (0.625, 149), (0.625, 413), (0.625, 275), (0.625, 305), (0.625, 593), (0.625, 518), (0.625, 521), (0.625, 419), (0.625, 158), (0.625, 96), (0.625, 373), (0.625, 513), (0.625, 515), (0.625, 535), (0.625, 12), (0.5416666666666666, 79), (0.5416666666666666, 519), (0.5416666666666666, 400), (0.5, 428), (0.5, 136), (0.5, 222), (0.5, 425), (0.5, 423), (0.5, 393), (0.5, 523), (0.5, 431), (0.5, 101), (0.5, 151), (0.5, 368), (0.5, 426), (0.5, 226), (0.5, 542), (0.5, 80), (0.5, 98), (0.5, 403), (0.5, 438), (0.5, 75), (0.5, 209), (0.5, 530), (0.5, 538), (0.5, 421), (0.5, 95), (0.5, 508), (0.5, 163), (0.5, 91), (0.5, 175), (0.5, 545), (0.5, 524), (0.5, 397), (0.5, 355), (0.5, 221), (0.5, 112), (0.5, 432), (0.5, 437), (0.5, 86), (0.5, 480), (0.5, 52), (0.5, 93), (0.5, 520), (0.5, 427), (0.5, 318), (0.5, 48), (0.5, 547), (0.5, 30), (0.5, 348), (0.5, 434), (0.5, 540), (0.5, 422), (0.5, 491), (0.5, 319), (0.5, 537), (0.5, 231), (0.5, 430), (0.5, 64), (0.5, 264), (0.41666666666666663, 254), (0.41666666666666663, 440), (0.41666666666666663, 443), (0.41666666666666663, 444), (0.41666666666666663, 213), (0.41666666666666663, 120), (0.41666666666666663, 563), (0.41666666666666663, 571), (0.41666666666666663, 276), (0.41666666666666663, 450), (0.41666666666666663, 251), (0.41666666666666663, 134), (0.41666666666666663, 439), (0.41666666666666663, 551), (0.41666666666666663, 17), (0.41666666666666663, 546), (0.41666666666666663, 207), (0.41666666666666663, 74), (0.41666666666666663, 556), (0.41666666666666663, 550), (0.41666666666666663, 447), (0.41666666666666663, 554), (0.41666666666666663, 256), (0.41666666666666663, 448), (0.41666666666666663, 370), (0.41666666666666663, 360), (0.41666666666666663, 555), (0.41666666666666663, 49), (0.41666666666666663, 114), (0.41666666666666663, 558), (0.41666666666666663, 441), (0.41666666666666663, 562), (0.375, 173), (0.375, 451), (0.375, 50), (0.375, 148), (0.375, 452), (0.375, 572), (0.375, 161), (0.375, 565), (0.375, 344), (0.375, 566), (0.375, 247), (0.375, 569), (0.375, 137), (0.375, 568), (0.375, 313), (0.375, 449), (0.375, 147), (0.25, 124), (0.25, 197), (0.25, 358), (0.25, 258), (0.25, 376), (0.25, 526), (0.25, 586), (0.25, 584), (0.25, 1), (0.25, 204), (0.25, 395), (0.25, 469), (0.25, 320), (0.25, 34), (0.25, 102), (0.25, 13), (0.25, 113), (0.25, 328), (0.25, 575), (0.25, 298), (0.25, 363), (0.25, 4), (0.25, 474), (0.25, 459), (0.25, 494), (0.25, 576), (0.25, 497), (0.25, 533), (0.25, 127), (0.25, 252), (0.25, 464), (0.25, 106), (0.25, 591), (0.25, 323), (0.25, 466), (0.25, 548), (0.25, 291), (0.25, 303), (0.25, 15), (0.25, 454), (0.25, 10), (0.25, 390), (0.25, 283), (0.25, 495), (0.25, 154), (0.25, 97), (0.25, 330), (0.25, 307), (0.25, 220), (0.25, 468), (0.25, 509), (0.25, 164), (0.25, 488), (0.25, 471), (0.25, 279), (0.25, 60), (0.25, 455), (0.25, 39), (0.25, 294), (0.25, 122), (0.25, 295), (0.25, 20), (0.25, 183), (0.25, 372), (0.25, 354), (0.25, 496), (0.25, 477), (0.25, 125), (0.25, 28), (0.25, 483), (0.25, 286), (0.25, 117), (0.25, 66), (0.25, 281), (0.25, 104), (0.25, 383), (0.25, 516), (0.25, 103), (0.25, 486), (0.25, 261), (0.25, 289), (0.25, 73), (0.25, 142), (0.25, 406), (0.25, 460), (0.25, 527), (0.25, 105), (0.25, 462), (0.25, 224), (0.25, 346), (0.25, 218), (0.25, 189), (0.25, 364), (0.25, 453), (0.25, 366), (0.25, 470), (0.25, 182), (0.25, 481), (0.25, 284), (0.25, 329), (0.25, 579), (0.25, 181), (0.25, 24), (0.25, 574), (0.25, 457), (0.25, 234), (0.25, 172), (0.25, 353), (0.25, 241), (0.25, 198), (0.25, 266), (0.25, 255), (0.25, 456), (0.25, 367), (0.25, 475), (0.25, 587), (0.25, 489), (0.25, 396), (0.25, 479), (0.25, 387), (0.25, 240), (0.25, 85), (0.25, 76), (0.25, 583), (0.25, 490), (0.25, 8), (0.25, 290), (0.25, 248), (0.25, 27), (0.25, 168), (0.25, 45), (0.25, 589), (0.25, 5), (0.25, 493), (0.25, 472), (0.25, 190), (0.25, 202), (0.25, 61), (0.25, 335), (0.25, 150), (0.25, 577), (0.25, 467), (0.25, 171), (0.25, 187), (0.25, 311), (0.25, 378), (0.25, 54), (0.25, 259), (0.25, 588), (0.25, 227), (0.25, 408), (0.25, 176), (0.25, 14), (0.25, 485), (0.25, 195), (0.25, 25), (0.25, 578), (0.25, 334), (0.225, 253), (0.1875, 246), (0.16666666666666666, 2), (0.16666666666666666, 179), (0.16666666666666666, 111), (0.16666666666666666, 561), (0.16666666666666666, 399), (0.16666666666666666, 528), (0.16666666666666666, 321), (0.16666666666666666, 416), (0.16666666666666666, 287), (0.16666666666666666, 194), (0.16666666666666666, 377), (0.16666666666666666, 199), (0.16666666666666666, 3), (0.16666666666666666, 338), (0.16666666666666666, 317), (0.16666666666666666, 544), (0.16666666666666666, 55), (0.16666666666666666, 188), (0.16666666666666666, 203), (0.16666666666666666, 263), (0.16666666666666666, 16), (0.16666666666666666, 564), (0.16666666666666666, 392), (0.16666666666666666, 388), (0.16666666666666666, 446), (0.16666666666666666, 552), (0.16666666666666666, 499), (0.16666666666666666, 233), (0.16666666666666666, 306), (0.16666666666666666, 271), (0.16666666666666666, 285), (0.16666666666666666, 412), (0.16666666666666666, 129), (0.16666666666666666, 304), (0.16666666666666666, 201), (0.16666666666666666, 216), (0.16666666666666666, 21), (0.16666666666666666, 40), (0.16666666666666666, 268), (0.16666666666666666, 341), (0.16666666666666666, 180), (0.16666666666666666, 385), (0.16666666666666666, 301), (0.16666666666666666, 116), (0.16666666666666666, 192), (0.16666666666666666, 184), (0.16666666666666666, 232), (0.16666666666666666, 349), (0.16666666666666666, 398), (0.16666666666666666, 244), (0.16666666666666666, 214), (0.16666666666666666, 539), (0.16666666666666666, 84), (0.16666666666666666, 108), (0.16666666666666666, 278), (0.16666666666666666, 71), (0.16666666666666666, 581), (0.16666666666666666, 424), (0.16666666666666666, 379), (0.16666666666666666, 560), (0.125, 92), (0.125, 26), (0.125, 170), (0.125, 32), (0.125, 153), (0.125, 531), (0.125, 83), (0.125, 118), (0.125, 119), (0.125, 69), (0.125, 78), (0.125, 19), (0.125, 68), (0.125, 62), (0.125, 38)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ y x) (* y 6))))
 nr_nodes: 10]
(CANDIDATE)[id: 517
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`6`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* x 6)) (+ y 6)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.625, 596), (1.5, 498), (1.5, 296), (1.5, 212), (1.25, 411), (1.25, 598), (1.25, 604), (1.25, 517), (1.25, 191), (1.125, 649), (1.125, 77), (1.125, 402), (1.125, 662), (1.125, 600), (1.125, 243), (1.125, 500), (1.125, 627), (1.125, 609), (1.125, 41), (1.125, 640), (1.125, 308), (1.125, 503), (1.0, 663), (1.0, 342), (1.0, 506), (1.0, 650), (1.0, 200), (1.0, 608), (1.0, 502), (1.0, 607), (1.0, 505), (1.0, 165), (1.0, 404), (1.0, 661), (1.0, 611), (1.0, 504), (1.0, 646), (1.0, 417), (1.0, 67), (1.0, 507), (1.0, 543), (1.0, 525), (1.0, 56), (1.0, 155), (1.0, 332), (1.0, 653), (1.0, 510), (1.0, 391), (1.0, 409), (1.0, 302), (1.0, 42), (1.0, 657), (1.0, 333), (1.0, 63), (0.75, 599), (0.75, 511), (0.75, 436), (0.75, 144), (0.625, 626), (0.625, 415), (0.625, 513), (0.625, 658), (0.625, 642), (0.625, 535), (0.625, 620), (0.625, 159), (0.625, 419), (0.625, 521), (0.625, 305), (0.625, 593), (0.625, 149), (0.625, 96), (0.625, 158), (0.625, 621), (0.625, 373), (0.625, 518), (0.625, 275), (0.625, 12), (0.625, 515), (0.625, 413), (0.625, 630), (0.5416666666666666, 400), (0.5416666666666666, 519), (0.5416666666666666, 594), (0.5416666666666666, 79), (0.5, 524), (0.5, 542), (0.5, 520), (0.5, 393), (0.5, 30), (0.5, 319), (0.5, 397), (0.5, 427), (0.5, 221), (0.5, 491), (0.5, 639), (0.5, 638), (0.5, 163), (0.5, 422), (0.5, 523), (0.5, 636), (0.5, 633), (0.5, 423), (0.5, 545), (0.5, 612), (0.5, 538), (0.5, 634), (0.5, 603), (0.5, 98), (0.5, 355), (0.5, 222), (0.5, 226), (0.5, 48), (0.5, 264), (0.5, 540), (0.5, 75), (0.5, 431), (0.5, 438), (0.5, 430), (0.5, 547), (0.5, 428), (0.5, 643), (0.5, 537), (0.5, 530), (0.5, 480), (0.5, 656), (0.5, 80), (0.5, 508), (0.5, 86), (0.5, 52), (0.5, 421), (0.5, 95), (0.5, 175), (0.5, 151), (0.5, 432), (0.5, 112), (0.5, 425), (0.5, 660), (0.5, 403), (0.5, 231), (0.5, 136), (0.5, 426), (0.5, 91), (0.5, 318), (0.5, 618), (0.5, 659), (0.5, 635), (0.5, 601), (0.5, 434), (0.5, 348), (0.5, 93), (0.5, 437), (0.5, 101), (0.5, 368), (0.5, 64), (0.5, 209), (0.41666666666666663, 444), (0.41666666666666663, 571), (0.41666666666666663, 450), (0.41666666666666663, 360), (0.41666666666666663, 551), (0.41666666666666663, 684), (0.41666666666666663, 443), (0.41666666666666663, 674), (0.41666666666666663, 134), (0.41666666666666663, 673), (0.41666666666666663, 562), (0.41666666666666663, 669), (0.41666666666666663, 256), (0.41666666666666663, 685), (0.41666666666666663, 550), (0.41666666666666663, 676), (0.41666666666666663, 207), (0.41666666666666663, 49), (0.41666666666666663, 447), (0.41666666666666663, 675), (0.41666666666666663, 74), (0.41666666666666663, 276), (0.41666666666666663, 441), (0.41666666666666663, 563), (0.41666666666666663, 689), (0.41666666666666663, 439), (0.41666666666666663, 546), (0.41666666666666663, 687), (0.41666666666666663, 668), (0.41666666666666663, 440), (0.41666666666666663, 251), (0.41666666666666663, 17), (0.41666666666666663, 448), (0.41666666666666663, 114), (0.41666666666666663, 680), (0.41666666666666663, 120), (0.41666666666666663, 682), (0.41666666666666663, 686), (0.41666666666666663, 555), (0.41666666666666663, 556), (0.41666666666666663, 213), (0.41666666666666663, 370), (0.41666666666666663, 554), (0.41666666666666663, 667), (0.41666666666666663, 254), (0.41666666666666663, 558), (0.375, 569), (0.375, 147), (0.375, 451), (0.375, 148), (0.375, 565), (0.375, 313), (0.375, 568), (0.375, 449), (0.375, 572), (0.375, 344), (0.375, 173), (0.375, 161), (0.375, 619), (0.375, 631), (0.375, 452), (0.375, 247), (0.375, 137), (0.375, 50), (0.375, 566), (0.29166666666666663, 632), (0.25, 462), (0.25, 34), (0.25, 195), (0.25, 266), (0.25, 588), (0.25, 171), (0.25, 261), (0.25, 60), (0.25, 323), (0.25, 485), (0.25, 5), (0.25, 61), (0.25, 614), (0.25, 197), (0.25, 1), (0.25, 97), (0.25, 28), (0.25, 294), (0.25, 625), (0.25, 489), (0.25, 224), (0.25, 363), (0.25, 516), (0.25, 459), (0.25, 395), (0.25, 533), (0.25, 202), (0.25, 45), (0.25, 248), (0.25, 25), (0.25, 150), (0.25, 488), (0.25, 122), (0.25, 578), (0.25, 105), (0.25, 584), (0.25, 241), (0.25, 76), (0.25, 66), (0.25, 335), (0.25, 104), (0.25, 378), (0.25, 329), (0.25, 234), (0.25, 117), (0.25, 198), (0.25, 396), (0.25, 526), (0.25, 54), (0.25, 467), (0.25, 468), (0.25, 259), (0.25, 486), (0.25, 587), (0.25, 383), (0.25, 367), (0.25, 479), (0.25, 258), (0.25, 376), (0.25, 168), (0.25, 616), (0.25, 586), (0.25, 283), (0.25, 124), (0.25, 204), (0.25, 220), (0.25, 574), (0.25, 358), (0.25, 106), (0.25, 481), (0.25, 10), (0.25, 490), (0.25, 328), (0.25, 102), (0.25, 651), (0.25, 172), (0.25, 4), (0.25, 494), (0.25, 164), (0.25, 576), (0.25, 85), (0.25, 183), (0.25, 579), (0.25, 387), (0.25, 227), (0.25, 218), (0.25, 577), (0.25, 286), (0.25, 15), (0.25, 493), (0.25, 666), (0.25, 311), (0.25, 13), (0.25, 189), (0.25, 142), (0.25, 372), (0.25, 477), (0.25, 295), (0.25, 290), (0.25, 583), (0.25, 303), (0.25, 181), (0.25, 464), (0.25, 320), (0.25, 176), (0.25, 103), (0.25, 453), (0.25, 470), (0.25, 334), (0.25, 457), (0.25, 469), (0.25, 39), (0.25, 575), (0.25, 27), (0.25, 527), (0.25, 475), (0.25, 113), (0.25, 20), (0.25, 255), (0.25, 390), (0.25, 622), (0.25, 496), (0.25, 408), (0.25, 125), (0.25, 474), (0.25, 154), (0.25, 364), (0.25, 291), (0.25, 495), (0.25, 366), (0.25, 456), (0.25, 406), (0.25, 330), (0.25, 354), (0.25, 454), (0.25, 509), (0.25, 460), (0.25, 190), (0.25, 14), (0.25, 307), (0.25, 73), (0.25, 353), (0.25, 279), (0.25, 284), (0.25, 182), (0.25, 497), (0.25, 298), (0.25, 289), (0.25, 548), (0.25, 466), (0.25, 346), (0.25, 637), (0.25, 127), (0.25, 281), (0.25, 589), (0.25, 24), (0.25, 471), (0.25, 455), (0.25, 591), (0.25, 483), (0.25, 472), (0.25, 240), (0.25, 8), (0.25, 187), (0.25, 252), (0.225, 253), (0.1875, 246), (0.16666666666666666, 681), (0.16666666666666666, 671), (0.16666666666666666, 654), (0.16666666666666666, 606), (0.16666666666666666, 644), (0.16666666666666666, 624), (0.16666666666666666, 648), (0.16666666666666666, 665), (0.16666666666666666, 678), (0.16666666666666666, 610), (0.16666666666666666, 628)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 411
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x (+ x 6)) y) 6))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.625, 596), (1.5, 296), (1.5, 498), (1.5, 691), (1.5, 690), (1.5, 212), (1.375, 726), (1.25, 191), (1.25, 598), (1.25, 517), (1.25, 604), (1.25, 692), (1.25, 411), (1.125, 640), (1.125, 662), (1.125, 697), (1.125, 609), (1.125, 77), (1.125, 704), (1.125, 627), (1.125, 698), (1.125, 600), (1.125, 503), (1.125, 41), (1.125, 649), (1.125, 695), (1.125, 732), (1.125, 500), (1.125, 308), (1.125, 402), (1.125, 243), (1.125, 703), (1.0, 756), (1.0, 711), (1.0, 761), (1.0, 200), (1.0, 502), (1.0, 63), (1.0, 67), (1.0, 42), (1.0, 608), (1.0, 663), (1.0, 302), (1.0, 543), (1.0, 332), (1.0, 767), (1.0, 699), (1.0, 712), (1.0, 710), (1.0, 607), (1.0, 404), (1.0, 504), (1.0, 763), (1.0, 650), (1.0, 661), (1.0, 707), (1.0, 333), (1.0, 165), (1.0, 525), (1.0, 714), (1.0, 646), (1.0, 657), (1.0, 342), (1.0, 718), (1.0, 391), (1.0, 56), (1.0, 417), (1.0, 786), (1.0, 720), (1.0, 510), (1.0, 750), (1.0, 721), (1.0, 155), (1.0, 506), (1.0, 505), (1.0, 611), (1.0, 507), (1.0, 717), (1.0, 728), (1.0, 653), (1.0, 409), (0.75, 436), (0.75, 693), (0.75, 511), (0.75, 599), (0.75, 144), (0.75, 722), (0.75, 781), (0.75, 730), (0.625, 658), (0.625, 305), (0.625, 158), (0.625, 515), (0.625, 739), (0.625, 642), (0.625, 593), (0.625, 784), (0.625, 149), (0.625, 373), (0.625, 521), (0.625, 630), (0.625, 419), (0.625, 626), (0.625, 96), (0.625, 415), (0.625, 535), (0.625, 275), (0.625, 12), (0.625, 741), (0.625, 734), (0.625, 159), (0.625, 518), (0.625, 513), (0.625, 620), (0.625, 621), (0.625, 745), (0.625, 740), (0.625, 413), (0.5416666666666666, 400), (0.5416666666666666, 594), (0.5416666666666666, 79), (0.5416666666666666, 747), (0.5416666666666666, 519), (0.5, 751), (0.5, 656), (0.5, 709), (0.5, 729), (0.5, 434), (0.5, 701), (0.5, 638), (0.5, 75), (0.5, 136), (0.5, 98), (0.5, 86), (0.5, 508), (0.5, 523), (0.5, 782), (0.5, 393), (0.5, 95), (0.5, 437), (0.5, 547), (0.5, 80), (0.5, 545), (0.5, 431), (0.5, 91), (0.5, 760), (0.5, 231), (0.5, 480), (0.5, 209), (0.5, 537), (0.5, 770), (0.5, 634), (0.5, 226), (0.5, 639), (0.5, 112), (0.5, 422), (0.5, 735), (0.5, 222), (0.5, 52), (0.5, 635), (0.5, 765), (0.5, 618), (0.5, 636), (0.5, 768), (0.5, 776), (0.5, 355), (0.5, 368), (0.5, 538), (0.5, 633), (0.5, 603), (0.5, 428), (0.5, 423), (0.5, 348), (0.5, 264), (0.5, 785), (0.5, 397), (0.5, 773), (0.5, 540), (0.5, 432), (0.5, 151), (0.5, 163), (0.5, 769), (0.5, 759), (0.5, 660), (0.5, 421), (0.5, 403), (0.5, 530), (0.5, 93), (0.5, 101), (0.5, 777), (0.5, 780), (0.5, 542), (0.5, 787), (0.5, 426), (0.5, 601), (0.5, 221), (0.5, 438), (0.5, 430), (0.5, 64), (0.5, 319), (0.5, 725), (0.5, 524), (0.5, 427), (0.5, 425), (0.5, 491), (0.5, 30), (0.5, 643), (0.5, 318), (0.5, 762), (0.5, 48), (0.5, 659), (0.5, 612), (0.5, 520), (0.5, 175), (0.41666666666666663, 120), (0.41666666666666663, 668), (0.41666666666666663, 667), (0.41666666666666663, 563), (0.41666666666666663, 684), (0.41666666666666663, 276), (0.41666666666666663, 443), (0.41666666666666663, 555), (0.41666666666666663, 669), (0.41666666666666663, 716), (0.41666666666666663, 674), (0.41666666666666663, 213), (0.41666666666666663, 562), (0.41666666666666663, 49), (0.41666666666666663, 17), (0.41666666666666663, 682), (0.41666666666666663, 687), (0.41666666666666663, 571), (0.41666666666666663, 254), (0.41666666666666663, 676), (0.41666666666666663, 689), (0.41666666666666663, 550), (0.41666666666666663, 551), (0.41666666666666663, 554), (0.41666666666666663, 673), (0.41666666666666663, 450), (0.41666666666666663, 134), (0.41666666666666663, 74), (0.41666666666666663, 444), (0.41666666666666663, 441), (0.41666666666666663, 440), (0.41666666666666663, 686), (0.41666666666666663, 447), (0.41666666666666663, 680), (0.41666666666666663, 448), (0.41666666666666663, 256), (0.41666666666666663, 251), (0.41666666666666663, 546), (0.41666666666666663, 360), (0.41666666666666663, 439), (0.41666666666666663, 558), (0.41666666666666663, 207), (0.41666666666666663, 556), (0.41666666666666663, 114), (0.41666666666666663, 685), (0.41666666666666663, 370), (0.41666666666666663, 675), (0.375, 161), (0.375, 566), (0.375, 173), (0.375, 147), (0.375, 137), (0.375, 247), (0.375, 313), (0.375, 565), (0.375, 631), (0.375, 569), (0.375, 50), (0.375, 451), (0.375, 572), (0.375, 449), (0.375, 148), (0.375, 568), (0.375, 452), (0.375, 344), (0.375, 619), (0.375, 772), (0.29166666666666663, 632), (0.25, 358), (0.25, 13), (0.25, 1), (0.25, 295), (0.25, 227), (0.25, 303), (0.25, 516), (0.25, 488), (0.25, 34), (0.25, 329), (0.25, 28), (0.25, 204), (0.25, 258), (0.25, 168), (0.25, 15), (0.25, 290), (0.25, 335), (0.25, 197), (0.25, 117), (0.25, 25), (0.25, 775), (0.25, 378), (0.25, 10), (0.25, 294), (0.25, 754), (0.25, 164), (0.25, 60), (0.25, 102), (0.25, 286), (0.25, 54), (0.25, 526), (0.25, 771), (0.25, 387), (0.25, 234), (0.25, 328), (0.25, 241), (0.25, 106), (0.25, 261), (0.25, 172), (0.25, 396), (0.25, 142), (0.25, 587), (0.25, 459), (0.25, 283), (0.25, 76), (0.25, 85), (0.25, 462), (0.25, 266), (0.25, 259), (0.25, 490), (0.25, 574), (0.25, 363), (0.25, 61), (0.25, 202), (0.25, 376), (0.25, 45), (0.25, 372), (0.25, 651), (0.25, 614), (0.25, 579), (0.25, 481), (0.25, 311), (0.25, 779), (0.25, 189), (0.25, 477), (0.25, 494), (0.25, 616), (0.25, 576), (0.25, 97), (0.25, 666), (0.25, 4), (0.25, 198), (0.25, 105), (0.25, 323), (0.25, 766), (0.25, 578), (0.25, 367), (0.25, 485), (0.25, 395), (0.25, 753), (0.25, 467), (0.25, 224), (0.25, 493), (0.25, 183), (0.25, 723), (0.25, 122), (0.25, 468), (0.25, 584), (0.25, 195), (0.25, 583), (0.25, 577), (0.25, 533), (0.25, 220), (0.25, 181), (0.25, 124), (0.25, 486), (0.25, 625), (0.25, 783), (0.25, 66), (0.25, 5), (0.25, 171), (0.25, 464), (0.25, 743), (0.25, 586), (0.25, 104), (0.25, 706), (0.25, 700), (0.25, 383), (0.25, 218), (0.25, 588), (0.25, 150), (0.25, 489), (0.25, 479), (0.25, 248), (0.16666666666666666, 738), (0.16666666666666666, 737), (0.16666666666666666, 748), (0.16666666666666666, 758)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 691
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 690
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.625, 596), (1.5, 690), (1.5, 691), (1.5, 791), (1.5, 498), (1.5, 212), (1.5, 789), (1.5, 296), (1.375, 726), (1.25, 692), (1.25, 598), (1.25, 411), (1.25, 604), (1.25, 862), (1.25, 191), (1.25, 788), (1.25, 794), (1.25, 517), (1.125, 732), (1.125, 77), (1.125, 662), (1.125, 807), (1.125, 704), (1.125, 809), (1.125, 697), (1.125, 869), (1.125, 649), (1.125, 799), (1.125, 609), (1.125, 698), (1.125, 803), (1.125, 640), (1.125, 503), (1.125, 308), (1.125, 695), (1.125, 808), (1.125, 600), (1.125, 41), (1.125, 500), (1.125, 627), (1.125, 402), (1.125, 800), (1.125, 703), (1.125, 243), (1.0, 646), (1.0, 821), (1.0, 836), (1.0, 841), (1.0, 825), (1.0, 711), (1.0, 543), (1.0, 767), (1.0, 525), (1.0, 826), (1.0, 829), (1.0, 302), (1.0, 717), (1.0, 661), (1.0, 608), (1.0, 699), (1.0, 728), (1.0, 761), (1.0, 786), (1.0, 720), (1.0, 505), (1.0, 750), (1.0, 858), (1.0, 837), (1.0, 502), (1.0, 712), (1.0, 840), (1.0, 504), (1.0, 63), (1.0, 506), (1.0, 332), (1.0, 833), (1.0, 42), (1.0, 802), (1.0, 815), (1.0, 721), (1.0, 165), (1.0, 820), (1.0, 391), (1.0, 67), (1.0, 880), (1.0, 707), (1.0, 510), (1.0, 200), (1.0, 653), (1.0, 714), (1.0, 607), (1.0, 657), (1.0, 710), (1.0, 417), (1.0, 507), (1.0, 56), (1.0, 756), (1.0, 872), (1.0, 404), (1.0, 155), (1.0, 342), (1.0, 650), (1.0, 882), (1.0, 611), (1.0, 409), (1.0, 831), (1.0, 333), (1.0, 873), (1.0, 718), (1.0, 763), (1.0, 663), (0.875, 868), (0.75, 849), (0.75, 511), (0.75, 843), (0.75, 796), (0.75, 599), (0.75, 722), (0.75, 846), (0.75, 730), (0.75, 845), (0.75, 693), (0.75, 436), (0.75, 781), (0.75, 144), (0.625, 798), (0.625, 305), (0.625, 658), (0.625, 12), (0.625, 373), (0.625, 835), (0.625, 630), (0.625, 740), (0.625, 784), (0.625, 521), (0.625, 860), (0.625, 275), (0.625, 745), (0.625, 159), (0.625, 593), (0.625, 851), (0.625, 96), (0.625, 804), (0.625, 515), (0.625, 518), (0.625, 621), (0.625, 158), (0.625, 741), (0.625, 535), (0.625, 847), (0.625, 854), (0.625, 513), (0.625, 626), (0.625, 852), (0.625, 739), (0.625, 734), (0.625, 419), (0.625, 415), (0.625, 642), (0.625, 620), (0.625, 149), (0.625, 413), (0.5416666666666666, 594), (0.5416666666666666, 747), (0.5416666666666666, 79), (0.5416666666666666, 866), (0.5416666666666666, 519), (0.5416666666666666, 400), (0.5, 547), (0.5, 403), (0.5, 839), (0.5, 634), (0.5, 638), (0.5, 725), (0.5, 428), (0.5, 75), (0.5, 430), (0.5, 612), (0.5, 98), (0.5, 432), (0.5, 865), (0.5, 136), (0.5, 760), (0.5, 797), (0.5, 762), (0.5, 163), (0.5, 91), (0.5, 785), (0.5, 850), (0.5, 226), (0.5, 759), (0.5, 151), (0.5, 48), (0.5, 101), (0.5, 538), (0.5, 422), (0.5, 426), (0.5, 64), (0.5, 729), (0.5, 876), (0.5, 524), (0.5, 881), (0.5, 508), (0.5, 222), (0.5, 545), (0.5, 618), (0.5, 438), (0.5, 818), (0.5, 870), (0.5, 770), (0.5, 875), (0.5, 520), (0.5, 801), (0.5, 319), (0.5, 639), (0.5, 397), (0.5, 709), (0.5, 643), (0.5, 423), (0.5, 792), (0.5, 633), (0.5, 491), (0.5, 52), (0.5, 221), (0.5, 431), (0.5, 368), (0.5, 660), (0.5, 523), (0.5, 530), (0.5, 540), (0.5, 30), (0.5, 393), (0.5, 80), (0.5, 480), (0.5, 537), (0.5, 427), (0.5, 806), (0.5, 264), (0.5, 601), (0.5, 777), (0.5, 823), (0.5, 768), (0.5, 701), (0.5, 86), (0.5, 434), (0.5, 885), (0.5, 735), (0.5, 209), (0.5, 782), (0.5, 542), (0.5, 175), (0.5, 751), (0.5, 425), (0.5, 318), (0.5, 93), (0.5, 635), (0.5, 780), (0.5, 884), (0.5, 765), (0.5, 348), (0.5, 112), (0.5, 95), (0.5, 355), (0.5, 787), (0.5, 231), (0.5, 656), (0.5, 776), (0.5, 636), (0.5, 769), (0.5, 814), (0.5, 878), (0.5, 863), (0.5, 603), (0.5, 659), (0.5, 421), (0.5, 773), (0.5, 864), (0.5, 437), (0.41666666666666663, 207), (0.41666666666666663, 546), (0.41666666666666663, 370), (0.41666666666666663, 251), (0.41666666666666663, 686), (0.41666666666666663, 440), (0.41666666666666663, 120), (0.41666666666666663, 674), (0.41666666666666663, 134), (0.41666666666666663, 687), (0.41666666666666663, 676), (0.41666666666666663, 213), (0.41666666666666663, 668), (0.41666666666666663, 360), (0.41666666666666663, 256), (0.41666666666666663, 571), (0.41666666666666663, 856), (0.41666666666666663, 682), (0.41666666666666663, 685), (0.41666666666666663, 450), (0.41666666666666663, 563), (0.41666666666666663, 558), (0.41666666666666663, 675), (0.41666666666666663, 74), (0.41666666666666663, 554), (0.41666666666666663, 448), (0.41666666666666663, 444), (0.41666666666666663, 550), (0.41666666666666663, 562), (0.41666666666666663, 556), (0.41666666666666663, 447), (0.41666666666666663, 441), (0.41666666666666663, 716), (0.41666666666666663, 114), (0.41666666666666663, 49), (0.41666666666666663, 555), (0.41666666666666663, 439), (0.41666666666666663, 443), (0.41666666666666663, 689), (0.41666666666666663, 17), (0.41666666666666663, 684), (0.41666666666666663, 551), (0.41666666666666663, 673), (0.41666666666666663, 680), (0.41666666666666663, 276), (0.41666666666666663, 667), (0.41666666666666663, 669), (0.41666666666666663, 254), (0.375, 137), (0.375, 572), (0.375, 247), (0.375, 568), (0.375, 148), (0.375, 569), (0.375, 619), (0.375, 844), (0.375, 631), (0.375, 451), (0.375, 565), (0.375, 772), (0.375, 173), (0.375, 452), (0.375, 566), (0.375, 147), (0.375, 313), (0.375, 50), (0.375, 449), (0.375, 161), (0.375, 344), (0.29166666666666663, 632), (0.25, 168), (0.25, 258), (0.25, 10), (0.25, 830), (0.25, 488), (0.25, 328), (0.25, 828), (0.25, 526), (0.25, 15), (0.25, 883), (0.25, 516), (0.25, 54), (0.25, 106), (0.25, 303), (0.25, 13), (0.25, 286), (0.25, 290), (0.25, 117), (0.25, 294), (0.25, 60), (0.25, 771), (0.25, 754), (0.25, 234), (0.25, 172), (0.25, 387), (0.25, 816), (0.25, 25), (0.25, 459), (0.25, 378), (0.25, 329), (0.25, 396), (0.25, 358), (0.25, 197), (0.25, 295), (0.25, 261), (0.25, 335), (0.25, 241), (0.25, 813), (0.25, 227), (0.25, 587), (0.25, 164), (0.25, 34), (0.25, 102), (0.25, 775), (0.25, 204), (0.25, 28), (0.25, 1), (0.25, 142), (0.16666666666666666, 812), (0.16666666666666666, 871), (0.16666666666666666, 848), (0.16666666666666666, 811)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 690
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 691
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 791
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.625, 596), (1.625, 886), (1.5, 690), (1.5, 887), (1.5, 498), (1.5, 296), (1.5, 691), (1.5, 912), (1.5, 212), (1.5, 791), (1.5, 789), (1.375, 726), (1.25, 517), (1.25, 411), (1.25, 191), (1.25, 895), (1.25, 692), (1.25, 598), (1.25, 862), (1.25, 604), (1.25, 794), (1.25, 898), (1.25, 894), (1.25, 788), (1.125, 732), (1.125, 975), (1.125, 41), (1.125, 901), (1.125, 943), (1.125, 799), (1.125, 900), (1.125, 807), (1.125, 77), (1.125, 500), (1.125, 402), (1.125, 906), (1.125, 808), (1.125, 896), (1.125, 698), (1.125, 600), (1.125, 954), (1.125, 308), (1.125, 243), (1.125, 907), (1.125, 503), (1.125, 649), (1.125, 609), (1.125, 695), (1.125, 640), (1.125, 803), (1.125, 800), (1.125, 697), (1.125, 627), (1.125, 704), (1.125, 703), (1.125, 809), (1.125, 962), (1.125, 662), (1.125, 869), (1.125, 910), (1.0, 836), (1.0, 873), (1.0, 653), (1.0, 815), (1.0, 409), (1.0, 711), (1.0, 728), (1.0, 922), (1.0, 507), (1.0, 829), (1.0, 607), (1.0, 958), (1.0, 657), (1.0, 504), (1.0, 717), (1.0, 721), (1.0, 332), (1.0, 67), (1.0, 840), (1.0, 750), (1.0, 950), (1.0, 917), (1.0, 506), (1.0, 712), (1.0, 880), (1.0, 650), (1.0, 714), (1.0, 155), (1.0, 56), (1.0, 505), (1.0, 826), (1.0, 957), (1.0, 872), (1.0, 786), (1.0, 802), (1.0, 707), (1.0, 756), (1.0, 646), (1.0, 608), (1.0, 165), (1.0, 417), (1.0, 333), (1.0, 913), (1.0, 718), (1.0, 965), (1.0, 763), (1.0, 940), (1.0, 42), (1.0, 302), (1.0, 611), (1.0, 831), (1.0, 820), (1.0, 699), (1.0, 821), (1.0, 525), (1.0, 916), (1.0, 933), (1.0, 502), (1.0, 947), (1.0, 841), (1.0, 391), (1.0, 661), (1.0, 833), (1.0, 63), (1.0, 761), (1.0, 543), (1.0, 404), (1.0, 837), (1.0, 882), (1.0, 200), (1.0, 510), (1.0, 710), (1.0, 767), (1.0, 956), (1.0, 342), (1.0, 944), (1.0, 919), (1.0, 941), (1.0, 663), (1.0, 905), (1.0, 720), (1.0, 825), (1.0, 858), (0.875, 868), (0.75, 846), (0.75, 730), (0.75, 781), (0.75, 845), (0.75, 967), (0.75, 849), (0.75, 904), (0.75, 722), (0.75, 964), (0.75, 436), (0.75, 144), (0.75, 843), (0.75, 963), (0.75, 796), (0.75, 599), (0.75, 693), (0.75, 511), (0.625, 741), (0.625, 987), (0.625, 658), (0.625, 305), (0.625, 535), (0.625, 973), (0.625, 593), (0.625, 852), (0.625, 860), (0.625, 784), (0.625, 415), (0.625, 419), (0.625, 515), (0.625, 847), (0.625, 373), (0.625, 642), (0.625, 739), (0.625, 12), (0.625, 513), (0.625, 626), (0.625, 521), (0.625, 798), (0.625, 835), (0.625, 740), (0.625, 979), (0.625, 981), (0.625, 734), (0.625, 804), (0.625, 851), (0.625, 518), (0.625, 96), (0.625, 621), (0.625, 275), (0.625, 902), (0.625, 983), (0.625, 980), (0.625, 159), (0.625, 620), (0.625, 745), (0.625, 158), (0.625, 909), (0.625, 854), (0.625, 413), (0.625, 630), (0.625, 149), (0.5416666666666666, 400), (0.5416666666666666, 519), (0.5416666666666666, 79), (0.5416666666666666, 594), (0.5416666666666666, 866), (0.5416666666666666, 747), (0.5, 928), (0.5, 538), (0.5, 709), (0.5, 765), (0.5, 508), (0.5, 264), (0.5, 801), (0.5, 770), (0.5, 935), (0.5, 946), (0.5, 659), (0.5, 355), (0.5, 725), (0.5, 542), (0.5, 864), (0.5, 785), (0.5, 226), (0.5, 850), (0.5, 163), (0.5, 426), (0.5, 95), (0.5, 319), (0.5, 878), (0.5, 537), (0.5, 634), (0.5, 760), (0.5, 91), (0.5, 545), (0.5, 782), (0.5, 818), (0.5, 876), (0.5, 523), (0.5, 899), (0.5, 80), (0.5, 437), (0.5, 136), (0.5, 660), (0.5, 865), (0.5, 112), (0.5, 751), (0.5, 960), (0.5, 839), (0.5, 540), (0.5, 425), (0.5, 636), (0.5, 768), (0.5, 780), (0.5, 986), (0.5, 421), (0.5, 891), (0.5, 151), (0.5, 430), (0.5, 930), (0.5, 769), (0.5, 633), (0.5, 422), (0.5, 814), (0.5, 520), (0.5, 48), (0.5, 823), (0.5, 639), (0.5, 530), (0.5, 393), (0.5, 701), (0.5, 348), (0.5, 638), (0.5, 93), (0.5, 863), (0.5, 524), (0.5, 985), (0.5, 52), (0.5, 368), (0.5, 491), (0.5, 806), (0.5, 892), (0.5, 64), (0.5, 792), (0.5, 601), (0.5, 547), (0.5, 434), (0.5, 431), (0.5, 875), (0.5, 735), (0.5, 428), (0.5, 884), (0.5, 603), (0.5, 403), (0.5, 427), (0.5, 75), (0.5, 222), (0.5, 101), (0.5, 918), (0.5, 974), (0.5, 773), (0.5, 885), (0.5, 729), (0.5, 762), (0.5, 318), (0.5, 961), (0.5, 30), (0.5, 881), (0.5, 612), (0.5, 776), (0.5, 926), (0.5, 777), (0.5, 432), (0.5, 643), (0.5, 221), (0.5, 86), (0.5, 438), (0.5, 951), (0.5, 870), (0.5, 635), (0.5, 797), (0.5, 231), (0.5, 98), (0.5, 759), (0.5, 209), (0.5, 618), (0.5, 787), (0.5, 656), (0.5, 175), (0.5, 397), (0.5, 423), (0.5, 480), (0.41666666666666663, 558), (0.41666666666666663, 251), (0.41666666666666663, 439), (0.41666666666666663, 213), (0.41666666666666663, 49), (0.41666666666666663, 546), (0.41666666666666663, 450), (0.41666666666666663, 685), (0.41666666666666663, 669), (0.41666666666666663, 74), (0.41666666666666663, 563), (0.41666666666666663, 440), (0.41666666666666663, 17), (0.41666666666666663, 936), (0.41666666666666663, 554), (0.41666666666666663, 856), (0.41666666666666663, 551), (0.41666666666666663, 682), (0.41666666666666663, 444), (0.41666666666666663, 370), (0.41666666666666663, 674), (0.41666666666666663, 673), (0.41666666666666663, 684), (0.41666666666666663, 360), (0.41666666666666663, 114), (0.41666666666666663, 689), (0.41666666666666663, 207), (0.41666666666666663, 447), (0.41666666666666663, 134), (0.41666666666666663, 686), (0.41666666666666663, 256), (0.41666666666666663, 441), (0.41666666666666663, 676), (0.41666666666666663, 276), (0.41666666666666663, 443), (0.41666666666666663, 977), (0.41666666666666663, 667), (0.41666666666666663, 571), (0.41666666666666663, 555), (0.41666666666666663, 680), (0.41666666666666663, 562), (0.41666666666666663, 120), (0.41666666666666663, 687), (0.41666666666666663, 448), (0.41666666666666663, 668), (0.41666666666666663, 556), (0.41666666666666663, 716), (0.41666666666666663, 889), (0.41666666666666663, 550), (0.41666666666666663, 675), (0.375, 911), (0.375, 945), (0.375, 969), (0.25, 949), (0.25, 934), (0.25, 924), (0.25, 955), (0.25, 914), (0.25, 971), (0.25, 932), (0.25, 938), (0.16666666666666666, 921), (0.16666666666666666, 953)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 690
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 887
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.625, 988), (1.625, 886), (1.625, 596), (1.5, 791), (1.5, 296), (1.5, 498), (1.5, 690), (1.5, 887), (1.5, 212), (1.5, 789), (1.5, 691), (1.5, 912), (1.5, 993), (1.5, 990), (1.375, 726), (1.25, 692), (1.25, 1001), (1.25, 517), (1.25, 191), (1.25, 895), (1.25, 992), (1.25, 788), (1.25, 898), (1.25, 604), (1.25, 411), (1.25, 894), (1.25, 794), (1.25, 862), (1.25, 598), (1.25, 1003), (1.25, 995), (1.25, 998), (1.125, 41), (1.125, 1030), (1.125, 900), (1.125, 807), (1.125, 402), (1.125, 975), (1.125, 1023), (1.125, 308), (1.125, 697), (1.125, 649), (1.125, 910), (1.125, 704), (1.125, 77), (1.125, 698), (1.125, 1072), (1.125, 907), (1.125, 1029), (1.125, 962), (1.125, 1013), (1.125, 1010), (1.125, 906), (1.125, 1071), (1.125, 869), (1.125, 703), (1.125, 640), (1.125, 799), (1.125, 808), (1.125, 662), (1.125, 943), (1.125, 896), (1.125, 503), (1.125, 1058), (1.125, 732), (1.125, 609), (1.125, 901), (1.125, 954), (1.125, 1009), (1.125, 627), (1.125, 809), (1.125, 1034), (1.125, 695), (1.125, 803), (1.125, 800), (1.125, 600), (1.125, 1066), (1.125, 500), (1.125, 243), (1.0, 1064), (1.0, 763), (1.0, 750), (1.0, 916), (1.0, 507), (1.0, 404), (1.0, 1067), (1.0, 333), (1.0, 717), (1.0, 761), (1.0, 1039), (1.0, 933), (1.0, 510), (1.0, 650), (1.0, 922), (1.0, 831), (1.0, 825), (1.0, 42), (1.0, 1062), (1.0, 56), (1.0, 965), (1.0, 917), (1.0, 505), (1.0, 728), (1.0, 880), (1.0, 417), (1.0, 502), (1.0, 944), (1.0, 1057), (1.0, 391), (1.0, 663), (1.0, 826), (1.0, 165), (1.0, 721), (1.0, 714), (1.0, 504), (1.0, 1078), (1.0, 657), (1.0, 607), (1.0, 707), (1.0, 409), (1.0, 820), (1.0, 63), (1.0, 718), (1.0, 941), (1.0, 767), (1.0, 720), (1.0, 833), (1.0, 646), (1.0, 815), (1.0, 302), (1.0, 1076), (1.0, 997), (1.0, 1069), (1.0, 1054), (1.0, 506), (1.0, 67), (1.0, 1032), (1.0, 1016), (1.0, 919), (1.0, 1060), (1.0, 1050), (1.0, 872), (1.0, 525), (1.0, 711), (1.0, 608), (1.0, 873), (1.0, 543), (1.0, 947), (1.0, 1055), (1.0, 661), (1.0, 957), (1.0, 1042), (1.0, 841), (1.0, 1052), (1.0, 1061), (1.0, 710), (1.0, 155), (1.0, 1000), (1.0, 956), (1.0, 1079), (1.0, 882), (1.0, 905), (1.0, 332), (1.0, 913), (1.0, 940), (1.0, 756), (1.0, 802), (1.0, 699), (1.0, 836), (1.0, 840), (1.0, 200), (1.0, 342), (1.0, 829), (1.0, 653), (1.0, 1038), (1.0, 611), (1.0, 837), (1.0, 821), (1.0, 950), (1.0, 712), (1.0, 958), (1.0, 858), (1.0, 786), (0.875, 868), (0.75, 722), (0.75, 1006), (0.75, 964), (0.75, 511), (0.75, 967), (0.75, 1086), (0.75, 599), (0.75, 846), (0.75, 796), (0.75, 1085), (0.75, 693), (0.75, 144), (0.75, 849), (0.75, 963), (0.75, 904), (0.75, 843), (0.75, 781), (0.75, 436), (0.75, 845), (0.75, 730), (0.625, 798), (0.625, 804), (0.625, 740), (0.625, 784), (0.625, 642), (0.625, 734), (0.625, 852), (0.625, 987), (0.625, 658), (0.625, 515), (0.625, 851), (0.625, 983), (0.625, 513), (0.625, 620), (0.625, 739), (0.625, 626), (0.625, 96), (0.625, 980), (0.625, 521), (0.625, 1027), (0.625, 415), (0.625, 1024), (0.625, 860), (0.625, 902), (0.625, 535), (0.625, 854), (0.625, 275), (0.625, 149), (0.625, 305), (0.625, 1015), (0.625, 745), (0.625, 630), (0.625, 847), (0.625, 981), (0.625, 413), (0.625, 909), (0.625, 1019), (0.625, 518), (0.625, 158), (0.625, 973), (0.625, 159), (0.625, 593), (0.625, 419), (0.625, 373), (0.625, 741), (0.625, 621), (0.625, 1008), (0.625, 12), (0.625, 1025), (0.625, 835), (0.625, 979), (0.5416666666666666, 594), (0.5416666666666666, 79), (0.5416666666666666, 747), (0.5416666666666666, 989), (0.5416666666666666, 866), (0.5416666666666666, 519), (0.5416666666666666, 400), (0.5, 985), (0.5, 491), (0.5, 899), (0.5, 91), (0.5, 508), (0.5, 431), (0.5, 422), (0.5, 638), (0.5, 1018), (0.5, 776), (0.5, 1084), (0.5, 792), (0.5, 1082), (0.5, 318), (0.5, 806), (0.5, 760), (0.5, 80), (0.5, 30), (0.5, 348), (0.5, 542), (0.5, 725), (0.5, 427), (0.5, 780), (0.5, 264), (0.5, 95), (0.5, 48), (0.5, 881), (0.5, 612), (0.5, 437), (0.5, 785), (0.5, 545), (0.5, 782), (0.5, 633), (0.5, 403), (0.5, 1080), (0.5, 864), (0.5, 601), (0.5, 221), (0.5, 639), (0.5, 643), (0.5, 112), (0.5, 547), (0.5, 865), (0.5, 777), (0.5, 1022), (0.5, 935), (0.5, 850), (0.5, 222), (0.5, 823), (0.5, 1073), (0.5, 875), (0.5, 660), (0.5, 540), (0.5, 530), (0.5, 151), (0.5, 769), (0.5, 355), (0.5, 986), (0.5, 634), (0.5, 974), (0.5, 892), (0.5, 430), (0.5, 885), (0.5, 75), (0.5, 762), (0.5, 926), (0.5, 884), (0.5, 319), (0.5, 839), (0.5, 870), (0.5, 1005), (0.5, 425), (0.5, 1045), (0.5, 930), (0.5, 951), (0.5, 163), (0.5, 735), (0.5, 765), (0.5, 768), (0.5, 1051), (0.5, 93), (0.5, 961), (0.5, 368), (0.5, 891), (0.5, 801), (0.5, 426), (0.5, 636), (0.5, 709), (0.5, 428), (0.5, 226), (0.5, 773), (0.5, 960), (0.5, 603), (0.5, 635), (0.5, 101), (0.5, 524), (0.5, 520), (0.5, 432), (0.5, 434), (0.5, 52), (0.5, 64), (0.5, 438), (0.5, 729), (0.5, 538), (0.5, 770), (0.5, 863), (0.5, 393), (0.5, 876), (0.5, 421), (0.5, 659), (0.5, 878), (0.5, 751), (0.5, 814), (0.5, 946), (0.5, 928), (0.5, 818), (0.5, 86), (0.5, 701), (0.5, 136), (0.5, 994), (0.5, 523), (0.5, 537), (0.5, 918), (0.375, 1087), (0.375, 1012), (0.25, 1083), (0.25, 1046), (0.25, 1021), (0.25, 1070), (0.25, 1077), (0.16666666666666666, 1040), (0.16666666666666666, 1035), (0.16666666666666666, 1075), (0.16666666666666666, 1037), (0.16666666666666666, 1043), (0.16666666666666666, 1026), (0.16666666666666666, 1056), (0.16666666666666666, 1048)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 988
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 791
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* y (+ (+ x y) x))))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.625, 596), (1.625, 1088), (1.625, 886), (1.625, 988), (1.5, 1089), (1.5, 1094), (1.5, 1091), (1.5, 990), (1.5, 887), (1.5, 791), (1.5, 993), (1.5, 212), (1.5, 912), (1.5, 789), (1.5, 691), (1.5, 296), (1.5, 690), (1.5, 498), (1.375, 726), (1.375, 1140), (1.25, 604), (1.25, 1103), (1.25, 1104), (1.25, 517), (1.25, 794), (1.25, 862), (1.25, 411), (1.25, 998), (1.25, 1003), (1.25, 1001), (1.25, 895), (1.25, 1169), (1.25, 1107), (1.25, 992), (1.25, 191), (1.25, 1106), (1.25, 995), (1.25, 898), (1.25, 1137), (1.25, 1121), (1.25, 692), (1.25, 1102), (1.25, 894), (1.25, 1097), (1.25, 788), (1.25, 598), (1.25, 1099), (1.25, 1131), (1.125, 1009), (1.125, 695), (1.125, 703), (1.125, 1136), (1.125, 402), (1.125, 1034), (1.125, 1030), (1.125, 975), (1.125, 799), (1.125, 697), (1.125, 1029), (1.125, 1173), (1.125, 962), (1.125, 1072), (1.125, 627), (1.125, 807), (1.125, 1071), (1.125, 649), (1.125, 500), (1.125, 609), (1.125, 41), (1.125, 77), (1.125, 243), (1.125, 809), (1.125, 1129), (1.125, 896), (1.125, 1096), (1.125, 662), (1.125, 1058), (1.125, 1113), (1.125, 704), (1.125, 1135), (1.125, 943), (1.125, 503), (1.125, 732), (1.125, 1110), (1.125, 1013), (1.125, 869), (1.125, 954), (1.125, 900), (1.125, 901), (1.125, 910), (1.125, 1023), (1.125, 1108), (1.125, 800), (1.125, 808), (1.125, 907), (1.125, 1010), (1.125, 1128), (1.125, 308), (1.125, 1066), (1.125, 803), (1.125, 600), (1.125, 698), (1.125, 906), (1.125, 640), (1.0, 711), (1.0, 661), (1.0, 1143), (1.0, 829), (1.0, 841), (1.0, 947), (1.0, 1039), (1.0, 965), (1.0, 1062), (1.0, 63), (1.0, 1185), (1.0, 720), (1.0, 1067), (1.0, 756), (1.0, 837), (1.0, 922), (1.0, 957), (1.0, 707), (1.0, 836), (1.0, 699), (1.0, 997), (1.0, 1042), (1.0, 710), (1.0, 165), (1.0, 728), (1.0, 56), (1.0, 802), (1.0, 525), (1.0, 1054), (1.0, 820), (1.0, 786), (1.0, 543), (1.0, 940), (1.0, 1076), (1.0, 919), (1.0, 1115), (1.0, 905), (1.0, 714), (1.0, 767), (1.0, 821), (1.0, 200), (1.0, 1147), (1.0, 1052), (1.0, 663), (1.0, 916), (1.0, 506), (1.0, 882), (1.0, 1127), (1.0, 67), (1.0, 409), (1.0, 505), (1.0, 763), (1.0, 880), (1.0, 933), (1.0, 155), (1.0, 1016), (1.0, 1142), (1.0, 950), (1.0, 1055), (1.0, 333), (1.0, 1000), (1.0, 917), (1.0, 1177), (1.0, 502), (1.0, 873), (1.0, 815), (1.0, 611), (1.0, 761), (1.0, 302), (1.0, 646), (1.0, 608), (1.0, 510), (1.0, 717), (1.0, 607), (1.0, 826), (1.0, 1038), (1.0, 1050), (1.0, 1078), (1.0, 825), (1.0, 42), (1.0, 831), (1.0, 1079), (1.0, 913), (1.0, 404), (1.0, 1168), (1.0, 391), (1.0, 1146), (1.0, 1158), (1.0, 1069), (1.0, 417), (1.0, 833), (1.0, 840), (1.0, 650), (1.0, 718), (1.0, 944), (1.0, 332), (1.0, 750), (1.0, 721), (1.0, 956), (1.0, 1153), (1.0, 1125), (1.0, 1064), (1.0, 1060), (1.0, 941), (1.0, 712), (1.0, 958), (1.0, 507), (1.0, 342), (1.0, 872), (1.0, 657), (1.0, 504), (1.0, 1061), (1.0, 1057), (1.0, 1162), (1.0, 1032), (1.0, 653), (1.0, 858), (0.875, 868), (0.75, 849), (0.75, 730), (0.75, 1085), (0.75, 904), (0.75, 1179), (0.75, 964), (0.75, 1086), (0.75, 1134), (0.75, 843), (0.75, 846), (0.75, 781), (0.75, 436), (0.75, 963), (0.75, 845), (0.75, 796), (0.75, 599), (0.75, 967), (0.75, 1006), (0.75, 693), (0.75, 722), (0.75, 144), (0.75, 511), (0.625, 983), (0.625, 909), (0.625, 521), (0.625, 740), (0.625, 1025), (0.625, 980), (0.625, 734), (0.625, 642), (0.625, 847), (0.625, 515), (0.625, 1133), (0.625, 979), (0.625, 798), (0.625, 1019), (0.625, 373), (0.625, 275), (0.625, 1126), (0.625, 784), (0.625, 1123), (0.625, 630), (0.625, 513), (0.625, 981), (0.625, 535), (0.625, 305), (0.625, 415), (0.625, 96), (0.625, 852), (0.625, 626), (0.625, 1120), (0.625, 973), (0.625, 1182), (0.625, 1015), (0.625, 745), (0.625, 902), (0.625, 739), (0.625, 804), (0.625, 1027), (0.625, 860), (0.625, 621), (0.625, 419), (0.625, 854), (0.625, 658), (0.625, 620), (0.625, 851), (0.625, 158), (0.625, 593), (0.625, 149), (0.625, 413), (0.625, 987), (0.625, 741), (0.625, 1008), (0.625, 518), (0.625, 1024), (0.625, 159), (0.625, 835), (0.625, 12), (0.5416666666666666, 1095), (0.5416666666666666, 747), (0.5416666666666666, 79), (0.5416666666666666, 866), (0.5416666666666666, 594), (0.5416666666666666, 400), (0.5416666666666666, 989), (0.5416666666666666, 519), (0.5, 777), (0.5, 1161), (0.5, 151), (0.5, 540), (0.5, 850), (0.5, 348), (0.5, 48), (0.5, 660), (0.5, 823), (0.5, 864), (0.5, 769), (0.5, 633), (0.5, 542), (0.5, 985), (0.5, 1159), (0.5, 80), (0.5, 1111), (0.5, 1073), (0.5, 1084), (0.5, 222), (0.5, 422), (0.5, 1156), (0.5, 865), (0.5, 545), (0.5, 881), (0.5, 986), (0.5, 530), (0.5, 1082), (0.5, 792), (0.5, 1145), (0.5, 892), (0.5, 638), (0.5, 91), (0.5, 431), (0.5, 806), (0.5, 885), (0.5, 491), (0.5, 643), (0.5, 782), (0.5, 612), (0.5, 1151), (0.5, 974), (0.5, 1144), (0.5, 112), (0.5, 601), (0.5, 403), (0.5, 508), (0.5, 1165), (0.5, 1022), (0.5, 318), (0.5, 776), (0.5, 1101), (0.5, 785), (0.5, 760), (0.5, 875), (0.5, 1167), (0.5, 1080), (0.5, 634), (0.5, 430), (0.5, 1163), (0.5, 95), (0.5, 1018), (0.5, 899), (0.5, 639), (0.5, 30), (0.5, 780), (0.5, 427), (0.5, 221), (0.5, 935), (0.5, 1184), (0.5, 264), (0.5, 547), (0.5, 355), (0.5, 725), (0.5, 1141), (0.5, 1119), (0.5, 1132), (0.5, 437), (0.41666666666666663, 1093), (0.41666666666666663, 1092), (0.375, 1117), (0.25, 1174), (0.25, 1149), (0.25, 1171), (0.25, 1138), (0.25, 1157), (0.16666666666666666, 1175), (0.16666666666666666, 1166), (0.16666666666666666, 1170), (0.16666666666666666, 1183), (0.16666666666666666, 1180), (0.16666666666666666, 1155)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1088
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 988
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1089
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) (* y x)) x))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.625, 1187), (1.625, 1188), (1.625, 1088), (1.625, 596), (1.625, 1200), (1.625, 886), (1.625, 988), (1.5, 789), (1.5, 1193), (1.5, 1091), (1.5, 887), (1.5, 990), (1.5, 912), (1.5, 993), (1.5, 1191), (1.5, 498), (1.5, 296), (1.5, 212), (1.5, 791), (1.5, 1195), (1.5, 690), (1.5, 1197), (1.5, 1089), (1.5, 1094), (1.5, 691), (1.5, 1199), (1.375, 1140), (1.375, 1233), (1.375, 726), (1.25, 898), (1.25, 995), (1.25, 1169), (1.25, 1272), (1.25, 1205), (1.25, 1202), (1.25, 862), (1.25, 517), (1.25, 1001), (1.25, 1106), (1.25, 1137), (1.25, 1103), (1.25, 191), (1.25, 1102), (1.25, 1217), (1.25, 692), (1.25, 598), (1.25, 788), (1.25, 1252), (1.25, 1099), (1.25, 1003), (1.25, 1131), (1.25, 1097), (1.25, 1121), (1.25, 894), (1.25, 895), (1.25, 1204), (1.25, 992), (1.25, 794), (1.25, 998), (1.25, 411), (1.25, 604), (1.25, 1104), (1.25, 1107), (1.125, 910), (1.125, 1034), (1.125, 1236), (1.125, 402), (1.125, 1110), (1.125, 77), (1.125, 803), (1.125, 1129), (1.125, 627), (1.125, 600), (1.125, 1242), (1.125, 1010), (1.125, 896), (1.125, 954), (1.125, 41), (1.125, 943), (1.125, 1173), (1.125, 962), (1.125, 1240), (1.125, 800), (1.125, 901), (1.125, 732), (1.125, 1136), (1.125, 640), (1.125, 649), (1.125, 1239), (1.125, 1066), (1.125, 869), (1.125, 799), (1.125, 1058), (1.125, 1108), (1.125, 1135), (1.125, 900), (1.125, 975), (1.125, 695), (1.125, 906), (1.125, 807), (1.125, 697), (1.125, 500), (1.125, 503), (1.125, 704), (1.125, 808), (1.125, 1113), (1.125, 809), (1.125, 1030), (1.125, 698), (1.125, 1128), (1.125, 609), (1.125, 1220), (1.125, 1071), (1.125, 1201), (1.125, 1246), (1.125, 243), (1.125, 308), (1.125, 662), (1.125, 1029), (1.125, 1023), (1.125, 703), (1.125, 1096), (1.125, 1196), (1.125, 1234), (1.125, 907), (1.125, 1072), (1.125, 1013), (1.125, 1243), (1.125, 1009), (1.125, 1268), (1.0, 510), (1.0, 1261), (1.0, 1250), (1.0, 728), (1.0, 922), (1.0, 941), (1.0, 1147), (1.0, 1222), (1.0, 1038), (1.0, 1232), (1.0, 1032), (1.0, 200), (1.0, 525), (1.0, 721), (1.0, 1278), (1.0, 1067), (1.0, 958), (1.0, 829), (1.0, 1127), (1.0, 1146), (1.0, 947), (1.0, 905), (1.0, 763), (1.0, 1060), (1.0, 786), (1.0, 933), (1.0, 67), (1.0, 1245), (1.0, 1076), (1.0, 767), (1.0, 650), (1.0, 1057), (1.0, 1177), (1.0, 997), (1.0, 1162), (1.0, 404), (1.0, 707), (1.0, 710), (1.0, 840), (1.0, 342), (1.0, 1168), (1.0, 1069), (1.0, 646), (1.0, 1255), (1.0, 333), (1.0, 653), (1.0, 940), (1.0, 714), (1.0, 957), (1.0, 1016), (1.0, 56), (1.0, 1054), (1.0, 1276), (1.0, 661), (1.0, 63), (1.0, 607), (1.0, 717), (1.0, 506), (1.0, 712), (1.0, 417), (1.0, 1050), (1.0, 872), (1.0, 302), (1.0, 761), (1.0, 916), (1.0, 1064), (1.0, 1000), (1.0, 663), (1.0, 543), (1.0, 1078), (1.0, 699), (1.0, 1270), (1.0, 831), (1.0, 750), (1.0, 409), (1.0, 919), (1.0, 1282), (1.0, 1061), (1.0, 1142), (1.0, 882), (1.0, 1158), (1.0, 836), (1.0, 825), (1.0, 1062), (1.0, 42), (1.0, 956), (1.0, 1237), (1.0, 821), (1.0, 1287), (1.0, 802), (1.0, 502), (1.0, 391), (1.0, 1052), (1.0, 1277), (1.0, 611), (1.0, 718), (1.0, 1115), (1.0, 1225), (1.0, 332), (1.0, 1125), (1.0, 917), (1.0, 1039), (1.0, 1055), (1.0, 837), (1.0, 756), (1.0, 1185), (1.0, 841), (1.0, 880), (1.0, 507), (1.0, 944), (1.0, 711), (1.0, 1042), (1.0, 720), (1.0, 1284), (1.0, 165), (1.0, 1079), (1.0, 505), (1.0, 1263), (1.0, 815), (1.0, 833), (1.0, 965), (1.0, 155), (1.0, 873), (1.0, 1143), (1.0, 950), (1.0, 657), (1.0, 858), (1.0, 826), (1.0, 504), (1.0, 1153), (1.0, 1283), (1.0, 1256), (1.0, 913), (1.0, 608), (1.0, 820), (0.875, 868), (0.75, 843), (0.75, 796), (0.75, 1086), (0.75, 1215), (0.75, 1085), (0.75, 963), (0.75, 730), (0.75, 845), (0.75, 964), (0.75, 967), (0.75, 1006), (0.75, 436), (0.75, 781), (0.75, 846), (0.75, 599), (0.75, 1179), (0.75, 1134), (0.75, 144), (0.75, 511), (0.75, 849), (0.75, 904), (0.75, 693), (0.75, 722), (0.625, 149), (0.625, 1025), (0.625, 642), (0.625, 12), (0.625, 621), (0.625, 1120), (0.625, 1019), (0.625, 1024), (0.625, 980), (0.625, 1241), (0.625, 854), (0.625, 835), (0.625, 373), (0.625, 1126), (0.625, 593), (0.625, 1123), (0.625, 518), (0.625, 630), (0.625, 979), (0.625, 513), (0.625, 413), (0.625, 847), (0.625, 1027), (0.625, 851), (0.625, 745), (0.625, 626), (0.625, 620), (0.625, 804), (0.625, 1212), (0.625, 1249), (0.625, 1254), (0.625, 973), (0.625, 1008), (0.625, 740), (0.625, 798), (0.625, 305), (0.625, 1207), (0.625, 981), (0.625, 852), (0.625, 521), (0.625, 515), (0.625, 734), (0.625, 909), (0.625, 158), (0.625, 741), (0.625, 96), (0.625, 275), (0.625, 658), (0.625, 987), (0.625, 1221), (0.625, 902), (0.625, 1133), (0.625, 983), (0.625, 159), (0.625, 1015), (0.625, 784), (0.625, 1209), (0.625, 1248), (0.625, 1231), (0.625, 535), (0.625, 860), (0.625, 419), (0.625, 415), (0.625, 739), (0.625, 1182), (0.5416666666666666, 989), (0.5416666666666666, 747), (0.5416666666666666, 866), (0.5416666666666666, 1095), (0.5416666666666666, 79), (0.5416666666666666, 400), (0.5416666666666666, 594), (0.5416666666666666, 519), (0.5, 151), (0.5, 633), (0.5, 769), (0.5, 348), (0.5, 1274), (0.5, 1260), (0.5, 1216), (0.5, 80), (0.5, 985), (0.5, 864), (0.5, 1229), (0.5, 1159), (0.5, 1228), (0.5, 1111), (0.5, 1223), (0.5, 540), (0.5, 1266), (0.5, 660), (0.5, 777), (0.5, 48), (0.5, 1161), (0.5, 850), (0.5, 1262), (0.5, 542), (0.5, 823), (0.41666666666666663, 1190), (0.41666666666666663, 1227), (0.41666666666666663, 1213), (0.375, 1286), (0.375, 1264), (0.25, 1226), (0.25, 1218), (0.25, 1280), (0.25, 1258), (0.25, 1267), (0.16666666666666666, 1210), (0.16666666666666666, 1235), (0.16666666666666666, 1211)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1187
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1188
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1088
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) (+ (* y y) 6)))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.75, 1331), (1.625, 1200), (1.625, 1288), (1.625, 1290), (1.625, 886), (1.625, 1187), (1.625, 988), (1.625, 596), (1.625, 1088), (1.625, 1188), (1.5, 1302), (1.5, 1094), (1.5, 993), (1.5, 1191), (1.5, 789), (1.5, 1193), (1.5, 212), (1.5, 1298), (1.5, 912), (1.5, 296), (1.5, 1197), (1.5, 691), (1.5, 1089), (1.5, 1195), (1.5, 791), (1.5, 1091), (1.5, 1304), (1.5, 498), (1.5, 887), (1.5, 1301), (1.5, 690), (1.5, 990), (1.5, 1199), (1.375, 726), (1.375, 1381), (1.375, 1321), (1.375, 1140), (1.375, 1233), (1.25, 998), (1.25, 895), (1.25, 1131), (1.25, 1318), (1.25, 1311), (1.25, 1003), (1.25, 1099), (1.25, 1335), (1.25, 992), (1.25, 1001), (1.25, 692), (1.25, 1202), (1.25, 1272), (1.25, 191), (1.25, 411), (1.25, 1106), (1.25, 1309), (1.25, 794), (1.25, 1104), (1.25, 1305), (1.25, 1325), (1.25, 1107), (1.25, 1121), (1.25, 995), (1.25, 1205), (1.25, 894), (1.25, 1103), (1.25, 604), (1.25, 598), (1.25, 1308), (1.25, 1097), (1.25, 517), (1.25, 898), (1.25, 1312), (1.25, 1326), (1.25, 1217), (1.25, 788), (1.25, 1137), (1.25, 1252), (1.25, 1169), (1.25, 1204), (1.25, 1328), (1.25, 1102), (1.25, 862), (1.125, 627), (1.125, 1034), (1.125, 1236), (1.125, 907), (1.125, 695), (1.125, 1096), (1.125, 1010), (1.125, 800), (1.125, 1029), (1.125, 1242), (1.125, 910), (1.125, 808), (1.125, 809), (1.125, 243), (1.125, 1129), (1.125, 1013), (1.125, 703), (1.125, 1201), (1.125, 1173), (1.125, 1113), (1.125, 943), (1.125, 1128), (1.125, 1196), (1.125, 1268), (1.125, 1066), (1.125, 308), (1.125, 1240), (1.125, 697), (1.125, 1030), (1.125, 1071), (1.125, 1135), (1.125, 732), (1.125, 402), (1.125, 1370), (1.125, 799), (1.125, 609), (1.125, 1293), (1.125, 503), (1.125, 1243), (1.125, 500), (1.125, 1337), (1.125, 1023), (1.125, 1009), (1.125, 1220), (1.125, 698), (1.125, 1341), (1.125, 1234), (1.125, 954), (1.125, 704), (1.125, 896), (1.125, 1368), (1.125, 1347), (1.125, 649), (1.125, 41), (1.125, 803), (1.125, 1373), (1.125, 1239), (1.125, 901), (1.125, 1108), (1.125, 1072), (1.125, 1246), (1.125, 662), (1.125, 1356), (1.125, 640), (1.125, 1136), (1.125, 77), (1.125, 807), (1.125, 1058), (1.125, 900), (1.125, 1110), (1.125, 906), (1.125, 975), (1.125, 1354), (1.125, 962), (1.125, 600), (1.125, 869), (1.0, 1076), (1.0, 767), (1.0, 1055), (1.0, 1284), (1.0, 1245), (1.0, 1000), (1.0, 880), (1.0, 831), (1.0, 833), (1.0, 1050), (1.0, 840), (1.0, 56), (1.0, 728), (1.0, 1317), (1.0, 1177), (1.0, 1348), (1.0, 663), (1.0, 333), (1.0, 707), (1.0, 820), (1.0, 409), (1.0, 763), (1.0, 997), (1.0, 1067), (1.0, 342), (1.0, 786), (1.0, 1351), (1.0, 506), (1.0, 505), (1.0, 332), (1.0, 653), (1.0, 417), (1.0, 1287), (1.0, 1250), (1.0, 646), (1.0, 42), (1.0, 661), (1.0, 1256), (1.0, 510), (1.0, 1255), (1.0, 699), (1.0, 200), (1.0, 858), (1.0, 826), (1.0, 1168), (1.0, 1282), (1.0, 1125), (1.0, 944), (1.0, 1054), (1.0, 607), (1.0, 873), (1.0, 1283), (1.0, 916), (1.0, 1371), (1.0, 836), (1.0, 710), (1.0, 525), (1.0, 947), (1.0, 1142), (1.0, 608), (1.0, 1038), (1.0, 1039), (1.0, 507), (1.0, 1237), (1.0, 1062), (1.0, 1069), (1.0, 761), (1.0, 720), (1.0, 872), (1.0, 1222), (1.0, 1376), (1.0, 1263), (1.0, 1057), (1.0, 941), (1.0, 1387), (1.0, 956), (1.0, 1060), (1.0, 1270), (1.0, 1146), (1.0, 958), (1.0, 957), (1.0, 1386), (1.0, 913), (1.0, 1343), (1.0, 717), (1.0, 1143), (1.0, 950), (1.0, 756), (1.0, 1261), (1.0, 815), (1.0, 750), (1.0, 1147), (1.0, 721), (1.0, 933), (1.0, 1078), (1.0, 657), (1.0, 1153), (1.0, 917), (1.0, 829), (1.0, 1232), (1.0, 1052), (1.0, 1364), (1.0, 1324), (1.0, 882), (1.0, 67), (1.0, 1185), (1.0, 1127), (1.0, 504), (1.0, 841), (1.0, 919), (1.0, 165), (1.0, 1333), (1.0, 922), (1.0, 1277), (1.0, 711), (1.0, 825), (1.0, 965), (1.0, 1115), (1.0, 940), (1.0, 155), (1.0, 543), (1.0, 611), (1.0, 1016), (1.0, 391), (1.0, 404), (1.0, 821), (1.0, 302), (1.0, 502), (1.0, 1061), (1.0, 837), (1.0, 714), (1.0, 63), (1.0, 1064), (1.0, 650), (1.0, 1032), (1.0, 1042), (1.0, 1276), (1.0, 1225), (1.0, 1158), (1.0, 1162), (1.0, 1278), (1.0, 712), (1.0, 718), (1.0, 802), (1.0, 1079), (1.0, 905), (0.875, 868), (0.875, 1300), (0.75, 1353), (0.75, 599), (0.75, 1215), (0.75, 1085), (0.75, 1306), (0.75, 511), (0.75, 144), (0.75, 1006), (0.75, 849), (0.75, 967), (0.75, 1327), (0.75, 1134), (0.75, 1086), (0.75, 1292), (0.75, 1340), (0.75, 1179), (0.75, 845), (0.75, 904), (0.75, 796), (0.75, 1366), (0.75, 781), (0.75, 722), (0.75, 843), (0.75, 963), (0.75, 693), (0.75, 436), (0.75, 730), (0.75, 1319), (0.75, 846), (0.75, 964), (0.625, 630), (0.625, 12), (0.625, 305), (0.625, 1350), (0.625, 1315), (0.625, 1126), (0.625, 626), (0.625, 1024), (0.625, 740), (0.625, 1249), (0.625, 1025), (0.625, 518), (0.625, 621), (0.625, 1212), (0.625, 798), (0.625, 745), (0.625, 980), (0.625, 804), (0.625, 1027), (0.625, 847), (0.625, 149), (0.625, 1120), (0.625, 1019), (0.625, 854), (0.625, 851), (0.625, 1359), (0.625, 1241), (0.625, 1254), (0.625, 620), (0.625, 1008), (0.625, 593), (0.625, 1330), (0.625, 373), (0.625, 1123), (0.625, 413), (0.625, 642), (0.625, 979), (0.625, 513), (0.625, 835), (0.625, 1361), (0.625, 1338), (0.625, 973), (0.5, 1334), (0.5, 1322), (0.5, 1378), (0.5, 1380), (0.5, 1382), (0.5, 1357), (0.5, 1375), (0.5, 1336), (0.5, 1385), (0.5, 1345), (0.5, 1379), (0.5, 1344), (0.41666666666666663, 1294), (0.41666666666666663, 1295), (0.41666666666666663, 1303), (0.375, 1323), (0.29166666666666663, 1313), (0.25, 1339), (0.25, 1383), (0.25, 1362), (0.25, 1297), (0.16666666666666666, 1367)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) (+ (* y y) 6)))
 nr_nodes: 10]
(CANDIDATE)[id: 1288
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.75, 1331), (1.75, 1388), (1.75, 1431), (1.625, 1394), (1.625, 1389), (1.625, 1088), (1.625, 1187), (1.625, 1288), (1.625, 1188), (1.625, 1200), (1.625, 886), (1.625, 988), (1.625, 1393), (1.625, 1290), (1.625, 596), (1.5, 1197), (1.5, 1304), (1.5, 1398), (1.5, 1094), (1.5, 1199), (1.5, 1301), (1.5, 1302), (1.5, 690), (1.5, 1089), (1.5, 1193), (1.5, 691), (1.5, 1401), (1.5, 1406), (1.5, 1091), (1.5, 1408), (1.5, 791), (1.5, 993), (1.5, 212), (1.5, 789), (1.5, 1298), (1.5, 990), (1.5, 1403), (1.5, 1195), (1.5, 498), (1.5, 1405), (1.5, 887), (1.5, 296), (1.5, 1409), (1.5, 912), (1.5, 1191), (1.375, 726), (1.375, 1140), (1.375, 1458), (1.375, 1233), (1.375, 1437), (1.375, 1413), (1.375, 1381), (1.375, 1321), (1.375, 1412), (1.25, 1169), (1.25, 862), (1.25, 1137), (1.25, 1217), (1.25, 1438), (1.25, 1309), (1.25, 1097), (1.25, 1102), (1.25, 998), (1.25, 1003), (1.25, 1425), (1.25, 1272), (1.25, 1252), (1.25, 517), (1.25, 1465), (1.25, 1476), (1.25, 1312), (1.25, 1205), (1.25, 1107), (1.25, 1202), (1.25, 1311), (1.25, 895), (1.25, 1435), (1.25, 1451), (1.25, 692), (1.25, 1099), (1.25, 992), (1.25, 1328), (1.25, 1204), (1.25, 1104), (1.25, 1430), (1.25, 1325), (1.25, 1305), (1.25, 1426), (1.25, 1436), (1.25, 1308), (1.25, 1103), (1.25, 1335), (1.25, 604), (1.25, 1318), (1.25, 788), (1.25, 191), (1.25, 1001), (1.25, 1131), (1.25, 794), (1.25, 1326), (1.25, 1461), (1.25, 1106), (1.25, 598), (1.25, 1121), (1.25, 1429), (1.25, 898), (1.25, 995), (1.25, 411), (1.25, 1428), (1.25, 894), (1.125, 809), (1.125, 1173), (1.125, 1013), (1.125, 803), (1.125, 1135), (1.125, 1471), (1.125, 1128), (1.125, 1030), (1.125, 901), (1.125, 695), (1.125, 1034), (1.125, 1066), (1.125, 1441), (1.125, 1071), (1.125, 1136), (1.125, 1466), (1.125, 910), (1.125, 1220), (1.125, 1108), (1.125, 1240), (1.125, 1456), (1.125, 662), (1.125, 243), (1.125, 703), (1.125, 1444), (1.125, 1368), (1.125, 1246), (1.125, 627), (1.125, 1096), (1.125, 1010), (1.125, 697), (1.125, 1242), (1.125, 1337), (1.125, 1468), (1.125, 402), (1.125, 906), (1.125, 1058), (1.125, 1236), (1.125, 308), (1.125, 41), (1.125, 609), (1.125, 962), (1.125, 1395), (1.125, 907), (1.125, 807), (1.125, 1373), (1.125, 1482), (1.125, 1474), (1.125, 808), (1.125, 649), (1.125, 900), (1.125, 1354), (1.125, 640), (1.125, 800), (1.125, 799), (1.125, 1489), (1.125, 1370), (1.125, 1023), (1.125, 1110), (1.125, 954), (1.125, 1072), (1.125, 1341), (1.125, 698), (1.125, 77), (1.125, 600), (1.125, 1196), (1.125, 1356), (1.125, 1234), (1.125, 1029), (1.125, 704), (1.125, 896), (1.125, 1239), (1.125, 1347), (1.125, 1201), (1.125, 1454), (1.125, 1293), (1.125, 1113), (1.125, 1483), (1.125, 1243), (1.125, 1453), (1.125, 975), (1.125, 943), (1.125, 1268), (1.125, 732), (1.125, 500), (1.125, 503), (1.125, 1129), (1.125, 1009), (1.125, 869), (1.0, 1245), (1.0, 714), (1.0, 940), (1.0, 1317), (1.0, 657), (1.0, 913), (1.0, 1146), (1.0, 409), (1.0, 957), (1.0, 836), (1.0, 1032), (1.0, 721), (1.0, 502), (1.0, 607), (1.0, 1284), (1.0, 821), (1.0, 302), (1.0, 1287), (1.0, 1147), (1.0, 1324), (1.0, 155), (1.0, 1142), (1.0, 965), (1.0, 1162), (1.0, 750), (1.0, 332), (1.0, 699), (1.0, 1351), (1.0, 922), (1.0, 756), (1.0, 525), (1.0, 1250), (1.0, 1427), (1.0, 916), (1.0, 1422), (1.0, 333), (1.0, 820), (1.0, 919), (1.0, 763), (1.0, 200), (1.0, 391), (1.0, 933), (1.0, 1125), (1.0, 1283), (1.0, 1057), (1.0, 833), (1.0, 1064), (1.0, 761), (1.0, 786), (1.0, 650), (1.0, 707), (1.0, 1343), (1.0, 1050), (1.0, 1333), (1.0, 1153), (1.0, 1038), (1.0, 1282), (1.0, 1079), (1.0, 802), (1.0, 1263), (1.0, 717), (1.0, 663), (1.0, 1055), (1.0, 510), (1.0, 1185), (1.0, 42), (1.0, 882), (1.0, 815), (1.0, 1060), (1.0, 1069), (1.0, 1115), (1.0, 507), (1.0, 1424), (1.0, 506), (1.0, 958), (1.0, 841), (1.0, 825), (1.0, 837), (1.0, 941), (1.0, 767), (1.0, 1376), (1.0, 1076), (1.0, 505), (1.0, 1270), (1.0, 1255), (1.0, 880), (1.0, 1386), (1.0, 1177), (1.0, 956), (1.0, 1278), (1.0, 712), (1.0, 1222), (1.0, 1000), (1.0, 1062), (1.0, 826), (1.0, 1256), (1.0, 1232), (1.0, 661), (1.0, 872), (1.0, 711), (1.0, 728), (1.0, 504), (1.0, 56), (1.0, 1078), (1.0, 710), (1.0, 858), (1.0, 1237), (1.0, 1158), (1.0, 653), (1.0, 720), (1.0, 873), (1.0, 165), (1.0, 342), (1.0, 829), (1.0, 947), (1.0, 1168), (1.0, 1042), (1.0, 1052), (1.0, 611), (1.0, 646), (1.0, 944), (1.0, 63), (1.0, 997), (1.0, 404), (1.0, 1411), (1.0, 1054), (1.0, 1127), (1.0, 1485), (1.0, 1371), (1.0, 1364), (1.0, 67), (1.0, 1039), (1.0, 543), (1.0, 1277), (1.0, 950), (1.0, 917), (1.0, 840), (1.0, 1387), (1.0, 417), (1.0, 718), (1.0, 1463), (1.0, 608), (1.0, 1276), (1.0, 1479), (1.0, 1016), (1.0, 1061), (1.0, 1067), (1.0, 1459), (1.0, 831), (1.0, 1225), (1.0, 1261), (1.0, 905), (1.0, 1143), (1.0, 1348), (0.875, 1300), (0.875, 868), (0.75, 1400), (0.75, 1487), (0.75, 849), (0.75, 1134), (0.75, 1006), (0.75, 1085), (0.75, 1473), (0.75, 1340), (0.75, 1292), (0.75, 796), (0.75, 967), (0.75, 1353), (0.75, 1327), (0.75, 845), (0.75, 1306), (0.75, 511), (0.75, 904), (0.75, 1215), (0.75, 599), (0.75, 1455), (0.75, 1086), (0.75, 144), (0.75, 1179), (0.625, 1481), (0.625, 1415), (0.625, 1469), (0.625, 1391), (0.625, 1462), (0.625, 1439), (0.625, 1418), (0.5, 1442), (0.5, 1447), (0.5, 1470), (0.5, 1419), (0.5, 1450), (0.5, 1477), (0.5, 1478), (0.5, 1449), (0.41666666666666663, 1399), (0.41666666666666663, 1434), (0.41666666666666663, 1397), (0.375, 1421), (0.375, 1432), (0.375, 1445), (0.16666666666666666, 1416)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1431
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x x) y) (+ 6 y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1394
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1389
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.75, 1431), (1.75, 1490), (1.75, 1388), (1.75, 1331), (1.625, 886), (1.625, 1187), (1.625, 1492), (1.625, 596), (1.625, 1497), (1.625, 1498), (1.625, 1394), (1.625, 988), (1.625, 1389), (1.625, 1290), (1.625, 1188), (1.625, 1200), (1.625, 1493), (1.625, 1288), (1.625, 1088), (1.625, 1393), (1.5, 498), (1.5, 1515), (1.5, 1507), (1.5, 990), (1.5, 1089), (1.5, 1298), (1.5, 912), (1.5, 1091), (1.5, 1401), (1.5, 993), (1.5, 1302), (1.5, 212), (1.5, 1501), (1.5, 1405), (1.5, 1398), (1.5, 1301), (1.5, 1546), (1.5, 691), (1.5, 1199), (1.5, 1197), (1.5, 690), (1.5, 791), (1.5, 1304), (1.5, 1094), (1.5, 1193), (1.5, 296), (1.5, 1408), (1.5, 1409), (1.5, 789), (1.5, 1513), (1.5, 1195), (1.5, 1403), (1.5, 1508), (1.5, 1512), (1.5, 1406), (1.5, 887), (1.5, 1191), (1.5, 1511), (1.5, 1509), (1.375, 1233), (1.375, 1458), (1.375, 1321), (1.375, 1413), (1.375, 1412), (1.375, 1550), (1.375, 1437), (1.375, 1381), (1.375, 1140), (1.375, 726), (1.375, 1527), (1.25, 1435), (1.25, 1312), (1.25, 1169), (1.25, 692), (1.25, 1428), (1.25, 1545), (1.25, 1217), (1.25, 598), (1.25, 794), (1.25, 1309), (1.25, 1438), (1.25, 191), (1.25, 411), (1.25, 1465), (1.25, 1567), (1.25, 1425), (1.25, 1107), (1.25, 1097), (1.25, 1205), (1.25, 1102), (1.25, 1500), (1.25, 1476), (1.25, 1587), (1.25, 1531), (1.25, 1318), (1.25, 992), (1.25, 1461), (1.25, 1335), (1.25, 1328), (1.25, 1308), (1.25, 1137), (1.25, 1121), (1.25, 1202), (1.25, 862), (1.25, 1252), (1.25, 1099), (1.25, 995), (1.25, 1566), (1.25, 788), (1.25, 517), (1.25, 1436), (1.25, 1326), (1.25, 1549), (1.25, 1451), (1.25, 1204), (1.25, 1311), (1.25, 1106), (1.25, 894), (1.25, 1534), (1.25, 1305), (1.25, 1272), (1.25, 998), (1.25, 1131), (1.25, 1001), (1.25, 1551), (1.25, 1578), (1.25, 1430), (1.25, 1426), (1.25, 898), (1.25, 1325), (1.25, 1103), (1.25, 604), (1.25, 1429), (1.25, 895), (1.25, 1556), (1.25, 1003), (1.25, 1104), (1.125, 1575), (1.125, 1565), (1.125, 1341), (1.125, 1482), (1.125, 1129), (1.125, 906), (1.125, 807), (1.125, 1066), (1.125, 1096), (1.125, 1373), (1.125, 640), (1.125, 1240), (1.125, 609), (1.125, 800), (1.125, 1268), (1.125, 975), (1.125, 1110), (1.125, 1009), (1.125, 1586), (1.125, 649), (1.125, 896), (1.125, 662), (1.125, 1029), (1.125, 1236), (1.125, 1483), (1.125, 1010), (1.125, 1466), (1.125, 901), (1.125, 703), (1.125, 900), (1.125, 1108), (1.125, 954), (1.125, 1468), (1.125, 1220), (1.125, 1030), (1.125, 1370), (1.125, 1441), (1.125, 1471), (1.125, 1243), (1.125, 402), (1.125, 1347), (1.125, 1196), (1.125, 698), (1.125, 803), (1.125, 1173), (1.125, 1474), (1.125, 500), (1.125, 1293), (1.125, 503), (1.125, 600), (1.125, 943), (1.125, 1591), (1.125, 1456), (1.125, 799), (1.125, 695), (1.125, 1128), (1.125, 1354), (1.125, 1034), (1.125, 910), (1.125, 962), (1.125, 1454), (1.125, 1592), (1.125, 704), (1.125, 907), (1.125, 1584), (1.125, 697), (1.125, 1246), (1.125, 1058), (1.125, 809), (1.125, 1563), (1.125, 308), (1.125, 869), (1.125, 1201), (1.125, 1013), (1.125, 1589), (1.125, 1023), (1.125, 1239), (1.125, 1234), (1.125, 627), (1.125, 732), (1.125, 1489), (1.125, 1356), (1.125, 1395), (1.125, 243), (1.125, 77), (1.125, 1113), (1.125, 1136), (1.125, 1368), (1.125, 1337), (1.125, 1453), (1.125, 1577), (1.125, 1242), (1.125, 1135), (1.125, 41), (1.125, 1072), (1.125, 1444), (1.125, 808), (1.125, 1071), (1.0, 1146), (1.0, 1284), (1.0, 837), (1.0, 1177), (1.0, 525), (1.0, 1491), (1.0, 1256), (1.0, 721), (1.0, 957), (1.0, 1042), (1.0, 165), (1.0, 1245), (1.0, 841), (1.0, 767), (1.0, 200), (1.0, 997), (1.0, 1528), (1.0, 1054), (1.0, 1055), (1.0, 873), (1.0, 965), (1.0, 1343), (1.0, 342), (1.0, 1147), (1.0, 820), (1.0, 826), (1.0, 1142), (1.0, 1115), (1.0, 1541), (1.0, 502), (1.0, 1283), (1.0, 1263), (1.0, 941), (1.0, 505), (1.0, 786), (1.0, 510), (1.0, 56), (1.0, 717), (1.0, 872), (1.0, 607), (1.0, 650), (1.0, 63), (1.0, 802), (1.0, 1427), (1.0, 714), (1.0, 958), (1.0, 1057), (1.0, 699), (1.0, 1422), (1.0, 815), (1.0, 1076), (1.0, 661), (1.0, 858), (1.0, 763), (1.0, 919), (1.0, 836), (1.0, 1411), (1.0, 750), (1.0, 332), (1.0, 611), (1.0, 1125), (1.0, 1424), (1.0, 302), (1.0, 720), (1.0, 1317), (1.0, 712), (1.0, 391), (1.0, 761), (1.0, 1287), (1.0, 829), (1.0, 1255), (1.0, 1351), (1.0, 1250), (1.0, 1376), (1.0, 1050), (1.0, 711), (1.0, 1158), (1.0, 1153), (1.0, 663), (1.0, 409), (1.0, 404), (1.0, 1062), (1.0, 1583), (1.0, 1185), (1.0, 1060), (1.0, 940), (1.0, 1237), (1.0, 1078), (1.0, 1324), (1.0, 1064), (1.0, 1270), (1.0, 1282), (1.0, 821), (1.0, 1333), (1.0, 507), (1.0, 1052), (1.0, 707), (1.0, 1162), (1.0, 916), (1.0, 1038), (1.0, 728), (1.0, 944), (1.0, 653), (1.0, 922), (1.0, 933), (1.0, 833), (1.0, 756), (1.0, 956), (1.0, 947), (1.0, 1278), (1.0, 506), (1.0, 1168), (1.0, 333), (1.0, 882), (1.0, 825), (1.0, 880), (1.0, 646), (1.0, 1386), (1.0, 657), (1.0, 1232), (1.0, 1079), (1.0, 710), (1.0, 42), (1.0, 1032), (1.0, 504), (1.0, 1000), (1.0, 1069), (1.0, 1222), (1.0, 1576), (1.0, 913), (1.0, 155), (0.875, 1520), (0.875, 1585), (0.75, 1568), (0.75, 1544), (0.75, 1537), (0.75, 1555), (0.75, 1518), (0.75, 1533), (0.75, 1570), (0.625, 1540), (0.625, 1580), (0.625, 1495), (0.625, 1526), (0.625, 1581), (0.625, 1502), (0.625, 1558), (0.5416666666666666, 1506), (0.5, 1539), (0.5, 1572), (0.5, 1559), (0.5, 1522), (0.5, 1574), (0.41666666666666663, 1517), (0.41666666666666663, 1543), (0.41666666666666663, 1548), (0.41666666666666663, 1505), (0.41666666666666663, 1503), (0.375, 1561), (0.375, 1524), (0.29166666666666663, 1529), (0.25, 1588), (0.25, 1582), (0.16666666666666666, 1553), (0.16666666666666666, 1535)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1431
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x x) y) (+ 6 y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1490
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ y (* (+ x y) x))))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
[(1.75, 1490), (1.75, 1431), (1.75, 1596), (1.75, 1331), (1.75, 1388), (1.625, 1187), (1.625, 886), (1.625, 1599), (1.625, 596), (1.625, 1389), (1.625, 1602), (1.625, 1290), (1.625, 1493), (1.625, 1200), (1.625, 1604), (1.625, 1497), (1.625, 1088), (1.625, 1601), (1.625, 1393), (1.625, 1498), (1.625, 1605), (1.625, 1394), (1.625, 988), (1.625, 1600), (1.625, 1288), (1.625, 1492), (1.625, 1188), (1.5, 1511), (1.5, 1606), (1.5, 1507), (1.5, 1620), (1.5, 1618), (1.5, 1629), (1.5, 1403), (1.5, 1630), (1.5, 1628), (1.5, 1409), (1.5, 789), (1.5, 1191), (1.5, 1614), (1.5, 1302), (1.5, 1199), (1.5, 791), (1.5, 691), (1.5, 1501), (1.5, 1546), (1.5, 1515), (1.5, 1615), (1.5, 1405), (1.5, 990), (1.5, 690), (1.5, 993), (1.5, 1089), (1.5, 1608), (1.5, 1193), (1.5, 1631), (1.5, 1513), (1.5, 1616), (1.5, 1626), (1.5, 498), (1.5, 1509), (1.5, 212), (1.5, 1610), (1.5, 1398), (1.5, 296), (1.5, 1091), (1.5, 1195), (1.5, 1094), (1.5, 1301), (1.5, 1304), (1.5, 1401), (1.5, 912), (1.5, 1298), (1.5, 1512), (1.5, 887), (1.5, 1406), (1.5, 1508), (1.5, 1197), (1.5, 1408), (1.375, 1412), (1.375, 1413), (1.375, 1550), (1.375, 726), (1.375, 1381), (1.375, 1437), (1.375, 1140), (1.375, 1458), (1.375, 1233), (1.375, 1321), (1.375, 1527), (1.25, 1578), (1.25, 1654), (1.25, 1642), (1.25, 1534), (1.25, 1669), (1.25, 1102), (1.25, 1205), (1.25, 1217), (1.25, 1104), (1.25, 1638), (1.25, 1435), (1.25, 1252), (1.25, 1617), (1.25, 1001), (1.25, 1425), (1.25, 1531), (1.25, 1106), (1.25, 1305), (1.25, 1545), (1.25, 1587), (1.25, 1549), (1.25, 1650), (1.25, 692), (1.25, 1131), (1.25, 898), (1.25, 992), (1.25, 1325), (1.25, 1272), (1.25, 1429), (1.25, 895), (1.25, 1551), (1.25, 1461), (1.25, 1107), (1.25, 1428), (1.25, 995), (1.25, 1645), (1.25, 1121), (1.25, 1657), (1.25, 1137), (1.25, 1326), (1.25, 1647), (1.25, 1476), (1.25, 1639), (1.25, 1430), (1.25, 862), (1.25, 1202), (1.25, 1097), (1.25, 1665), (1.25, 894), (1.25, 1659), (1.25, 604), (1.25, 1465), (1.25, 1500), (1.25, 1451), (1.25, 794), (1.25, 1308), (1.25, 598), (1.25, 1099), (1.25, 191), (1.25, 1169), (1.25, 517), (1.25, 1651), (1.25, 1640), (1.25, 1312), (1.25, 1641), (1.25, 1103), (1.25, 1309), (1.25, 1663), (1.25, 1328), (1.25, 1438), (1.25, 1311), (1.25, 411), (1.25, 1566), (1.25, 1556), (1.25, 998), (1.25, 1436), (1.25, 1567), (1.25, 788), (1.25, 1426), (1.25, 1204), (1.25, 1003), (1.25, 1318), (1.25, 1649), (1.25, 1335), (1.125, 896), (1.125, 1220), (1.125, 975), (1.125, 503), (1.125, 954), (1.125, 1577), (1.125, 1454), (1.125, 1108), (1.125, 1135), (1.125, 1239), (1.125, 1586), (1.125, 1173), (1.125, 1489), (1.125, 600), (1.125, 900), (1.125, 800), (1.125, 1347), (1.125, 1368), (1.125, 1466), (1.125, 627), (1.125, 1483), (1.125, 1110), (1.125, 1575), (1.125, 1482), (1.125, 1565), (1.125, 1242), (1.125, 1201), (1.125, 1453), (1.125, 1009), (1.125, 1592), (1.125, 1243), (1.125, 808), (1.125, 243), (1.125, 1013), (1.125, 1246), (1.125, 1356), (1.125, 1196), (1.125, 1071), (1.125, 962), (1.125, 41), (1.125, 1010), (1.125, 807), (1.125, 1444), (1.125, 1029), (1.125, 1468), (1.125, 1337), (1.125, 1128), (1.125, 308), (1.125, 1373), (1.125, 500), (1.125, 704), (1.125, 1129), (1.125, 1341), (1.125, 1058), (1.125, 649), (1.125, 906), (1.125, 910), (1.125, 1474), (1.125, 1456), (1.125, 1030), (1.125, 1687), (1.125, 640), (1.125, 1240), (1.125, 1635), (1.125, 662), (1.125, 77), (1.125, 1683), (1.125, 1648), (1.125, 1395), (1.125, 1637), (1.125, 1136), (1.125, 1589), (1.125, 1096), (1.125, 1370), (1.125, 402), (1.125, 799), (1.125, 1471), (1.125, 1584), (1.125, 1591), (1.125, 869), (1.125, 1441), (1.125, 1234), (1.125, 695), (1.125, 1268), (1.125, 1677), (1.125, 803), (1.125, 1113), (1.125, 1686), (1.125, 1034), (1.125, 1293), (1.125, 907), (1.125, 901), (1.125, 1354), (1.125, 943), (1.125, 1236), (1.125, 1563), (1.125, 698), (1.125, 1066), (1.125, 609), (1.125, 1023), (1.125, 732), (1.125, 697), (1.125, 809), (1.125, 1072), (1.125, 703), (1.0, 409), (1.0, 611), (1.0, 1076), (1.0, 1424), (1.0, 1185), (1.0, 1158), (1.0, 1643), (1.0, 1042), (1.0, 342), (1.0, 1146), (1.0, 826), (1.0, 1287), (1.0, 1054), (1.0, 502), (1.0, 1491), (1.0, 786), (1.0, 1256), (1.0, 1411), (1.0, 1583), (1.0, 829), (1.0, 1250), (1.0, 1050), (1.0, 200), (1.0, 815), (1.0, 836), (1.0, 767), (1.0, 750), (1.0, 391), (1.0, 661), (1.0, 1685), (1.0, 1125), (1.0, 1060), (1.0, 965), (1.0, 63), (1.0, 1062), (1.0, 712), (1.0, 872), (1.0, 717), (1.0, 1142), (1.0, 505), (1.0, 940), (1.0, 1317), (1.0, 1633), (1.0, 941), (1.0, 1541), (1.0, 714), (1.0, 873), (1.0, 1343), (1.0, 919), (1.0, 1283), (1.0, 958), (1.0, 711), (1.0, 1245), (1.0, 1057), (1.0, 404), (1.0, 1147), (1.0, 165), (1.0, 1255), (1.0, 1376), (1.0, 763), (1.0, 1603), (1.0, 699), (1.0, 802), (1.0, 858), (1.0, 607), (1.0, 510), (1.0, 1078), (1.0, 1237), (1.0, 1682), (1.0, 56), (1.0, 1064), (1.0, 841), (1.0, 820), (1.0, 663), (1.0, 650), (1.0, 332), (1.0, 1284), (1.0, 1528), (1.0, 302), (1.0, 1177), (1.0, 1351), (1.0, 1263), (1.0, 525), (1.0, 761), (1.0, 997), (1.0, 1153), (1.0, 1055), (1.0, 720), (1.0, 1427), (1.0, 721), (1.0, 1115), (1.0, 957), (1.0, 1324), (1.0, 1422), (1.0, 837), (0.75, 1679), (0.75, 1622), (0.625, 1634), (0.625, 1598), (0.625, 1675), (0.625, 1689), (0.625, 1653), (0.5416666666666666, 1623), (0.5, 1632), (0.5, 1612), (0.5, 1673), (0.5, 1667), (0.5, 1664), (0.5, 1661), (0.5, 1678), (0.41666666666666663, 1656), (0.41666666666666663, 1625), (0.41666666666666663, 1613), (0.375, 1658), (0.375, 1594), (0.375, 1636), (0.375, 1691), (0.16666666666666666, 1644), (0.16666666666666666, 1680), (0.16666666666666666, 1671), (0.16666666666666666, 1674)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1490
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1431
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x x) y) (+ 6 y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 14]
[Computing fitness]
[(1.75, 1596), (1.75, 1693), (1.75, 1490), (1.75, 1388), (1.75, 1431), (1.75, 1331), (1.625, 1200), (1.625, 1703), (1.625, 1699), (1.625, 1394), (1.625, 1288), (1.625, 1702), (1.625, 1602), (1.625, 988), (1.625, 1604), (1.625, 886), (1.625, 1290), (1.625, 1188), (1.625, 1493), (1.625, 1709), (1.625, 1492), (1.625, 1601), (1.625, 1600), (1.625, 1599), (1.625, 1605), (1.625, 1497), (1.625, 1705), (1.625, 1710), (1.625, 1695), (1.625, 1498), (1.625, 1088), (1.625, 1389), (1.625, 1187), (1.625, 596), (1.625, 1697), (1.625, 1393), (1.5, 1614), (1.5, 1723), (1.5, 1501), (1.5, 1626), (1.5, 1094), (1.5, 1615), (1.5, 690), (1.5, 1195), (1.5, 1744), (1.5, 1546), (1.5, 1089), (1.5, 993), (1.5, 1191), (1.5, 1722), (1.5, 1610), (1.5, 1720), (1.5, 1302), (1.5, 912), (1.5, 791), (1.5, 691), (1.5, 1727), (1.5, 1616), (1.5, 1729), (1.5, 1743), (1.5, 1629), (1.5, 1304), (1.5, 1715), (1.5, 1620), (1.5, 990), (1.5, 789), (1.5, 1301), (1.5, 1507), (1.5, 1738), (1.5, 1398), (1.5, 1508), (1.5, 1199), (1.5, 296), (1.5, 1408), (1.5, 1631), (1.5, 1742), (1.5, 1515), (1.5, 1608), (1.5, 1735), (1.5, 1509), (1.5, 1511), (1.5, 498), (1.5, 1628), (1.5, 1298), (1.5, 1409), (1.5, 1719), (1.5, 1737), (1.5, 1712), (1.5, 1606), (1.5, 1406), (1.5, 1736), (1.5, 1401), (1.5, 1513), (1.5, 212), (1.5, 1091), (1.5, 1193), (1.5, 887), (1.5, 1512), (1.5, 1726), (1.5, 1405), (1.5, 1197), (1.5, 1630), (1.5, 1618), (1.5, 1403), (1.375, 1550), (1.375, 1746), (1.375, 1412), (1.375, 1321), (1.375, 1458), (1.375, 1381), (1.375, 1750), (1.375, 1437), (1.375, 1233), (1.375, 1527), (1.375, 726), (1.375, 1140), (1.375, 1413), (1.25, 1438), (1.25, 1426), (1.25, 1669), (1.25, 1308), (1.25, 1650), (1.25, 517), (1.25, 1639), (1.25, 1451), (1.25, 1645), (1.25, 895), (1.25, 995), (1.25, 1099), (1.25, 1097), (1.25, 1651), (1.25, 862), (1.25, 1001), (1.25, 1202), (1.25, 1642), (1.25, 1318), (1.25, 1003), (1.25, 1103), (1.25, 692), (1.25, 1102), (1.25, 1325), (1.25, 1638), (1.25, 1204), (1.25, 1500), (1.25, 1657), (1.25, 1430), (1.25, 1759), (1.25, 1754), (1.25, 1335), (1.25, 1772), (1.25, 598), (1.25, 1205), (1.25, 1545), (1.25, 1760), (1.25, 1663), (1.25, 788), (1.25, 1428), (1.25, 1305), (1.25, 1659), (1.25, 1578), (1.25, 1556), (1.25, 1756), (1.25, 604), (1.25, 1436), (1.25, 1121), (1.25, 1777), (1.25, 1640), (1.25, 1131), (1.25, 1755), (1.25, 1549), (1.25, 1252), (1.25, 1217), (1.25, 1309), (1.25, 1771), (1.25, 898), (1.25, 1272), (1.25, 1647), (1.25, 794), (1.25, 1776), (1.25, 1465), (1.25, 1641), (1.25, 1425), (1.25, 1724), (1.25, 1137), (1.25, 1781), (1.25, 411), (1.25, 1665), (1.25, 894), (1.25, 1169), (1.25, 1587), (1.25, 1617), (1.25, 1531), (1.25, 1476), (1.25, 1763), (1.25, 1567), (1.25, 1654), (1.25, 1326), (1.25, 1764), (1.25, 1311), (1.25, 1461), (1.25, 1104), (1.25, 1328), (1.25, 1106), (1.25, 191), (1.25, 1551), (1.25, 1429), (1.25, 1435), (1.25, 1312), (1.25, 992), (1.25, 1566), (1.25, 1534), (1.25, 1769), (1.25, 1107), (1.25, 1649), (1.25, 998), (1.125, 869), (1.125, 662), (1.125, 609), (1.125, 896), (1.125, 649), (1.125, 1356), (1.125, 243), (1.125, 901), (1.125, 1196), (1.125, 1268), (1.125, 1242), (1.125, 1766), (1.125, 1010), (1.125, 1201), (1.125, 402), (1.125, 627), (1.125, 1456), (1.125, 1683), (1.125, 799), (1.125, 698), (1.125, 500), (1.125, 1243), (1.125, 1687), (1.125, 975), (1.125, 1441), (1.125, 1293), (1.125, 704), (1.125, 1637), (1.125, 1444), (1.125, 962), (1.125, 1592), (1.125, 807), (1.125, 41), (1.125, 1482), (1.125, 1108), (1.125, 1337), (1.125, 1466), (1.125, 77), (1.125, 1135), (1.125, 1246), (1.125, 1648), (1.125, 1341), (1.125, 1453), (1.125, 1240), (1.125, 1635), (1.125, 695), (1.125, 1565), (1.125, 640), (1.125, 1373), (1.125, 1009), (1.125, 900), (1.125, 1034), (1.125, 808), (1.125, 1173), (1.125, 1029), (1.125, 809), (1.125, 1023), (1.125, 1136), (1.125, 1686), (1.125, 1474), (1.125, 1563), (1.125, 1096), (1.125, 1370), (1.125, 1354), (1.125, 1220), (1.125, 308), (1.125, 1234), (1.125, 1110), (1.125, 1072), (1.125, 1483), (1.125, 600), (1.125, 910), (1.125, 732), (1.125, 1471), (1.125, 1586), (1.125, 1347), (1.125, 906), (1.125, 1013), (1.125, 943), (1.125, 1030), (1.125, 1589), (1.125, 1454), (1.125, 1489), (1.125, 703), (1.125, 1058), (1.125, 1071), (1.125, 1239), (1.125, 1368), (1.125, 1236), (1.125, 1395), (1.125, 1584), (1.125, 697), (1.125, 1113), (1.125, 1129), (1.125, 800), (1.125, 1468), (1.125, 503), (1.125, 907), (1.125, 954), (1.125, 1575), (1.125, 1066), (1.125, 1591), (1.125, 1128), (1.125, 1677), (1.125, 1577), (1.125, 803), (1.0, 1749), (1.0, 661), (1.0, 1411), (1.0, 750), (1.0, 940), (1.0, 342), (1.0, 505), (1.0, 1491), (1.0, 1685), (1.0, 826), (1.0, 1062), (1.0, 1773), (1.0, 815), (1.0, 965), (1.0, 1287), (1.0, 391), (1.0, 611), (1.0, 1424), (1.0, 836), (1.0, 1250), (1.0, 872), (1.0, 829), (1.0, 767), (1.0, 786), (1.0, 1146), (1.0, 714), (1.0, 1633), (1.0, 1050), (1.0, 1042), (1.0, 502), (1.0, 1142), (1.0, 1751), (1.0, 200), (1.0, 941), (1.0, 1256), (1.0, 1643), (1.0, 712), (1.0, 1054), (1.0, 1125), (1.0, 1541), (1.0, 1158), (1.0, 1076), (1.0, 409), (1.0, 717), (1.0, 1185), (1.0, 63), (1.0, 1583), (1.0, 1060), (1.0, 1694), (1.0, 1317), (0.75, 1779), (0.75, 1717), (0.75, 1734), (0.75, 1758), (0.75, 1707), (0.75, 1783), (0.75, 1753), (0.75, 1785), (0.625, 1747), (0.625, 1787), (0.625, 1748), (0.625, 1778), (0.625, 1761), (0.625, 1741), (0.5416666666666666, 1714), (0.5416666666666666, 1731), (0.5416666666666666, 1745), (0.5416666666666666, 1732), (0.5, 1768), (0.5, 1782), (0.5, 1701), (0.5, 1784), (0.41666666666666663, 1739), (0.41666666666666663, 1711), (0.41666666666666663, 1740), (0.375, 1765), (0.375, 1692), (0.29166666666666663, 1774), (0.16666666666666666, 1762)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1693
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1490
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1431
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x x) y) (+ 6 y)))
 nr_nodes: 10]
[Generation 15]
[Computing fitness]
[(1.75, 1331), (1.75, 1788), (1.75, 1789), (1.75, 1693), (1.75, 1490), (1.75, 1596), (1.75, 1431), (1.75, 1388), (1.625, 1807), (1.625, 1808), (1.625, 1800), (1.625, 1699), (1.625, 1188), (1.625, 1389), (1.625, 1200), (1.625, 1088), (1.625, 1794), (1.625, 1801), (1.625, 1697), (1.625, 1799), (1.625, 1497), (1.625, 1806), (1.625, 1709), (1.625, 1803), (1.625, 1792), (1.625, 1703), (1.625, 1695), (1.625, 596), (1.625, 1605), (1.625, 1705), (1.625, 1797), (1.625, 1187), (1.625, 1809), (1.625, 1802), (1.625, 1599), (1.625, 1394), (1.625, 1702), (1.625, 1493), (1.625, 1710), (1.625, 1796), (1.625, 1393), (1.625, 988), (1.625, 1498), (1.625, 1288), (1.625, 1601), (1.625, 1290), (1.625, 1604), (1.625, 1492), (1.625, 1602), (1.625, 886), (1.625, 1600), (1.5, 1501), (1.5, 1508), (1.5, 1829), (1.5, 1719), (1.5, 1513), (1.5, 1715), (1.5, 1515), (1.5, 1405), (1.5, 1729), (1.5, 1614), (1.5, 1842), (1.5, 1819), (1.5, 912), (1.5, 1831), (1.5, 1736), (1.5, 1742), (1.5, 1606), (1.5, 1197), (1.5, 1712), (1.5, 1615), (1.5, 212), (1.5, 1841), (1.5, 1512), (1.5, 1616), (1.5, 993), (1.5, 1824), (1.5, 1738), (1.5, 1833), (1.5, 1610), (1.5, 691), (1.5, 1722), (1.5, 1727), (1.5, 1832), (1.5, 1511), (1.5, 1845), (1.5, 1726), (1.5, 1626), (1.5, 1828), (1.5, 1398), (1.5, 1406), (1.5, 1848), (1.5, 1630), (1.5, 1844), (1.5, 1199), (1.5, 1822), (1.5, 1403), (1.5, 1720), (1.5, 1546), (1.5, 1825), (1.5, 1628), (1.5, 296), (1.5, 1408), (1.5, 1608), (1.5, 1191), (1.5, 1743), (1.5, 498), (1.5, 690), (1.5, 1849), (1.5, 1195), (1.5, 1302), (1.5, 1094), (1.5, 1091), (1.5, 1629), (1.5, 1507), (1.5, 791), (1.5, 1401), (1.5, 1620), (1.5, 789), (1.5, 887), (1.5, 1618), (1.5, 1193), (1.5, 1735), (1.5, 1301), (1.5, 1812), (1.5, 990), (1.5, 1723), (1.5, 1850), (1.5, 1509), (1.5, 1298), (1.5, 1304), (1.5, 1834), (1.5, 1867), (1.5, 1820), (1.5, 1840), (1.5, 1089), (1.5, 1838), (1.5, 1817), (1.5, 1835), (1.5, 1631), (1.5, 1826), (1.5, 1409), (1.5, 1737), (1.5, 1744), (1.375, 1527), (1.375, 726), (1.375, 1413), (1.375, 1854), (1.375, 1437), (1.375, 1140), (1.375, 1412), (1.375, 1233), (1.375, 1746), (1.375, 1853), (1.375, 1321), (1.375, 1856), (1.375, 1458), (1.375, 1550), (1.375, 1851), (1.375, 1750), (1.375, 1381), (1.25, 1335), (1.25, 1097), (1.25, 1665), (1.25, 1428), (1.25, 1639), (1.25, 1465), (1.25, 862), (1.25, 1566), (1.25, 1776), (1.25, 894), (1.25, 1760), (1.25, 1102), (1.25, 1131), (1.25, 1567), (1.25, 1436), (1.25, 1578), (1.25, 1815), (1.25, 1534), (1.25, 1859), (1.25, 1318), (1.25, 1551), (1.25, 1777), (1.25, 1312), (1.25, 1169), (1.25, 1531), (1.25, 1328), (1.25, 992), (1.25, 1461), (1.25, 1638), (1.25, 1001), (1.25, 1311), (1.25, 1759), (1.25, 1587), (1.25, 1202), (1.25, 1771), (1.25, 1252), (1.25, 1640), (1.25, 1326), (1.25, 1754), (1.25, 1217), (1.25, 1549), (1.25, 1663), (1.25, 1763), (1.25, 1756), (1.25, 1107), (1.25, 1651), (1.25, 1657), (1.25, 998), (1.25, 1545), (1.25, 1451), (1.25, 1205), (1.25, 1871), (1.25, 1121), (1.25, 1430), (1.25, 1426), (1.25, 1647), (1.25, 1106), (1.25, 1654), (1.25, 1272), (1.25, 1724), (1.25, 598), (1.25, 1755), (1.25, 1305), (1.25, 1649), (1.25, 1308), (1.25, 191), (1.25, 1500), (1.25, 1429), (1.25, 517), (1.25, 1764), (1.25, 1204), (1.25, 1435), (1.25, 1137), (1.25, 1003), (1.25, 1642), (1.25, 1659), (1.25, 1425), (1.25, 1556), (1.25, 1650), (1.25, 1870), (1.25, 1769), (1.25, 1438), (1.25, 692), (1.25, 1645), (1.25, 1641), (1.25, 995), (1.25, 1325), (1.25, 1617), (1.25, 1669), (1.25, 1103), (1.25, 898), (1.25, 1868), (1.25, 794), (1.25, 411), (1.25, 604), (1.25, 1099), (1.25, 788), (1.25, 1781), (1.25, 895), (1.25, 1772), (1.25, 1476), (1.25, 1104), (1.25, 1309), (1.125, 1395), (1.125, 1483), (1.125, 1454), (1.125, 703), (1.125, 910), (1.125, 1108), (1.125, 906), (1.125, 1456), (1.125, 1474), (1.125, 1135), (1.125, 1347), (1.125, 799), (1.125, 808), (1.125, 1239), (1.125, 649), (1.125, 1071), (1.125, 1356), (1.125, 1220), (1.125, 1683), (1.125, 1370), (1.125, 954), (1.125, 1246), (1.125, 807), (1.125, 1874), (1.125, 1242), (1.125, 1565), (1.125, 1591), (1.125, 1236), (1.125, 1243), (1.125, 1023), (1.125, 1337), (1.125, 41), (1.125, 1471), (1.125, 901), (1.125, 1010), (1.125, 1013), (1.125, 1030), (1.125, 1577), (1.125, 627), (1.125, 1589), (1.125, 1468), (1.125, 308), (1.125, 1575), (1.125, 600), (1.125, 704), (1.125, 1489), (1.125, 1029), (1.125, 975), (1.125, 1637), (1.125, 1058), (1.125, 962), (1.125, 1368), (1.125, 243), (1.125, 1234), (1.125, 1466), (1.125, 662), (1.125, 1293), (1.125, 1113), (1.125, 500), (1.125, 1586), (1.125, 1096), (1.125, 1687), (1.125, 77), (1.125, 800), (1.125, 1444), (1.125, 1201), (1.125, 1453), (1.125, 402), (1.125, 1592), (1.125, 609), (1.125, 1584), (1.125, 1136), (1.125, 1072), (1.125, 1173), (1.125, 900), (1.125, 1441), (1.125, 697), (1.125, 896), (1.125, 1128), (1.125, 695), (1.125, 943), (1.125, 1686), (1.125, 640), (1.125, 732), (1.125, 1677), (1.125, 698), (1.125, 1354), (1.125, 1648), (1.125, 1635), (1.125, 1110), (1.125, 809), (1.125, 869), (1.125, 1563), (1.125, 1066), (1.125, 1034), (1.125, 1766), (1.125, 1196), (1.125, 1129), (1.125, 1482), (1.125, 1373), (1.125, 803), (1.125, 907), (1.125, 503), (1.125, 1240), (1.125, 1009), (1.125, 1268), (1.125, 1341), (1.0, 1805), (1.0, 1411), (1.0, 750), (1.0, 661), (1.0, 1749), (0.75, 1857), (0.75, 1821), (0.75, 1813), (0.75, 1855), (0.75, 1876), (0.625, 1864), (0.625, 1791), (0.625, 1790), (0.625, 1861), (0.625, 1873), (0.625, 1860), (0.625, 1877), (0.5416666666666666, 1843), (0.5416666666666666, 1837), (0.5416666666666666, 1839), (0.5416666666666666, 1830), (0.5416666666666666, 1847), (0.5, 1863), (0.5, 1865), (0.41666666666666663, 1811), (0.41666666666666663, 1814), (0.25, 1852), (0.25, 1875), (0.16666666666666666, 1878)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1788
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1789
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1693
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1490
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 16]
[Computing fitness]
[(1.75, 1880), (1.75, 1789), (1.75, 1879), (1.75, 1788), (1.75, 1388), (1.75, 1490), (1.75, 1693), (1.75, 1331), (1.75, 1431), (1.75, 1881), (1.75, 1596), (1.625, 1889), (1.625, 1605), (1.625, 1498), (1.625, 1187), (1.625, 1601), (1.625, 1898), (1.625, 1809), (1.625, 886), (1.625, 1493), (1.625, 1801), (1.625, 1885), (1.625, 1901), (1.625, 1796), (1.625, 1393), (1.625, 1894), (1.625, 1799), (1.625, 1794), (1.625, 1800), (1.625, 1886), (1.625, 1695), (1.625, 1808), (1.625, 1797), (1.625, 1899), (1.625, 1908), (1.625, 1697), (1.625, 1600), (1.625, 1906), (1.625, 1803), (1.625, 1710), (1.625, 1884), (1.625, 1497), (1.625, 1599), (1.625, 1910), (1.625, 1891), (1.625, 1699), (1.625, 1188), (1.625, 1290), (1.625, 1895), (1.625, 1902), (1.625, 1792), (1.625, 1702), (1.625, 1703), (1.625, 1288), (1.625, 1802), (1.625, 1909), (1.625, 1907), (1.625, 1893), (1.625, 1088), (1.625, 596), (1.625, 1807), (1.625, 1705), (1.625, 1709), (1.625, 1394), (1.625, 1604), (1.625, 1806), (1.625, 988), (1.625, 1200), (1.625, 1602), (1.625, 1389), (1.625, 1892), (1.625, 1492), (1.5, 1742), (1.5, 887), (1.5, 1923), (1.5, 1926), (1.5, 1744), (1.5, 1840), (1.5, 1401), (1.5, 1812), (1.5, 1304), (1.5, 1943), (1.5, 1924), (1.5, 1828), (1.5, 1628), (1.5, 1508), (1.5, 1712), (1.5, 1922), (1.5, 1199), (1.5, 1735), (1.5, 1960), (1.5, 1614), (1.5, 1916), (1.5, 1191), (1.5, 1737), (1.5, 1608), (1.5, 1833), (1.5, 1618), (1.5, 1942), (1.5, 1405), (1.5, 1546), (1.5, 1719), (1.5, 990), (1.5, 1845), (1.5, 1952), (1.5, 1844), (1.5, 1842), (1.5, 1963), (1.5, 1826), (1.5, 1835), (1.5, 1736), (1.5, 212), (1.5, 1939), (1.5, 1817), (1.5, 1838), (1.5, 1824), (1.5, 1729), (1.5, 1867), (1.5, 1302), (1.5, 1841), (1.5, 1630), (1.5, 1193), (1.5, 1726), (1.5, 1940), (1.5, 1919), (1.5, 1951), (1.5, 1720), (1.5, 1606), (1.5, 1849), (1.5, 1930), (1.5, 1925), (1.5, 1832), (1.5, 1819), (1.5, 1511), (1.5, 1409), (1.5, 1406), (1.5, 1512), (1.5, 1408), (1.5, 1850), (1.5, 791), (1.5, 1616), (1.5, 1820), (1.5, 1945), (1.5, 1965), (1.5, 1629), (1.5, 1094), (1.5, 1964), (1.5, 1398), (1.5, 1501), (1.5, 691), (1.5, 1513), (1.5, 1955), (1.5, 1515), (1.5, 1917), (1.5, 1722), (1.5, 1825), (1.5, 1197), (1.5, 1822), (1.5, 1091), (1.5, 1935), (1.5, 1298), (1.5, 1301), (1.5, 1727), (1.5, 1610), (1.5, 1937), (1.5, 1829), (1.5, 1831), (1.5, 1834), (1.5, 1626), (1.5, 993), (1.5, 1195), (1.5, 296), (1.5, 1089), (1.5, 1915), (1.5, 1715), (1.5, 1932), (1.5, 1958), (1.5, 1509), (1.5, 1507), (1.5, 498), (1.5, 789), (1.5, 1927), (1.5, 1743), (1.5, 1615), (1.5, 1620), (1.5, 1723), (1.5, 690), (1.5, 1959), (1.5, 1738), (1.5, 1848), (1.5, 1403), (1.5, 1914), (1.5, 1941), (1.5, 1962), (1.5, 912), (1.5, 1631), (1.5, 1928), (1.375, 1233), (1.375, 1140), (1.375, 1856), (1.375, 726), (1.375, 1437), (1.375, 1851), (1.375, 1381), (1.375, 1966), (1.375, 1550), (1.375, 1853), (1.375, 1321), (1.375, 1527), (1.375, 1458), (1.375, 1750), (1.375, 1413), (1.375, 1854), (1.375, 1412), (1.375, 1967), (1.375, 1746), (1.25, 992), (1.25, 1724), (1.25, 1326), (1.25, 1107), (1.25, 1756), (1.25, 1097), (1.25, 1647), (1.25, 1465), (1.25, 1665), (1.25, 1760), (1.25, 1103), (1.25, 517), (1.25, 1308), (1.25, 1534), (1.25, 1947), (1.25, 1428), (1.25, 1137), (1.25, 1771), (1.25, 1545), (1.25, 1461), (1.25, 1578), (1.25, 1438), (1.25, 1638), (1.25, 692), (1.25, 1099), (1.25, 1759), (1.25, 1252), (1.25, 1003), (1.25, 898), (1.25, 1868), (1.25, 604), (1.25, 1764), (1.25, 1639), (1.25, 1654), (1.25, 1642), (1.25, 1871), (1.25, 1309), (1.25, 1776), (1.25, 1104), (1.25, 1566), (1.25, 1204), (1.25, 1106), (1.25, 1772), (1.25, 1781), (1.25, 1217), (1.25, 1131), (1.25, 1651), (1.25, 1567), (1.25, 598), (1.25, 1429), (1.25, 862), (1.25, 788), (1.25, 1001), (1.25, 1205), (1.25, 1769), (1.25, 1645), (1.25, 1335), (1.25, 1669), (1.25, 1425), (1.25, 1763), (1.25, 1657), (1.25, 1870), (1.25, 1272), (1.25, 998), (1.25, 1649), (1.25, 1169), (1.25, 1815), (1.25, 1640), (1.25, 1430), (1.25, 411), (1.25, 1202), (1.25, 1754), (1.25, 895), (1.25, 1311), (1.25, 1312), (1.25, 1549), (1.25, 1755), (1.25, 1617), (1.25, 1436), (1.25, 1121), (1.25, 191), (1.25, 1551), (1.25, 1663), (1.25, 1305), (1.25, 1325), (1.25, 1435), (1.25, 1859), (1.25, 1476), (1.25, 1500), (1.25, 995), (1.25, 1426), (1.25, 1650), (1.25, 1641), (1.25, 794), (1.25, 894), (1.25, 1587), (1.25, 1556), (1.25, 1531), (1.25, 1659), (1.25, 1777), (1.25, 1102), (1.25, 1328), (1.25, 1318), (1.25, 1451), (1.125, 1337), (1.125, 1108), (1.125, 1135), (1.125, 1013), (1.125, 808), (1.125, 1586), (1.125, 1293), (1.125, 1242), (1.125, 975), (1.125, 1468), (1.125, 500), (1.125, 1456), (1.125, 1243), (1.125, 1071), (1.125, 704), (1.125, 1454), (1.125, 703), (1.125, 1113), (1.125, 243), (1.125, 1030), (1.125, 799), (1.125, 1591), (1.125, 954), (1.125, 1058), (1.125, 1575), (1.125, 1474), (1.125, 662), (1.125, 1489), (1.125, 600), (1.125, 1395), (1.125, 1483), (1.125, 962), (1.125, 1683), (1.125, 649), (1.125, 901), (1.125, 1874), (1.125, 1356), (1.125, 1466), (1.125, 1220), (1.125, 1370), (1.125, 1565), (1.125, 910), (1.125, 906), (1.125, 1236), (1.125, 1010), (1.125, 1637), (1.125, 308), (1.125, 41), (1.125, 1234), (1.125, 1096), (1.125, 627), (1.125, 1589), (1.125, 1347), (1.125, 1239), (1.125, 1577), (1.125, 1368), (1.125, 1023), (1.125, 1246), (1.125, 1029), (1.125, 1471), (1.125, 807), (1.0, 1904), (1.0, 1888), (0.875, 1949), (0.75, 1968), (0.625, 1912), (0.625, 1897), (0.625, 1920), (0.625, 1883), (0.5416666666666666, 1944), (0.5416666666666666, 1953), (0.5416666666666666, 1954), (0.5416666666666666, 1957), (0.5416666666666666, 1946), (0.5416666666666666, 1938), (0.5416666666666666, 1950), (0.41666666666666663, 1961), (0.41666666666666663, 1934), (0.41666666666666663, 1929), (0.41666666666666663, 1936)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1880
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1789
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1879
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1788
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 17]
[Computing fitness]
[(1.75, 1789), (1.75, 1969), (1.75, 1331), (1.75, 1431), (1.75, 1693), (1.75, 1788), (1.75, 1880), (1.75, 1388), (1.75, 1970), (1.75, 1879), (1.75, 1490), (1.75, 1596), (1.75, 1973), (1.75, 1881), (1.75, 1972), (1.625, 1792), (1.625, 1497), (1.625, 1975), (1.625, 1088), (1.625, 1999), (1.625, 1908), (1.625, 1902), (1.625, 1605), (1.625, 1200), (1.625, 1992), (1.625, 988), (1.625, 1599), (1.625, 1695), (1.625, 1600), (1.625, 1709), (1.625, 1389), (1.625, 1899), (1.625, 1393), (1.625, 1796), (1.625, 1976), (1.625, 1979), (1.625, 1797), (1.625, 2008), (1.625, 1909), (1.625, 1993), (1.625, 1886), (1.625, 1889), (1.625, 1807), (1.625, 1394), (1.625, 1188), (1.625, 1910), (1.625, 1893), (1.625, 1995), (1.625, 1983), (1.625, 1697), (1.625, 1710), (1.625, 1699), (1.625, 1885), (1.625, 1901), (1.625, 1991), (1.625, 1806), (1.625, 1601), (1.625, 1987), (1.625, 1894), (1.625, 2006), (1.625, 1980), (1.625, 2013), (1.625, 1288), (1.625, 1988), (1.625, 1891), (1.625, 1906), (1.625, 2001), (1.625, 1800), (1.625, 2000), (1.625, 2011), (1.625, 886), (1.625, 1602), (1.625, 1492), (1.625, 2003), (1.625, 1794), (1.625, 1799), (1.625, 1802), (1.625, 1985), (1.625, 1895), (1.625, 1801), (1.625, 596), (1.625, 1907), (1.625, 1604), (1.625, 1978), (1.625, 1884), (1.625, 1803), (1.625, 1898), (1.625, 1703), (1.625, 1977), (1.625, 1997), (1.625, 2010), (1.625, 1808), (1.625, 1998), (1.625, 1493), (1.625, 1290), (1.625, 1809), (1.625, 1705), (1.625, 1702), (1.625, 2015), (1.625, 1994), (1.625, 2004), (1.625, 1990), (1.625, 1892), (1.625, 1498), (1.625, 1187), (1.5, 993), (1.5, 1614), (1.5, 1959), (1.5, 1838), (1.5, 2021), (1.5, 1091), (1.5, 1720), (1.5, 1927), (1.5, 212), (1.5, 2019), (1.5, 1850), (1.5, 1834), (1.5, 791), (1.5, 1507), (1.5, 2059), (1.5, 2062), (1.5, 1849), (1.5, 2037), (1.5, 1408), (1.5, 1867), (1.5, 1712), (1.5, 1820), (1.5, 1615), (1.5, 1508), (1.5, 1515), (1.5, 1401), (1.5, 912), (1.5, 1744), (1.5, 1726), (1.5, 498), (1.5, 1932), (1.5, 2030), (1.5, 1620), (1.5, 1914), (1.5, 1922), (1.5, 1826), (1.5, 1916), (1.5, 1925), (1.5, 1729), (1.5, 2040), (1.5, 1835), (1.5, 1737), (1.5, 1848), (1.5, 2017), (1.5, 2060), (1.5, 1923), (1.5, 1940), (1.5, 1824), (1.5, 1833), (1.5, 2041), (1.5, 1629), (1.5, 1960), (1.5, 2056), (1.5, 1962), (1.5, 990), (1.5, 1406), (1.5, 1743), (1.5, 1738), (1.5, 1958), (1.5, 2039), (1.5, 2055), (1.5, 1546), (1.5, 1841), (1.5, 2033), (1.5, 1742), (1.5, 1829), (1.5, 1630), (1.5, 1842), (1.5, 2018), (1.5, 1094), (1.5, 1935), (1.5, 2027), (1.5, 1513), (1.5, 1819), (1.5, 1926), (1.5, 1398), (1.5, 1626), (1.5, 1409), (1.5, 1951), (1.5, 1509), (1.5, 1715), (1.5, 1197), (1.5, 1195), (1.5, 1844), (1.5, 2052), (1.5, 1941), (1.5, 1199), (1.5, 1403), (1.5, 1831), (1.5, 1191), (1.5, 2029), (1.5, 1928), (1.5, 1817), (1.5, 1812), (1.5, 1298), (1.5, 1735), (1.5, 1955), (1.5, 2043), (1.5, 1845), (1.5, 1301), (1.5, 2063), (1.5, 1915), (1.5, 1089), (1.5, 1930), (1.5, 1302), (1.5, 1919), (1.5, 1616), (1.5, 1606), (1.5, 1939), (1.5, 1512), (1.5, 2026), (1.5, 1945), (1.5, 1832), (1.5, 691), (1.5, 1405), (1.5, 1723), (1.5, 1727), (1.5, 2025), (1.5, 1825), (1.5, 1618), (1.5, 1610), (1.5, 1917), (1.5, 1304), (1.5, 887), (1.5, 2032), (1.5, 1963), (1.5, 1943), (1.5, 789), (1.5, 1511), (1.5, 1628), (1.5, 1828), (1.5, 1501), (1.5, 296), (1.5, 1736), (1.5, 1193), (1.5, 2048), (1.5, 2053), (1.5, 1840), (1.5, 1942), (1.5, 1719), (1.5, 1964), (1.5, 1608), (1.5, 1965), (1.5, 1937), (1.5, 1952), (1.5, 1722), (1.5, 1924), (1.5, 1822), (1.5, 1631), (1.5, 690), (1.375, 1412), (1.375, 1550), (1.375, 1853), (1.375, 1458), (1.375, 1527), (1.375, 1233), (1.375, 1750), (1.375, 1381), (1.375, 1140), (1.375, 1854), (1.375, 1966), (1.375, 1851), (1.375, 1413), (1.375, 726), (1.375, 1746), (1.375, 1967), (1.375, 1321), (1.375, 1856), (1.375, 1437), (1.25, 1131), (1.25, 692), (1.25, 1531), (1.25, 604), (1.25, 1556), (1.25, 1217), (1.25, 1567), (1.25, 1815), (1.25, 1102), (1.25, 1435), (1.25, 598), (1.25, 1309), (1.25, 1328), (1.25, 1461), (1.25, 517), (1.25, 1551), (1.25, 1326), (1.25, 998), (1.25, 1772), (1.25, 1003), (1.25, 995), (1.25, 1771), (1.25, 1103), (1.25, 1642), (1.25, 1760), (1.25, 1665), (1.25, 1451), (1.25, 1650), (1.25, 1654), (1.25, 1325), (1.25, 1640), (1.25, 1947), (1.25, 1425), (1.25, 788), (1.25, 1121), (1.25, 1651), (1.25, 1663), (1.25, 1202), (1.25, 1754), (1.25, 1641), (1.25, 1617), (1.25, 1335), (1.25, 1549), (1.25, 1104), (1.25, 1647), (1.25, 1430), (1.25, 862), (1.25, 1107), (1.25, 1566), (1.25, 992), (1.25, 1649), (1.25, 1669), (1.25, 1759), (1.25, 1868), (1.25, 1097), (1.25, 1724), (1.25, 1776), (1.25, 1578), (1.25, 1428), (1.25, 1763), (1.25, 1438), (1.25, 1476), (1.25, 1252), (1.25, 1638), (1.25, 1870), (1.25, 1769), (1.25, 1426), (1.25, 1272), (1.25, 898), (1.25, 191), (1.25, 1312), (1.25, 1308), (1.25, 1001), (1.25, 1106), (1.25, 1545), (1.25, 1205), (1.25, 1169), (1.25, 1645), (1.25, 1429), (1.25, 1436), (1.25, 1871), (1.25, 1318), (1.25, 1659), (1.25, 1099), (1.25, 1764), (1.25, 1781), (1.25, 895), (1.25, 1305), (1.25, 1137), (1.25, 1777), (1.25, 1465), (1.25, 1587), (1.25, 794), (1.25, 1311), (1.25, 1755), (1.25, 1639), (1.25, 1204), (1.25, 894), (1.25, 1756), (1.25, 1657), (1.25, 1500), (1.25, 1859), (1.25, 1534), (1.25, 411), (1.125, 1013), (1.125, 808), (1.125, 1108), (1.125, 1337), (1.125, 1135), (1.125, 2061), (0.625, 1982), (0.5416666666666666, 2020), (0.5416666666666666, 2054), (0.5416666666666666, 2042), (0.5, 2045), (0.5, 2035), (0.5, 2047), (0.41666666666666663, 2058), (0.41666666666666663, 2038), (0.41666666666666663, 2049), (0.41666666666666663, 2057), (0.41666666666666663, 2023), (0.41666666666666663, 2016), (0.375, 1974), (0.375, 2012), (0.25, 2051)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1789
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1969
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1431
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x x) y) (+ 6 y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1693
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 18]
[Computing fitness]
[(1.75, 2067), (1.75, 1970), (1.75, 1881), (1.75, 1596), (1.75, 2069), (1.75, 2068), (1.75, 1331), (1.75, 1879), (1.75, 1388), (1.75, 1972), (1.75, 1789), (1.75, 1490), (1.75, 1973), (1.75, 2064), (1.75, 1969), (1.75, 2070), (1.75, 1788), (1.75, 2072), (1.75, 1431), (1.75, 1880), (1.75, 2066), (1.75, 1693), (1.625, 1995), (1.625, 1604), (1.625, 2088), (1.625, 1200), (1.625, 1703), (1.625, 1899), (1.625, 2004), (1.625, 1806), (1.625, 1895), (1.625, 1885), (1.625, 1891), (1.625, 1893), (1.625, 1797), (1.625, 2123), (1.625, 2125), (1.625, 1894), (1.625, 2101), (1.625, 1794), (1.625, 2113), (1.625, 1979), (1.625, 1803), (1.625, 2011), (1.625, 1987), (1.625, 1801), (1.625, 2121), (1.625, 1907), (1.625, 2114), (1.625, 2118), (1.625, 2131), (1.625, 596), (1.625, 1809), (1.625, 1492), (1.625, 1980), (1.625, 1884), (1.625, 1699), (1.625, 2109), (1.625, 2087), (1.625, 1389), (1.625, 1710), (1.625, 1908), (1.625, 2081), (1.625, 2090), (1.625, 2103), (1.625, 2092), (1.625, 1807), (1.625, 1600), (1.625, 1702), (1.625, 1709), (1.625, 2093), (1.625, 1898), (1.625, 1909), (1.625, 2115), (1.625, 1985), (1.625, 2130), (1.625, 1792), (1.625, 2003), (1.625, 1695), (1.625, 2117), (1.625, 1998), (1.625, 2104), (1.625, 886), (1.625, 2084), (1.625, 1976), (1.625, 2110), (1.625, 1802), (1.625, 1493), (1.625, 1901), (1.625, 2076), (1.625, 1697), (1.625, 1975), (1.625, 1705), (1.625, 2013), (1.625, 1906), (1.625, 2112), (1.625, 2086), (1.625, 1997), (1.625, 1602), (1.625, 1886), (1.625, 2000), (1.625, 1393), (1.625, 2129), (1.625, 1800), (1.625, 1601), (1.625, 2128), (1.625, 1988), (1.625, 1889), (1.625, 2096), (1.625, 1799), (1.625, 1991), (1.625, 1605), (1.625, 2119), (1.625, 1994), (1.625, 1990), (1.625, 1978), (1.625, 1288), (1.625, 1992), (1.625, 2120), (1.625, 2111), (1.625, 1977), (1.625, 2015), (1.625, 1892), (1.625, 1993), (1.625, 2075), (1.625, 2099), (1.625, 1394), (1.625, 1497), (1.625, 1187), (1.625, 1599), (1.625, 1910), (1.625, 1290), (1.625, 2102), (1.625, 2010), (1.625, 2108), (1.625, 1808), (1.625, 1999), (1.625, 2097), (1.625, 2006), (1.625, 2107), (1.625, 1902), (1.625, 2008), (1.625, 2091), (1.625, 2106), (1.625, 1188), (1.625, 2095), (1.625, 1796), (1.625, 1088), (1.625, 2077), (1.625, 1983), (1.625, 1498), (1.625, 988), (1.625, 2001), (1.5, 690), (1.5, 1743), (1.5, 2141), (1.5, 1840), (1.5, 1735), (1.5, 2017), (1.5, 1513), (1.5, 1914), (1.5, 1618), (1.5, 2137), (1.5, 1965), (1.5, 1962), (1.5, 1712), (1.5, 1932), (1.5, 1945), (1.5, 2018), (1.5, 1629), (1.5, 1917), (1.5, 1729), (1.5, 1409), (1.5, 1964), (1.5, 1610), (1.5, 1195), (1.5, 2048), (1.5, 1191), (1.5, 1719), (1.5, 990), (1.5, 2139), (1.5, 2149), (1.5, 1401), (1.5, 2053), (1.5, 2027), (1.5, 498), (1.5, 1835), (1.5, 1091), (1.5, 1848), (1.5, 1958), (1.5, 1628), (1.5, 1842), (1.5, 1620), (1.5, 1838), (1.5, 1197), (1.5, 1841), (1.5, 1828), (1.5, 1849), (1.5, 1738), (1.5, 789), (1.5, 1720), (1.5, 1715), (1.5, 2040), (1.5, 1501), (1.5, 1737), (1.5, 1744), (1.5, 993), (1.5, 1928), (1.5, 2143), (1.5, 2025), (1.5, 1955), (1.5, 1834), (1.5, 1939), (1.5, 1546), (1.5, 1615), (1.5, 2019), (1.5, 2060), (1.5, 2056), (1.5, 2033), (1.5, 1726), (1.5, 2026), (1.5, 1930), (1.5, 1943), (1.5, 1919), (1.5, 1937), (1.5, 2063), (1.5, 2134), (1.5, 1304), (1.5, 2140), (1.5, 1922), (1.5, 1626), (1.5, 1924), (1.5, 2052), (1.5, 1094), (1.5, 1844), (1.5, 1405), (1.5, 1408), (1.5, 887), (1.5, 1822), (1.5, 1301), (1.5, 2153), (1.5, 1812), (1.5, 1199), (1.5, 1951), (1.5, 2158), (1.5, 1826), (1.5, 2029), (1.5, 1511), (1.5, 1515), (1.5, 2133), (1.5, 1298), (1.5, 2037), (1.5, 1926), (1.5, 1722), (1.5, 791), (1.5, 2062), (1.5, 691), (1.5, 2136), (1.5, 1723), (1.5, 1508), (1.5, 2135), (1.5, 296), (1.5, 1915), (1.5, 1867), (1.5, 1850), (1.5, 1631), (1.5, 1512), (1.5, 1952), (1.5, 1302), (1.5, 1089), (1.5, 1963), (1.5, 1606), (1.5, 2039), (1.5, 1630), (1.5, 1824), (1.5, 1398), (1.5, 2145), (1.5, 1942), (1.5, 1829), (1.5, 1406), (1.5, 1940), (1.5, 1831), (1.5, 1959), (1.5, 1193), (1.5, 1825), (1.5, 1742), (1.5, 1614), (1.5, 1960), (1.5, 2021), (1.5, 2155), (1.5, 1833), (1.5, 1820), (1.5, 1927), (1.5, 1925), (1.5, 2032), (1.5, 2138), (1.5, 1403), (1.5, 1817), (1.5, 1509), (1.5, 1616), (1.5, 212), (1.5, 1941), (1.5, 1608), (1.5, 1507), (1.5, 1819), (1.5, 1916), (1.5, 2041), (1.5, 2043), (1.5, 1727), (1.5, 2154), (1.5, 2059), (1.5, 1736), (1.5, 1935), (1.5, 1832), (1.5, 1845), (1.5, 1923), (1.5, 2030), (1.5, 2055), (1.5, 912), (1.375, 1746), (1.375, 1413), (1.375, 1856), (1.375, 1321), (1.375, 1966), (1.375, 1967), (1.375, 1550), (1.375, 1437), (1.375, 1853), (1.375, 1140), (1.375, 1750), (1.375, 1851), (1.375, 726), (1.375, 1412), (1.375, 1854), (1.375, 1381), (1.375, 1233), (1.375, 1527), (1.375, 1458), (1.25, 1760), (1.25, 1430), (1.25, 1202), (1.25, 992), (1.25, 1102), (1.25, 1772), (1.25, 1451), (1.25, 517), (1.25, 1131), (1.25, 1640), (1.25, 1103), (1.25, 1121), (1.25, 1551), (1.25, 1651), (1.25, 862), (1.25, 1647), (1.25, 1650), (1.25, 1754), (1.25, 2142), (1.25, 604), (1.25, 1641), (1.25, 788), (1.25, 1326), (1.25, 1642), (1.25, 692), (1.25, 1461), (1.25, 1665), (1.25, 1328), (1.25, 1771), (1.25, 1567), (1.25, 1654), (1.25, 1815), (1.25, 1566), (1.25, 995), (1.25, 1309), (1.25, 1549), (1.25, 1556), (1.25, 1617), (1.25, 1947), (1.25, 1649), (1.25, 1425), (1.25, 1325), (1.25, 598), (1.25, 1104), (1.25, 1531), (1.25, 1335), (1.25, 1217), (1.25, 998), (1.25, 1003), (1.25, 1107), (1.25, 1435), (1.25, 1663), (1.0, 2083), (1.0, 2073), (1.0, 2080), (1.0, 2127), (0.875, 2157), (0.875, 2148), (0.875, 2152), (0.75, 2146), (0.625, 2078), (0.5416666666666666, 2150)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2067
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1970
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1881
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1596
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2069
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 19]
[Computing fitness]
[(1.75, 1789), (1.75, 1388), (1.75, 2163), (1.75, 1693), (1.75, 2165), (1.75, 2067), (1.75, 2070), (1.75, 2064), (1.75, 1881), (1.75, 1969), (1.75, 1596), (1.75, 1880), (1.75, 1973), (1.75, 1490), (1.75, 1431), (1.75, 2159), (1.75, 2069), (1.75, 2162), (1.75, 2166), (1.75, 2168), (1.75, 1972), (1.75, 1879), (1.75, 2072), (1.75, 2068), (1.75, 2167), (1.75, 2161), (1.75, 2160), (1.75, 1970), (1.75, 2066), (1.75, 1788), (1.75, 1331), (1.625, 2239), (1.625, 2251), (1.625, 1697), (1.625, 2190), (1.625, 2008), (1.625, 1799), (1.625, 2010), (1.625, 1801), (1.625, 2250), (1.625, 2001), (1.625, 1999), (1.625, 2013), (1.625, 2194), (1.625, 2081), (1.625, 1991), (1.625, 2109), (1.625, 2128), (1.625, 2210), (1.625, 2006), (1.625, 2188), (1.625, 1983), (1.625, 1995), (1.625, 2233), (1.625, 2236), (1.625, 2199), (1.625, 1600), (1.625, 1893), (1.625, 2000), (1.625, 2245), (1.625, 1394), (1.625, 2015), (1.625, 2243), (1.625, 2111), (1.625, 1976), (1.625, 2117), (1.625, 1998), (1.625, 1901), (1.625, 2087), (1.625, 2186), (1.625, 2252), (1.625, 1602), (1.625, 2237), (1.625, 2193), (1.625, 1187), (1.625, 2099), (1.625, 2204), (1.625, 2003), (1.625, 1908), (1.625, 2201), (1.625, 1702), (1.625, 1290), (1.625, 1884), (1.625, 1709), (1.625, 2214), (1.625, 2248), (1.625, 2235), (1.625, 1990), (1.625, 2115), (1.625, 1892), (1.625, 1601), (1.625, 2123), (1.625, 2206), (1.625, 1200), (1.625, 2197), (1.625, 2246), (1.625, 1797), (1.625, 2223), (1.625, 1389), (1.625, 886), (1.625, 1604), (1.625, 1809), (1.625, 2091), (1.625, 2110), (1.625, 1891), (1.625, 1980), (1.625, 1393), (1.625, 2247), (1.625, 1605), (1.625, 2107), (1.625, 2228), (1.625, 2184), (1.625, 2077), (1.625, 596), (1.625, 1806), (1.625, 2179), (1.625, 1808), (1.625, 2113), (1.625, 1909), (1.625, 2106), (1.625, 1699), (1.625, 2232), (1.625, 1978), (1.625, 2180), (1.625, 2129), (1.625, 1997), (1.625, 2218), (1.625, 1792), (1.625, 1977), (1.625, 1988), (1.625, 2084), (1.625, 1975), (1.625, 2192), (1.625, 1898), (1.625, 2207), (1.625, 1803), (1.625, 2108), (1.625, 2130), (1.625, 2101), (1.625, 2195), (1.625, 1906), (1.625, 2173), (1.625, 2183), (1.625, 1492), (1.625, 2189), (1.625, 1979), (1.625, 1895), (1.625, 2088), (1.625, 1807), (1.625, 1987), (1.625, 2178), (1.625, 1910), (1.625, 2086), (1.625, 1902), (1.625, 1894), (1.625, 2114), (1.625, 1800), (1.625, 1288), (1.625, 2095), (1.625, 2121), (1.625, 1992), (1.625, 1993), (1.625, 2216), (1.625, 2231), (1.625, 2093), (1.625, 2226), (1.625, 2131), (1.625, 2220), (1.625, 2112), (1.625, 2196), (1.625, 2249), (1.625, 2202), (1.625, 1885), (1.625, 1794), (1.625, 1695), (1.625, 2187), (1.625, 2120), (1.625, 988), (1.625, 2103), (1.625, 2075), (1.625, 2177), (1.625, 2215), (1.625, 2102), (1.625, 2090), (1.625, 2211), (1.625, 2119), (1.625, 2004), (1.625, 2076), (1.625, 2240), (1.625, 2118), (1.625, 1493), (1.625, 1907), (1.625, 1498), (1.625, 1497), (1.625, 1599), (1.625, 1703), (1.625, 1188), (1.625, 1088), (1.625, 1994), (1.625, 1802), (1.625, 1710), (1.625, 2242), (1.625, 2219), (1.625, 1899), (1.625, 2176), (1.625, 1886), (1.625, 1889), (1.625, 1796), (1.625, 2191), (1.625, 2096), (1.625, 1705), (1.625, 2234), (1.625, 2125), (1.625, 2097), (1.625, 1985), (1.625, 2092), (1.625, 2011), (1.625, 2104), (1.5, 2040), (1.5, 2048), (1.5, 1959), (1.5, 1834), (1.5, 912), (1.5, 1955), (1.5, 1962), (1.5, 1606), (1.5, 1926), (1.5, 1743), (1.5, 1191), (1.5, 887), (1.5, 2043), (1.5, 2060), (1.5, 1616), (1.5, 2059), (1.5, 2039), (1.5, 1940), (1.5, 498), (1.5, 1712), (1.5, 212), (1.5, 2063), (1.5, 2019), (1.5, 1546), (1.5, 2052), (1.5, 2139), (1.5, 2056), (1.5, 1825), (1.5, 2017), (1.5, 2136), (1.5, 1302), (1.5, 990), (1.5, 296), (1.5, 1301), (1.5, 1630), (1.5, 1618), (1.5, 2041), (1.5, 1408), (1.5, 791), (1.5, 2134), (1.5, 1614), (1.5, 1841), (1.5, 1736), (1.5, 1963), (1.5, 2033), (1.5, 1828), (1.5, 1719), (1.5, 1509), (1.5, 1091), (1.5, 1923), (1.5, 1941), (1.5, 1515), (1.5, 1932), (1.5, 1922), (1.5, 2155), (1.5, 2021), (1.5, 2140), (1.5, 2030), (1.5, 1726), (1.5, 993), (1.5, 1405), (1.5, 2053), (1.5, 2133), (1.5, 1744), (1.5, 1089), (1.5, 1951), (1.5, 1960), (1.5, 1835), (1.5, 1199), (1.5, 1831), (1.5, 1508), (1.5, 1915), (1.5, 1820), (1.5, 1729), (1.5, 1094), (1.5, 1812), (1.5, 1298), (1.5, 1964), (1.5, 1723), (1.5, 1735), (1.5, 1727), (1.5, 1512), (1.5, 2141), (1.5, 2145), (1.5, 1919), (1.5, 1952), (1.5, 2026), (1.5, 1722), (1.5, 2153), (1.5, 1927), (1.5, 1501), (1.5, 1720), (1.5, 1824), (1.5, 1819), (1.5, 1829), (1.5, 1842), (1.5, 1925), (1.5, 1626), (1.5, 2137), (1.5, 2062), (1.5, 1610), (1.5, 691), (1.5, 1845), (1.5, 1930), (1.5, 1615), (1.5, 1403), (1.5, 1513), (1.5, 1958), (1.5, 1916), (1.5, 1945), (1.5, 1943), (1.5, 1197), (1.5, 1826), (1.5, 1914), (1.5, 2138), (1.5, 1737), (1.5, 2154), (1.5, 1822), (1.5, 1840), (1.5, 1742), (1.5, 1628), (1.5, 2143), (1.5, 1631), (1.5, 1507), (1.5, 2135), (1.5, 1401), (1.5, 1833), (1.5, 1848), (1.5, 1924), (1.5, 2029), (1.5, 1817), (1.5, 1935), (1.5, 1844), (1.5, 1838), (1.5, 1917), (1.5, 1738), (1.5, 1409), (1.5, 1942), (1.5, 1620), (1.5, 1939), (1.5, 1608), (1.5, 1398), (1.5, 1849), (1.5, 1715), (1.5, 1965), (1.5, 2055), (1.5, 2025), (1.5, 1629), (1.5, 1928), (1.5, 2018), (1.5, 2027), (1.5, 1850), (1.5, 2149), (1.5, 2032), (1.5, 1304), (1.5, 789), (1.5, 1937), (1.5, 1406), (1.5, 1511), (1.5, 1193), (1.5, 2037), (1.5, 1195), (1.5, 690), (1.5, 1832), (1.5, 1867), (1.5, 2158), (1.375, 1321), (1.375, 1856), (1.375, 1966), (1.375, 1746), (1.375, 1413), (1.375, 1967), (1.0, 2230), (0.875, 2172), (0.75, 2209), (0.75, 2254), (0.75, 2222), (0.625, 2225), (0.625, 2213), (0.625, 2182), (0.5, 2170), (0.375, 2175)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1789
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1388
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1693
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2165
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 20]
[Computing fitness]
[(1.75, 1880), (1.75, 1490), (1.75, 2161), (1.75, 2168), (1.75, 2265), (1.75, 2256), (1.75, 1788), (1.75, 1331), (1.75, 2165), (1.75, 2068), (1.75, 2258), (1.75, 2069), (1.75, 1789), (1.75, 2263), (1.75, 1973), (1.75, 2167), (1.75, 1970), (1.75, 1879), (1.75, 2067), (1.75, 1881), (1.75, 2064), (1.75, 2160), (1.75, 2072), (1.75, 1388), (1.75, 1596), (1.75, 2159), (1.75, 2070), (1.75, 2273), (1.75, 1693), (1.75, 2259), (1.75, 2162), (1.75, 2276), (1.75, 2166), (1.75, 1969), (1.75, 2262), (1.75, 2275), (1.75, 2163), (1.75, 2270), (1.75, 2271), (1.75, 2268), (1.75, 2274), (1.75, 2066), (1.75, 1972), (1.75, 2269), (1.75, 2261), (1.75, 1431), (1.625, 2125), (1.625, 1997), (1.625, 2342), (1.625, 2282), (1.625, 1602), (1.625, 2332), (1.625, 2204), (1.625, 2087), (1.625, 2304), (1.625, 1497), (1.625, 1493), (1.625, 1802), (1.625, 2344), (1.625, 2103), (1.625, 2196), (1.625, 2277), (1.625, 1894), (1.625, 2325), (1.625, 2130), (1.625, 2173), (1.625, 1601), (1.625, 1796), (1.625, 2108), (1.625, 1901), (1.625, 1188), (1.625, 2323), (1.625, 2090), (1.625, 2195), (1.625, 2248), (1.625, 2300), (1.625, 2297), (1.625, 2081), (1.625, 1794), (1.625, 2281), (1.625, 2246), (1.625, 2210), (1.625, 1906), (1.625, 988), (1.625, 2337), (1.625, 2201), (1.625, 2288), (1.625, 1998), (1.625, 2202), (1.625, 1979), (1.625, 1498), (1.625, 2102), (1.625, 2335), (1.625, 1988), (1.625, 2240), (1.625, 1980), (1.625, 2106), (1.625, 2008), (1.625, 1605), (1.625, 2314), (1.625, 2113), (1.625, 2329), (1.625, 1492), (1.625, 2118), (1.625, 2334), (1.625, 2233), (1.625, 2128), (1.625, 2326), (1.625, 1990), (1.625, 2291), (1.625, 2322), (1.625, 2091), (1.625, 2184), (1.625, 1892), (1.625, 1975), (1.625, 1899), (1.625, 2111), (1.625, 1710), (1.625, 1909), (1.625, 2114), (1.625, 1792), (1.625, 2177), (1.625, 2076), (1.625, 2327), (1.625, 1889), (1.625, 1703), (1.625, 2333), (1.625, 2006), (1.625, 2292), (1.625, 1976), (1.625, 1999), (1.625, 2109), (1.625, 1895), (1.625, 2104), (1.625, 1910), (1.625, 2077), (1.625, 2186), (1.625, 1599), (1.625, 1797), (1.625, 1801), (1.625, 1799), (1.625, 2311), (1.625, 2211), (1.625, 1978), (1.625, 1800), (1.625, 2000), (1.625, 1200), (1.625, 1991), (1.625, 2206), (1.625, 2191), (1.625, 2197), (1.625, 2226), (1.625, 2120), (1.625, 1809), (1.625, 1803), (1.625, 2251), (1.625, 2249), (1.625, 2305), (1.625, 2093), (1.625, 2299), (1.625, 2287), (1.625, 2121), (1.625, 2084), (1.625, 2328), (1.625, 2192), (1.625, 1994), (1.625, 2340), (1.625, 2092), (1.625, 2075), (1.625, 2231), (1.625, 886), (1.625, 1393), (1.625, 1806), (1.625, 2011), (1.625, 2303), (1.625, 2178), (1.625, 1600), (1.625, 2013), (1.625, 1394), (1.625, 1987), (1.625, 2296), (1.625, 2131), (1.625, 596), (1.625, 1902), (1.625, 1885), (1.625, 1891), (1.625, 2330), (1.625, 2119), (1.625, 2123), (1.625, 2180), (1.625, 2218), (1.625, 2339), (1.625, 2190), (1.625, 1985), (1.625, 2088), (1.625, 1893), (1.625, 2219), (1.625, 1705), (1.625, 2312), (1.625, 2247), (1.625, 2336), (1.625, 2301), (1.625, 2107), (1.625, 2101), (1.625, 2199), (1.625, 2187), (1.625, 2347), (1.625, 1977), (1.625, 2099), (1.625, 1709), (1.625, 2307), (1.625, 1908), (1.625, 1992), (1.625, 2317), (1.625, 2216), (1.625, 2110), (1.625, 1886), (1.625, 1088), (1.625, 2234), (1.625, 2321), (1.625, 2278), (1.625, 2183), (1.625, 1288), (1.625, 2112), (1.625, 2095), (1.625, 2308), (1.625, 2223), (1.625, 2232), (1.625, 2207), (1.625, 2214), (1.625, 1389), (1.625, 2338), (1.625, 2176), (1.625, 1604), (1.625, 2236), (1.625, 2252), (1.625, 2343), (1.625, 2289), (1.625, 2316), (1.625, 2189), (1.625, 2015), (1.625, 1187), (1.625, 2318), (1.625, 2298), (1.625, 2346), (1.625, 2324), (1.625, 2348), (1.625, 2220), (1.625, 2237), (1.625, 1995), (1.625, 1884), (1.625, 2228), (1.625, 2309), (1.625, 2245), (1.625, 2239), (1.625, 2319), (1.625, 2341), (1.625, 1993), (1.625, 2115), (1.625, 2235), (1.625, 1807), (1.625, 1699), (1.625, 2179), (1.625, 2215), (1.625, 2086), (1.625, 2003), (1.625, 2279), (1.625, 2194), (1.625, 2096), (1.625, 2250), (1.625, 2129), (1.625, 1695), (1.625, 1808), (1.625, 1697), (1.625, 2243), (1.625, 2001), (1.625, 1290), (1.625, 2188), (1.625, 2010), (1.625, 2320), (1.625, 2117), (1.625, 2097), (1.625, 2242), (1.625, 1907), (1.625, 2004), (1.625, 1983), (1.625, 1702), (1.625, 2193), (1.625, 1898), (1.5, 212), (1.5, 1298), (1.5, 2136), (1.5, 2140), (1.5, 1726), (1.5, 1735), (1.5, 2153), (1.5, 2043), (1.5, 2040), (1.5, 1199), (1.5, 2133), (1.5, 1723), (1.5, 498), (1.5, 1191), (1.5, 2048), (1.5, 993), (1.5, 1405), (1.5, 2052), (1.5, 1508), (1.5, 1403), (1.5, 2145), (1.5, 791), (1.5, 912), (1.5, 1626), (1.5, 1727), (1.5, 1513), (1.5, 1512), (1.5, 1618), (1.5, 1729), (1.5, 2053), (1.5, 1616), (1.5, 1951), (1.5, 1824), (1.5, 1615), (1.5, 1302), (1.5, 1828), (1.5, 2039), (1.5, 1930), (1.5, 2026), (1.5, 1606), (1.5, 1744), (1.5, 1960), (1.5, 296), (1.5, 1825), (1.5, 1546), (1.5, 2141), (1.5, 2139), (1.5, 2063), (1.5, 1094), (1.5, 1812), (1.5, 990), (1.5, 1829), (1.5, 691), (1.5, 1926), (1.5, 1927), (1.5, 1831), (1.5, 1835), (1.5, 2155), (1.5, 1820), (1.5, 2021), (1.5, 1915), (1.5, 2059), (1.5, 1940), (1.5, 2017), (1.5, 1089), (1.5, 1845), (1.5, 2056), (1.5, 2062), (1.5, 1509), (1.5, 1923), (1.5, 2060), (1.5, 1515), (1.5, 1719), (1.5, 1301), (1.5, 1408), (1.5, 1922), (1.5, 1736), (1.5, 1819), (1.5, 1722), (1.5, 1712), (1.5, 2041), (1.5, 1842), (1.5, 1952), (1.5, 2137), (1.5, 1925), (1.5, 2019), (1.5, 1941), (1.5, 1919), (1.5, 1959), (1.5, 2134), (1.5, 1841), (1.5, 1614), (1.5, 1955), (1.5, 1630), (1.5, 2033), (1.5, 1962), (1.5, 1743), (1.5, 1091), (1.5, 1501), (1.5, 1720), (1.5, 1963), (1.5, 1834), (1.5, 1964), (1.5, 1932), (1.5, 2030), (1.5, 887), (1.5, 1610), (0.875, 2266), (0.75, 2286), (0.75, 2284), (0.75, 2294)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1880
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1490
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2161
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2168
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2265
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 21]
[Computing fitness]
[(1.75, 2271), (1.75, 2070), (1.75, 2273), (1.75, 2362), (1.75, 1881), (1.75, 2069), (1.75, 2367), (1.75, 2361), (1.75, 1789), (1.75, 2366), (1.75, 2357), (1.75, 2160), (1.75, 1973), (1.75, 2350), (1.75, 2369), (1.75, 2375), (1.75, 1880), (1.75, 2368), (1.75, 2355), (1.75, 2166), (1.75, 2365), (1.75, 1388), (1.75, 2364), (1.75, 2066), (1.75, 2268), (1.75, 1431), (1.75, 2258), (1.75, 1490), (1.75, 2161), (1.75, 2261), (1.75, 2359), (1.75, 2263), (1.75, 2256), (1.75, 2356), (1.75, 2353), (1.75, 2358), (1.75, 2274), (1.75, 2262), (1.75, 1596), (1.75, 2363), (1.75, 1970), (1.75, 2163), (1.75, 1788), (1.75, 2265), (1.75, 2352), (1.75, 2370), (1.75, 2270), (1.75, 2167), (1.75, 1972), (1.75, 2275), (1.75, 2072), (1.75, 2159), (1.75, 2168), (1.75, 1879), (1.75, 1331), (1.75, 2162), (1.75, 2269), (1.75, 2276), (1.75, 1693), (1.75, 2068), (1.75, 2165), (1.75, 1969), (1.75, 2064), (1.75, 2067), (1.75, 2259), (1.625, 2228), (1.625, 2329), (1.625, 2190), (1.625, 2436), (1.625, 1492), (1.625, 2383), (1.625, 2114), (1.625, 2119), (1.625, 2239), (1.625, 2099), (1.625, 2177), (1.625, 2091), (1.625, 1907), (1.625, 2323), (1.625, 2173), (1.625, 2233), (1.625, 2277), (1.625, 2282), (1.625, 2312), (1.625, 1599), (1.625, 2214), (1.625, 2334), (1.625, 1498), (1.625, 1601), (1.625, 2081), (1.625, 2344), (1.625, 1389), (1.625, 2000), (1.625, 2385), (1.625, 2311), (1.625, 2107), (1.625, 2322), (1.625, 2388), (1.625, 2378), (1.625, 2394), (1.625, 1975), (1.625, 2326), (1.625, 2287), (1.625, 2408), (1.625, 1802), (1.625, 2084), (1.625, 2236), (1.625, 2395), (1.625, 1288), (1.625, 1801), (1.625, 2231), (1.625, 2223), (1.625, 2201), (1.625, 2003), (1.625, 2129), (1.625, 2108), (1.625, 2187), (1.625, 2343), (1.625, 2192), (1.625, 1605), (1.625, 1978), (1.625, 2401), (1.625, 2413), (1.625, 1895), (1.625, 2218), (1.625, 2399), (1.625, 2120), (1.625, 1800), (1.625, 2219), (1.625, 2308), (1.625, 2325), (1.625, 2232), (1.625, 2298), (1.625, 2324), (1.625, 2424), (1.625, 2327), (1.625, 2210), (1.625, 886), (1.625, 2191), (1.625, 2433), (1.625, 2246), (1.625, 2405), (1.625, 1901), (1.625, 2419), (1.625, 2245), (1.625, 2220), (1.625, 2386), (1.625, 2406), (1.625, 2216), (1.625, 2125), (1.625, 1699), (1.625, 2104), (1.625, 2189), (1.625, 2414), (1.625, 2234), (1.625, 2341), (1.625, 2415), (1.625, 1290), (1.625, 2097), (1.625, 1909), (1.625, 2112), (1.625, 2188), (1.625, 1886), (1.625, 2204), (1.625, 1796), (1.625, 2314), (1.625, 2404), (1.625, 2305), (1.625, 2317), (1.625, 2380), (1.625, 1991), (1.625, 2281), (1.625, 1892), (1.625, 2335), (1.625, 2441), (1.625, 2076), (1.625, 2301), (1.625, 1702), (1.625, 2111), (1.625, 2338), (1.625, 2103), (1.625, 1797), (1.625, 2402), (1.625, 2332), (1.625, 2183), (1.625, 1979), (1.625, 2015), (1.625, 2178), (1.625, 1999), (1.625, 2196), (1.625, 2407), (1.625, 2102), (1.625, 2431), (1.625, 2382), (1.625, 2197), (1.625, 1884), (1.625, 2186), (1.625, 2428), (1.625, 1709), (1.625, 2004), (1.625, 2309), (1.625, 2320), (1.625, 2194), (1.625, 2199), (1.625, 2101), (1.625, 2296), (1.625, 2207), (1.625, 2288), (1.625, 2442), (1.625, 2411), (1.625, 2444), (1.625, 2092), (1.625, 2011), (1.625, 2215), (1.625, 1703), (1.625, 2118), (1.625, 2095), (1.625, 2087), (1.625, 2391), (1.625, 2299), (1.625, 1792), (1.625, 2131), (1.625, 2342), (1.625, 1807), (1.625, 2248), (1.625, 2279), (1.625, 1980), (1.625, 1898), (1.625, 2304), (1.625, 2432), (1.625, 2226), (1.625, 1894), (1.625, 2211), (1.625, 2250), (1.625, 1393), (1.625, 2297), (1.625, 1997), (1.625, 2289), (1.625, 2300), (1.625, 2115), (1.625, 988), (1.625, 2252), (1.625, 1600), (1.625, 1697), (1.625, 1705), (1.625, 1806), (1.625, 1983), (1.625, 1799), (1.625, 2093), (1.625, 1889), (1.625, 2409), (1.625, 1899), (1.625, 2340), (1.625, 2440), (1.625, 2422), (1.625, 2347), (1.625, 2321), (1.625, 2316), (1.625, 2106), (1.625, 1992), (1.625, 2333), (1.625, 1885), (1.625, 2437), (1.625, 2291), (1.625, 2235), (1.625, 2109), (1.625, 2403), (1.625, 1493), (1.625, 2339), (1.625, 2247), (1.625, 2006), (1.625, 1906), (1.625, 1187), (1.625, 2251), (1.625, 2013), (1.625, 1990), (1.625, 2237), (1.625, 1695), (1.625, 1993), (1.625, 2425), (1.625, 2330), (1.625, 2184), (1.625, 2420), (1.625, 1994), (1.625, 2278), (1.625, 2088), (1.625, 2195), (1.625, 1998), (1.625, 2075), (1.625, 2077), (1.625, 2240), (1.625, 2346), (1.625, 2008), (1.625, 2423), (1.625, 2348), (1.625, 2427), (1.625, 1988), (1.625, 1602), (1.625, 2242), (1.625, 596), (1.625, 2426), (1.625, 1976), (1.625, 1808), (1.625, 1893), (1.625, 2292), (1.625, 1200), (1.625, 1710), (1.625, 1977), (1.625, 1188), (1.625, 2417), (1.625, 1803), (1.625, 2180), (1.625, 2318), (1.625, 1604), (1.625, 2193), (1.625, 2110), (1.625, 2397), (1.625, 1497), (1.625, 2307), (1.625, 2121), (1.625, 2113), (1.625, 2303), (1.625, 2001), (1.625, 1902), (1.625, 2128), (1.625, 1985), (1.625, 2117), (1.625, 2336), (1.625, 2176), (1.625, 2243), (1.625, 2086), (1.625, 1794), (1.625, 2447), (1.625, 2206), (1.625, 1910), (1.625, 2249), (1.625, 2389), (1.625, 2319), (1.625, 2390), (1.625, 2010), (1.625, 2130), (1.625, 1394), (1.625, 1809), (1.625, 1987), (1.625, 1908), (1.625, 2179), (1.625, 2337), (1.625, 2328), (1.625, 1995), (1.625, 2090), (1.625, 1088), (1.625, 2202), (1.625, 2123), (1.625, 1891), (1.625, 2096), (1.5, 1512), (1.5, 1513), (1.5, 1951), (1.5, 2048), (1.5, 212), (1.5, 1735), (1.5, 1405), (1.5, 2140), (1.5, 2377), (1.5, 1723), (1.5, 1191), (1.5, 1726), (1.5, 1616), (1.5, 2136), (1.5, 993), (1.5, 1828), (1.5, 2053), (1.5, 2052), (1.5, 1298), (1.5, 1615), (1.5, 1618), (1.5, 1403), (1.5, 2043), (1.5, 1302), (1.5, 498), (1.5, 2153), (1.5, 2145), (1.5, 1727), (1.5, 1508), (1.5, 1626), (1.5, 2133), (1.5, 912), (1.5, 2040), (1.5, 1824), (1.5, 1729), (1.5, 791), (1.5, 1199), (0.75, 2435), (0.625, 2373), (0.625, 2393), (0.625, 2439), (0.625, 2445), (0.625, 2430), (0.375, 2372), (0, 2360)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2070
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2273
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2362
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1881
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 22]
[Computing fitness]
[(1.75, 2471), (1.75, 2479), (1.75, 2452), (1.75, 2466), (1.75, 2480), (1.75, 1972), (1.75, 2070), (1.75, 2361), (1.75, 2159), (1.75, 2274), (1.75, 2483), (1.75, 1388), (1.75, 1596), (1.75, 2458), (1.75, 1331), (1.75, 2484), (1.75, 2068), (1.75, 2461), (1.75, 2355), (1.75, 2449), (1.75, 2362), (1.75, 2365), (1.75, 2482), (1.75, 2069), (1.75, 2352), (1.75, 2470), (1.75, 2450), (1.75, 1970), (1.75, 2359), (1.75, 2067), (1.75, 2456), (1.75, 2269), (1.75, 1973), (1.75, 2356), (1.75, 2256), (1.75, 2261), (1.75, 2465), (1.75, 2358), (1.75, 2072), (1.75, 2270), (1.75, 2163), (1.75, 2363), (1.75, 2263), (1.75, 2369), (1.75, 2160), (1.75, 1879), (1.75, 2357), (1.75, 1431), (1.75, 2464), (1.75, 1490), (1.75, 1789), (1.75, 2475), (1.75, 2485), (1.75, 2454), (1.75, 1693), (1.75, 2166), (1.75, 1788), (1.75, 2367), (1.75, 2453), (1.75, 2273), (1.75, 2162), (1.75, 2364), (1.75, 2451), (1.75, 2275), (1.75, 2370), (1.75, 2265), (1.75, 2161), (1.75, 2375), (1.75, 2168), (1.75, 2262), (1.75, 1881), (1.75, 2481), (1.75, 2258), (1.75, 2472), (1.75, 2474), (1.75, 2366), (1.75, 2459), (1.75, 2486), (1.75, 2368), (1.75, 2276), (1.75, 2448), (1.75, 2064), (1.75, 2271), (1.75, 2268), (1.75, 2469), (1.75, 2167), (1.75, 1880), (1.75, 2165), (1.75, 2353), (1.75, 2350), (1.75, 2467), (1.75, 2066), (1.75, 1969), (1.75, 2259), (1.625, 2113), (1.625, 1600), (1.625, 2311), (1.625, 2536), (1.625, 2523), (1.625, 2112), (1.625, 2279), (1.625, 2099), (1.625, 1808), (1.625, 2248), (1.625, 1975), (1.625, 1801), (1.625, 2507), (1.625, 2312), (1.625, 1901), (1.625, 1601), (1.625, 2296), (1.625, 2488), (1.625, 2214), (1.625, 1605), (1.625, 2103), (1.625, 2088), (1.625, 1200), (1.625, 1886), (1.625, 2425), (1.625, 2537), (1.625, 1988), (1.625, 1800), (1.625, 1892), (1.625, 2216), (1.625, 2325), (1.625, 1889), (1.625, 2517), (1.625, 2232), (1.625, 2403), (1.625, 2237), (1.625, 2441), (1.625, 1884), (1.625, 1893), (1.625, 1389), (1.625, 1697), (1.625, 2324), (1.625, 2309), (1.625, 2405), (1.625, 2417), (1.625, 2504), (1.625, 2432), (1.625, 2304), (1.625, 2444), (1.625, 2252), (1.625, 2219), (1.625, 2118), (1.625, 2093), (1.625, 2110), (1.625, 2527), (1.625, 2235), (1.625, 2340), (1.625, 2437), (1.625, 2292), (1.625, 2326), (1.625, 2234), (1.625, 1983), (1.625, 2404), (1.625, 2187), (1.625, 2395), (1.625, 1288), (1.625, 2119), (1.625, 1599), (1.625, 2211), (1.625, 2344), (1.625, 2401), (1.625, 2240), (1.625, 2192), (1.625, 1703), (1.625, 2382), (1.625, 2186), (1.625, 2502), (1.625, 2327), (1.625, 2431), (1.625, 1899), (1.625, 2543), (1.625, 2402), (1.625, 1695), (1.625, 2291), (1.625, 2530), (1.625, 2512), (1.625, 2008), (1.625, 2391), (1.625, 2006), (1.625, 596), (1.625, 1602), (1.625, 2380), (1.625, 1980), (1.625, 1992), (1.625, 1699), (1.625, 2299), (1.625, 1979), (1.625, 2081), (1.625, 1498), (1.625, 1806), (1.625, 2329), (1.625, 2529), (1.625, 2231), (1.625, 2414), (1.625, 2332), (1.625, 2282), (1.625, 2223), (1.625, 2489), (1.625, 1898), (1.625, 2341), (1.625, 2383), (1.625, 1188), (1.625, 2199), (1.625, 1705), (1.625, 2220), (1.625, 1497), (1.625, 2526), (1.625, 2320), (1.625, 2076), (1.625, 2247), (1.625, 2348), (1.625, 2535), (1.625, 2197), (1.625, 2077), (1.625, 2101), (1.625, 2239), (1.625, 1799), (1.625, 2521), (1.625, 2497), (1.625, 2541), (1.625, 2520), (1.625, 1802), (1.625, 2519), (1.625, 1976), (1.625, 2317), (1.625, 2189), (1.625, 2278), (1.625, 2508), (1.625, 2409), (1.625, 1909), (1.625, 2178), (1.625, 2397), (1.625, 2201), (1.625, 2510), (1.625, 2109), (1.625, 2490), (1.625, 1977), (1.625, 2492), (1.625, 2424), (1.625, 2509), (1.625, 2125), (1.625, 1290), (1.625, 2180), (1.625, 2128), (1.625, 2303), (1.625, 2342), (1.625, 2177), (1.625, 2228), (1.625, 1978), (1.625, 2107), (1.625, 2308), (1.625, 1894), (1.625, 1709), (1.625, 1998), (1.625, 1604), (1.625, 2001), (1.625, 2245), (1.625, 2000), (1.625, 2207), (1.625, 2251), (1.625, 2300), (1.625, 2505), (1.625, 2426), (1.625, 1796), (1.625, 2188), (1.625, 2406), (1.625, 2087), (1.625, 2499), (1.625, 2500), (1.625, 2106), (1.625, 2506), (1.625, 2314), (1.625, 2343), (1.625, 2518), (1.625, 2115), (1.625, 2423), (1.625, 2289), (1.625, 2003), (1.625, 2111), (1.625, 1993), (1.625, 2338), (1.625, 2015), (1.625, 2246), (1.625, 2487), (1.625, 1994), (1.625, 1907), (1.625, 2433), (1.625, 2496), (1.625, 1493), (1.625, 2233), (1.625, 2193), (1.625, 2522), (1.625, 2210), (1.625, 2388), (1.625, 2114), (1.625, 2316), (1.625, 2322), (1.625, 1797), (1.625, 2091), (1.625, 2097), (1.625, 2250), (1.625, 1997), (1.625, 2004), (1.625, 2288), (1.625, 2184), (1.625, 2413), (1.625, 1902), (1.625, 1906), (1.625, 1990), (1.625, 2301), (1.625, 2218), (1.625, 988), (1.625, 2121), (1.625, 2335), (1.625, 2190), (1.625, 2092), (1.625, 2420), (1.625, 2378), (1.625, 2013), (1.625, 2011), (1.625, 1991), (1.625, 2297), (1.625, 2307), (1.625, 2102), (1.625, 2347), (1.625, 2084), (1.625, 2346), (1.625, 2075), (1.625, 2422), (1.625, 2334), (1.625, 2415), (1.625, 2298), (1.625, 2323), (1.625, 2104), (1.625, 1393), (1.625, 2095), (1.625, 2427), (1.625, 2281), (1.625, 2513), (1.625, 1885), (1.625, 1895), (1.625, 886), (1.625, 1999), (1.625, 1492), (1.625, 1803), (1.625, 2191), (1.625, 2277), (1.625, 2407), (1.625, 2330), (1.625, 1710), (1.625, 2129), (1.625, 2173), (1.625, 2120), (1.625, 2108), (1.625, 2436), (1.625, 2333), (1.625, 2394), (1.625, 2339), (1.625, 2183), (1.625, 2287), (1.625, 2428), (1.625, 2321), (1.625, 1792), (1.625, 2419), (1.625, 2196), (1.625, 2236), (1.625, 2318), (1.625, 2408), (1.625, 2215), (1.625, 2511), (1.625, 1807), (1.625, 1702), (1.625, 2386), (1.625, 2411), (1.625, 2399), (1.625, 2194), (1.625, 2242), (1.625, 2442), (1.625, 2195), (1.625, 2440), (1.625, 2131), (1.625, 2385), (1.625, 1187), (1.625, 2204), (1.625, 2226), (1.625, 2305), (1.0, 2532), (1.0, 2494), (0.75, 2534), (0.75, 2545), (0.75, 2539), (0.625, 2515), (0.625, 2463), (0.625, 2525), (0.5, 2477), (0.5, 2462)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2471
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2479
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2452
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2466
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2480
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 23]
[Computing fitness]
[(1.75, 2566), (1.75, 2365), (1.75, 1881), (1.75, 2465), (1.75, 2160), (1.75, 2599), (1.75, 2572), (1.75, 2270), (1.75, 2598), (1.75, 2449), (1.75, 2546), (1.75, 1973), (1.75, 2581), (1.75, 2072), (1.75, 1880), (1.75, 2450), (1.75, 2367), (1.75, 2469), (1.75, 2262), (1.75, 2567), (1.75, 2269), (1.75, 2471), (1.75, 2590), (1.75, 2461), (1.75, 2064), (1.75, 2548), (1.75, 1972), (1.75, 2258), (1.75, 2597), (1.75, 2275), (1.75, 2369), (1.75, 2562), (1.75, 2486), (1.75, 2563), (1.75, 2552), (1.75, 2459), (1.75, 2553), (1.75, 2067), (1.75, 2565), (1.75, 1879), (1.75, 2456), (1.75, 2576), (1.75, 2361), (1.75, 2594), (1.75, 1490), (1.75, 2163), (1.75, 2579), (1.75, 2483), (1.75, 2359), (1.75, 2564), (1.75, 2370), (1.75, 2596), (1.75, 2458), (1.75, 2550), (1.75, 2454), (1.75, 2568), (1.75, 2358), (1.75, 2580), (1.75, 2273), (1.75, 2453), (1.75, 2166), (1.75, 2350), (1.75, 2593), (1.75, 2559), (1.75, 2352), (1.75, 2584), (1.75, 2561), (1.75, 2366), (1.75, 2448), (1.75, 2165), (1.75, 2357), (1.75, 2261), (1.75, 2557), (1.75, 2470), (1.75, 2480), (1.75, 2574), (1.75, 2558), (1.75, 2263), (1.75, 2547), (1.75, 2167), (1.75, 2274), (1.75, 2268), (1.75, 1596), (1.75, 2575), (1.75, 2549), (1.75, 2586), (1.75, 2551), (1.75, 2452), (1.75, 2159), (1.75, 1788), (1.75, 2375), (1.75, 2481), (1.75, 2256), (1.75, 2474), (1.75, 2070), (1.75, 2578), (1.75, 2601), (1.75, 2475), (1.75, 2472), (1.75, 2484), (1.75, 2168), (1.75, 2368), (1.75, 1970), (1.75, 2265), (1.75, 2451), (1.75, 2570), (1.75, 1969), (1.75, 2364), (1.75, 2479), (1.75, 2600), (1.75, 2363), (1.75, 2588), (1.75, 2560), (1.75, 2259), (1.75, 2467), (1.75, 1431), (1.75, 2068), (1.75, 1331), (1.75, 2482), (1.75, 2466), (1.75, 2554), (1.75, 2592), (1.75, 2355), (1.75, 2356), (1.75, 2162), (1.75, 2583), (1.75, 2271), (1.75, 2587), (1.75, 1789), (1.75, 2069), (1.75, 2362), (1.75, 1693), (1.75, 2485), (1.75, 2464), (1.75, 2353), (1.75, 2161), (1.75, 2276), (1.75, 1388), (1.75, 2066), (1.625, 1705), (1.625, 1994), (1.625, 2535), (1.625, 2426), (1.625, 2125), (1.625, 2128), (1.625, 2490), (1.625, 2348), (1.625, 1884), (1.625, 2623), (1.625, 2505), (1.625, 1709), (1.625, 2199), (1.625, 2388), (1.625, 2211), (1.625, 2113), (1.625, 2636), (1.625, 2489), (1.625, 2509), (1.625, 1389), (1.625, 2190), (1.625, 2526), (1.625, 2332), (1.625, 2121), (1.625, 2507), (1.625, 2325), (1.625, 2246), (1.625, 2093), (1.625, 2632), (1.625, 2218), (1.625, 1602), (1.625, 2510), (1.625, 2309), (1.625, 2317), (1.625, 2322), (1.625, 1697), (1.625, 2543), (1.625, 2444), (1.625, 2003), (1.625, 2118), (1.625, 2252), (1.625, 2119), (1.625, 2541), (1.625, 2382), (1.625, 1893), (1.625, 1978), (1.625, 2111), (1.625, 2420), (1.625, 2425), (1.625, 2492), (1.625, 2324), (1.625, 2633), (1.625, 2186), (1.625, 2289), (1.625, 2235), (1.625, 1899), (1.625, 2616), (1.625, 2231), (1.625, 2015), (1.625, 1801), (1.625, 2188), (1.625, 2432), (1.625, 2603), (1.625, 2401), (1.625, 1992), (1.625, 2424), (1.625, 2607), (1.625, 2506), (1.625, 2613), (1.625, 2291), (1.625, 2488), (1.625, 2634), (1.625, 1907), (1.625, 2423), (1.625, 1988), (1.625, 2088), (1.625, 2391), (1.625, 2635), (1.625, 1889), (1.625, 2380), (1.625, 2187), (1.625, 2303), (1.625, 2114), (1.625, 2077), (1.625, 2107), (1.625, 2320), (1.625, 1976), (1.625, 2279), (1.625, 2409), (1.625, 1991), (1.625, 1808), (1.625, 2311), (1.625, 2441), (1.625, 1188), (1.625, 2520), (1.625, 1796), (1.625, 2395), (1.625, 2314), (1.625, 2004), (1.625, 2008), (1.625, 2248), (1.625, 2301), (1.625, 2518), (1.625, 2223), (1.625, 2220), (1.625, 1886), (1.625, 2617), (1.625, 1906), (1.625, 2097), (1.625, 2296), (1.625, 1998), (1.625, 2403), (1.625, 2611), (1.625, 2278), (1.625, 1997), (1.625, 2112), (1.625, 2326), (1.625, 2529), (1.625, 2521), (1.625, 2517), (1.625, 2338), (1.625, 1902), (1.625, 2103), (1.625, 2487), (1.625, 2233), (1.625, 2519), (1.625, 1498), (1.625, 2001), (1.625, 2011), (1.625, 2437), (1.625, 1993), (1.625, 2619), (1.625, 1599), (1.625, 2522), (1.625, 1703), (1.625, 2329), (1.625, 2502), (1.625, 2433), (1.625, 2341), (1.625, 2304), (1.625, 2240), (1.625, 2627), (1.625, 1288), (1.625, 1601), (1.625, 2344), (1.625, 1497), (1.625, 1799), (1.625, 2300), (1.625, 2288), (1.625, 2239), (1.625, 2193), (1.625, 1600), (1.625, 2527), (1.625, 2192), (1.625, 2197), (1.625, 2247), (1.625, 2087), (1.625, 2638), (1.625, 1901), (1.625, 2604), (1.625, 2115), (1.625, 596), (1.625, 1695), (1.625, 2101), (1.625, 2299), (1.625, 2335), (1.625, 1977), (1.625, 2523), (1.625, 2232), (1.625, 1493), (1.625, 1699), (1.625, 2431), (1.625, 2178), (1.625, 2622), (1.625, 2537), (1.625, 2214), (1.625, 2504), (1.625, 2414), (1.625, 2282), (1.625, 1979), (1.625, 1892), (1.625, 2316), (1.625, 2500), (1.625, 2245), (1.625, 2629), (1.625, 2383), (1.625, 2180), (1.625, 1909), (1.625, 2250), (1.625, 2612), (1.625, 2413), (1.625, 2000), (1.625, 2228), (1.625, 1894), (1.625, 2177), (1.625, 2091), (1.625, 2343), (1.625, 2234), (1.625, 2499), (1.625, 2013), (1.625, 988), (1.625, 2099), (1.625, 1983), (1.625, 2081), (1.625, 2536), (1.625, 1806), (1.625, 2092), (1.625, 1898), (1.625, 2184), (1.625, 2109), (1.625, 2512), (1.625, 2620), (1.625, 2404), (1.625, 2497), (1.625, 2219), (1.625, 2006), (1.625, 2312), (1.625, 2201), (1.625, 2210), (1.625, 2530), (1.625, 2076), (1.625, 2406), (1.625, 1797), (1.625, 2237), (1.625, 2251), (1.625, 2308), (1.625, 2378), (1.625, 2110), (1.625, 2402), (1.625, 2340), (1.625, 1980), (1.625, 2609), (1.625, 2207), (1.625, 2621), (1.625, 2496), (1.625, 2508), (1.625, 1802), (1.625, 2216), (1.625, 2327), (1.625, 1800), (1.625, 2417), (1.625, 2189), (1.625, 2342), (1.625, 1990), (1.625, 2405), (1.625, 1290), (1.625, 2397), (1.625, 1975), (1.625, 1200), (1.625, 1604), (1.625, 1605), (1.625, 2106), (1.625, 2614), (1.625, 2628), (1.625, 2292), (1.0, 2606), (1.0, 2631), (0.75, 2625), (0.625, 2618), (0.5, 2556), (0.5, 2571)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2566
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2365
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1881
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2465
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2160
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 24]
[Computing fitness]
[(1.75, 2459), (1.75, 2276), (1.75, 2564), (1.75, 2072), (1.75, 2361), (1.75, 2691), (1.75, 2479), (1.75, 2454), (1.75, 2557), (1.75, 2369), (1.75, 2666), (1.75, 2659), (1.75, 2576), (1.75, 2362), (1.75, 2465), (1.75, 2553), (1.75, 2650), (1.75, 2697), (1.75, 1431), (1.75, 2720), (1.75, 2601), (1.75, 2639), (1.75, 2269), (1.75, 2724), (1.75, 2549), (1.75, 2161), (1.75, 2449), (1.75, 2066), (1.75, 1596), (1.75, 2548), (1.75, 2559), (1.75, 2575), (1.75, 2717), (1.75, 2265), (1.75, 2643), (1.75, 2551), (1.75, 2642), (1.75, 2259), (1.75, 2708), (1.75, 2263), (1.75, 2727), (1.75, 2357), (1.75, 2684), (1.75, 2070), (1.75, 2663), (1.75, 2064), (1.75, 2273), (1.75, 2475), (1.75, 2689), (1.75, 2596), (1.75, 2664), (1.75, 2453), (1.75, 1881), (1.75, 2588), (1.75, 1879), (1.75, 2547), (1.75, 2654), (1.75, 1331), (1.75, 2661), (1.75, 2581), (1.75, 2458), (1.75, 2671), (1.75, 1789), (1.75, 2568), (1.75, 2256), (1.75, 2565), (1.75, 2464), (1.75, 2703), (1.75, 2470), (1.75, 2353), (1.75, 2723), (1.75, 2701), (1.75, 2358), (1.75, 2162), (1.75, 2370), (1.75, 2645), (1.75, 2656), (1.75, 2467), (1.75, 2483), (1.75, 2466), (1.75, 2451), (1.75, 2699), (1.75, 2594), (1.75, 2687), (1.75, 2486), (1.75, 2652), (1.75, 2651), (1.75, 2558), (1.75, 2583), (1.75, 1972), (1.75, 2560), (1.75, 2352), (1.75, 2600), (1.75, 2722), (1.75, 2485), (1.75, 2706), (1.75, 2450), (1.75, 2355), (1.75, 1880), (1.75, 2709), (1.75, 2480), (1.75, 2702), (1.75, 2159), (1.75, 2696), (1.75, 2665), (1.75, 2366), (1.75, 2592), (1.75, 2574), (1.75, 2482), (1.75, 2359), (1.75, 2448), (1.75, 2160), (1.75, 2554), (1.75, 2275), (1.75, 1969), (1.75, 2069), (1.75, 2705), (1.75, 2646), (1.75, 2356), (1.75, 2567), (1.75, 2716), (1.75, 2258), (1.75, 2563), (1.75, 2471), (1.75, 2584), (1.75, 2669), (1.75, 2726), (1.75, 2688), (1.75, 2667), (1.75, 2695), (1.75, 2715), (1.75, 2721), (1.75, 2590), (1.75, 2572), (1.75, 2562), (1.75, 2550), (1.75, 2270), (1.75, 2271), (1.75, 2675), (1.75, 2163), (1.75, 2668), (1.75, 2598), (1.75, 1388), (1.75, 2707), (1.75, 2718), (1.75, 1490), (1.75, 2469), (1.75, 2274), (1.75, 2599), (1.75, 2647), (1.75, 1693), (1.75, 2350), (1.75, 2552), (1.75, 2683), (1.75, 2580), (1.75, 2168), (1.75, 2579), (1.75, 2660), (1.75, 2481), (1.75, 2375), (1.75, 2713), (1.75, 2561), (1.75, 2597), (1.75, 2165), (1.75, 2456), (1.75, 2672), (1.75, 2484), (1.75, 1973), (1.75, 2640), (1.75, 2368), (1.75, 2365), (1.75, 2593), (1.75, 2566), (1.75, 1788), (1.75, 2364), (1.75, 2268), (1.75, 2578), (1.75, 2474), (1.75, 2546), (1.75, 2712), (1.75, 2693), (1.75, 2690), (1.75, 2367), (1.75, 2472), (1.75, 1970), (1.75, 2452), (1.75, 2649), (1.75, 2166), (1.75, 2587), (1.75, 2262), (1.75, 2677), (1.75, 2653), (1.75, 2644), (1.75, 2167), (1.75, 2363), (1.75, 2461), (1.75, 2068), (1.75, 2570), (1.75, 2261), (1.75, 2067), (1.75, 2586), (1.625, 2607), (1.625, 2220), (1.625, 2252), (1.625, 596), (1.625, 1699), (1.625, 2087), (1.625, 2523), (1.625, 2733), (1.625, 2489), (1.625, 2111), (1.625, 2517), (1.625, 2218), (1.625, 2314), (1.625, 2604), (1.625, 2431), (1.625, 2103), (1.625, 2190), (1.625, 2231), (1.625, 2437), (1.625, 2309), (1.625, 2616), (1.625, 2623), (1.625, 2113), (1.625, 1886), (1.625, 2529), (1.625, 1188), (1.625, 2232), (1.625, 2629), (1.625, 2635), (1.625, 2502), (1.625, 2617), (1.625, 2414), (1.625, 2097), (1.625, 2383), (1.625, 2299), (1.625, 2611), (1.625, 2506), (1.625, 1602), (1.625, 1977), (1.625, 2519), (1.625, 2192), (1.625, 2541), (1.625, 2115), (1.625, 2510), (1.625, 2426), (1.625, 2211), (1.625, 2304), (1.625, 2636), (1.625, 2077), (1.625, 2423), (1.625, 1599), (1.625, 2492), (1.625, 2627), (1.625, 2420), (1.625, 2186), (1.625, 2732), (1.625, 2543), (1.625, 2324), (1.625, 2112), (1.625, 1799), (1.625, 2322), (1.625, 2015), (1.625, 1979), (1.625, 1892), (1.625, 2246), (1.625, 2535), (1.625, 1884), (1.625, 2093), (1.625, 2247), (1.625, 1600), (1.625, 1978), (1.625, 2518), (1.625, 1998), (1.625, 1997), (1.625, 2487), (1.625, 1907), (1.625, 2311), (1.625, 2114), (1.625, 1695), (1.625, 1893), (1.625, 1899), (1.625, 1902), (1.625, 2527), (1.625, 2320), (1.625, 2239), (1.625, 2003), (1.625, 2125), (1.625, 1889), (1.625, 1703), (1.625, 2233), (1.625, 2316), (1.625, 2178), (1.625, 2444), (1.625, 2537), (1.625, 2731), (1.625, 2488), (1.625, 2433), (1.625, 2199), (1.625, 2121), (1.625, 1988), (1.625, 2101), (1.625, 2391), (1.625, 2500), (1.625, 1493), (1.625, 2634), (1.625, 2128), (1.625, 1991), (1.625, 2296), (1.625, 2245), (1.625, 1992), (1.625, 2223), (1.625, 1906), (1.625, 2193), (1.625, 2348), (1.625, 2187), (1.625, 2603), (1.625, 2507), (1.625, 2338), (1.625, 2188), (1.625, 1993), (1.625, 1697), (1.625, 2326), (1.625, 2490), (1.625, 1709), (1.625, 1705), (1.625, 2279), (1.625, 2526), (1.625, 2521), (1.625, 2632), (1.625, 2729), (1.625, 2401), (1.625, 2118), (1.625, 1601), (1.625, 1288), (1.625, 2638), (1.625, 2004), (1.625, 2240), (1.625, 2425), (1.625, 2235), (1.625, 2403), (1.625, 2622), (1.625, 2001), (1.625, 2107), (1.625, 2520), (1.625, 2728), (1.625, 2409), (1.625, 2291), (1.625, 2329), (1.625, 1389), (1.625, 2522), (1.625, 1976), (1.625, 2380), (1.625, 1901), (1.625, 2011), (1.625, 2344), (1.625, 2509), (1.625, 2730), (1.625, 1808), (1.625, 2432), (1.625, 2341), (1.625, 2633), (1.625, 1497), (1.625, 1994), (1.625, 1796), (1.625, 1498), (1.625, 2332), (1.625, 2441), (1.625, 2424), (1.625, 2300), (1.625, 2088), (1.625, 2288), (1.625, 2119), (1.625, 2289), (1.625, 2395), (1.625, 2214), (1.625, 2317), (1.625, 2248), (1.625, 2382), (1.625, 2282), (1.625, 2613), (1.625, 2197), (1.625, 2303), (1.625, 2335), (1.625, 2301), (1.625, 2619), (1.625, 2278), (1.625, 2504), (1.625, 2505), (1.625, 1801), (1.625, 2325), (1.625, 2388), (1.625, 2008), (0.625, 2714), (0.5, 2711), (0.5, 2679), (0.5, 2658), (0.375, 2681), (0.375, 2674), (0.375, 2686)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2459
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2276
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2564
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2072
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 25]
[Computing fitness]
[(1.75, 2777), (1.75, 2451), (1.75, 2720), (1.75, 2581), (1.75, 2361), (1.75, 1596), (1.75, 2588), (1.75, 2701), (1.75, 2566), (1.75, 2640), (1.75, 2576), (1.75, 2557), (1.75, 2067), (1.75, 2808), (1.75, 2644), (1.75, 2722), (1.75, 2741), (1.75, 2663), (1.75, 2560), (1.75, 2791), (1.75, 2781), (1.75, 2713), (1.75, 2472), (1.75, 2697), (1.75, 2461), (1.75, 2256), (1.75, 2769), (1.75, 2715), (1.75, 2458), (1.75, 2817), (1.75, 2814), (1.75, 2572), (1.75, 2072), (1.75, 2784), (1.75, 2822), (1.75, 1788), (1.75, 2356), (1.75, 2718), (1.75, 2693), (1.75, 2485), (1.75, 2550), (1.75, 2834), (1.75, 2689), (1.75, 2734), (1.75, 2568), (1.75, 2765), (1.75, 1880), (1.75, 2549), (1.75, 2365), (1.75, 2168), (1.75, 2567), (1.75, 1972), (1.75, 2664), (1.75, 2070), (1.75, 2819), (1.75, 2552), (1.75, 2481), (1.75, 2586), (1.75, 2721), (1.75, 1388), (1.75, 2828), (1.75, 2574), (1.75, 2833), (1.75, 2668), (1.75, 2708), (1.75, 2649), (1.75, 2467), (1.75, 2724), (1.75, 2561), (1.75, 2587), (1.75, 2717), (1.75, 2727), (1.75, 2369), (1.75, 2350), (1.75, 2375), (1.75, 2553), (1.75, 2761), (1.75, 2601), (1.75, 2801), (1.75, 2687), (1.75, 2265), (1.75, 2166), (1.75, 2716), (1.75, 2066), (1.75, 2763), (1.75, 2584), (1.75, 2772), (1.75, 1970), (1.75, 2454), (1.75, 1431), (1.75, 2803), (1.75, 2752), (1.75, 2812), (1.75, 2580), (1.75, 2821), (1.75, 1490), (1.75, 2068), (1.75, 2590), (1.75, 2551), (1.75, 2600), (1.75, 2167), (1.75, 2646), (1.75, 2723), (1.75, 2358), (1.75, 2647), (1.75, 2695), (1.75, 2656), (1.75, 2579), (1.75, 2645), (1.75, 2776), (1.75, 2688), (1.75, 2739), (1.75, 2754), (1.75, 1973), (1.75, 2767), (1.75, 2667), (1.75, 2362), (1.75, 2799), (1.75, 2650), (1.75, 2826), (1.75, 2827), (1.75, 2747), (1.75, 2480), (1.75, 2706), (1.75, 2564), (1.75, 2768), (1.75, 2766), (1.75, 2262), (1.75, 2779), (1.75, 2598), (1.75, 2599), (1.75, 2735), (1.75, 2452), (1.75, 2273), (1.75, 2578), (1.75, 2559), (1.75, 2642), (1.75, 2661), (1.75, 2596), (1.75, 2794), (1.75, 2653), (1.75, 2268), (1.75, 1879), (1.75, 2370), (1.75, 2690), (1.75, 2563), (1.75, 2696), (1.75, 2276), (1.75, 2565), (1.75, 2736), (1.75, 2770), (1.75, 2456), (1.75, 2705), (1.75, 1881), (1.75, 2259), (1.75, 2643), (1.75, 2474), (1.75, 2683), (1.75, 2823), (1.75, 2756), (1.75, 2165), (1.75, 1331), (1.75, 2831), (1.75, 2546), (1.75, 2562), (1.75, 2651), (1.75, 2367), (1.75, 2758), (1.75, 2654), (1.75, 2746), (1.75, 2270), (1.75, 2737), (1.75, 2762), (1.75, 2809), (1.75, 2263), (1.75, 2699), (1.75, 2364), (1.75, 2464), (1.75, 2594), (1.75, 2482), (1.75, 2597), (1.75, 2749), (1.75, 2271), (1.75, 2357), (1.75, 2795), (1.75, 2470), (1.75, 2469), (1.75, 2064), (1.75, 2069), (1.75, 2448), (1.75, 2575), (1.75, 2677), (1.75, 2703), (1.75, 2258), (1.75, 2366), (1.75, 2675), (1.75, 2450), (1.75, 2665), (1.75, 2775), (1.75, 2771), (1.75, 2275), (1.75, 2738), (1.75, 2652), (1.75, 2743), (1.75, 2787), (1.75, 2726), (1.75, 2159), (1.75, 2484), (1.75, 2162), (1.75, 2782), (1.75, 2760), (1.75, 2593), (1.75, 2558), (1.75, 2592), (1.75, 2669), (1.75, 2712), (1.75, 2471), (1.75, 2691), (1.75, 2475), (1.75, 2825), (1.75, 2352), (1.75, 2789), (1.75, 2368), (1.75, 2740), (1.75, 2666), (1.75, 2483), (1.75, 2353), (1.75, 2684), (1.75, 1969), (1.75, 1693), (1.75, 2753), (1.75, 2570), (1.75, 2671), (1.75, 2639), (1.75, 2161), (1.75, 2355), (1.75, 2465), (1.75, 2449), (1.75, 2486), (1.75, 2554), (1.75, 2547), (1.75, 2363), (1.75, 2163), (1.75, 2274), (1.75, 2479), (1.75, 2548), (1.75, 2830), (1.75, 2659), (1.75, 2805), (1.75, 2359), (1.75, 2660), (1.75, 2261), (1.75, 2774), (1.75, 2806), (1.75, 2672), (1.75, 2160), (1.75, 2811), (1.75, 2583), (1.75, 1789), (1.75, 2702), (1.75, 2453), (1.75, 2269), (1.75, 2783), (1.75, 2709), (1.75, 2707), (1.75, 2824), (1.75, 2773), (1.75, 2459), (1.75, 2466), (1.75, 2751), (1.625, 1599), (1.625, 2518), (1.625, 1991), (1.625, 2437), (1.625, 2299), (1.625, 2617), (1.625, 2093), (1.625, 1988), (1.625, 2125), (1.625, 1600), (1.625, 1799), (1.625, 2232), (1.625, 2414), (1.625, 2326), (1.625, 1703), (1.625, 2733), (1.625, 2188), (1.625, 2087), (1.625, 1697), (1.625, 2015), (1.625, 2239), (1.625, 2112), (1.625, 1893), (1.625, 1188), (1.625, 2324), (1.625, 2114), (1.625, 2121), (1.625, 1993), (1.625, 1695), (1.625, 2603), (1.625, 2199), (1.625, 2543), (1.625, 2635), (1.625, 1886), (1.625, 2348), (1.625, 2178), (1.625, 2507), (1.625, 2223), (1.625, 2193), (1.625, 2211), (1.625, 1899), (1.625, 2320), (1.625, 2187), (1.625, 2192), (1.625, 2732), (1.625, 2111), (1.625, 2627), (1.625, 2489), (1.625, 1979), (1.625, 1889), (1.625, 2623), (1.625, 2314), (1.625, 2731), (1.625, 2220), (1.625, 2634), (1.625, 2245), (1.625, 2218), (1.625, 2444), (1.625, 2502), (1.625, 2391), (1.625, 2338), (1.625, 2490), (1.625, 2537), (1.625, 2510), (1.625, 1992), (1.625, 2186), (1.625, 2113), (1.625, 2077), (1.625, 2311), (1.625, 1699), (1.625, 2636), (1.625, 1977), (1.625, 2629), (1.625, 2246), (1.625, 2519), (1.625, 2607), (1.625, 2420), (1.625, 2541), (1.625, 2611), (1.625, 2003), (1.625, 2527), (1.625, 2252), (1.625, 2426), (1.625, 2616), (1.625, 2322), (1.625, 2115), (1.625, 2535), (1.625, 1907), (1.625, 2231), (1.625, 2487), (1.625, 2488), (1.625, 2431), (1.625, 2233), (1.625, 1997), (1.625, 596), (1.625, 2506), (1.625, 2517), (1.625, 1902), (1.625, 2529), (1.625, 2500), (1.625, 1884), (1.625, 2296), (1.625, 2423), (1.625, 2383), (1.625, 1978), (1.625, 2316), (1.625, 2309), (1.625, 2190), (1.625, 2492), (1.625, 1906), (1.625, 2523), (1.625, 2304), (1.625, 2604), (1.625, 2128), (1.625, 2097), (1.625, 2433), (1.625, 2103), (1.625, 1493), (1.625, 2101), (1.625, 1709), (1.625, 1998), (1.625, 2247), (1.625, 1892), (1.625, 1602), (0.625, 2750), (0.5, 2793), (0.5, 2786), (0.5, 2816), (0.5, 2797), (0.375, 2744)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2777
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2451
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2720
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2581
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2361
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 26]
[Computing fitness]
[(1.75, 2843), (1.75, 2827), (1.75, 2928), (1.75, 2911), (1.75, 2070), (1.75, 2359), (1.75, 2864), (1.75, 2580), (1.75, 1880), (1.75, 2787), (1.75, 2789), (1.75, 2776), (1.75, 2801), (1.75, 2262), (1.75, 2557), (1.75, 2561), (1.75, 2363), (1.75, 2927), (1.75, 2688), (1.75, 2479), (1.75, 2783), (1.75, 2649), (1.75, 2803), (1.75, 2767), (1.75, 2362), (1.75, 2715), (1.75, 2811), (1.75, 2839), (1.75, 2273), (1.75, 2564), (1.75, 2367), (1.75, 2831), (1.75, 2808), (1.75, 2162), (1.75, 2862), (1.75, 2270), (1.75, 2271), (1.75, 2269), (1.75, 2566), (1.75, 2579), (1.75, 2659), (1.75, 2472), (1.75, 2921), (1.75, 2588), (1.75, 2482), (1.75, 2161), (1.75, 2761), (1.75, 2833), (1.75, 2727), (1.75, 2763), (1.75, 2726), (1.75, 2746), (1.75, 2691), (1.75, 2639), (1.75, 2361), (1.75, 2847), (1.75, 2660), (1.75, 2701), (1.75, 2461), (1.75, 2475), (1.75, 2712), (1.75, 2760), (1.75, 2812), (1.75, 2747), (1.75, 2456), (1.75, 2741), (1.75, 2889), (1.75, 2364), (1.75, 2722), (1.75, 2464), (1.75, 2549), (1.75, 2758), (1.75, 2664), (1.75, 2724), (1.75, 2601), (1.75, 2824), (1.75, 2749), (1.75, 2736), (1.75, 2480), (1.75, 2486), (1.75, 2064), (1.75, 2159), (1.75, 2643), (1.75, 2596), (1.75, 2672), (1.75, 2481), (1.75, 2809), (1.75, 2765), (1.75, 2554), (1.75, 2822), (1.75, 1490), (1.75, 2600), (1.75, 2558), (1.75, 2693), (1.75, 2661), (1.75, 2675), (1.75, 2168), (1.75, 2841), (1.75, 2838), (1.75, 2684), (1.75, 2592), (1.75, 1970), (1.75, 2599), (1.75, 2880), (1.75, 2771), (1.75, 1331), (1.75, 2353), (1.75, 2773), (1.75, 2871), (1.75, 2772), (1.75, 2448), (1.75, 2358), (1.75, 2265), (1.75, 2574), (1.75, 2274), (1.75, 2452), (1.75, 2068), (1.75, 2370), (1.75, 2910), (1.75, 2826), (1.75, 2484), (1.75, 2355), (1.75, 2474), (1.75, 2922), (1.75, 2716), (1.75, 2590), (1.75, 2925), (1.75, 2849), (1.75, 2896), (1.75, 2834), (1.75, 2547), (1.75, 2840), (1.75, 2453), (1.75, 2766), (1.75, 2782), (1.75, 2654), (1.75, 1881), (1.75, 2263), (1.75, 2909), (1.75, 2352), (1.75, 2583), (1.75, 2709), (1.75, 2919), (1.75, 2069), (1.75, 2739), (1.75, 2908), (1.75, 2740), (1.75, 2268), (1.75, 2666), (1.75, 2350), (1.75, 2754), (1.75, 2887), (1.75, 2689), (1.75, 2568), (1.75, 2828), (1.75, 2869), (1.75, 2646), (1.75, 2899), (1.75, 2165), (1.75, 2275), (1.75, 2258), (1.75, 2548), (1.75, 2552), (1.75, 2163), (1.75, 2369), (1.75, 2449), (1.75, 2901), (1.75, 2858), (1.75, 2735), (1.75, 2066), (1.75, 2717), (1.75, 2852), (1.75, 1789), (1.75, 2737), (1.75, 2668), (1.75, 2669), (1.75, 2751), (1.75, 2756), (1.75, 2465), (1.75, 2873), (1.75, 2597), (1.75, 2647), (1.75, 2584), (1.75, 2859), (1.75, 2559), (1.75, 2567), (1.75, 2929), (1.75, 2467), (1.75, 2644), (1.75, 2830), (1.75, 2898), (1.75, 2572), (1.75, 2720), (1.75, 2723), (1.75, 2817), (1.75, 2708), (1.75, 2671), (1.75, 2814), (1.75, 2836), (1.75, 2823), (1.75, 2920), (1.75, 2665), (1.75, 2926), (1.75, 2897), (1.75, 2702), (1.75, 2586), (1.75, 2459), (1.75, 2581), (1.75, 2932), (1.75, 2652), (1.75, 2752), (1.75, 2553), (1.75, 2854), (1.75, 2697), (1.75, 2769), (1.75, 2777), (1.75, 2821), (1.75, 2907), (1.75, 2902), (1.75, 2696), (1.75, 2884), (1.75, 1788), (1.75, 2706), (1.75, 2924), (1.75, 2458), (1.75, 2593), (1.75, 2368), (1.75, 2868), (1.75, 2483), (1.75, 2651), (1.75, 2578), (1.75, 2791), (1.75, 2598), (1.75, 2166), (1.75, 2781), (1.75, 2734), (1.75, 2753), (1.75, 2857), (1.75, 2738), (1.75, 2667), (1.75, 2687), (1.75, 2703), (1.75, 2645), (1.75, 2923), (1.75, 2466), (1.75, 2563), (1.75, 2774), (1.75, 2705), (1.75, 2640), (1.75, 2656), (1.75, 2894), (1.75, 2915), (1.75, 2890), (1.75, 1388), (1.75, 2259), (1.75, 2867), (1.75, 2677), (1.75, 2357), (1.75, 2366), (1.75, 2878), (1.75, 2067), (1.75, 2861), (1.75, 2551), (1.75, 2775), (1.75, 1973), (1.75, 2770), (1.75, 2850), (1.75, 2565), (1.75, 2913), (1.75, 2699), (1.75, 2663), (1.75, 2799), (1.75, 1969), (1.75, 2576), (1.75, 2881), (1.75, 2903), (1.75, 2451), (1.75, 1972), (1.75, 2721), (1.75, 2855), (1.75, 2470), (1.75, 2594), (1.75, 2469), (1.75, 2683), (1.75, 2795), (1.75, 2642), (1.75, 2784), (1.75, 1431), (1.75, 2562), (1.75, 2550), (1.75, 2695), (1.75, 2072), (1.75, 2846), (1.75, 2570), (1.75, 1879), (1.75, 2546), (1.75, 2718), (1.75, 2794), (1.75, 2256), (1.75, 2886), (1.75, 2848), (1.75, 2690), (1.75, 2707), (1.75, 2587), (1.75, 2806), (1.75, 2276), (1.75, 2853), (1.75, 2653), (1.75, 2876), (1.75, 2762), (1.75, 2856), (1.75, 2845), (1.75, 2713), (1.75, 2375), (1.75, 2454), (1.75, 2650), (1.75, 2450), (1.75, 2365), (1.75, 2167), (1.75, 2560), (1.75, 1693), (1.75, 2825), (1.75, 2471), (1.75, 1596), (1.75, 2575), (1.75, 2805), (1.75, 2872), (1.75, 2261), (1.75, 2905), (1.75, 2356), (1.75, 2865), (1.75, 2160), (1.75, 2485), (1.75, 2779), (1.75, 2768), (1.75, 2743), (1.75, 2819), (1.625, 1703), (1.625, 2635), (1.625, 1188), (1.625, 2087), (1.625, 1993), (1.625, 2518), (1.625, 2093), (1.625, 2348), (1.625, 2220), (1.625, 2627), (1.625, 2507), (1.625, 2299), (1.625, 2623), (1.625, 1799), (1.625, 2192), (1.625, 1899), (1.625, 2114), (1.625, 2111), (1.625, 1600), (1.625, 2324), (1.625, 2320), (1.625, 2634), (1.625, 2489), (1.625, 2617), (1.625, 1886), (1.625, 2015), (1.625, 2733), (1.625, 2178), (1.625, 2232), (1.625, 2187), (1.625, 2188), (1.625, 1979), (1.625, 2326), (1.625, 2414), (1.625, 1988), (1.625, 2732), (1.625, 1889), (1.625, 2543), (1.625, 2239), (1.625, 2437), (1.625, 2603), (1.625, 2125), (1.625, 2121), (1.625, 2193), (1.625, 1599), (1.625, 2211), (1.625, 1893), (1.625, 1991), (1.625, 1697), (1.625, 2223), (1.625, 2199), (1.625, 2112), (1.625, 2731), (1.625, 2314), (1.625, 1695), (0.5, 2895), (0.5, 2893), (0.5, 2931), (0.5, 2875), (0.375, 2891), (0.375, 2917), (0.375, 2900), (0.375, 2883)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2843
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2827
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2928
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2911
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2070
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 27]
[Computing fitness]
[(1.75, 1973), (1.75, 2470), (1.75, 2718), (1.75, 2824), (1.75, 2947), (1.75, 2452), (1.75, 2271), (1.75, 2943), (1.75, 2784), (1.75, 2265), (1.75, 2367), (1.75, 2963), (1.75, 3014), (1.75, 2273), (1.75, 2552), (1.75, 2263), (1.75, 2163), (1.75, 2352), (1.75, 2668), (1.75, 2726), (1.75, 2754), (1.75, 2651), (1.75, 2727), (1.75, 2746), (1.75, 2683), (1.75, 2557), (1.75, 2268), (1.75, 2967), (1.75, 2593), (1.75, 2955), (1.75, 2990), (1.75, 2939), (1.75, 2697), (1.75, 2941), (1.75, 2359), (1.75, 2823), (1.75, 2996), (1.75, 1693), (1.75, 2353), (1.75, 2459), (1.75, 2715), (1.75, 2859), (1.75, 2599), (1.75, 2712), (1.75, 3015), (1.75, 2350), (1.75, 2901), (1.75, 2923), (1.75, 2867), (1.75, 3022), (1.75, 2919), (1.75, 2481), (1.75, 1970), (1.75, 2878), (1.75, 2909), (1.75, 2925), (1.75, 2911), (1.75, 2708), (1.75, 3013), (1.75, 2915), (1.75, 2689), (1.75, 2454), (1.75, 2830), (1.75, 2558), (1.75, 2666), (1.75, 2654), (1.75, 2479), (1.75, 2269), (1.75, 2737), (1.75, 2665), (1.75, 2270), (1.75, 2989), (1.75, 1596), (1.75, 2650), (1.75, 2566), (1.75, 2559), (1.75, 2907), (1.75, 2561), (1.75, 2656), (1.75, 2466), (1.75, 2735), (1.75, 2902), (1.75, 2775), (1.75, 2873), (1.75, 2801), (1.75, 2590), (1.75, 2921), (1.75, 2769), (1.75, 2843), (1.75, 1969), (1.75, 2849), (1.75, 2716), (1.75, 2161), (1.75, 2920), (1.75, 2461), (1.75, 2720), (1.75, 2592), (1.75, 2724), (1.75, 2640), (1.75, 2675), (1.75, 2887), (1.75, 2973), (1.75, 2736), (1.75, 2972), (1.75, 2549), (1.75, 2472), (1.75, 2068), (1.75, 2880), (1.75, 2868), (1.75, 2999), (1.75, 2752), (1.75, 2817), (1.75, 2926), (1.75, 2723), (1.75, 2664), (1.75, 2464), (1.75, 2956), (1.75, 2652), (1.75, 2564), (1.75, 2565), (1.75, 2740), (1.75, 2693), (1.75, 3024), (1.75, 2486), (1.75, 2787), (1.75, 2898), (1.75, 2645), (1.75, 2985), (1.75, 3006), (1.75, 2767), (1.75, 2475), (1.75, 3023), (1.75, 1879), (1.75, 2663), (1.75, 2809), (1.75, 2554), (1.75, 2945), (1.75, 2951), (1.75, 2064), (1.75, 2795), (1.75, 2600), (1.75, 2974), (1.75, 2575), (1.75, 3007), (1.75, 2687), (1.75, 2375), (1.75, 2857), (1.75, 2993), (1.75, 2578), (1.75, 2722), (1.75, 2894), (1.75, 2480), (1.75, 2684), (1.75, 2721), (1.75, 2717), (1.75, 2653), (1.75, 2841), (1.75, 2579), (1.75, 2576), (1.75, 2976), (1.75, 2848), (1.75, 2581), (1.75, 2836), (1.75, 2781), (1.75, 2563), (1.75, 1880), (1.75, 2936), (1.75, 2997), (1.75, 1972), (1.75, 2706), (1.75, 1431), (1.75, 2471), (1.75, 2570), (1.75, 2671), (1.75, 2949), (1.75, 2937), (1.75, 2889), (1.75, 2568), (1.75, 2553), (1.75, 2886), (1.75, 2474), (1.75, 2276), (1.75, 2453), (1.75, 2450), (1.75, 2259), (1.75, 2929), (1.75, 2776), (1.75, 2782), (1.75, 2465), (1.75, 2560), (1.75, 2262), (1.75, 2165), (1.75, 2940), (1.75, 2992), (1.75, 2822), (1.75, 2368), (1.75, 2808), (1.75, 2896), (1.75, 2669), (1.75, 3000), (1.75, 2546), (1.75, 2927), (1.75, 1881), (1.75, 2827), (1.75, 2588), (1.75, 2749), (1.75, 2791), (1.75, 3012), (1.75, 2899), (1.75, 2812), (1.75, 2469), (1.75, 2370), (1.75, 2067), (1.75, 2846), (1.75, 2644), (1.75, 2862), (1.75, 2647), (1.75, 2747), (1.75, 2709), (1.75, 2934), (1.75, 2861), (1.75, 3025), (1.75, 2695), (1.75, 2482), (1.75, 2977), (1.75, 2484), (1.75, 1388), (1.75, 2982), (1.75, 2826), (1.75, 2765), (1.75, 2869), (1.75, 2903), (1.75, 2803), (1.75, 2850), (1.75, 2814), (1.75, 2594), (1.75, 2952), (1.75, 2699), (1.75, 2944), (1.75, 2884), (1.75, 2162), (1.75, 3018), (1.75, 2705), (1.75, 3011), (1.75, 2739), (1.75, 2908), (1.75, 2672), (1.75, 2691), (1.75, 2451), (1.75, 1331), (1.75, 2364), (1.75, 2551), (1.75, 2587), (1.75, 2467), (1.75, 2766), (1.75, 2794), (1.75, 2550), (1.75, 2357), (1.75, 2358), (1.75, 2770), (1.75, 2701), (1.75, 2825), (1.75, 2978), (1.75, 2646), (1.75, 2913), (1.75, 2275), (1.75, 2855), (1.75, 2363), (1.75, 2806), (1.75, 2881), (1.75, 2773), (1.75, 3017), (1.75, 2168), (1.75, 2954), (1.75, 2713), (1.75, 2256), (1.75, 2458), (1.75, 2643), (1.75, 2876), (1.75, 2845), (1.75, 2852), (1.75, 2448), (1.75, 3001), (1.75, 2924), (1.75, 2774), (1.75, 2167), (1.75, 2833), (1.75, 2456), (1.75, 2758), (1.75, 3029), (1.75, 2562), (1.75, 2070), (1.75, 2962), (1.75, 2580), (1.75, 2703), (1.75, 2362), (1.75, 2858), (1.75, 2760), (1.75, 2932), (1.75, 2995), (1.75, 3027), (1.75, 2365), (1.75, 2828), (1.75, 2660), (1.75, 2910), (1.75, 2856), (1.75, 2969), (1.75, 2938), (1.75, 2771), (1.75, 1789), (1.75, 2596), (1.75, 2369), (1.75, 2998), (1.75, 2957), (1.75, 2586), (1.75, 2642), (1.75, 2799), (1.75, 2069), (1.75, 2983), (1.75, 2922), (1.75, 2756), (1.75, 2839), (1.75, 2584), (1.75, 2890), (1.75, 2688), (1.75, 2667), (1.75, 2958), (1.75, 2970), (1.75, 2574), (1.75, 2601), (1.75, 2988), (1.75, 2483), (1.75, 2567), (1.75, 2677), (1.75, 2864), (1.75, 2734), (1.75, 2449), (1.75, 3016), (1.75, 2159), (1.75, 2547), (1.75, 3021), (1.75, 2811), (1.75, 2639), (1.75, 2761), (1.75, 2072), (1.75, 2707), (1.75, 3002), (1.75, 2772), (1.75, 2753), (1.75, 2871), (1.75, 2649), (1.75, 2897), (1.75, 1788), (1.75, 2741), (1.75, 2854), (1.75, 2960), (1.75, 1490), (1.75, 2066), (1.75, 2661), (1.75, 2783), (1.75, 2928), (1.75, 2738), (1.75, 2166), (1.75, 2696), (1.75, 2690), (1.75, 2946), (1.75, 2840), (1.75, 2838), (1.75, 2953), (1.75, 2274), (1.75, 2583), (1.75, 2942), (1.75, 2751), (1.75, 2572), (1.75, 2762), (1.75, 2847), (1.75, 2355), (1.75, 2659), (1.75, 2366), (1.75, 2258), (1.75, 2361), (1.75, 2821), (1.75, 2763), (1.75, 3020), (1.75, 2548), (1.75, 2702), (1.75, 2598), (1.75, 2853), (1.75, 2777), (1.75, 2831), (1.75, 2789), (1.75, 2834), (1.75, 2597), (0.625, 2994), (0.5, 3004), (0.5, 3009), (0.5, 3031), (0.5, 2980), (0.375, 2987), (0.375, 2965)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1973
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2470
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2718
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2824
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2947
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 28]
[Computing fitness]
[(1.75, 2683), (1.75, 2717), (1.75, 3013), (1.75, 2712), (1.75, 3108), (1.75, 3011), (1.75, 2559), (1.75, 2973), (1.75, 3012), (1.75, 2578), (1.75, 2957), (1.75, 2554), (1.75, 3063), (1.75, 2923), (1.75, 2353), (1.75, 2268), (1.75, 2924), (1.75, 2461), (1.75, 3084), (1.75, 2784), (1.75, 3041), (1.75, 2927), (1.75, 3066), (1.75, 3125), (1.75, 3022), (1.75, 2817), (1.75, 2887), (1.75, 2672), (1.75, 2868), (1.75, 1879), (1.75, 2362), (1.75, 2827), (1.75, 2990), (1.75, 2809), (1.75, 2799), (1.75, 2976), (1.75, 2858), (1.75, 2579), (1.75, 2588), (1.75, 2974), (1.75, 3097), (1.75, 2983), (1.75, 2989), (1.75, 2861), (1.75, 2650), (1.75, 1881), (1.75, 2993), (1.75, 2765), (1.75, 2701), (1.75, 2552), (1.75, 2774), (1.75, 2165), (1.75, 2592), (1.75, 2064), (1.75, 2557), (1.75, 2369), (1.75, 2754), (1.75, 2594), (1.75, 2940), (1.75, 2878), (1.75, 3101), (1.75, 2767), (1.75, 2259), (1.75, 3058), (1.75, 2795), (1.75, 3047), (1.75, 2256), (1.75, 3071), (1.75, 2749), (1.75, 3093), (1.75, 2992), (1.75, 2693), (1.75, 2576), (1.75, 2271), (1.75, 3099), (1.75, 2724), (1.75, 3038), (1.75, 2848), (1.75, 3042), (1.75, 3054), (1.75, 2706), (1.75, 2803), (1.75, 2862), (1.75, 2852), (1.75, 3100), (1.75, 3113), (1.75, 2791), (1.75, 2458), (1.75, 2794), (1.75, 2752), (1.75, 2359), (1.75, 2549), (1.75, 2884), (1.75, 2943), (1.75, 2822), (1.75, 2467), (1.75, 2474), (1.75, 2999), (1.75, 2593), (1.75, 3086), (1.75, 3056), (1.75, 2587), (1.75, 2869), (1.75, 3080), (1.75, 3034), (1.75, 3095), (1.75, 2720), (1.75, 2713), (1.75, 2653), (1.75, 2947), (1.75, 2806), (1.75, 3007), (1.75, 2997), (1.75, 2687), (1.75, 2475), (1.75, 2367), (1.75, 2849), (1.75, 2760), (1.75, 2465), (1.75, 2727), (1.75, 3055), (1.75, 2553), (1.75, 2825), (1.75, 2843), (1.75, 2484), (1.75, 3109), (1.75, 2375), (1.75, 3083), (1.75, 2890), (1.75, 1970), (1.75, 2350), (1.75, 2926), (1.75, 2697), (1.75, 2464), (1.75, 2647), (1.75, 2922), (1.75, 2448), (1.75, 2867), (1.75, 3023), (1.75, 2718), (1.75, 2723), (1.75, 2450), (1.75, 3092), (1.75, 2921), (1.75, 2901), (1.75, 2951), (1.75, 2726), (1.75, 2876), (1.75, 2596), (1.75, 3106), (1.75, 3029), (1.75, 2913), (1.75, 2560), (1.75, 2855), (1.75, 2262), (1.75, 2929), (1.75, 2599), (1.75, 3104), (1.75, 2365), (1.75, 3015), (1.75, 2812), (1.75, 3123), (1.75, 3103), (1.75, 2575), (1.75, 2740), (1.75, 2775), (1.75, 2684), (1.75, 2469), (1.75, 2985), (1.75, 1789), (1.75, 2070), (1.75, 2564), (1.75, 2963), (1.75, 2664), (1.75, 2969), (1.75, 2688), (1.75, 2663), (1.75, 2880), (1.75, 3079), (1.75, 2954), (1.75, 2163), (1.75, 2996), (1.75, 3119), (1.75, 2911), (1.75, 3059), (1.75, 3096), (1.75, 2920), (1.75, 2581), (1.75, 2938), (1.75, 2859), (1.75, 3077), (1.75, 2069), (1.75, 2909), (1.75, 3039), (1.75, 3033), (1.75, 3065), (1.75, 1972), (1.75, 2586), (1.75, 2451), (1.75, 2654), (1.75, 2841), (1.75, 2873), (1.75, 1693), (1.75, 1973), (1.75, 3040), (1.75, 2161), (1.75, 2894), (1.75, 3017), (1.75, 2363), (1.75, 2665), (1.75, 3045), (1.75, 2669), (1.75, 3105), (1.75, 2736), (1.75, 2466), (1.75, 2452), (1.75, 3122), (1.75, 2773), (1.75, 2563), (1.75, 2787), (1.75, 2162), (1.75, 2962), (1.75, 2982), (1.75, 2671), (1.75, 2766), (1.75, 2470), (1.75, 2956), (1.75, 2562), (1.75, 3001), (1.75, 2566), (1.75, 3006), (1.75, 2459), (1.75, 2565), (1.75, 3043), (1.75, 2265), (1.75, 2881), (1.75, 2561), (1.75, 2584), (1.75, 2067), (1.75, 2167), (1.75, 2952), (1.75, 2739), (1.75, 2967), (1.75, 3025), (1.75, 2709), (1.75, 2481), (1.75, 2856), (1.75, 3053), (1.75, 2747), (1.75, 2830), (1.75, 2889), (1.75, 2068), (1.75, 2368), (1.75, 2998), (1.75, 2899), (1.75, 3062), (1.75, 2845), (1.75, 3018), (1.75, 2826), (1.75, 2642), (1.75, 1431), (1.75, 2746), (1.75, 3088), (1.75, 2656), (1.75, 2600), (1.75, 2771), (1.75, 2836), (1.75, 2546), (1.75, 2902), (1.75, 2269), (1.75, 2699), (1.75, 3048), (1.75, 2486), (1.75, 2273), (1.75, 2903), (1.75, 2666), (1.75, 3070), (1.75, 2590), (1.75, 2737), (1.75, 2910), (1.75, 2722), (1.75, 2705), (1.75, 2689), (1.75, 2776), (1.75, 3051), (1.75, 2770), (1.75, 2645), (1.75, 2936), (1.75, 2972), (1.75, 2695), (1.75, 2839), (1.75, 2370), (1.75, 2808), (1.75, 2270), (1.75, 3115), (1.75, 2941), (1.75, 3117), (1.75, 2558), (1.75, 2944), (1.75, 2769), (1.75, 2643), (1.75, 3060), (1.75, 2823), (1.75, 3081), (1.75, 3090), (1.75, 2949), (1.75, 3074), (1.75, 2640), (1.75, 2735), (1.75, 2480), (1.75, 1596), (1.75, 3046), (1.75, 2932), (1.75, 2898), (1.75, 3118), (1.75, 2691), (1.75, 2570), (1.75, 2479), (1.75, 3124), (1.75, 2934), (1.75, 2263), (1.75, 2364), (1.75, 2908), (1.75, 2644), (1.75, 2716), (1.75, 3120), (1.75, 3085), (1.75, 2886), (1.75, 2454), (1.75, 1880), (1.75, 2358), (1.75, 2915), (1.75, 2955), (1.75, 2715), (1.75, 2846), (1.75, 1331), (1.75, 2276), (1.75, 3082), (1.75, 2850), (1.75, 2675), (1.75, 2857), (1.75, 3067), (1.75, 2660), (1.75, 2977), (1.75, 3032), (1.75, 2814), (1.75, 3014), (1.75, 2456), (1.75, 2580), (1.75, 2652), (1.75, 3087), (1.75, 1969), (1.75, 3037), (1.75, 3089), (1.75, 2978), (1.75, 3076), (1.75, 3057), (1.75, 3000), (1.75, 2168), (1.75, 2482), (1.75, 2550), (1.75, 2925), (1.75, 2896), (1.75, 3072), (1.75, 2703), (1.75, 3027), (1.75, 2357), (1.75, 2937), (1.75, 1388), (1.75, 2801), (1.75, 2781), (1.75, 3024), (1.75, 2472), (1.75, 2828), (1.75, 3111), (1.75, 2471), (1.75, 2352), (1.75, 2646), (1.75, 2995), (1.75, 3035), (1.75, 2833), (1.75, 2782), (1.75, 2708), (1.75, 3094), (1.75, 2945), (1.75, 2919), (1.75, 2758), (1.75, 2568), (1.75, 2275), (1.75, 2668), (1.75, 2453), (1.75, 2551), (1.75, 2824), (1.75, 2651), (1.75, 2721), (1.75, 2756), (1.75, 2939), (1.75, 2907), (0.375, 3050), (0.375, 3069)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2683
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2717
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3013
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2712
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3108
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 29]
[Computing fitness]
[(1.75, 2889), (1.75, 3060), (1.75, 3051), (1.75, 3058), (1.75, 2594), (1.75, 3155), (1.75, 2718), (1.75, 2803), (1.75, 2479), (1.75, 2666), (1.75, 2767), (1.75, 3189), (1.75, 2672), (1.75, 3122), (1.75, 3059), (1.75, 3138), (1.75, 2474), (1.75, 2799), (1.75, 2827), (1.75, 2271), (1.75, 2359), (1.75, 2688), (1.75, 3187), (1.75, 2740), (1.75, 2736), (1.75, 3200), (1.75, 3204), (1.75, 3092), (1.75, 2362), (1.75, 2265), (1.75, 3103), (1.75, 2878), (1.75, 2985), (1.75, 2273), (1.75, 2724), (1.75, 3149), (1.75, 2588), (1.75, 2716), (1.75, 3118), (1.75, 2167), (1.75, 2826), (1.75, 2927), (1.75, 3139), (1.75, 3006), (1.75, 2699), (1.75, 2839), (1.75, 2739), (1.75, 2375), (1.75, 2817), (1.75, 3190), (1.75, 2643), (1.75, 3077), (1.75, 2365), (1.75, 2809), (1.75, 2566), (1.75, 2464), (1.75, 3184), (1.75, 1879), (1.75, 2771), (1.75, 2996), (1.75, 3126), (1.75, 3144), (1.75, 2367), (1.75, 2570), (1.75, 2787), (1.75, 2554), (1.75, 2949), (1.75, 2552), (1.75, 2353), (1.75, 3080), (1.75, 2794), (1.75, 3194), (1.75, 2774), (1.75, 3158), (1.75, 3113), (1.75, 2559), (1.75, 2576), (1.75, 2722), (1.75, 3038), (1.75, 2902), (1.75, 2898), (1.75, 3195), (1.75, 2944), (1.75, 2557), (1.75, 3070), (1.75, 3015), (1.75, 3159), (1.75, 2584), (1.75, 2956), (1.75, 3099), (1.75, 2766), (1.75, 2705), (1.75, 2350), (1.75, 3096), (1.75, 3063), (1.75, 2459), (1.75, 3093), (1.75, 3081), (1.75, 3223), (1.75, 3157), (1.75, 2467), (1.75, 3185), (1.75, 3188), (1.75, 2684), (1.75, 2691), (1.75, 2553), (1.75, 3055), (1.75, 2806), (1.75, 2726), (1.75, 3042), (1.75, 3086), (1.75, 2963), (1.75, 2701), (1.75, 2713), (1.75, 2592), (1.75, 2836), (1.75, 2920), (1.75, 3119), (1.75, 2671), (1.75, 3123), (1.75, 2993), (1.75, 2843), (1.75, 2687), (1.75, 3127), (1.75, 2982), (1.75, 3169), (1.75, 3040), (1.75, 3208), (1.75, 2663), (1.75, 2561), (1.75, 3135), (1.75, 2867), (1.75, 3206), (1.75, 3090), (1.75, 2901), (1.75, 2795), (1.75, 3152), (1.75, 2899), (1.75, 3150), (1.75, 3117), (1.75, 3172), (1.75, 2962), (1.75, 2973), (1.75, 3029), (1.75, 2862), (1.75, 2723), (1.75, 3023), (1.75, 2368), (1.75, 3177), (1.75, 2845), (1.75, 2068), (1.75, 2747), (1.75, 3025), (1.75, 3001), (1.75, 2752), (1.75, 2546), (1.75, 2737), (1.75, 3201), (1.75, 3197), (1.75, 2709), (1.75, 2924), (1.75, 2908), (1.75, 2452), (1.75, 2911), (1.75, 2754), (1.75, 2947), (1.75, 3218), (1.75, 2689), (1.75, 2998), (1.75, 3125), (1.75, 2717), (1.75, 2727), (1.75, 3106), (1.75, 2921), (1.75, 2644), (1.75, 2465), (1.75, 2575), (1.75, 3007), (1.75, 2262), (1.75, 2484), (1.75, 3203), (1.75, 2934), (1.75, 3163), (1.75, 3045), (1.75, 3017), (1.75, 3193), (1.75, 2941), (1.75, 2587), (1.75, 2873), (1.75, 3199), (1.75, 3220), (1.75, 2647), (1.75, 1970), (1.75, 2992), (1.75, 2560), (1.75, 3100), (1.75, 3168), (1.75, 2825), (1.75, 2856), (1.75, 2791), (1.75, 1972), (1.75, 2967), (1.75, 2976), (1.75, 3041), (1.75, 3108), (1.75, 2486), (1.75, 2461), (1.75, 3033), (1.75, 2909), (1.75, 3226), (1.75, 2665), (1.75, 2581), (1.75, 3013), (1.75, 2830), (1.75, 3146), (1.75, 2596), (1.75, 3056), (1.75, 2263), (1.75, 3178), (1.75, 2999), (1.75, 2940), (1.75, 2812), (1.75, 2861), (1.75, 2957), (1.75, 2654), (1.75, 2913), (1.75, 2770), (1.75, 1596), (1.75, 2669), (1.75, 2969), (1.75, 3104), (1.75, 2983), (1.75, 2664), (1.75, 3084), (1.75, 3054), (1.75, 3095), (1.75, 3018), (1.75, 2579), (1.75, 2712), (1.75, 2162), (1.75, 2558), (1.75, 2165), (1.75, 2564), (1.75, 2364), (1.75, 3186), (1.75, 2693), (1.75, 2706), (1.75, 2849), (1.75, 3167), (1.75, 3071), (1.75, 2776), (1.75, 3109), (1.75, 1431), (1.75, 3083), (1.75, 2954), (1.75, 2926), (1.75, 1973), (1.75, 2268), (1.75, 2974), (1.75, 2470), (1.75, 2458), (1.75, 2765), (1.75, 2841), (1.75, 1881), (1.75, 2469), (1.75, 2466), (1.75, 3179), (1.75, 2599), (1.75, 2848), (1.75, 3066), (1.75, 2259), (1.75, 2720), (1.75, 3088), (1.75, 2256), (1.75, 3046), (1.75, 2746), (1.75, 3130), (1.75, 3079), (1.75, 3128), (1.75, 2650), (1.75, 2951), (1.75, 2480), (1.75, 2565), (1.75, 2823), (1.75, 2773), (1.75, 2481), (1.75, 2586), (1.75, 2064), (1.75, 2869), (1.75, 2451), (1.75, 3173), (1.75, 2910), (1.75, 2890), (1.75, 2997), (1.75, 2735), (1.75, 3047), (1.75, 2369), (1.75, 2270), (1.75, 2972), (1.75, 2936), (1.75, 3074), (1.75, 3137), (1.75, 2855), (1.75, 2876), (1.75, 2067), (1.75, 2562), (1.75, 3205), (1.75, 2563), (1.75, 2640), (1.75, 2683), (1.75, 2269), (1.75, 3214), (1.75, 2952), (1.75, 2695), (1.75, 2990), (1.75, 3124), (1.75, 2645), (1.75, 2880), (1.75, 2578), (1.75, 3012), (1.75, 3039), (1.75, 3207), (1.75, 3143), (1.75, 2697), (1.75, 2923), (1.75, 3182), (1.75, 3034), (1.75, 3161), (1.75, 2859), (1.75, 3097), (1.75, 3065), (1.75, 2760), (1.75, 3216), (1.75, 3053), (1.75, 2775), (1.75, 3181), (1.75, 2938), (1.75, 2363), (1.75, 2881), (1.75, 2903), (1.75, 2163), (1.75, 2784), (1.75, 2475), (1.75, 2161), (1.75, 2656), (1.75, 2549), (1.75, 3225), (1.75, 2653), (1.75, 3133), (1.75, 2769), (1.75, 1789), (1.75, 2884), (1.75, 3105), (1.75, 2852), (1.75, 2822), (1.75, 3022), (1.75, 3062), (1.75, 3048), (1.75, 2932), (1.75, 2943), (1.75, 2069), (1.75, 3196), (1.75, 2887), (1.75, 2894), (1.75, 2922), (1.75, 2450), (1.75, 3215), (1.75, 2989), (1.75, 3210), (1.75, 3221), (1.75, 2808), (1.75, 2448), (1.75, 2590), (1.75, 3115), (1.75, 3154), (1.75, 3198), (1.75, 2642), (1.75, 3211), (1.75, 2868), (1.75, 2929), (1.75, 3043), (1.75, 2858), (1.75, 3011), (1.75, 3153), (1.75, 3166), (1.75, 1693), (1.75, 2600), (1.75, 2749), (1.75, 2370), (1.75, 2070), (1.75, 3101), (1.75, 2593), (0.5, 3175), (0.5, 3213), (0.5, 3148), (0.5, 3192), (0.5, 3132), (0.375, 3171), (0.375, 3165), (0.375, 3141)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2889
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3060
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3051
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3058
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 30]
[Computing fitness]
[(1.75, 3250), (1.75, 3247), (1.75, 3070), (1.75, 3199), (1.75, 2486), (1.75, 3237), (1.75, 2640), (1.75, 3113), (1.75, 2689), (1.75, 3321), (1.75, 2982), (1.75, 2766), (1.75, 2878), (1.75, 3084), (1.75, 3167), (1.75, 3125), (1.75, 2359), (1.75, 3205), (1.75, 2697), (1.75, 3315), (1.75, 3290), (1.75, 3190), (1.75, 3025), (1.75, 2268), (1.75, 3128), (1.75, 2908), (1.75, 3013), (1.75, 2901), (1.75, 2920), (1.75, 2911), (1.75, 2990), (1.75, 3312), (1.75, 2921), (1.75, 2587), (1.75, 2665), (1.75, 3276), (1.75, 3253), (1.75, 3296), (1.75, 2645), (1.75, 3058), (1.75, 2735), (1.75, 3103), (1.75, 2909), (1.75, 2479), (1.75, 2754), (1.75, 2350), (1.75, 2718), (1.75, 3095), (1.75, 3071), (1.75, 3243), (1.75, 3184), (1.75, 3230), (1.75, 2269), (1.75, 2459), (1.75, 3320), (1.75, 2873), (1.75, 3109), (1.75, 2570), (1.75, 3083), (1.75, 2791), (1.75, 3298), (1.75, 2467), (1.75, 3261), (1.75, 2564), (1.75, 2767), (1.75, 2596), (1.75, 1973), (1.75, 2770), (1.75, 2265), (1.75, 2465), (1.75, 3187), (1.75, 3040), (1.75, 3304), (1.75, 2926), (1.75, 2957), (1.75, 3303), (1.75, 1972), (1.75, 2368), (1.75, 2722), (1.75, 2724), (1.75, 3248), (1.75, 3060), (1.75, 2795), (1.75, 2557), (1.75, 3193), (1.75, 2902), (1.75, 3274), (1.75, 2579), (1.75, 3173), (1.75, 2594), (1.75, 2353), (1.75, 3302), (1.75, 3023), (1.75, 3269), (1.75, 3297), (1.75, 3100), (1.75, 3056), (1.75, 2565), (1.75, 2726), (1.75, 2855), (1.75, 2481), (1.75, 3185), (1.75, 3143), (1.75, 2913), (1.75, 3054), (1.75, 2812), (1.75, 3270), (1.75, 2581), (1.75, 3195), (1.75, 2972), (1.75, 2271), (1.75, 3152), (1.75, 2691), (1.75, 3155), (1.75, 3208), (1.75, 3096), (1.75, 3055), (1.75, 3218), (1.75, 2663), (1.75, 2588), (1.75, 2941), (1.75, 3178), (1.75, 2654), (1.75, 2362), (1.75, 2546), (1.75, 2262), (1.75, 2464), (1.75, 2273), (1.75, 3231), (1.75, 3234), (1.75, 2940), (1.75, 2944), (1.75, 3007), (1.75, 3123), (1.75, 3046), (1.75, 3310), (1.75, 2973), (1.75, 2592), (1.75, 1879), (1.75, 3204), (1.75, 2962), (1.75, 3267), (1.75, 3051), (1.75, 2647), (1.75, 2809), (1.75, 2843), (1.75, 2552), (1.75, 2826), (1.75, 2671), (1.75, 3220), (1.75, 3163), (1.75, 3122), (1.75, 3149), (1.75, 2794), (1.75, 1596), (1.75, 2461), (1.75, 2880), (1.75, 3135), (1.75, 2849), (1.75, 2817), (1.75, 2562), (1.75, 2165), (1.75, 2365), (1.75, 3322), (1.75, 2367), (1.75, 3285), (1.75, 3249), (1.75, 3186), (1.75, 2839), (1.75, 2717), (1.75, 3292), (1.75, 2823), (1.75, 3150), (1.75, 2256), (1.75, 3301), (1.75, 3236), (1.75, 3041), (1.75, 3001), (1.75, 2974), (1.75, 2954), (1.75, 3239), (1.75, 2683), (1.75, 3279), (1.75, 3189), (1.75, 3271), (1.75, 2701), (1.75, 2723), (1.75, 2746), (1.75, 3233), (1.75, 2992), (1.75, 2672), (1.75, 2803), (1.75, 3257), (1.75, 3092), (1.75, 2827), (1.75, 3118), (1.75, 2716), (1.75, 2806), (1.75, 2910), (1.75, 2566), (1.75, 3194), (1.75, 2560), (1.75, 3045), (1.75, 2699), (1.75, 3284), (1.75, 3287), (1.75, 1431), (1.75, 3197), (1.75, 2999), (1.75, 3255), (1.75, 2693), (1.75, 3047), (1.75, 3252), (1.75, 2923), (1.75, 2554), (1.75, 3244), (1.75, 2949), (1.75, 3313), (1.75, 2688), (1.75, 3300), (1.75, 2644), (1.75, 3093), (1.75, 2712), (1.75, 2553), (1.75, 2825), (1.75, 2584), (1.75, 2845), (1.75, 3317), (1.75, 2458), (1.75, 3124), (1.75, 2963), (1.75, 3272), (1.75, 3059), (1.75, 3235), (1.75, 2650), (1.75, 3169), (1.75, 2263), (1.75, 2643), (1.75, 3066), (1.75, 2740), (1.75, 3254), (1.75, 3256), (1.75, 2068), (1.75, 3127), (1.75, 3006), (1.75, 3157), (1.75, 2706), (1.75, 3126), (1.75, 2720), (1.75, 3206), (1.75, 2924), (1.75, 2861), (1.75, 3289), (1.75, 3265), (1.75, 3159), (1.75, 3259), (1.75, 3275), (1.75, 2576), (1.75, 3273), (1.75, 2561), (1.75, 2695), (1.75, 2578), (1.75, 3291), (1.75, 3306), (1.75, 2752), (1.75, 3293), (1.75, 2474), (1.75, 3130), (1.75, 3146), (1.75, 2947), (1.75, 3081), (1.75, 3282), (1.75, 3139), (1.75, 3263), (1.75, 2976), (1.75, 2799), (1.75, 2899), (1.75, 3241), (1.75, 3280), (1.75, 2167), (1.75, 2956), (1.75, 2737), (1.75, 2776), (1.75, 2575), (1.75, 2841), (1.75, 2466), (1.75, 3018), (1.75, 3207), (1.75, 3188), (1.75, 3264), (1.75, 2951), (1.75, 3203), (1.75, 3201), (1.75, 3038), (1.75, 2787), (1.75, 2558), (1.75, 2713), (1.75, 3099), (1.75, 2889), (1.75, 3305), (1.75, 2836), (1.75, 3017), (1.75, 3106), (1.75, 2563), (1.75, 2364), (1.75, 2666), (1.75, 3063), (1.75, 2687), (1.75, 3033), (1.75, 2969), (1.75, 3086), (1.75, 2452), (1.75, 3200), (1.75, 2862), (1.75, 2890), (1.75, 2064), (1.75, 3012), (1.75, 2771), (1.75, 2774), (1.75, 2369), (1.75, 3144), (1.75, 2469), (1.75, 3090), (1.75, 3088), (1.75, 3079), (1.75, 3258), (1.75, 2848), (1.75, 2586), (1.75, 2559), (1.75, 2709), (1.75, 2162), (1.75, 3226), (1.75, 3042), (1.75, 1881), (1.75, 2867), (1.75, 2484), (1.75, 3077), (1.75, 2067), (1.75, 3179), (1.75, 2451), (1.75, 3228), (1.75, 2470), (1.75, 3080), (1.75, 2773), (1.75, 3295), (1.75, 3104), (1.75, 2375), (1.75, 2996), (1.75, 2270), (1.75, 2669), (1.75, 2985), (1.75, 2664), (1.75, 2993), (1.75, 3119), (1.75, 2747), (1.75, 2998), (1.75, 2997), (1.75, 2898), (1.75, 3227), (1.75, 2599), (1.75, 3168), (1.75, 3108), (1.75, 2927), (1.75, 2869), (1.75, 2876), (1.75, 3240), (1.75, 2856), (1.75, 2736), (1.75, 2739), (1.75, 2830), (1.75, 2259), (1.75, 2934), (1.75, 3137), (1.75, 3172), (1.75, 2936), (1.75, 3177), (1.75, 2952), (1.75, 3015), (1.75, 2983), (1.75, 2705), (1.75, 3299), (1.75, 3117), (1.75, 2727), (1.75, 3319), (1.75, 3277), (1.75, 3074), (1.75, 3223), (1.75, 3138), (1.75, 2765), (1.75, 2967), (1.75, 3029), (1.75, 2684), (1.75, 3039), (1.75, 3266), (1.75, 1970), (1.75, 2480), (1.75, 3214), (1.75, 3158), (0.5, 3246), (0.375, 3308)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3250
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3070
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3199
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2486
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 31]
[Computing fitness]
[(1.75, 3122), (1.75, 3099), (1.75, 3284), (1.75, 2791), (1.75, 3054), (1.75, 3265), (1.75, 1973), (1.75, 2364), (1.75, 3273), (1.75, 2650), (1.75, 3126), (1.75, 3365), (1.75, 2718), (1.75, 3357), (1.75, 3130), (1.75, 3372), (1.75, 3195), (1.75, 3113), (1.75, 3194), (1.75, 3118), (1.75, 3201), (1.75, 2766), (1.75, 2064), (1.75, 3230), (1.75, 3300), (1.75, 2566), (1.75, 2554), (1.75, 3310), (1.75, 2452), (1.75, 3144), (1.75, 3247), (1.75, 3060), (1.75, 2564), (1.75, 2561), (1.75, 3058), (1.75, 2712), (1.75, 3178), (1.75, 2558), (1.75, 3385), (1.75, 2464), (1.75, 3086), (1.75, 3205), (1.75, 3239), (1.75, 3096), (1.75, 3324), (1.75, 2841), (1.75, 3256), (1.75, 3419), (1.75, 3354), (1.75, 2553), (1.75, 2688), (1.75, 2666), (1.75, 3397), (1.75, 3023), (1.75, 2799), (1.75, 3001), (1.75, 3377), (1.75, 3254), (1.75, 3287), (1.75, 2999), (1.75, 3349), (1.75, 2920), (1.75, 3163), (1.75, 2843), (1.75, 2654), (1.75, 3128), (1.75, 3257), (1.75, 3235), (1.75, 3360), (1.75, 2724), (1.75, 3271), (1.75, 2717), (1.75, 3404), (1.75, 2263), (1.75, 2466), (1.75, 2365), (1.75, 3197), (1.75, 3327), (1.75, 2691), (1.75, 2770), (1.75, 3038), (1.75, 2479), (1.75, 3143), (1.75, 2563), (1.75, 3321), (1.75, 3306), (1.75, 3320), (1.75, 2949), (1.75, 2902), (1.75, 3375), (1.75, 3173), (1.75, 3289), (1.75, 2643), (1.75, 3012), (1.75, 2735), (1.75, 3363), (1.75, 2962), (1.75, 2911), (1.75, 3368), (1.75, 3199), (1.75, 2716), (1.75, 3248), (1.75, 3409), (1.75, 3338), (1.75, 3206), (1.75, 3346), (1.75, 2689), (1.75, 3264), (1.75, 2809), (1.75, 1596), (1.75, 2683), (1.75, 3272), (1.75, 3125), (1.75, 2665), (1.75, 2826), (1.75, 3071), (1.75, 2647), (1.75, 3351), (1.75, 3290), (1.75, 3207), (1.75, 3301), (1.75, 3079), (1.75, 3361), (1.75, 2587), (1.75, 3331), (1.75, 3241), (1.75, 2458), (1.75, 3312), (1.75, 2795), (1.75, 3208), (1.75, 2713), (1.75, 3123), (1.75, 2697), (1.75, 3159), (1.75, 3007), (1.75, 3414), (1.75, 1431), (1.75, 3051), (1.75, 2752), (1.75, 3402), (1.75, 2921), (1.75, 2944), (1.75, 2947), (1.75, 2956), (1.75, 3106), (1.75, 2720), (1.75, 1972), (1.75, 3328), (1.75, 2825), (1.75, 2368), (1.75, 3184), (1.75, 3234), (1.75, 2774), (1.75, 2839), (1.75, 3303), (1.75, 3302), (1.75, 3135), (1.75, 3305), (1.75, 3243), (1.75, 3416), (1.75, 3018), (1.75, 3063), (1.75, 3006), (1.75, 2672), (1.75, 2167), (1.75, 2271), (1.75, 2957), (1.75, 3090), (1.75, 3329), (1.75, 2827), (1.75, 3384), (1.75, 2812), (1.75, 2787), (1.75, 3325), (1.75, 2776), (1.75, 2469), (1.75, 2481), (1.75, 3407), (1.75, 2273), (1.75, 3013), (1.75, 3359), (1.75, 3190), (1.75, 3203), (1.75, 3261), (1.75, 2990), (1.75, 3244), (1.75, 3033), (1.75, 3400), (1.75, 3220), (1.75, 3270), (1.75, 3285), (1.75, 2746), (1.75, 2924), (1.75, 3169), (1.75, 2823), (1.75, 3045), (1.75, 2557), (1.75, 2461), (1.75, 2909), (1.75, 3410), (1.75, 2552), (1.75, 3293), (1.75, 2570), (1.75, 3100), (1.75, 2486), (1.75, 3188), (1.75, 3237), (1.75, 2974), (1.75, 3095), (1.75, 3127), (1.75, 2578), (1.75, 2256), (1.75, 2663), (1.75, 3280), (1.75, 3343), (1.75, 3155), (1.75, 3056), (1.75, 2644), (1.75, 3249), (1.75, 2645), (1.75, 3218), (1.75, 3296), (1.75, 2723), (1.75, 3282), (1.75, 2873), (1.75, 3092), (1.75, 2954), (1.75, 2794), (1.75, 2855), (1.75, 3297), (1.75, 3040), (1.75, 2269), (1.75, 3253), (1.75, 3093), (1.75, 3386), (1.75, 2923), (1.75, 3382), (1.75, 3269), (1.75, 2862), (1.75, 2740), (1.75, 2722), (1.75, 2560), (1.75, 3317), (1.75, 3066), (1.75, 3109), (1.75, 2973), (1.75, 3322), (1.75, 3157), (1.75, 3017), (1.75, 2726), (1.75, 3356), (1.75, 3292), (1.75, 3380), (1.75, 2878), (1.75, 2806), (1.75, 2581), (1.75, 3047), (1.75, 2941), (1.75, 3167), (1.75, 3263), (1.75, 2695), (1.75, 3250), (1.75, 2594), (1.75, 2699), (1.75, 3088), (1.75, 3379), (1.75, 2588), (1.75, 3046), (1.75, 2068), (1.75, 3335), (1.75, 3193), (1.75, 3084), (1.75, 3200), (1.75, 3233), (1.75, 3041), (1.75, 1879), (1.75, 3408), (1.75, 2701), (1.75, 3370), (1.75, 2546), (1.75, 3275), (1.75, 2880), (1.75, 2592), (1.75, 3401), (1.75, 3185), (1.75, 2579), (1.75, 3367), (1.75, 3381), (1.75, 2268), (1.75, 2890), (1.75, 3231), (1.75, 2908), (1.75, 2359), (1.75, 2972), (1.75, 3204), (1.75, 3139), (1.75, 3267), (1.75, 2737), (1.75, 2771), (1.75, 2849), (1.75, 2350), (1.75, 3103), (1.75, 2982), (1.75, 2889), (1.75, 3146), (1.75, 2459), (1.75, 3081), (1.75, 3150), (1.75, 2687), (1.75, 2565), (1.75, 2165), (1.75, 3083), (1.75, 3389), (1.75, 3333), (1.75, 3304), (1.75, 3334), (1.75, 2369), (1.75, 2353), (1.75, 3291), (1.75, 2367), (1.75, 3392), (1.75, 2640), (1.75, 3187), (1.75, 3406), (1.75, 2465), (1.75, 3337), (1.75, 3059), (1.75, 3313), (1.75, 2767), (1.75, 2940), (1.75, 2262), (1.75, 3298), (1.75, 2913), (1.75, 3366), (1.75, 2693), (1.75, 3236), (1.75, 3152), (1.75, 3279), (1.75, 3025), (1.75, 3323), (1.75, 2576), (1.75, 3186), (1.75, 3340), (1.75, 3070), (1.75, 3315), (1.75, 3189), (1.75, 2861), (1.75, 3388), (1.75, 2575), (1.75, 3362), (1.75, 3276), (1.75, 3358), (1.75, 2836), (1.75, 2976), (1.75, 3417), (1.75, 3403), (1.75, 3390), (1.75, 3252), (1.75, 3364), (1.75, 2474), (1.75, 3259), (1.75, 3255), (1.75, 3124), (1.75, 3274), (1.75, 2362), (1.75, 3418), (1.75, 3405), (1.75, 2584), (1.75, 3374), (1.75, 2671), (1.75, 2845), (1.75, 3376), (1.75, 2992), (1.75, 2803), (1.75, 2467), (1.75, 2951), (1.75, 2596), (1.75, 3149), (1.75, 2926), (1.75, 2969), (1.75, 3341), (1.75, 2963), (1.75, 2706), (1.75, 2899), (1.75, 2901), (1.75, 2562), (1.75, 3411), (1.75, 2817), (1.75, 2754), (1.75, 2265), (1.75, 3055), (1.75, 3332), (1.75, 2910), (1.75, 3396), (0.5, 3399), (0.5, 3413), (0.5, 3394), (0.5, 3345), (0.375, 3348), (0.375, 3353)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3122
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3099
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3284
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2791
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3054
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 32]
[Computing fitness]
[(1.75, 2167), (1.75, 3349), (1.75, 3425), (1.75, 2560), (1.75, 3271), (1.75, 3361), (1.75, 3194), (1.75, 2766), (1.75, 3081), (1.75, 3409), (1.75, 2826), (1.75, 3275), (1.75, 3128), (1.75, 3122), (1.75, 3167), (1.75, 2268), (1.75, 3296), (1.75, 2563), (1.75, 3368), (1.75, 3354), (1.75, 2654), (1.75, 3424), (1.75, 3406), (1.75, 3193), (1.75, 3088), (1.75, 2908), (1.75, 3282), (1.75, 3106), (1.75, 3429), (1.75, 3207), (1.75, 3320), (1.75, 3444), (1.75, 3051), (1.75, 2823), (1.75, 3478), (1.75, 3230), (1.75, 2458), (1.75, 3126), (1.75, 3234), (1.75, 2909), (1.75, 2957), (1.75, 2880), (1.75, 3428), (1.75, 3301), (1.75, 3093), (1.75, 2890), (1.75, 2724), (1.75, 3471), (1.75, 2911), (1.75, 2479), (1.75, 3293), (1.75, 3046), (1.75, 2640), (1.75, 3058), (1.75, 3334), (1.75, 2827), (1.75, 3515), (1.75, 3426), (1.75, 2726), (1.75, 3455), (1.75, 2588), (1.75, 3321), (1.75, 3272), (1.75, 3324), (1.75, 3507), (1.75, 2587), (1.75, 2712), (1.75, 3060), (1.75, 2557), (1.75, 2878), (1.75, 2570), (1.75, 3451), (1.75, 3150), (1.75, 2368), (1.75, 3280), (1.75, 2581), (1.75, 2962), (1.75, 3302), (1.75, 3518), (1.75, 3284), (1.75, 3386), (1.75, 2165), (1.75, 2806), (1.75, 3285), (1.75, 3505), (1.75, 3385), (1.75, 3270), (1.75, 3235), (1.75, 2920), (1.75, 3041), (1.75, 3291), (1.75, 3012), (1.75, 3290), (1.75, 2364), (1.75, 2452), (1.75, 2068), (1.75, 3367), (1.75, 3254), (1.75, 3461), (1.75, 2566), (1.75, 2774), (1.75, 3013), (1.75, 3287), (1.75, 3331), (1.75, 2944), (1.75, 2718), (1.75, 3249), (1.75, 2771), (1.75, 2947), (1.75, 3125), (1.75, 2974), (1.75, 3503), (1.75, 3248), (1.75, 3096), (1.75, 3446), (1.75, 3389), (1.75, 2862), (1.75, 3351), (1.75, 1973), (1.75, 3467), (1.75, 3421), (1.75, 2643), (1.75, 3510), (1.75, 2594), (1.75, 3184), (1.75, 3201), (1.75, 3343), (1.75, 2647), (1.75, 3416), (1.75, 3382), (1.75, 3257), (1.75, 2645), (1.75, 3377), (1.75, 3157), (1.75, 2701), (1.75, 3498), (1.75, 3305), (1.75, 2558), (1.75, 2902), (1.75, 3506), (1.75, 2464), (1.75, 3434), (1.75, 3401), (1.75, 3499), (1.75, 3322), (1.75, 3512), (1.75, 3384), (1.75, 3445), (1.75, 3310), (1.75, 3190), (1.75, 2650), (1.75, 3508), (1.75, 3247), (1.75, 3095), (1.75, 3442), (1.75, 2841), (1.75, 3359), (1.75, 3256), (1.75, 3477), (1.75, 3356), (1.75, 2982), (1.75, 3169), (1.75, 3463), (1.75, 2359), (1.75, 3159), (1.75, 3100), (1.75, 1596), (1.75, 2722), (1.75, 3381), (1.75, 2812), (1.75, 3146), (1.75, 2924), (1.75, 2256), (1.75, 2956), (1.75, 3325), (1.75, 3066), (1.75, 3335), (1.75, 3407), (1.75, 2787), (1.75, 2839), (1.75, 1879), (1.75, 3365), (1.75, 2592), (1.75, 3047), (1.75, 2695), (1.75, 1972), (1.75, 3083), (1.75, 3333), (1.75, 2269), (1.75, 3300), (1.75, 3071), (1.75, 3495), (1.75, 3269), (1.75, 3480), (1.75, 3178), (1.75, 2972), (1.75, 2795), (1.75, 3379), (1.75, 2564), (1.75, 3113), (1.75, 3099), (1.75, 3123), (1.75, 2644), (1.75, 2369), (1.75, 3195), (1.75, 3329), (1.75, 3007), (1.75, 3419), (1.75, 3402), (1.75, 3185), (1.75, 2273), (1.75, 3265), (1.75, 2941), (1.75, 3453), (1.75, 2459), (1.75, 3127), (1.75, 3414), (1.75, 3370), (1.75, 3408), (1.75, 3458), (1.75, 3103), (1.75, 3063), (1.75, 3440), (1.75, 3188), (1.75, 2889), (1.75, 2723), (1.75, 3023), (1.75, 2752), (1.75, 3139), (1.75, 3187), (1.75, 3017), (1.75, 3056), (1.75, 2973), (1.75, 3400), (1.75, 2689), (1.75, 3435), (1.75, 2481), (1.75, 3482), (1.75, 3244), (1.75, 2683), (1.75, 3130), (1.75, 2699), (1.75, 3423), (1.75, 3457), (1.75, 3464), (1.75, 3493), (1.75, 3253), (1.75, 3163), (1.75, 2697), (1.75, 3346), (1.75, 3135), (1.75, 3144), (1.75, 3220), (1.75, 3472), (1.75, 2465), (1.75, 2740), (1.75, 3392), (1.75, 2999), (1.75, 3338), (1.75, 3264), (1.75, 2561), (1.75, 2466), (1.75, 2554), (1.75, 2713), (1.75, 3118), (1.75, 2990), (1.75, 2855), (1.75, 2923), (1.75, 2843), (1.75, 3468), (1.75, 2921), (1.75, 3438), (1.75, 3328), (1.75, 3489), (1.75, 3312), (1.75, 3375), (1.75, 2553), (1.75, 3304), (1.75, 3250), (1.75, 2271), (1.75, 3465), (1.75, 3079), (1.75, 2367), (1.75, 3200), (1.75, 3410), (1.75, 3303), (1.75, 2546), (1.75, 2791), (1.75, 2663), (1.75, 3490), (1.75, 2552), (1.75, 3466), (1.75, 3443), (1.75, 3317), (1.75, 2486), (1.75, 2746), (1.75, 3502), (1.75, 3208), (1.75, 2691), (1.75, 3492), (1.75, 3218), (1.75, 3327), (1.75, 3509), (1.75, 3431), (1.75, 3203), (1.75, 3500), (1.75, 3497), (1.75, 2873), (1.75, 3474), (1.75, 2799), (1.75, 2716), (1.75, 3420), (1.75, 3204), (1.75, 2469), (1.75, 2350), (1.75, 2064), (1.75, 3357), (1.75, 3054), (1.75, 3360), (1.75, 3273), (1.75, 3237), (1.75, 3473), (1.75, 3441), (1.75, 3155), (1.75, 3040), (1.75, 2809), (1.75, 2954), (1.75, 3038), (1.75, 3372), (1.75, 2720), (1.75, 2717), (1.75, 3045), (1.75, 2687), (1.75, 3092), (1.75, 3452), (1.75, 3487), (1.75, 3241), (1.75, 2770), (1.75, 3491), (1.75, 3205), (1.75, 2825), (1.75, 3006), (1.75, 2578), (1.75, 3090), (1.75, 2461), (1.75, 3233), (1.75, 2776), (1.75, 3289), (1.75, 3380), (1.75, 3397), (1.75, 3514), (1.75, 3018), (1.75, 2735), (1.75, 3173), (1.75, 2353), (1.75, 3084), (1.75, 3231), (1.75, 3199), (1.75, 3263), (1.75, 3483), (1.75, 3261), (1.75, 2794), (1.75, 2579), (1.75, 2665), (1.75, 3513), (1.75, 2849), (1.75, 1431), (1.75, 2737), (1.75, 3109), (1.75, 3292), (1.75, 2666), (1.75, 3404), (1.75, 3430), (1.75, 3086), (1.75, 3143), (1.75, 3297), (1.75, 3450), (1.75, 3306), (1.75, 3206), (1.75, 3197), (1.75, 3460), (1.75, 3267), (1.75, 2263), (1.75, 3363), (1.75, 2365), (1.75, 2949), (1.75, 3243), (1.75, 3001), (1.75, 3033), (1.75, 2688), (1.75, 3239), (1.75, 2565), (1.75, 2672), (0.5, 3517), (0.5, 3448), (0.5, 3437), (0.375, 3433), (0.375, 3470), (0.375, 3476), (0.375, 3485)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3349
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3425
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2560
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3271
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 33]
[Computing fitness]
[(1.75, 3535), (1.75, 2558), (1.75, 3453), (1.75, 3510), (1.75, 2973), (1.75, 2909), (1.75, 3592), (1.75, 3444), (1.75, 2167), (1.75, 2486), (1.75, 3561), (1.75, 3095), (1.75, 3392), (1.75, 3424), (1.75, 3013), (1.75, 2806), (1.75, 3207), (1.75, 3096), (1.75, 2724), (1.75, 3157), (1.75, 3167), (1.75, 3346), (1.75, 3534), (1.75, 3493), (1.75, 2557), (1.75, 3367), (1.75, 3208), (1.75, 2581), (1.75, 3320), (1.75, 3169), (1.75, 3587), (1.75, 3610), (1.75, 2718), (1.75, 2546), (1.75, 3125), (1.75, 3343), (1.75, 3310), (1.75, 3478), (1.75, 3269), (1.75, 3461), (1.75, 3463), (1.75, 2650), (1.75, 3203), (1.75, 3520), (1.75, 3558), (1.75, 3596), (1.75, 3590), (1.75, 3616), (1.75, 3356), (1.75, 2481), (1.75, 3265), (1.75, 3071), (1.75, 3553), (1.75, 3466), (1.75, 3567), (1.75, 3150), (1.75, 3244), (1.75, 3540), (1.75, 3280), (1.75, 3608), (1.75, 3509), (1.75, 3464), (1.75, 3012), (1.75, 2799), (1.75, 3457), (1.75, 3480), (1.75, 3580), (1.75, 3321), (1.75, 3512), (1.75, 3582), (1.75, 3333), (1.75, 3401), (1.75, 3577), (1.75, 3187), (1.75, 3357), (1.75, 3477), (1.75, 2812), (1.75, 2553), (1.75, 2068), (1.75, 2458), (1.75, 3312), (1.75, 3271), (1.75, 3441), (1.75, 3249), (1.75, 3569), (1.75, 3528), (1.75, 3419), (1.75, 3445), (1.75, 3386), (1.75, 3368), (1.75, 3361), (1.75, 3046), (1.75, 3601), (1.75, 2999), (1.75, 3552), (1.75, 3443), (1.75, 3317), (1.75, 3409), (1.75, 1596), (1.75, 3349), (1.75, 3435), (1.75, 3328), (1.75, 2273), (1.75, 3595), (1.75, 2588), (1.75, 2827), (1.75, 3060), (1.75, 3421), (1.75, 3521), (1.75, 3235), (1.75, 3576), (1.75, 3565), (1.75, 3518), (1.75, 3302), (1.75, 3247), (1.75, 2695), (1.75, 3550), (1.75, 3410), (1.75, 3573), (1.75, 3088), (1.75, 3407), (1.75, 2982), (1.75, 2466), (1.75, 3502), (1.75, 2878), (1.75, 2862), (1.75, 3385), (1.75, 2459), (1.75, 3201), (1.75, 2920), (1.75, 2921), (1.75, 3389), (1.75, 3322), (1.75, 3370), (1.75, 3285), (1.75, 3506), (1.75, 3338), (1.75, 3100), (1.75, 3519), (1.75, 2350), (1.75, 3190), (1.75, 3420), (1.75, 3305), (1.75, 3508), (1.75, 3468), (1.75, 2908), (1.75, 3081), (1.75, 2564), (1.75, 3612), (1.75, 2957), (1.75, 2941), (1.75, 3600), (1.75, 2890), (1.75, 3204), (1.75, 3428), (1.75, 2271), (1.75, 3200), (1.75, 3083), (1.75, 3603), (1.75, 3093), (1.75, 3446), (1.75, 3248), (1.75, 2561), (1.75, 3554), (1.75, 3041), (1.75, 3264), (1.75, 3293), (1.75, 3365), (1.75, 2880), (1.75, 3139), (1.75, 3273), (1.75, 3490), (1.75, 2823), (1.75, 3605), (1.75, 2699), (1.75, 3047), (1.75, 2570), (1.75, 3377), (1.75, 3526), (1.75, 3272), (1.75, 3296), (1.75, 3135), (1.75, 3465), (1.75, 2771), (1.75, 2791), (1.75, 3572), (1.75, 2723), (1.75, 3334), (1.75, 3159), (1.75, 3402), (1.75, 3474), (1.75, 2795), (1.75, 3155), (1.75, 3079), (1.75, 3118), (1.75, 3291), (1.75, 3304), (1.75, 3254), (1.75, 2787), (1.75, 2774), (1.75, 2752), (1.75, 3425), (1.75, 3144), (1.75, 2712), (1.75, 2697), (1.75, 3146), (1.75, 3613), (1.75, 3467), (1.75, 2552), (1.75, 3482), (1.75, 2256), (1.75, 3284), (1.75, 3017), (1.75, 3040), (1.75, 3178), (1.75, 3438), (1.75, 2064), (1.75, 2645), (1.75, 3270), (1.75, 2722), (1.75, 2587), (1.75, 3230), (1.75, 3472), (1.75, 3615), (1.75, 3530), (1.75, 3375), (1.75, 3539), (1.75, 3586), (1.75, 2452), (1.75, 3544), (1.75, 3547), (1.75, 3287), (1.75, 2643), (1.75, 2367), (1.75, 2469), (1.75, 3434), (1.75, 3379), (1.75, 3250), (1.75, 2944), (1.75, 3423), (1.75, 3360), (1.75, 2956), (1.75, 3103), (1.75, 3123), (1.75, 3527), (1.75, 3492), (1.75, 2826), (1.75, 3325), (1.75, 3384), (1.75, 3185), (1.75, 2990), (1.75, 3575), (1.75, 2364), (1.75, 2855), (1.75, 2165), (1.75, 2889), (1.75, 2663), (1.75, 3381), (1.75, 3256), (1.75, 2924), (1.75, 3471), (1.75, 3414), (1.75, 3498), (1.75, 2465), (1.75, 2923), (1.75, 3327), (1.75, 3290), (1.75, 2554), (1.75, 3058), (1.75, 3130), (1.75, 3406), (1.75, 3007), (1.75, 2647), (1.75, 3416), (1.75, 1972), (1.75, 2691), (1.75, 3545), (1.75, 3194), (1.75, 3054), (1.75, 3354), (1.75, 3473), (1.75, 3591), (1.75, 3606), (1.75, 3066), (1.75, 3578), (1.75, 2902), (1.75, 2566), (1.75, 2269), (1.75, 3489), (1.75, 2594), (1.75, 2974), (1.75, 3442), (1.75, 3303), (1.75, 3408), (1.75, 3429), (1.75, 3099), (1.75, 3335), (1.75, 3617), (1.75, 3524), (1.75, 3382), (1.75, 3495), (1.75, 3106), (1.75, 2947), (1.75, 3584), (1.75, 3529), (1.75, 3237), (1.75, 3063), (1.75, 2911), (1.75, 2268), (1.75, 2839), (1.75, 2368), (1.75, 3275), (1.75, 3549), (1.75, 2740), (1.75, 3122), (1.75, 3193), (1.75, 3220), (1.75, 3426), (1.75, 2464), (1.75, 3523), (1.75, 2873), (1.75, 3218), (1.75, 3620), (1.75, 3324), (1.75, 3505), (1.75, 3515), (1.75, 3126), (1.75, 2563), (1.75, 2654), (1.75, 3532), (1.75, 3023), (1.75, 3282), (1.75, 3556), (1.75, 3359), (1.75, 3500), (1.75, 2766), (1.75, 2713), (1.75, 3051), (1.75, 3451), (1.75, 2359), (1.75, 3458), (1.75, 3551), (1.75, 2716), (1.75, 3604), (1.75, 3503), (1.75, 3300), (1.75, 3128), (1.75, 3440), (1.75, 3234), (1.75, 3195), (1.75, 2689), (1.75, 3614), (1.75, 2560), (1.75, 2592), (1.75, 1973), (1.75, 2640), (1.75, 3400), (1.75, 2369), (1.75, 3113), (1.75, 3351), (1.75, 3581), (1.75, 3188), (1.75, 2701), (1.75, 3455), (1.75, 2746), (1.75, 3127), (1.75, 3541), (1.75, 2683), (1.75, 2479), (1.75, 3184), (1.75, 3253), (1.75, 3507), (1.75, 3431), (1.75, 3163), (1.75, 2644), (1.75, 3301), (1.75, 3607), (1.75, 3329), (1.75, 3543), (1.75, 2962), (1.75, 3559), (1.75, 3257), (1.75, 2972), (1.75, 3056), (1.75, 3531), (1.75, 3497), (1.75, 2841), (1.75, 3621), (1.75, 3331), (1.75, 1879), (1.75, 2843), (1.75, 2726), (1.75, 3499), (0.5, 3598), (0.5, 3563), (0.5, 3571), (0.5, 3537), (0.5, 3589), (0.375, 3594), (0.375, 3619)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3535
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2558
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3453
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3510
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2973
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 34]
[Computing fitness]
[(1.75, 3509), (1.75, 2941), (1.75, 3554), (1.75, 3523), (1.75, 3635), (1.75, 3409), (1.75, 3187), (1.75, 3658), (1.75, 3190), (1.75, 3012), (1.75, 2486), (1.75, 3472), (1.75, 2855), (1.75, 3547), (1.75, 3118), (1.75, 3420), (1.75, 3620), (1.75, 3578), (1.75, 3063), (1.75, 3040), (1.75, 3338), (1.75, 2368), (1.75, 3612), (1.75, 3684), (1.75, 3083), (1.75, 3639), (1.75, 3284), (1.75, 2481), (1.75, 3678), (1.75, 3712), (1.75, 2566), (1.75, 3683), (1.75, 2697), (1.75, 3591), (1.75, 3646), (1.75, 3159), (1.75, 2594), (1.75, 3595), (1.75, 2920), (1.75, 3691), (1.75, 3544), (1.75, 3270), (1.75, 3324), (1.75, 2923), (1.75, 2645), (1.75, 3389), (1.75, 2921), (1.75, 2826), (1.75, 2546), (1.75, 3272), (1.75, 3474), (1.75, 3250), (1.75, 3668), (1.75, 3663), (1.75, 3584), (1.75, 3715), (1.75, 3518), (1.75, 3424), (1.75, 3419), (1.75, 3708), (1.75, 2787), (1.75, 3421), (1.75, 2791), (1.75, 3680), (1.75, 3178), (1.75, 3169), (1.75, 3512), (1.75, 3600), (1.75, 3689), (1.75, 3565), (1.75, 3655), (1.75, 2271), (1.75, 3370), (1.75, 3017), (1.75, 3478), (1.75, 3302), (1.75, 3681), (1.75, 2587), (1.75, 3293), (1.75, 2570), (1.75, 2269), (1.75, 2880), (1.75, 3135), (1.75, 3561), (1.75, 2839), (1.75, 3360), (1.75, 3357), (1.75, 3434), (1.75, 2795), (1.75, 3155), (1.75, 3384), (1.75, 3453), (1.75, 3379), (1.75, 3334), (1.75, 3099), (1.75, 2723), (1.75, 3667), (1.75, 3346), (1.75, 2908), (1.75, 3248), (1.75, 3382), (1.75, 2718), (1.75, 2799), (1.75, 3519), (1.75, 3573), (1.75, 2588), (1.75, 3466), (1.75, 3305), (1.75, 3303), (1.75, 3407), (1.75, 3505), (1.75, 3361), (1.75, 3582), (1.75, 3490), (1.75, 3467), (1.75, 3256), (1.75, 3150), (1.75, 3652), (1.75, 3558), (1.75, 3648), (1.75, 3088), (1.75, 3606), (1.75, 2771), (1.75, 3285), (1.75, 3385), (1.75, 2947), (1.75, 3615), (1.75, 2691), (1.75, 3651), (1.75, 3273), (1.75, 2452), (1.75, 2558), (1.75, 2561), (1.75, 3203), (1.75, 2724), (1.75, 3310), (1.75, 3060), (1.75, 3577), (1.75, 3386), (1.75, 3686), (1.75, 2924), (1.75, 3123), (1.75, 3271), (1.75, 3705), (1.75, 3552), (1.75, 2650), (1.75, 2974), (1.75, 3695), (1.75, 3201), (1.75, 3312), (1.75, 2367), (1.75, 3506), (1.75, 3047), (1.75, 2552), (1.75, 3423), (1.75, 3280), (1.75, 3498), (1.75, 2466), (1.75, 3071), (1.75, 3580), (1.75, 3622), (1.75, 2982), (1.75, 3477), (1.75, 3414), (1.75, 2878), (1.75, 3235), (1.75, 3343), (1.75, 3701), (1.75, 3230), (1.75, 3139), (1.75, 3608), (1.75, 3698), (1.75, 3471), (1.75, 3601), (1.75, 3428), (1.75, 3444), (1.75, 3656), (1.75, 3442), (1.75, 2823), (1.75, 3530), (1.75, 3670), (1.75, 3489), (1.75, 3291), (1.75, 2564), (1.75, 2827), (1.75, 3429), (1.75, 3325), (1.75, 3527), (1.75, 2890), (1.75, 3275), (1.75, 3649), (1.75, 3368), (1.75, 2647), (1.75, 3623), (1.75, 3445), (1.75, 2581), (1.75, 3644), (1.75, 3671), (1.75, 2465), (1.75, 3640), (1.75, 2364), (1.75, 3613), (1.75, 3079), (1.75, 3465), (1.75, 3630), (1.75, 3692), (1.75, 3676), (1.75, 3586), (1.75, 2902), (1.75, 2256), (1.75, 2873), (1.75, 3587), (1.75, 3641), (1.75, 3106), (1.75, 3100), (1.75, 3290), (1.75, 2699), (1.75, 3660), (1.75, 2752), (1.75, 3167), (1.75, 2458), (1.75, 3287), (1.75, 3576), (1.75, 3575), (1.75, 3356), (1.75, 3093), (1.75, 3200), (1.75, 3130), (1.75, 3508), (1.75, 2068), (1.75, 3661), (1.75, 3327), (1.75, 3438), (1.75, 3717), (1.75, 2911), (1.75, 3657), (1.75, 3463), (1.75, 2464), (1.75, 3631), (1.75, 3333), (1.75, 1972), (1.75, 3539), (1.75, 3354), (1.75, 3054), (1.75, 3480), (1.75, 3296), (1.75, 3365), (1.75, 3377), (1.75, 3416), (1.75, 3264), (1.75, 2812), (1.75, 3254), (1.75, 3704), (1.75, 3194), (1.75, 3446), (1.75, 2862), (1.75, 3468), (1.75, 2643), (1.75, 3682), (1.75, 3096), (1.75, 3679), (1.75, 3381), (1.75, 3185), (1.75, 2909), (1.75, 3441), (1.75, 3220), (1.75, 2722), (1.75, 3603), (1.75, 2990), (1.75, 3322), (1.75, 3457), (1.75, 2165), (1.75, 3375), (1.75, 2553), (1.75, 3492), (1.75, 3402), (1.75, 3637), (1.75, 3697), (1.75, 3095), (1.75, 3408), (1.75, 3193), (1.75, 3125), (1.75, 2774), (1.75, 2944), (1.75, 3550), (1.75, 3596), (1.75, 2999), (1.75, 3666), (1.75, 2469), (1.75, 2268), (1.75, 3673), (1.75, 3654), (1.75, 3103), (1.75, 3650), (1.75, 3520), (1.75, 3146), (1.75, 3406), (1.75, 3572), (1.75, 2167), (1.75, 3367), (1.75, 2957), (1.75, 3696), (1.75, 3392), (1.75, 3653), (1.75, 3473), (1.75, 3540), (1.75, 3633), (1.75, 2459), (1.75, 2663), (1.75, 3605), (1.75, 3081), (1.75, 3066), (1.75, 3569), (1.75, 3349), (1.75, 3521), (1.75, 3208), (1.75, 3320), (1.75, 3482), (1.75, 3529), (1.75, 2064), (1.75, 3545), (1.75, 3321), (1.75, 3610), (1.75, 3244), (1.75, 2695), (1.75, 3247), (1.75, 3157), (1.75, 3549), (1.75, 3041), (1.75, 3535), (1.75, 3007), (1.75, 3707), (1.75, 3435), (1.75, 3249), (1.75, 3426), (1.75, 3443), (1.75, 3645), (1.75, 3662), (1.75, 1596), (1.75, 3335), (1.75, 3528), (1.75, 3218), (1.75, 2956), (1.75, 3687), (1.75, 3317), (1.75, 3688), (1.75, 3401), (1.75, 3237), (1.75, 3647), (1.75, 3493), (1.75, 3590), (1.75, 3592), (1.75, 3617), (1.75, 3265), (1.75, 3510), (1.75, 3616), (1.75, 3642), (1.75, 3672), (1.75, 3122), (1.75, 2554), (1.75, 3524), (1.75, 3425), (1.75, 3058), (1.75, 3553), (1.75, 3634), (1.75, 3328), (1.75, 3674), (1.75, 3534), (1.75, 2973), (1.75, 3495), (1.75, 2806), (1.75, 2557), (1.75, 3207), (1.75, 3502), (1.75, 2273), (1.75, 3144), (1.75, 3269), (1.75, 3013), (1.75, 3694), (1.75, 3464), (1.75, 2712), (1.75, 3699), (1.75, 2350), (1.75, 3046), (1.75, 3410), (1.75, 3304), (1.75, 3461), (1.75, 3204), (1.75, 3716), (1.75, 3567), (1.75, 2889), (1.75, 2740), (1.75, 3526), (0.5, 3665), (0.5, 3629), (0.5, 3625), (0.5, 3627), (0.5, 3703), (0.5, 3710), (0.375, 3714)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3509
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2941
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3554
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3523
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3635
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 35]
[Computing fitness]
[(1.75, 3230), (1.75, 2873), (1.75, 3658), (1.75, 3375), (1.75, 3338), (1.75, 3712), (1.75, 2697), (1.75, 1972), (1.75, 3420), (1.75, 3748), (1.75, 2787), (1.75, 2752), (1.75, 3596), (1.75, 3381), (1.75, 3333), (1.75, 3407), (1.75, 2465), (1.75, 2920), (1.75, 3406), (1.75, 3778), (1.75, 3130), (1.75, 3796), (1.75, 3605), (1.75, 3465), (1.75, 3321), (1.75, 2165), (1.75, 3322), (1.75, 2256), (1.75, 3576), (1.75, 3150), (1.75, 2650), (1.75, 2999), (1.75, 3155), (1.75, 3365), (1.75, 3759), (1.75, 3680), (1.75, 3799), (1.75, 3185), (1.75, 3254), (1.75, 3063), (1.75, 2459), (1.75, 2827), (1.75, 2723), (1.75, 3310), (1.75, 2643), (1.75, 3389), (1.75, 3676), (1.75, 3774), (1.75, 3661), (1.75, 3428), (1.75, 2570), (1.75, 3737), (1.75, 3554), (1.75, 3573), (1.75, 2558), (1.75, 3646), (1.75, 2466), (1.75, 3724), (1.75, 3791), (1.75, 3547), (1.75, 3727), (1.75, 3764), (1.75, 3782), (1.75, 3187), (1.75, 2990), (1.75, 2064), (1.75, 3320), (1.75, 2890), (1.75, 3760), (1.75, 3370), (1.75, 2982), (1.75, 3577), (1.75, 2722), (1.75, 3017), (1.75, 3416), (1.75, 3505), (1.75, 3752), (1.75, 3480), (1.75, 3264), (1.75, 3167), (1.75, 3509), (1.75, 3190), (1.75, 2481), (1.75, 2724), (1.75, 3159), (1.75, 3631), (1.75, 3637), (1.75, 3200), (1.75, 3781), (1.75, 3578), (1.75, 2826), (1.75, 3684), (1.75, 3544), (1.75, 3445), (1.75, 2924), (1.75, 3379), (1.75, 3788), (1.75, 3054), (1.75, 3746), (1.75, 3789), (1.75, 3272), (1.75, 3284), (1.75, 3771), (1.75, 2941), (1.75, 3466), (1.75, 3327), (1.75, 3235), (1.75, 3135), (1.75, 3615), (1.75, 2068), (1.75, 3012), (1.75, 3421), (1.75, 3296), (1.75, 3071), (1.75, 3756), (1.75, 3248), (1.75, 3686), (1.75, 3608), (1.75, 3683), (1.75, 3740), (1.75, 3641), (1.75, 2645), (1.75, 2823), (1.75, 3622), (1.75, 2552), (1.75, 3745), (1.75, 2923), (1.75, 3697), (1.75, 3794), (1.75, 3125), (1.75, 3293), (1.75, 3673), (1.75, 3606), (1.75, 3701), (1.75, 3762), (1.75, 3423), (1.75, 3651), (1.75, 3169), (1.75, 3591), (1.75, 2368), (1.75, 3610), (1.75, 3429), (1.75, 3671), (1.75, 3734), (1.75, 3689), (1.75, 3271), (1.75, 3178), (1.75, 2546), (1.75, 3280), (1.75, 3357), (1.75, 3795), (1.75, 3797), (1.75, 2902), (1.75, 3540), (1.75, 3635), (1.75, 3681), (1.75, 3334), (1.75, 3670), (1.75, 3079), (1.75, 3414), (1.75, 2839), (1.75, 2791), (1.75, 3139), (1.75, 3725), (1.75, 3492), (1.75, 2581), (1.75, 3682), (1.75, 3106), (1.75, 3478), (1.75, 3434), (1.75, 3572), (1.75, 3721), (1.75, 3769), (1.75, 3575), (1.75, 3695), (1.75, 3081), (1.75, 3668), (1.75, 2774), (1.75, 3653), (1.75, 2271), (1.75, 3779), (1.75, 3523), (1.75, 3325), (1.75, 3735), (1.75, 3118), (1.75, 3384), (1.75, 3806), (1.75, 3667), (1.75, 3146), (1.75, 3730), (1.75, 3346), (1.75, 2566), (1.75, 3601), (1.75, 3088), (1.75, 3743), (1.75, 3419), (1.75, 3343), (1.75, 3761), (1.75, 3312), (1.75, 3656), (1.75, 3705), (1.75, 2452), (1.75, 2464), (1.75, 3303), (1.75, 3587), (1.75, 3715), (1.75, 2561), (1.75, 3595), (1.75, 3804), (1.75, 3679), (1.75, 3786), (1.75, 3751), (1.75, 3691), (1.75, 3520), (1.75, 3386), (1.75, 3719), (1.75, 3747), (1.75, 3530), (1.75, 3473), (1.75, 3650), (1.75, 3726), (1.75, 3527), (1.75, 3368), (1.75, 3441), (1.75, 3498), (1.75, 3442), (1.75, 3565), (1.75, 3220), (1.75, 2469), (1.75, 2364), (1.75, 3040), (1.75, 3639), (1.75, 3521), (1.75, 3468), (1.75, 3586), (1.75, 3208), (1.75, 3633), (1.75, 3729), (1.75, 2855), (1.75, 3728), (1.75, 3519), (1.75, 3402), (1.75, 3290), (1.75, 3757), (1.75, 3613), (1.75, 3678), (1.75, 3696), (1.75, 3463), (1.75, 3717), (1.75, 3550), (1.75, 3367), (1.75, 2588), (1.75, 2553), (1.75, 3663), (1.75, 2908), (1.75, 3506), (1.75, 3324), (1.75, 3692), (1.75, 3758), (1.75, 3103), (1.75, 2458), (1.75, 3291), (1.75, 2564), (1.75, 3660), (1.75, 3805), (1.75, 3654), (1.75, 2367), (1.75, 3612), (1.75, 2699), (1.75, 3545), (1.75, 3275), (1.75, 3360), (1.75, 3392), (1.75, 2695), (1.75, 3408), (1.75, 2974), (1.75, 2718), (1.75, 3630), (1.75, 3704), (1.75, 2957), (1.75, 3285), (1.75, 2878), (1.75, 3287), (1.75, 3477), (1.75, 3741), (1.75, 3666), (1.75, 3720), (1.75, 3482), (1.75, 3775), (1.75, 3474), (1.75, 3457), (1.75, 3377), (1.75, 3731), (1.75, 3733), (1.75, 3808), (1.75, 3083), (1.75, 3438), (1.75, 2647), (1.75, 3558), (1.75, 3201), (1.75, 3194), (1.75, 2269), (1.75, 2812), (1.75, 3047), (1.75, 3490), (1.75, 3552), (1.75, 3753), (1.75, 2594), (1.75, 3446), (1.75, 2663), (1.75, 3767), (1.75, 3776), (1.75, 3755), (1.75, 3657), (1.75, 2167), (1.75, 2795), (1.75, 3354), (1.75, 2911), (1.75, 3424), (1.75, 3123), (1.75, 3652), (1.75, 2944), (1.75, 2486), (1.75, 3489), (1.75, 3203), (1.75, 3766), (1.75, 3750), (1.75, 3561), (1.75, 2268), (1.75, 3640), (1.75, 3356), (1.75, 3803), (1.75, 3100), (1.75, 3722), (1.75, 3698), (1.75, 3800), (1.75, 2862), (1.75, 3582), (1.75, 3471), (1.75, 2771), (1.75, 3738), (1.75, 3472), (1.75, 3580), (1.75, 3792), (1.75, 3539), (1.75, 3256), (1.75, 3742), (1.75, 3518), (1.75, 3512), (1.75, 3655), (1.75, 3648), (1.75, 3095), (1.75, 3600), (1.75, 2691), (1.75, 3623), (1.75, 2880), (1.75, 3744), (1.75, 3467), (1.75, 3444), (1.75, 3765), (1.75, 3099), (1.75, 3250), (1.75, 3270), (1.75, 3409), (1.75, 3305), (1.75, 3584), (1.75, 3096), (1.75, 3453), (1.75, 3807), (1.75, 3382), (1.75, 3644), (1.75, 3193), (1.75, 3569), (1.75, 3798), (1.75, 3385), (1.75, 3603), (1.75, 3736), (1.75, 2921), (1.75, 3244), (1.75, 3349), (1.75, 3802), (1.75, 3273), (1.75, 3790), (1.75, 3066), (1.75, 3708), (1.75, 3361), (1.75, 3649), (1.75, 2799), (1.75, 3508), (1.75, 2587), (1.75, 3529), (1.75, 3772), (1.75, 3620), (1.75, 2909), (1.75, 3793), (1.75, 2947), (1.75, 3093), (1.75, 3302), (1.75, 3060), (0.5, 3784)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3230
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2873
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3658
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3375
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3338
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 36]
[Computing fitness]
[(1.75, 2368), (1.75, 3831), (1.75, 3668), (1.75, 3771), (1.75, 3446), (1.75, 3821), (1.75, 3728), (1.75, 3146), (1.75, 2812), (1.75, 3420), (1.75, 3646), (1.75, 3596), (1.75, 3730), (1.75, 3848), (1.75, 3482), (1.75, 2941), (1.75, 3811), (1.75, 3474), (1.75, 3414), (1.75, 3752), (1.75, 3408), (1.75, 3877), (1.75, 3498), (1.75, 2553), (1.75, 3786), (1.75, 3201), (1.75, 3865), (1.75, 3791), (1.75, 3338), (1.75, 3492), (1.75, 3756), (1.75, 2064), (1.75, 3490), (1.75, 3421), (1.75, 3656), (1.75, 3423), (1.75, 3829), (1.75, 2594), (1.75, 3272), (1.75, 3814), (1.75, 3682), (1.75, 2570), (1.75, 3663), (1.75, 3861), (1.75, 3445), (1.75, 3794), (1.75, 3733), (1.75, 3544), (1.75, 3778), (1.75, 3248), (1.75, 2752), (1.75, 3194), (1.75, 2643), (1.75, 3721), (1.75, 3868), (1.75, 3576), (1.75, 3812), (1.75, 3776), (1.75, 3287), (1.75, 3441), (1.75, 2364), (1.75, 3692), (1.75, 3135), (1.75, 3303), (1.75, 3696), (1.75, 3480), (1.75, 3817), (1.75, 3312), (1.75, 3764), (1.75, 3419), (1.75, 3879), (1.75, 2873), (1.75, 3671), (1.75, 2923), (1.75, 3758), (1.75, 3650), (1.75, 3322), (1.75, 3379), (1.75, 3735), (1.75, 3478), (1.75, 3819), (1.75, 3523), (1.75, 3761), (1.75, 3726), (1.75, 3843), (1.75, 2167), (1.75, 2466), (1.75, 3595), (1.75, 3554), (1.75, 3670), (1.75, 3442), (1.75, 2791), (1.75, 3187), (1.75, 2558), (1.75, 3290), (1.75, 3651), (1.75, 3734), (1.75, 2481), (1.75, 3641), (1.75, 3017), (1.75, 3680), (1.75, 3724), (1.75, 3407), (1.75, 3898), (1.75, 3434), (1.75, 2855), (1.75, 3360), (1.75, 2588), (1.75, 3845), (1.75, 3465), (1.75, 3897), (1.75, 2486), (1.75, 3575), (1.75, 3545), (1.75, 3855), (1.75, 2464), (1.75, 2165), (1.75, 3047), (1.75, 3849), (1.75, 3760), (1.75, 3904), (1.75, 3818), (1.75, 2827), (1.75, 3577), (1.75, 3747), (1.75, 2974), (1.75, 3876), (1.75, 3466), (1.75, 3429), (1.75, 3846), (1.75, 2957), (1.75, 3886), (1.75, 3740), (1.75, 3572), (1.75, 2645), (1.75, 2911), (1.75, 3822), (1.75, 3727), (1.75, 3357), (1.75, 3370), (1.75, 3769), (1.75, 3895), (1.75, 3463), (1.75, 2839), (1.75, 2663), (1.75, 3333), (1.75, 3530), (1.75, 3285), (1.75, 3705), (1.75, 3622), (1.75, 3468), (1.75, 3343), (1.75, 3741), (1.75, 3384), (1.75, 3676), (1.75, 3381), (1.75, 3606), (1.75, 3071), (1.75, 3796), (1.75, 3424), (1.75, 3054), (1.75, 3565), (1.75, 2990), (1.75, 3630), (1.75, 3704), (1.75, 3660), (1.75, 3324), (1.75, 3402), (1.75, 3838), (1.75, 2564), (1.75, 3130), (1.75, 3825), (1.75, 3291), (1.75, 2256), (1.75, 3715), (1.75, 2552), (1.75, 3748), (1.75, 3392), (1.75, 3725), (1.75, 3850), (1.75, 3890), (1.75, 3806), (1.75, 3103), (1.75, 2561), (1.75, 3712), (1.75, 3123), (1.75, 3635), (1.75, 3375), (1.75, 3666), (1.75, 3083), (1.75, 2890), (1.75, 3737), (1.75, 3296), (1.75, 3280), (1.75, 3169), (1.75, 2452), (1.75, 3833), (1.75, 3809), (1.75, 2908), (1.75, 2902), (1.75, 2647), (1.75, 3872), (1.75, 2695), (1.75, 3847), (1.75, 3762), (1.75, 2823), (1.75, 3438), (1.75, 3605), (1.75, 3203), (1.75, 3012), (1.75, 3521), (1.75, 3797), (1.75, 2699), (1.75, 3679), (1.75, 3652), (1.75, 2982), (1.75, 3840), (1.75, 3081), (1.75, 3118), (1.75, 3902), (1.75, 3804), (1.75, 3327), (1.75, 3753), (1.75, 2068), (1.75, 3859), (1.75, 2924), (1.75, 3346), (1.75, 3284), (1.75, 3701), (1.75, 3888), (1.75, 3520), (1.75, 2724), (1.75, 2920), (1.75, 3389), (1.75, 3874), (1.75, 3264), (1.75, 3509), (1.75, 3271), (1.75, 3612), (1.75, 3637), (1.75, 3823), (1.75, 3863), (1.75, 3729), (1.75, 3789), (1.75, 3899), (1.75, 3310), (1.75, 2795), (1.75, 3354), (1.75, 3746), (1.75, 2722), (1.75, 3774), (1.75, 3854), (1.75, 3552), (1.75, 3368), (1.75, 3824), (1.75, 3139), (1.75, 2718), (1.75, 2458), (1.75, 3880), (1.75, 3844), (1.75, 3377), (1.75, 3633), (1.75, 3717), (1.75, 3889), (1.75, 3689), (1.75, 3856), (1.75, 3505), (1.75, 3759), (1.75, 3751), (1.75, 3477), (1.75, 3878), (1.75, 3719), (1.75, 3678), (1.75, 3820), (1.75, 2566), (1.75, 3573), (1.75, 3903), (1.75, 3159), (1.75, 3799), (1.75, 3275), (1.75, 2723), (1.75, 3558), (1.75, 3527), (1.75, 3695), (1.75, 3190), (1.75, 3325), (1.75, 2469), (1.75, 3884), (1.75, 3473), (1.75, 3673), (1.75, 3835), (1.75, 3088), (1.75, 2546), (1.75, 3578), (1.75, 2271), (1.75, 3755), (1.75, 3208), (1.75, 2697), (1.75, 3200), (1.75, 3667), (1.75, 3155), (1.75, 3830), (1.75, 3547), (1.75, 2826), (1.75, 3150), (1.75, 3779), (1.75, 3808), (1.75, 3386), (1.75, 3457), (1.75, 3858), (1.75, 3320), (1.75, 3178), (1.75, 3220), (1.75, 3867), (1.75, 3661), (1.75, 3235), (1.75, 3230), (1.75, 3489), (1.75, 3550), (1.75, 3428), (1.75, 3815), (1.75, 3892), (1.75, 3586), (1.75, 3757), (1.75, 3731), (1.75, 3654), (1.75, 3615), (1.75, 3601), (1.75, 2367), (1.75, 3883), (1.75, 2999), (1.75, 2944), (1.75, 3887), (1.75, 3816), (1.75, 2650), (1.75, 3882), (1.75, 3610), (1.75, 3781), (1.75, 3106), (1.75, 3591), (1.75, 3775), (1.75, 3870), (1.75, 3857), (1.75, 3827), (1.75, 3686), (1.75, 3658), (1.75, 3406), (1.75, 3540), (1.75, 3743), (1.75, 2459), (1.75, 3869), (1.75, 3167), (1.75, 3185), (1.75, 3608), (1.75, 3683), (1.75, 3079), (1.75, 3805), (1.75, 3788), (1.75, 3782), (1.75, 2878), (1.75, 3691), (1.75, 2465), (1.75, 2787), (1.75, 3416), (1.75, 3684), (1.75, 3631), (1.75, 3519), (1.75, 3837), (1.75, 3657), (1.75, 3795), (1.75, 3832), (1.75, 3653), (1.75, 3293), (1.75, 3063), (1.75, 1972), (1.75, 3720), (1.75, 3613), (1.75, 3891), (1.75, 3852), (1.75, 3321), (1.75, 3697), (1.75, 3125), (1.75, 3745), (1.75, 3506), (1.75, 2581), (1.75, 3254), (1.75, 3365), (1.75, 3828), (1.75, 3334), (1.75, 3040), (1.75, 3767), (1.75, 3367), (1.75, 2269), (1.75, 3681), (1.75, 2774), (1.75, 3587), (1.75, 3639), (0.5, 3894), (0.5, 3842), (0.5, 3901)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2368
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3831
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3668
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3771
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3446
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 37]
[Computing fitness]
[(1.75, 2481), (1.75, 3751), (1.75, 3985), (1.75, 3886), (1.75, 3419), (1.75, 3897), (1.75, 3996), (1.75, 3520), (1.75, 3235), (1.75, 2271), (1.75, 2458), (1.75, 3778), (1.75, 2553), (1.75, 3635), (1.75, 2723), (1.75, 3201), (1.75, 3577), (1.75, 3977), (1.75, 3848), (1.75, 2699), (1.75, 3178), (1.75, 3554), (1.75, 2752), (1.75, 3911), (1.75, 2256), (1.75, 3953), (1.75, 3868), (1.75, 3679), (1.75, 2957), (1.75, 3465), (1.75, 3735), (1.75, 3123), (1.75, 2826), (1.75, 3661), (1.75, 3761), (1.75, 3296), (1.75, 3888), (1.75, 3956), (1.75, 3746), (1.75, 3572), (1.75, 3991), (1.75, 3976), (1.75, 3389), (1.75, 3530), (1.75, 3605), (1.75, 3771), (1.75, 3721), (1.75, 3779), (1.75, 2923), (1.75, 3466), (1.75, 3159), (1.75, 3596), (1.75, 3689), (1.75, 3492), (1.75, 3368), (1.75, 2464), (1.75, 2823), (1.75, 3755), (1.75, 3833), (1.75, 3809), (1.75, 3327), (1.75, 3357), (1.75, 3931), (1.75, 3872), (1.75, 3343), (1.75, 3799), (1.75, 2566), (1.75, 3287), (1.75, 3565), (1.75, 3955), (1.75, 3527), (1.75, 3932), (1.75, 3969), (1.75, 3545), (1.75, 3878), (1.75, 2167), (1.75, 2645), (1.75, 3047), (1.75, 3937), (1.75, 3938), (1.75, 3794), (1.75, 3753), (1.75, 3740), (1.75, 3927), (1.75, 3169), (1.75, 3898), (1.75, 3880), (1.75, 3135), (1.75, 2064), (1.75, 3957), (1.75, 2594), (1.75, 3360), (1.75, 4000), (1.75, 3874), (1.75, 2924), (1.75, 2908), (1.75, 3573), (1.75, 2546), (1.75, 3230), (1.75, 2718), (1.75, 3908), (1.75, 3676), (1.75, 2890), (1.75, 3490), (1.75, 3081), (1.75, 2795), (1.75, 2561), (1.75, 3729), (1.75, 3922), (1.75, 3944), (1.75, 2990), (1.75, 3899), (1.75, 3083), (1.75, 2364), (1.75, 3988), (1.75, 3322), (1.75, 2695), (1.75, 3981), (1.75, 3972), (1.75, 3734), (1.75, 3964), (1.75, 3830), (1.75, 3733), (1.75, 3606), (1.75, 3724), (1.75, 3889), (1.75, 3338), (1.75, 3990), (1.75, 3747), (1.75, 2827), (1.75, 2902), (1.75, 3429), (1.75, 3752), (1.75, 3717), (1.75, 3678), (1.75, 3646), (1.75, 3595), (1.75, 3926), (1.75, 2552), (1.75, 3651), (1.75, 2558), (1.75, 3673), (1.75, 3994), (1.75, 3776), (1.75, 3936), (1.75, 3428), (1.75, 3420), (1.75, 3975), (1.75, 3280), (1.75, 3971), (1.75, 3017), (1.75, 3670), (1.75, 3916), (1.75, 3829), (1.75, 3910), (1.75, 3552), (1.75, 2855), (1.75, 3727), (1.75, 3370), (1.75, 3924), (1.75, 3980), (1.75, 3719), (1.75, 3934), (1.75, 3320), (1.75, 3973), (1.75, 3791), (1.75, 3730), (1.75, 3480), (1.75, 3303), (1.75, 3920), (1.75, 3650), (1.75, 2722), (1.75, 3310), (1.75, 3695), (1.75, 3312), (1.75, 3963), (1.75, 3728), (1.75, 3715), (1.75, 3844), (1.75, 3692), (1.75, 3248), (1.75, 3392), (1.75, 3325), (1.75, 3769), (1.75, 2368), (1.75, 3200), (1.75, 3187), (1.75, 3966), (1.75, 3895), (1.75, 2570), (1.75, 3696), (1.75, 3652), (1.75, 3817), (1.75, 3203), (1.75, 3983), (1.75, 3797), (1.75, 3637), (1.75, 3959), (1.75, 3855), (1.75, 3950), (1.75, 3923), (1.75, 3940), (1.75, 3760), (1.75, 2697), (1.75, 3758), (1.75, 3789), (1.75, 3935), (1.75, 3930), (1.75, 3786), (1.75, 3284), (1.75, 3919), (1.75, 3498), (1.75, 3929), (1.75, 3354), (1.75, 3823), (1.75, 3818), (1.75, 3762), (1.75, 3741), (1.75, 3208), (1.75, 3544), (1.75, 2643), (1.75, 3264), (1.75, 2165), (1.75, 2920), (1.75, 3558), (1.75, 3446), (1.75, 2791), (1.75, 2068), (1.75, 3150), (1.75, 3917), (1.75, 3521), (1.75, 3928), (1.75, 3705), (1.75, 3962), (1.75, 3979), (1.75, 3737), (1.75, 3849), (1.75, 2724), (1.75, 3921), (1.75, 3960), (1.75, 3550), (1.75, 3824), (1.75, 3155), (1.75, 3586), (1.75, 3505), (1.75, 3054), (1.75, 3576), (1.75, 3942), (1.75, 3759), (1.75, 3290), (1.75, 2564), (1.75, 3468), (1.75, 3275), (1.75, 3804), (1.75, 3509), (1.75, 3434), (1.75, 3820), (1.75, 3954), (1.75, 3879), (1.75, 2647), (1.75, 3756), (1.75, 3947), (1.75, 3477), (1.75, 3381), (1.75, 3612), (1.75, 2663), (1.75, 3858), (1.75, 3656), (1.75, 3987), (1.75, 3377), (1.75, 3774), (1.75, 3808), (1.75, 2486), (1.75, 3578), (1.75, 3375), (1.75, 3668), (1.75, 3846), (1.75, 3838), (1.75, 3939), (1.75, 3847), (1.75, 3850), (1.75, 3831), (1.75, 3291), (1.75, 3865), (1.75, 2466), (1.75, 3402), (1.75, 3819), (1.75, 2452), (1.75, 3660), (1.75, 3346), (1.75, 2941), (1.75, 3902), (1.75, 3407), (1.75, 3840), (1.75, 3408), (1.75, 3863), (1.75, 3764), (1.75, 3575), (1.75, 3272), (1.75, 3379), (1.75, 3701), (1.75, 3918), (1.75, 3854), (1.75, 3757), (1.75, 3146), (1.75, 3285), (1.75, 3633), (1.75, 3951), (1.75, 2873), (1.75, 3912), (1.75, 3220), (1.75, 3478), (1.75, 3414), (1.75, 3438), (1.75, 3876), (1.75, 2839), (1.75, 3861), (1.75, 3271), (1.75, 3482), (1.75, 3463), (1.75, 3989), (1.75, 3424), (1.75, 3892), (1.75, 3641), (1.75, 3884), (1.75, 3423), (1.75, 3845), (1.75, 3814), (1.75, 3130), (1.75, 3825), (1.75, 2982), (1.75, 3071), (1.75, 3445), (1.75, 3890), (1.75, 3811), (1.75, 2588), (1.75, 3012), (1.75, 3915), (1.75, 3704), (1.75, 3088), (1.75, 3843), (1.75, 2974), (1.75, 3386), (1.75, 3473), (1.75, 3324), (1.75, 3731), (1.75, 3903), (1.75, 3441), (1.75, 3139), (1.75, 3682), (1.75, 2911), (1.75, 3523), (1.75, 3961), (1.75, 2812), (1.75, 3796), (1.75, 3474), (1.75, 3867), (1.75, 3547), (1.75, 3812), (1.75, 3630), (1.75, 3877), (1.75, 3712), (1.75, 3835), (1.75, 3933), (1.75, 3925), (1.75, 3333), (1.75, 3806), (1.75, 3421), (1.75, 3904), (1.75, 3821), (1.75, 3622), (1.75, 3815), (1.75, 3489), (1.75, 3118), (1.75, 3859), (1.75, 3194), (1.75, 3986), (1.75, 3103), (1.75, 3726), (1.75, 3663), (1.75, 3725), (1.75, 3190), (1.75, 3667), (1.75, 3748), (1.75, 3949), (1.75, 3442), (1.75, 3856), (1.75, 3384), (1.75, 3457), (1.75, 3680), (1.75, 2469), (1.75, 3671), (1.75, 3822), (1.75, 3666), (1.75, 3968), (0.5, 3998), (0.5, 3993), (0.5, 3914), (0.5, 3946), (0.5, 3906)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2481
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3751
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3985
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3886
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3419
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 38]
[Computing fitness]
[(1.75, 4003), (1.75, 3264), (1.75, 3741), (1.75, 3940), (1.75, 3922), (1.75, 3408), (1.75, 3776), (1.75, 3652), (1.75, 4068), (1.75, 3919), (1.75, 3854), (1.75, 3477), (1.75, 3988), (1.75, 2855), (1.75, 3696), (1.75, 3950), (1.75, 3989), (1.75, 3284), (1.75, 4002), (1.75, 4043), (1.75, 4070), (1.75, 3392), (1.75, 3520), (1.75, 4069), (1.75, 3797), (1.75, 4036), (1.75, 3938), (1.75, 2564), (1.75, 3769), (1.75, 3932), (1.75, 3635), (1.75, 3833), (1.75, 3509), (1.75, 4052), (1.75, 3972), (1.75, 3296), (1.75, 3054), (1.75, 3360), (1.75, 3346), (1.75, 3565), (1.75, 3633), (1.75, 3291), (1.75, 3530), (1.75, 3934), (1.75, 3498), (1.75, 3791), (1.75, 2923), (1.75, 3463), (1.75, 2570), (1.75, 4071), (1.75, 3829), (1.75, 3920), (1.75, 3466), (1.75, 4008), (1.75, 3375), (1.75, 3159), (1.75, 3414), (1.75, 3975), (1.75, 2647), (1.75, 3303), (1.75, 2368), (1.75, 3954), (1.75, 2645), (1.75, 3721), (1.75, 3612), (1.75, 3879), (1.75, 3855), (1.75, 2594), (1.75, 2839), (1.75, 2724), (1.75, 4013), (1.75, 3420), (1.75, 3956), (1.75, 4027), (1.75, 3558), (1.75, 3550), (1.75, 3586), (1.75, 3844), (1.75, 3762), (1.75, 3577), (1.75, 3357), (1.75, 3343), (1.75, 3820), (1.75, 2990), (1.75, 3874), (1.75, 3701), (1.75, 2271), (1.75, 3575), (1.75, 3756), (1.75, 4089), (1.75, 3848), (1.75, 3424), (1.75, 3747), (1.75, 3983), (1.75, 3985), (1.75, 2663), (1.75, 4098), (1.75, 3778), (1.75, 3576), (1.75, 3728), (1.75, 4097), (1.75, 3899), (1.75, 3886), (1.75, 3740), (1.75, 3478), (1.75, 3774), (1.75, 3715), (1.75, 2561), (1.75, 4015), (1.75, 3290), (1.75, 3931), (1.75, 4085), (1.75, 3338), (1.75, 3981), (1.75, 3554), (1.75, 3917), (1.75, 2064), (1.75, 3679), (1.75, 2791), (1.75, 3761), (1.75, 3976), (1.75, 3865), (1.75, 2699), (1.75, 3651), (1.75, 3606), (1.75, 4081), (1.75, 2464), (1.75, 4056), (1.75, 3081), (1.75, 3966), (1.75, 3979), (1.75, 2722), (1.75, 4020), (1.75, 3310), (1.75, 3661), (1.75, 3868), (1.75, 3964), (1.75, 3969), (1.75, 3678), (1.75, 3692), (1.75, 3468), (1.75, 4031), (1.75, 3884), (1.75, 3817), (1.75, 4082), (1.75, 3248), (1.75, 4007), (1.75, 4044), (1.75, 2890), (1.75, 3735), (1.75, 3764), (1.75, 4080), (1.75, 3831), (1.75, 3957), (1.75, 3840), (1.75, 3918), (1.75, 3799), (1.75, 2695), (1.75, 3552), (1.75, 3428), (1.75, 3808), (1.75, 3733), (1.75, 3573), (1.75, 4086), (1.75, 3150), (1.75, 3235), (1.75, 3880), (1.75, 3897), (1.75, 3389), (1.75, 3719), (1.75, 3578), (1.75, 2458), (1.75, 3727), (1.75, 3146), (1.75, 4005), (1.75, 3434), (1.75, 4030), (1.75, 4032), (1.75, 3271), (1.75, 3895), (1.75, 2908), (1.75, 3737), (1.75, 4075), (1.75, 4016), (1.75, 3872), (1.75, 3047), (1.75, 4076), (1.75, 4100), (1.75, 2826), (1.75, 3912), (1.75, 3892), (1.75, 3960), (1.75, 3521), (1.75, 2165), (1.75, 4094), (1.75, 3676), (1.75, 3705), (1.75, 3902), (1.75, 3779), (1.75, 3673), (1.75, 3847), (1.75, 3911), (1.75, 3646), (1.75, 3846), (1.75, 3695), (1.75, 3959), (1.75, 3285), (1.75, 3755), (1.75, 3953), (1.75, 4087), (1.75, 3947), (1.75, 3734), (1.75, 3942), (1.75, 4023), (1.75, 2558), (1.75, 3527), (1.75, 2068), (1.75, 4033), (1.75, 3660), (1.75, 3838), (1.75, 3429), (1.75, 3996), (1.75, 3083), (1.75, 2795), (1.75, 3924), (1.75, 3923), (1.75, 4011), (1.75, 3280), (1.75, 3272), (1.75, 2167), (1.75, 3320), (1.75, 3724), (1.75, 4047), (1.75, 2546), (1.75, 3930), (1.75, 2256), (1.75, 3757), (1.75, 3322), (1.75, 3596), (1.75, 3928), (1.75, 4000), (1.75, 3730), (1.75, 3863), (1.75, 3419), (1.75, 3572), (1.75, 3377), (1.75, 4039), (1.75, 3818), (1.75, 4078), (1.75, 3370), (1.75, 3759), (1.75, 3910), (1.75, 3381), (1.75, 3169), (1.75, 4021), (1.75, 3668), (1.75, 2902), (1.75, 4084), (1.75, 4028), (1.75, 3916), (1.75, 4067), (1.75, 3936), (1.75, 3994), (1.75, 4029), (1.75, 2957), (1.75, 3465), (1.75, 4053), (1.75, 3717), (1.75, 3809), (1.75, 2481), (1.75, 3637), (1.75, 3830), (1.75, 4093), (1.75, 2920), (1.75, 4074), (1.75, 2823), (1.75, 3446), (1.75, 4063), (1.75, 3929), (1.75, 3908), (1.75, 3794), (1.75, 4037), (1.75, 3962), (1.75, 3402), (1.75, 3849), (1.75, 3977), (1.75, 4062), (1.75, 4025), (1.75, 3544), (1.75, 3991), (1.75, 3017), (1.75, 3438), (1.75, 3752), (1.75, 4017), (1.75, 3368), (1.75, 3641), (1.75, 3505), (1.75, 4019), (1.75, 3898), (1.75, 2827), (1.75, 3689), (1.75, 4058), (1.75, 3729), (1.75, 2452), (1.75, 2552), (1.75, 3937), (1.75, 4034), (1.75, 3312), (1.75, 3203), (1.75, 3939), (1.75, 3888), (1.75, 3327), (1.75, 2486), (1.75, 3220), (1.75, 4083), (1.75, 4024), (1.75, 3230), (1.75, 3786), (1.75, 3490), (1.75, 3951), (1.75, 3123), (1.75, 3325), (1.75, 3595), (1.75, 3804), (1.75, 3751), (1.75, 3605), (1.75, 4059), (1.75, 3187), (1.75, 2466), (1.75, 3545), (1.75, 3823), (1.75, 4041), (1.75, 3354), (1.75, 3650), (1.75, 3927), (1.75, 4048), (1.75, 3819), (1.75, 4012), (1.75, 3878), (1.75, 3201), (1.75, 3178), (1.75, 3208), (1.75, 3760), (1.75, 4045), (1.75, 4060), (1.75, 3155), (1.75, 3135), (1.75, 3987), (1.75, 3963), (1.75, 3973), (1.75, 3861), (1.75, 3287), (1.75, 3275), (1.75, 3656), (1.75, 2553), (1.75, 2566), (1.75, 4091), (1.75, 3824), (1.75, 3670), (1.75, 2941), (1.75, 2697), (1.75, 3771), (1.75, 2873), (1.75, 3921), (1.75, 3789), (1.75, 4051), (1.75, 3482), (1.75, 3858), (1.75, 3492), (1.75, 3955), (1.75, 3926), (1.75, 2718), (1.75, 4049), (1.75, 3753), (1.75, 3200), (1.75, 3971), (1.75, 2723), (1.75, 2364), (1.75, 3850), (1.75, 2924), (1.75, 4096), (1.75, 3480), (1.75, 2643), (1.75, 3379), (1.75, 3889), (1.75, 3746), (1.75, 3876), (1.75, 3990), (1.75, 3758), (1.75, 3980), (1.75, 3407), (1.75, 3944), (1.75, 4026), (1.75, 2752), (1.75, 3935), (0.5, 4073), (0.375, 4010), (0.375, 4055), (0.375, 4065), (0.375, 4102)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4003
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3741
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3940
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3922
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 39]
[Computing fitness]
[(1.75, 3863), (1.75, 2594), (1.75, 3338), (1.75, 4037), (1.75, 4173), (1.75, 4157), (1.75, 4052), (1.75, 3633), (1.75, 3230), (1.75, 3679), (1.75, 4020), (1.75, 4032), (1.75, 3544), (1.75, 4075), (1.75, 2481), (1.75, 3939), (1.75, 3916), (1.75, 4067), (1.75, 4085), (1.75, 2486), (1.75, 3874), (1.75, 3924), (1.75, 3692), (1.75, 4058), (1.75, 3429), (1.75, 3733), (1.75, 3392), (1.75, 3791), (1.75, 3724), (1.75, 3235), (1.75, 4069), (1.75, 3375), (1.75, 4176), (1.75, 3831), (1.75, 3641), (1.75, 2990), (1.75, 3808), (1.75, 3477), (1.75, 4165), (1.75, 2064), (1.75, 3740), (1.75, 4078), (1.75, 2724), (1.75, 4030), (1.75, 3729), (1.75, 4156), (1.75, 3951), (1.75, 3509), (1.75, 4190), (1.75, 3651), (1.75, 4169), (1.75, 3123), (1.75, 4083), (1.75, 2823), (1.75, 3899), (1.75, 4039), (1.75, 3291), (1.75, 4162), (1.75, 3327), (1.75, 3931), (1.75, 4159), (1.75, 3271), (1.75, 2271), (1.75, 4182), (1.75, 3303), (1.75, 3910), (1.75, 3975), (1.75, 4084), (1.75, 3490), (1.75, 4185), (1.75, 2855), (1.75, 4089), (1.75, 4148), (1.75, 4114), (1.75, 3596), (1.75, 4191), (1.75, 3727), (1.75, 3865), (1.75, 4070), (1.75, 2795), (1.75, 4016), (1.75, 3695), (1.75, 4044), (1.75, 3169), (1.75, 4170), (1.75, 4133), (1.75, 3898), (1.75, 4000), (1.75, 3312), (1.75, 4062), (1.75, 4180), (1.75, 3757), (1.75, 3575), (1.75, 4108), (1.75, 4153), (1.75, 4007), (1.75, 4008), (1.75, 3799), (1.75, 3983), (1.75, 3572), (1.75, 3468), (1.75, 4177), (1.75, 3953), (1.75, 4178), (1.75, 2695), (1.75, 2452), (1.75, 3520), (1.75, 2256), (1.75, 4034), (1.75, 4080), (1.75, 4175), (1.75, 3381), (1.75, 4112), (1.75, 3844), (1.75, 3719), (1.75, 3855), (1.75, 3829), (1.75, 4197), (1.75, 3346), (1.75, 3521), (1.75, 3846), (1.75, 3505), (1.75, 3928), (1.75, 3897), (1.75, 3565), (1.75, 3705), (1.75, 3635), (1.75, 4076), (1.75, 4093), (1.75, 2699), (1.75, 3272), (1.75, 3849), (1.75, 3377), (1.75, 3937), (1.75, 4003), (1.75, 3203), (1.75, 2902), (1.75, 3310), (1.75, 3280), (1.75, 3888), (1.75, 4074), (1.75, 4106), (1.75, 3715), (1.75, 4027), (1.75, 3389), (1.75, 3940), (1.75, 2167), (1.75, 3923), (1.75, 2368), (1.75, 3370), (1.75, 3465), (1.75, 3054), (1.75, 3786), (1.75, 4005), (1.75, 3408), (1.75, 3752), (1.75, 4028), (1.75, 4150), (1.75, 3794), (1.75, 2839), (1.75, 4151), (1.75, 3769), (1.75, 3558), (1.75, 4122), (1.75, 3895), (1.75, 4024), (1.75, 3959), (1.75, 3466), (1.75, 3911), (1.75, 4154), (1.75, 4111), (1.75, 4013), (1.75, 3586), (1.75, 3966), (1.75, 3146), (1.75, 4147), (1.75, 4021), (1.75, 3402), (1.75, 4116), (1.75, 3668), (1.75, 3872), (1.75, 4033), (1.75, 3576), (1.75, 3947), (1.75, 3779), (1.75, 3762), (1.75, 3595), (1.75, 3438), (1.75, 2464), (1.75, 2890), (1.75, 3673), (1.75, 3854), (1.75, 3424), (1.75, 3830), (1.75, 3741), (1.75, 4179), (1.75, 3838), (1.75, 3689), (1.75, 4123), (1.75, 3322), (1.75, 3960), (1.75, 3833), (1.75, 3756), (1.75, 2722), (1.75, 3809), (1.75, 2957), (1.75, 3285), (1.75, 4134), (1.75, 2923), (1.75, 4082), (1.75, 2458), (1.75, 3284), (1.75, 2558), (1.75, 3735), (1.75, 4100), (1.75, 4081), (1.75, 4115), (1.75, 3578), (1.75, 3908), (1.75, 3646), (1.75, 2908), (1.75, 3774), (1.75, 3419), (1.75, 4043), (1.75, 4036), (1.75, 3922), (1.75, 3918), (1.75, 3892), (1.75, 3880), (1.75, 4136), (1.75, 3962), (1.75, 3778), (1.75, 3527), (1.75, 3847), (1.75, 3989), (1.75, 4098), (1.75, 3942), (1.75, 3985), (1.75, 3932), (1.75, 3701), (1.75, 3728), (1.75, 3414), (1.75, 3902), (1.75, 3950), (1.75, 3964), (1.75, 3434), (1.75, 3737), (1.75, 3920), (1.75, 3936), (1.75, 3652), (1.75, 3573), (1.75, 4002), (1.75, 3325), (1.75, 3420), (1.75, 3676), (1.75, 3360), (1.75, 4103), (1.75, 3917), (1.75, 3220), (1.75, 4110), (1.75, 4164), (1.75, 3956), (1.75, 4017), (1.75, 2165), (1.75, 4087), (1.75, 4011), (1.75, 3969), (1.75, 3081), (1.75, 4094), (1.75, 4019), (1.75, 3884), (1.75, 2791), (1.75, 3159), (1.75, 4118), (1.75, 3840), (1.75, 4127), (1.75, 4171), (1.75, 3979), (1.75, 3428), (1.75, 3296), (1.75, 4129), (1.75, 3606), (1.75, 3554), (1.75, 3934), (1.75, 3734), (1.75, 3343), (1.75, 3879), (1.75, 3612), (1.75, 3357), (1.75, 3938), (1.75, 2663), (1.75, 4031), (1.75, 4200), (1.75, 4097), (1.75, 3550), (1.75, 3530), (1.75, 3817), (1.75, 3988), (1.75, 3755), (1.75, 2826), (1.75, 4172), (1.75, 2570), (1.75, 3848), (1.75, 4120), (1.75, 3320), (1.75, 3912), (1.75, 4121), (1.75, 3498), (1.75, 2546), (1.75, 4138), (1.75, 3797), (1.75, 3717), (1.75, 4131), (1.75, 4056), (1.75, 4146), (1.75, 4130), (1.75, 3721), (1.75, 3954), (1.75, 2068), (1.75, 3730), (1.75, 4119), (1.75, 4196), (1.75, 4199), (1.75, 3446), (1.75, 3761), (1.75, 4015), (1.75, 3017), (1.75, 4063), (1.75, 3083), (1.75, 4195), (1.75, 3976), (1.75, 3047), (1.75, 4143), (1.75, 2647), (1.75, 3696), (1.75, 3996), (1.75, 4053), (1.75, 4187), (1.75, 3820), (1.75, 4113), (1.75, 3776), (1.75, 3868), (1.75, 3886), (1.75, 2920), (1.75, 4086), (1.75, 3804), (1.75, 4184), (1.75, 4139), (1.75, 4188), (1.75, 3972), (1.75, 3478), (1.75, 3764), (1.75, 4047), (1.75, 4125), (1.75, 4068), (1.75, 3747), (1.75, 4023), (1.75, 4071), (1.75, 3977), (1.75, 2645), (1.75, 4161), (1.75, 4144), (1.75, 4193), (1.75, 3660), (1.75, 3150), (1.75, 2561), (1.75, 3759), (1.75, 3637), (1.75, 4109), (1.75, 4155), (1.75, 3994), (1.75, 3991), (1.75, 2827), (1.75, 3981), (1.75, 3818), (1.75, 3577), (1.75, 3552), (1.75, 4126), (1.75, 3661), (1.75, 2552), (1.75, 3463), (1.75, 4107), (1.75, 4158), (1.75, 3751), (1.75, 4025), (1.75, 2564), (1.75, 3368), (1.75, 3264), (1.75, 4029), (1.75, 3929), (1.75, 4198), (1.75, 3290), (1.75, 3919), (1.75, 3930), (1.75, 3678), (1.75, 3248), (1.75, 3957), (0.5, 4141), (0.375, 4105), (0.375, 4167)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3863
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 2594
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3338
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4037
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4173
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 40]
[Computing fitness]
[(1.75, 3779), (1.75, 3429), (1.75, 3402), (1.75, 4256), (1.75, 4211), (1.75, 2724), (1.75, 3756), (1.75, 2594), (1.75, 4008), (1.75, 2722), (1.75, 3505), (1.75, 3715), (1.75, 4147), (1.75, 3498), (1.75, 3917), (1.75, 3428), (1.75, 4255), (1.75, 4262), (1.75, 2826), (1.75, 3272), (1.75, 2890), (1.75, 3646), (1.75, 3465), (1.75, 4024), (1.75, 4246), (1.75, 3701), (1.75, 4085), (1.75, 4284), (1.75, 2923), (1.75, 3322), (1.75, 4207), (1.75, 4094), (1.75, 4297), (1.75, 4151), (1.75, 3931), (1.75, 4257), (1.75, 4289), (1.75, 3310), (1.75, 3988), (1.75, 3424), (1.75, 3799), (1.75, 4191), (1.75, 3612), (1.75, 3550), (1.75, 3284), (1.75, 4058), (1.75, 3159), (1.75, 3797), (1.75, 3966), (1.75, 4273), (1.75, 3940), (1.75, 3849), (1.75, 3586), (1.75, 3633), (1.75, 3360), (1.75, 3146), (1.75, 4003), (1.75, 4178), (1.75, 4261), (1.75, 4011), (1.75, 3325), (1.75, 4220), (1.75, 3327), (1.75, 4209), (1.75, 3717), (1.75, 3846), (1.75, 3724), (1.75, 4280), (1.75, 4076), (1.75, 3230), (1.75, 4056), (1.75, 3880), (1.75, 3521), (1.75, 3969), (1.75, 3888), (1.75, 4062), (1.75, 2957), (1.75, 2271), (1.75, 4114), (1.75, 4106), (1.75, 4263), (1.75, 4115), (1.75, 4180), (1.75, 3572), (1.75, 3953), (1.75, 4119), (1.75, 4275), (1.75, 3381), (1.75, 4228), (1.75, 4185), (1.75, 4213), (1.75, 3898), (1.75, 3774), (1.75, 4299), (1.75, 3752), (1.75, 3932), (1.75, 4221), (1.75, 4080), (1.75, 4122), (1.75, 4217), (1.75, 4000), (1.75, 4108), (1.75, 3734), (1.75, 2570), (1.75, 4268), (1.75, 4258), (1.75, 4215), (1.75, 4002), (1.75, 4298), (1.75, 3737), (1.75, 4087), (1.75, 4118), (1.75, 4098), (1.75, 4260), (1.75, 4082), (1.75, 4269), (1.75, 4238), (1.75, 3595), (1.75, 3918), (1.75, 3728), (1.75, 4138), (1.75, 3928), (1.75, 3830), (1.75, 4164), (1.75, 3554), (1.75, 3606), (1.75, 3892), (1.75, 4291), (1.75, 4244), (1.75, 2256), (1.75, 4248), (1.75, 4165), (1.75, 2855), (1.75, 4030), (1.75, 3338), (1.75, 4121), (1.75, 3573), (1.75, 4290), (1.75, 4032), (1.75, 2458), (1.75, 2695), (1.75, 3375), (1.75, 4005), (1.75, 3956), (1.75, 4245), (1.75, 4093), (1.75, 3296), (1.75, 4153), (1.75, 4203), (1.75, 4131), (1.75, 3721), (1.75, 4112), (1.75, 4037), (1.75, 4224), (1.75, 3490), (1.75, 2464), (1.75, 3960), (1.75, 4202), (1.75, 4206), (1.75, 4156), (1.75, 4236), (1.75, 3844), (1.75, 2902), (1.75, 3081), (1.75, 3235), (1.75, 3829), (1.75, 4172), (1.75, 3854), (1.75, 3922), (1.75, 4021), (1.75, 3755), (1.75, 4083), (1.75, 3596), (1.75, 3408), (1.75, 4214), (1.75, 3979), (1.75, 3220), (1.75, 3729), (1.75, 3838), (1.75, 4134), (1.75, 4111), (1.75, 3676), (1.75, 4123), (1.75, 4210), (1.75, 4127), (1.75, 4200), (1.75, 3719), (1.75, 4028), (1.75, 3377), (1.75, 3575), (1.75, 4240), (1.75, 3833), (1.75, 4179), (1.75, 4295), (1.75, 4196), (1.75, 2823), (1.75, 3705), (1.75, 2795), (1.75, 3635), (1.75, 3761), (1.75, 4052), (1.75, 4103), (1.75, 3312), (1.75, 2699), (1.75, 4287), (1.75, 4292), (1.75, 3466), (1.75, 3937), (1.75, 3985), (1.75, 3370), (1.75, 3520), (1.75, 3527), (1.75, 3558), (1.75, 3757), (1.75, 4017), (1.75, 3169), (1.75, 3668), (1.75, 3741), (1.75, 4182), (1.75, 4081), (1.75, 4232), (1.75, 4129), (1.75, 3477), (1.75, 4036), (1.75, 3291), (1.75, 2452), (1.75, 4176), (1.75, 4116), (1.75, 4282), (1.75, 4199), (1.75, 4133), (1.75, 4251), (1.75, 4175), (1.75, 3343), (1.75, 4266), (1.75, 3730), (1.75, 4265), (1.75, 3727), (1.75, 3641), (1.75, 3923), (1.75, 2663), (1.75, 3434), (1.75, 2546), (1.75, 3054), (1.75, 4170), (1.75, 4171), (1.75, 3280), (1.75, 3794), (1.75, 3762), (1.75, 3884), (1.75, 4230), (1.75, 3769), (1.75, 4033), (1.75, 4013), (1.75, 3863), (1.75, 4136), (1.75, 3879), (1.75, 4241), (1.75, 3689), (1.75, 3346), (1.75, 4130), (1.75, 4197), (1.75, 4075), (1.75, 3679), (1.75, 3975), (1.75, 3320), (1.75, 3938), (1.75, 3576), (1.75, 3735), (1.75, 4078), (1.75, 3942), (1.75, 3468), (1.75, 4074), (1.75, 4084), (1.75, 2558), (1.75, 4169), (1.75, 4243), (1.75, 2068), (1.75, 3809), (1.75, 3989), (1.75, 3951), (1.75, 3652), (1.75, 3357), (1.75, 4146), (1.75, 3740), (1.75, 4034), (1.75, 4286), (1.75, 3578), (1.75, 4239), (1.75, 2791), (1.75, 3950), (1.75, 3695), (1.75, 4027), (1.75, 4208), (1.75, 3733), (1.75, 3530), (1.75, 3786), (1.75, 4120), (1.75, 3673), (1.75, 4225), (1.75, 4039), (1.75, 4173), (1.75, 3916), (1.75, 3936), (1.75, 4279), (1.75, 4031), (1.75, 4277), (1.75, 4177), (1.75, 3899), (1.75, 3872), (1.75, 3509), (1.75, 3420), (1.75, 3910), (1.75, 2167), (1.75, 3791), (1.75, 2165), (1.75, 3897), (1.75, 3983), (1.75, 3438), (1.75, 2839), (1.75, 2486), (1.75, 4285), (1.75, 4070), (1.75, 4222), (1.75, 3947), (1.75, 3285), (1.75, 3847), (1.75, 3692), (1.75, 3939), (1.75, 3303), (1.75, 4150), (1.75, 3778), (1.75, 3895), (1.75, 3954), (1.75, 3414), (1.75, 2481), (1.75, 3855), (1.75, 4227), (1.75, 4069), (1.75, 4097), (1.75, 3419), (1.75, 3964), (1.75, 2908), (1.75, 4043), (1.75, 3934), (1.75, 2368), (1.75, 3123), (1.75, 2990), (1.75, 4100), (1.75, 4250), (1.75, 3908), (1.75, 3831), (1.75, 3271), (1.75, 3865), (1.75, 4154), (1.75, 3565), (1.75, 4259), (1.75, 3392), (1.75, 3920), (1.75, 4007), (1.75, 4044), (1.75, 4249), (1.75, 4157), (1.75, 4159), (1.75, 3959), (1.75, 4019), (1.75, 3446), (1.75, 3840), (1.75, 3808), (1.75, 4272), (1.75, 4205), (1.75, 3389), (1.75, 4148), (1.75, 3651), (1.75, 4110), (1.75, 3544), (1.75, 3874), (1.75, 4016), (1.75, 3924), (1.75, 3817), (1.75, 3962), (1.75, 4190), (1.75, 4254), (1.75, 4162), (1.75, 3203), (1.75, 3902), (1.75, 3848), (1.75, 2064), (1.75, 4281), (1.75, 4089), (1.75, 3912), (1.75, 4020), (1.75, 4067), (1.75, 4234), (1.75, 4276), (1.75, 3911), (0.5, 4271), (0.5, 4253), (0.375, 4294), (0.375, 4219)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 3779
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3429
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3402
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4256
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 41]
[Computing fitness]
[(1.75, 4289), (1.75, 3558), (1.75, 3923), (1.75, 4385), (1.75, 3918), (1.75, 3947), (1.75, 3370), (1.75, 4024), (1.75, 3829), (1.75, 4313), (1.75, 3272), (1.75, 3466), (1.75, 3646), (1.75, 2839), (1.75, 2699), (1.75, 4058), (1.75, 4203), (1.75, 4381), (1.75, 4403), (1.75, 4315), (1.75, 4085), (1.75, 4116), (1.75, 3799), (1.75, 3521), (1.75, 4405), (1.75, 4220), (1.75, 4388), (1.75, 4200), (1.75, 4292), (1.75, 4279), (1.75, 4078), (1.75, 2823), (1.75, 4197), (1.75, 4196), (1.75, 2722), (1.75, 4326), (1.75, 4263), (1.75, 4087), (1.75, 4340), (1.75, 4037), (1.75, 3863), (1.75, 3730), (1.75, 3429), (1.75, 4021), (1.75, 4402), (1.75, 4083), (1.75, 3360), (1.75, 4138), (1.75, 4277), (1.75, 4262), (1.75, 4130), (1.75, 3169), (1.75, 4369), (1.75, 3969), (1.75, 3733), (1.75, 4401), (1.75, 4115), (1.75, 4310), (1.75, 4030), (1.75, 2464), (1.75, 3550), (1.75, 4266), (1.75, 4070), (1.75, 4123), (1.75, 2167), (1.75, 4182), (1.75, 3872), (1.75, 3979), (1.75, 2855), (1.75, 3715), (1.75, 4151), (1.75, 3809), (1.75, 3717), (1.75, 3424), (1.75, 4206), (1.75, 4273), (1.75, 3897), (1.75, 4297), (1.75, 4074), (1.75, 3938), (1.75, 4400), (1.75, 3490), (1.75, 3375), (1.75, 3898), (1.75, 2663), (1.75, 4305), (1.75, 4365), (1.75, 3381), (1.75, 4322), (1.75, 4013), (1.75, 4178), (1.75, 4156), (1.75, 3701), (1.75, 4325), (1.75, 4321), (1.75, 4236), (1.75, 4377), (1.75, 4260), (1.75, 3735), (1.75, 4291), (1.75, 4372), (1.75, 3769), (1.75, 3724), (1.75, 4211), (1.75, 4275), (1.75, 3727), (1.75, 4349), (1.75, 3527), (1.75, 4179), (1.75, 4118), (1.75, 4108), (1.75, 3728), (1.75, 4367), (1.75, 3884), (1.75, 4374), (1.75, 4371), (1.75, 4176), (1.75, 3291), (1.75, 4222), (1.75, 4316), (1.75, 4062), (1.75, 4343), (1.75, 4295), (1.75, 4081), (1.75, 3402), (1.75, 2546), (1.75, 4177), (1.75, 3791), (1.75, 4084), (1.75, 4379), (1.75, 3498), (1.75, 2902), (1.75, 4000), (1.75, 3575), (1.75, 3509), (1.75, 4136), (1.75, 2795), (1.75, 4120), (1.75, 4002), (1.75, 3595), (1.75, 4344), (1.75, 3679), (1.75, 4304), (1.75, 4290), (1.75, 4169), (1.75, 4285), (1.75, 3779), (1.75, 2271), (1.75, 3695), (1.75, 4121), (1.75, 2826), (1.75, 4094), (1.75, 2256), (1.75, 4241), (1.75, 4003), (1.75, 3434), (1.75, 3892), (1.75, 3879), (1.75, 3956), (1.75, 4360), (1.75, 3641), (1.75, 4397), (1.75, 4134), (1.75, 4307), (1.75, 4265), (1.75, 3757), (1.75, 3989), (1.75, 4320), (1.75, 4268), (1.75, 3741), (1.75, 4175), (1.75, 4251), (1.75, 3159), (1.75, 3554), (1.75, 4257), (1.75, 3936), (1.75, 3346), (1.75, 4246), (1.75, 4034), (1.75, 4338), (1.75, 4300), (1.75, 3689), (1.75, 4027), (1.75, 2452), (1.75, 3916), (1.75, 3983), (1.75, 3917), (1.75, 4302), (1.75, 2695), (1.75, 4380), (1.75, 4202), (1.75, 4333), (1.75, 3322), (1.75, 4353), (1.75, 2890), (1.75, 4171), (1.75, 4172), (1.75, 3953), (1.75, 4080), (1.75, 3849), (1.75, 4129), (1.75, 3756), (1.75, 4031), (1.75, 4119), (1.75, 4358), (1.75, 3530), (1.75, 3854), (1.75, 3880), (1.75, 3676), (1.75, 4282), (1.75, 4011), (1.75, 4017), (1.75, 4240), (1.75, 4255), (1.75, 4106), (1.75, 4170), (1.75, 4180), (1.75, 4299), (1.75, 3280), (1.75, 3734), (1.75, 4347), (1.75, 4232), (1.75, 4147), (1.75, 4210), (1.75, 3081), (1.75, 4306), (1.75, 3950), (1.75, 4345), (1.75, 4391), (1.75, 4185), (1.75, 3960), (1.75, 4230), (1.75, 3931), (1.75, 3761), (1.75, 4389), (1.75, 4127), (1.75, 4224), (1.75, 4217), (1.75, 3220), (1.75, 4243), (1.75, 3928), (1.75, 3235), (1.75, 4309), (1.75, 3573), (1.75, 3465), (1.75, 2486), (1.75, 4112), (1.75, 3762), (1.75, 3377), (1.75, 3786), (1.75, 3830), (1.75, 4056), (1.75, 4258), (1.75, 4248), (1.75, 3420), (1.75, 4335), (1.75, 4164), (1.75, 4245), (1.75, 4382), (1.75, 4330), (1.75, 4359), (1.75, 4076), (1.75, 4298), (1.75, 4284), (1.75, 3899), (1.75, 4133), (1.75, 3586), (1.75, 4387), (1.75, 3230), (1.75, 4342), (1.75, 4098), (1.75, 3737), (1.75, 4215), (1.75, 4082), (1.75, 3719), (1.75, 4363), (1.75, 3652), (1.75, 3612), (1.75, 3988), (1.75, 4199), (1.75, 4261), (1.75, 3633), (1.75, 4228), (1.75, 4214), (1.75, 2594), (1.75, 3794), (1.75, 4209), (1.75, 3320), (1.75, 3596), (1.75, 3576), (1.75, 3296), (1.75, 3705), (1.75, 4280), (1.75, 3752), (1.75, 4287), (1.75, 3755), (1.75, 2957), (1.75, 3606), (1.75, 4173), (1.75, 4375), (1.75, 4122), (1.75, 3572), (1.75, 4032), (1.75, 4075), (1.75, 3325), (1.75, 4221), (1.75, 3937), (1.75, 4398), (1.75, 4052), (1.75, 4208), (1.75, 4238), (1.75, 2570), (1.75, 4225), (1.75, 4033), (1.75, 4370), (1.75, 3975), (1.75, 3844), (1.75, 3797), (1.75, 3408), (1.75, 3477), (1.75, 3966), (1.75, 3357), (1.75, 4008), (1.75, 3054), (1.75, 3668), (1.75, 3505), (1.75, 3932), (1.75, 3985), (1.75, 3838), (1.75, 3312), (1.75, 4244), (1.75, 4146), (1.75, 3520), (1.75, 4131), (1.75, 4213), (1.75, 4165), (1.75, 3428), (1.75, 2923), (1.75, 3284), (1.75, 3468), (1.75, 3740), (1.75, 2165), (1.75, 4239), (1.75, 4111), (1.75, 4341), (1.75, 3635), (1.75, 3888), (1.75, 4324), (1.75, 4103), (1.75, 4256), (1.75, 4269), (1.75, 3951), (1.75, 3146), (1.75, 3721), (1.75, 2791), (1.75, 3833), (1.75, 4318), (1.75, 4191), (1.75, 2458), (1.75, 3673), (1.75, 4207), (1.75, 3343), (1.75, 2068), (1.75, 4028), (1.75, 4362), (1.75, 3327), (1.75, 3940), (1.75, 3310), (1.75, 4303), (1.75, 4393), (1.75, 4350), (1.75, 3729), (1.75, 3846), (1.75, 3438), (1.75, 3578), (1.75, 3942), (1.75, 3774), (1.75, 3922), (1.75, 4329), (1.75, 4036), (1.75, 4093), (1.75, 3338), (1.75, 3910), (1.75, 4039), (1.75, 2558), (1.75, 4114), (1.75, 4308), (1.75, 4153), (1.75, 2724), (1.75, 4312), (1.75, 4286), (1.75, 4337), (1.75, 4005), (0.5, 4384), (0.5, 4352), (0.5, 4332), (0.375, 4357), (0.375, 4395), (0.375, 4355), (0.375, 4328)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4289
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3558
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3923
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4385
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3918
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 42]
[Computing fitness]
[(1.75, 4375), (1.75, 4196), (1.75, 4454), (1.75, 4210), (1.75, 3947), (1.75, 4451), (1.75, 4363), (1.75, 2839), (1.75, 3586), (1.75, 4429), (1.75, 3554), (1.75, 4185), (1.75, 3558), (1.75, 3879), (1.75, 4178), (1.75, 4410), (1.75, 4474), (1.75, 3854), (1.75, 3320), (1.75, 4486), (1.75, 3717), (1.75, 4031), (1.75, 4503), (1.75, 3762), (1.75, 3741), (1.75, 3668), (1.75, 4483), (1.75, 4320), (1.75, 3325), (1.75, 4052), (1.75, 3490), (1.75, 3761), (1.75, 3769), (1.75, 4427), (1.75, 4173), (1.75, 4170), (1.75, 4151), (1.75, 4206), (1.75, 4287), (1.75, 3923), (1.75, 2957), (1.75, 4241), (1.75, 4295), (1.75, 4397), (1.75, 3679), (1.75, 3054), (1.75, 4467), (1.75, 3979), (1.75, 4470), (1.75, 4416), (1.75, 4342), (1.75, 3530), (1.75, 3752), (1.75, 4459), (1.75, 3509), (1.75, 3377), (1.75, 3830), (1.75, 4313), (1.75, 2855), (1.75, 4381), (1.75, 3779), (1.75, 4230), (1.75, 4024), (1.75, 3357), (1.75, 4133), (1.75, 4408), (1.75, 4485), (1.75, 3950), (1.75, 3652), (1.75, 4461), (1.75, 4147), (1.75, 3737), (1.75, 4380), (1.75, 4484), (1.75, 4243), (1.75, 3794), (1.75, 4382), (1.75, 4084), (1.75, 3928), (1.75, 4118), (1.75, 4403), (1.75, 4232), (1.75, 3235), (1.75, 3809), (1.75, 3575), (1.75, 3756), (1.75, 4094), (1.75, 2823), (1.75, 4315), (1.75, 4208), (1.75, 4215), (1.75, 3689), (1.75, 4371), (1.75, 3360), (1.75, 3322), (1.75, 4473), (1.75, 3728), (1.75, 4238), (1.75, 3477), (1.75, 3953), (1.75, 4076), (1.75, 4423), (1.75, 4322), (1.75, 4353), (1.75, 4466), (1.75, 4106), (1.75, 3576), (1.75, 3988), (1.75, 4248), (1.75, 4220), (1.75, 4034), (1.75, 3498), (1.75, 4495), (1.75, 3705), (1.75, 4136), (1.75, 4300), (1.75, 4400), (1.75, 4330), (1.75, 3956), (1.75, 4425), (1.75, 3829), (1.75, 4169), (1.75, 4217), (1.75, 4481), (1.75, 3159), (1.75, 3346), (1.75, 4472), (1.75, 4087), (1.75, 4179), (1.75, 4138), (1.75, 4120), (1.75, 4299), (1.75, 4032), (1.75, 3916), (1.75, 4260), (1.75, 3918), (1.75, 4446), (1.75, 4251), (1.75, 4081), (1.75, 3898), (1.75, 4008), (1.75, 3641), (1.75, 3983), (1.75, 4433), (1.75, 4175), (1.75, 4490), (1.75, 4502), (1.75, 4333), (1.75, 4471), (1.75, 4156), (1.75, 2902), (1.75, 4321), (1.75, 4275), (1.75, 4262), (1.75, 2826), (1.75, 4309), (1.75, 3527), (1.75, 2464), (1.75, 4306), (1.75, 3791), (1.75, 3936), (1.75, 4360), (1.75, 4078), (1.75, 4494), (1.75, 4129), (1.75, 4289), (1.75, 3550), (1.75, 4370), (1.75, 4222), (1.75, 4435), (1.75, 3646), (1.75, 3799), (1.75, 4011), (1.75, 4398), (1.75, 4112), (1.75, 4290), (1.75, 3884), (1.75, 3730), (1.75, 4058), (1.75, 3420), (1.75, 4479), (1.75, 4489), (1.75, 4082), (1.75, 4448), (1.75, 4123), (1.75, 4302), (1.75, 4240), (1.75, 4246), (1.75, 4424), (1.75, 4358), (1.75, 3291), (1.75, 4379), (1.75, 4172), (1.75, 4388), (1.75, 3724), (1.75, 4478), (1.75, 2271), (1.75, 3375), (1.75, 2486), (1.75, 4349), (1.75, 4280), (1.75, 3370), (1.75, 4340), (1.75, 3521), (1.75, 3466), (1.75, 4428), (1.75, 4305), (1.75, 2722), (1.75, 4415), (1.75, 3715), (1.75, 4441), (1.75, 4347), (1.75, 2452), (1.75, 4285), (1.75, 4279), (1.75, 3755), (1.75, 3595), (1.75, 3727), (1.75, 3272), (1.75, 4268), (1.75, 2695), (1.75, 3719), (1.75, 4389), (1.75, 4221), (1.75, 4369), (1.75, 3917), (1.75, 3676), (1.75, 3844), (1.75, 3880), (1.75, 4214), (1.75, 3872), (1.75, 4291), (1.75, 4292), (1.75, 4273), (1.75, 4284), (1.75, 4343), (1.75, 2167), (1.75, 4316), (1.75, 4344), (1.75, 4257), (1.75, 4182), (1.75, 4310), (1.75, 4277), (1.75, 2256), (1.75, 4401), (1.75, 3381), (1.75, 4202), (1.75, 4266), (1.75, 4070), (1.75, 4442), (1.75, 3695), (1.75, 4367), (1.75, 4409), (1.75, 4236), (1.75, 4013), (1.75, 2663), (1.75, 4458), (1.75, 2699), (1.75, 4255), (1.75, 4002), (1.75, 3786), (1.75, 4098), (1.75, 4297), (1.75, 4307), (1.75, 4021), (1.75, 4407), (1.75, 4421), (1.75, 4377), (1.75, 3606), (1.75, 3937), (1.75, 4164), (1.75, 4434), (1.75, 4228), (1.75, 2890), (1.75, 4326), (1.75, 4282), (1.75, 4411), (1.75, 4171), (1.75, 3573), (1.75, 4465), (1.75, 4359), (1.75, 4365), (1.75, 4298), (1.75, 4492), (1.75, 3633), (1.75, 4003), (1.75, 4450), (1.75, 4134), (1.75, 4200), (1.75, 4447), (1.75, 4261), (1.75, 4177), (1.75, 3280), (1.75, 4265), (1.75, 3757), (1.75, 4030), (1.75, 4075), (1.75, 3966), (1.75, 4491), (1.75, 3735), (1.75, 2570), (1.75, 4457), (1.75, 3969), (1.75, 3596), (1.75, 4406), (1.75, 4062), (1.75, 3408), (1.75, 4263), (1.75, 4325), (1.75, 3797), (1.75, 3863), (1.75, 4130), (1.75, 4453), (1.75, 2795), (1.75, 4211), (1.75, 4037), (1.75, 4374), (1.75, 4463), (1.75, 3975), (1.75, 4338), (1.75, 3402), (1.75, 4000), (1.75, 4414), (1.75, 3434), (1.75, 3572), (1.75, 4122), (1.75, 4372), (1.75, 3849), (1.75, 4335), (1.75, 4387), (1.75, 3429), (1.75, 4033), (1.75, 4469), (1.75, 4304), (1.75, 3938), (1.75, 3220), (1.75, 4108), (1.75, 4402), (1.75, 3931), (1.75, 3169), (1.75, 4085), (1.75, 2546), (1.75, 4119), (1.75, 3899), (1.75, 3424), (1.75, 3612), (1.75, 3734), (1.75, 4197), (1.75, 4074), (1.75, 4224), (1.75, 4439), (1.75, 4258), (1.75, 3296), (1.75, 4199), (1.75, 3230), (1.75, 4391), (1.75, 4418), (1.75, 4440), (1.75, 4420), (1.75, 4245), (1.75, 4345), (1.75, 4127), (1.75, 4116), (1.75, 4115), (1.75, 3465), (1.75, 3989), (1.75, 4017), (1.75, 4176), (1.75, 3897), (1.75, 3701), (1.75, 4027), (1.75, 4203), (1.75, 4413), (1.75, 4496), (1.75, 4431), (1.75, 4438), (1.75, 4225), (1.75, 3960), (1.75, 4083), (1.75, 4426), (1.75, 4385), (1.75, 4445), (1.75, 3892), (1.75, 4487), (1.75, 4500), (1.75, 4455), (1.75, 4180), (1.75, 3081), (1.75, 2594), (1.75, 4080), (1.75, 4405), (1.75, 3733), (1.75, 4209), (1.75, 4482), (1.75, 4121), (1.75, 4056), (1.75, 4437), (0.5, 4476), (0.375, 4444), (0.375, 4498)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4375
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4196
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4454
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4210
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3947
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 43]
[Computing fitness]
[(1.75, 4136), (1.75, 4552), (1.75, 4538), (1.75, 4130), (1.75, 4290), (1.75, 4398), (1.75, 2957), (1.75, 4451), (1.75, 4397), (1.75, 3573), (1.75, 4214), (1.75, 3884), (1.75, 3979), (1.75, 4442), (1.75, 4374), (1.75, 4528), (1.75, 4172), (1.75, 4519), (1.75, 4310), (1.75, 4177), (1.75, 4210), (1.75, 4565), (1.75, 4502), (1.75, 4358), (1.75, 3530), (1.75, 4246), (1.75, 4129), (1.75, 4458), (1.75, 4236), (1.75, 4529), (1.75, 3280), (1.75, 3854), (1.75, 4087), (1.75, 4179), (1.75, 2167), (1.75, 4251), (1.75, 4575), (1.75, 4425), (1.75, 4112), (1.75, 3928), (1.75, 4182), (1.75, 4578), (1.75, 4349), (1.75, 4261), (1.75, 4302), (1.75, 4123), (1.75, 4330), (1.75, 4211), (1.75, 4604), (1.75, 4360), (1.75, 4070), (1.75, 2699), (1.75, 4075), (1.75, 4221), (1.75, 4353), (1.75, 4415), (1.75, 4569), (1.75, 4389), (1.75, 4471), (1.75, 4257), (1.75, 4492), (1.75, 3381), (1.75, 3966), (1.75, 4416), (1.75, 4359), (1.75, 4481), (1.75, 4031), (1.75, 3575), (1.75, 3880), (1.75, 4533), (1.75, 4275), (1.75, 4521), (1.75, 4546), (1.75, 4518), (1.75, 4504), (1.75, 4545), (1.75, 4170), (1.75, 3719), (1.75, 4581), (1.75, 4571), (1.75, 4588), (1.75, 4461), (1.75, 4503), (1.75, 3668), (1.75, 3679), (1.75, 4523), (1.75, 3586), (1.75, 4206), (1.75, 3755), (1.75, 4266), (1.75, 4601), (1.75, 4435), (1.75, 4401), (1.75, 4133), (1.75, 3809), (1.75, 4011), (1.75, 4490), (1.75, 4344), (1.75, 4333), (1.75, 3918), (1.75, 3377), (1.75, 4013), (1.75, 4106), (1.75, 4406), (1.75, 3950), (1.75, 3916), (1.75, 4082), (1.75, 4423), (1.75, 4147), (1.75, 4285), (1.75, 4527), (1.75, 2663), (1.75, 4098), (1.75, 4428), (1.75, 4081), (1.75, 3572), (1.75, 4433), (1.75, 3863), (1.75, 4576), (1.75, 4582), (1.75, 4473), (1.75, 4484), (1.75, 3799), (1.75, 4486), (1.75, 4156), (1.75, 3917), (1.75, 4557), (1.75, 4561), (1.75, 4367), (1.75, 2695), (1.75, 4553), (1.75, 3737), (1.75, 3969), (1.75, 4248), (1.75, 4300), (1.75, 3558), (1.75, 4200), (1.75, 3757), (1.75, 4410), (1.75, 4447), (1.75, 4470), (1.75, 4309), (1.75, 4564), (1.75, 4587), (1.75, 3923), (1.75, 2464), (1.75, 4446), (1.75, 4489), (1.75, 4322), (1.75, 3794), (1.75, 4478), (1.75, 2826), (1.75, 3791), (1.75, 4526), (1.75, 2570), (1.75, 3879), (1.75, 4178), (1.75, 3054), (1.75, 3595), (1.75, 4196), (1.75, 4037), (1.75, 3988), (1.75, 4424), (1.75, 4076), (1.75, 4532), (1.75, 4414), (1.75, 3159), (1.75, 4021), (1.75, 3730), (1.75, 4365), (1.75, 4562), (1.75, 3769), (1.75, 3521), (1.75, 2890), (1.75, 4572), (1.75, 2795), (1.75, 4369), (1.75, 4263), (1.75, 4586), (1.75, 4094), (1.75, 4379), (1.75, 4520), (1.75, 4380), (1.75, 4491), (1.75, 3898), (1.75, 2823), (1.75, 4284), (1.75, 4298), (1.75, 4277), (1.75, 4580), (1.75, 4273), (1.75, 4505), (1.75, 2486), (1.75, 4595), (1.75, 3727), (1.75, 4120), (1.75, 4024), (1.75, 4326), (1.75, 4560), (1.75, 4295), (1.75, 3786), (1.75, 3325), (1.75, 4465), (1.75, 4516), (1.75, 4305), (1.75, 4164), (1.75, 3320), (1.75, 4409), (1.75, 4467), (1.75, 3705), (1.75, 4566), (1.75, 3956), (1.75, 4515), (1.75, 3872), (1.75, 3983), (1.75, 4542), (1.75, 4268), (1.75, 2902), (1.75, 4008), (1.75, 4592), (1.75, 4494), (1.75, 4454), (1.75, 2271), (1.75, 4062), (1.75, 4407), (1.75, 3235), (1.75, 4474), (1.75, 4084), (1.75, 4506), (1.75, 3689), (1.75, 3844), (1.75, 3550), (1.75, 4134), (1.75, 4000), (1.75, 4175), (1.75, 3761), (1.75, 4230), (1.75, 3357), (1.75, 4551), (1.75, 4434), (1.75, 4151), (1.75, 2256), (1.75, 3346), (1.75, 4525), (1.75, 4549), (1.75, 4382), (1.75, 4509), (1.75, 4171), (1.75, 3490), (1.75, 4241), (1.75, 3375), (1.75, 4427), (1.75, 4450), (1.75, 3402), (1.75, 4222), (1.75, 4220), (1.75, 4282), (1.75, 4479), (1.75, 3735), (1.75, 4228), (1.75, 4255), (1.75, 3652), (1.75, 3728), (1.75, 4003), (1.75, 4510), (1.75, 4548), (1.75, 4307), (1.75, 4320), (1.75, 4289), (1.75, 4232), (1.75, 3830), (1.75, 3633), (1.75, 3370), (1.75, 3676), (1.75, 2855), (1.75, 4138), (1.75, 4173), (1.75, 4118), (1.75, 4032), (1.75, 4463), (1.75, 4554), (1.75, 3466), (1.75, 4262), (1.75, 3937), (1.75, 4306), (1.75, 3715), (1.75, 3695), (1.75, 4260), (1.75, 4321), (1.75, 4297), (1.75, 3953), (1.75, 4343), (1.75, 4202), (1.75, 4550), (1.75, 4325), (1.75, 4594), (1.75, 4603), (1.75, 4589), (1.75, 2722), (1.75, 4388), (1.75, 4169), (1.75, 3762), (1.75, 4574), (1.75, 4265), (1.75, 4315), (1.75, 4466), (1.75, 2839), (1.75, 4243), (1.75, 4495), (1.75, 4299), (1.75, 4291), (1.75, 4240), (1.75, 3408), (1.75, 4279), (1.75, 4347), (1.75, 4591), (1.75, 3829), (1.75, 4342), (1.75, 4287), (1.75, 3272), (1.75, 4215), (1.75, 4483), (1.75, 4292), (1.75, 4370), (1.75, 3779), (1.75, 3756), (1.75, 4511), (1.75, 3646), (1.75, 3717), (1.75, 3322), (1.75, 4217), (1.75, 4429), (1.75, 4034), (1.75, 3752), (1.75, 3741), (1.75, 4313), (1.75, 3554), (1.75, 3498), (1.75, 4338), (1.75, 3434), (1.75, 4371), (1.75, 4316), (1.75, 3596), (1.75, 3975), (1.75, 4408), (1.75, 4052), (1.75, 3724), (1.75, 3947), (1.75, 3527), (1.75, 3641), (1.75, 4596), (1.75, 4570), (1.75, 4400), (1.75, 3509), (1.75, 4531), (1.75, 4541), (1.75, 3477), (1.75, 4453), (1.75, 2452), (1.75, 4535), (1.75, 4002), (1.75, 3291), (1.75, 4030), (1.75, 3936), (1.75, 4441), (1.75, 3576), (1.75, 4381), (1.75, 4421), (1.75, 4457), (1.75, 3797), (1.75, 4058), (1.75, 4340), (1.75, 4459), (1.75, 3420), (1.75, 4078), (1.75, 4485), (1.75, 3360), (1.75, 4280), (1.75, 4448), (1.75, 4403), (1.75, 4543), (1.75, 4568), (1.75, 3606), (1.75, 4377), (1.75, 4559), (1.75, 4238), (1.75, 4411), (1.75, 4472), (1.75, 4185), (1.75, 4537), (1.75, 4375), (1.75, 4208), (1.75, 4363), (0.5, 4513), (0.5, 4598), (0.5, 4508), (0.375, 4600), (0.375, 4556), (0.375, 4584), (0.375, 4540)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4136
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4552
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4538
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4130
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4290
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 44]
[Computing fitness]
[(1.75, 4136), (1.75, 4299), (1.75, 4369), (1.75, 4170), (1.75, 4275), (1.75, 4685), (1.75, 4279), (1.75, 4112), (1.75, 4603), (1.75, 4628), (1.75, 4631), (1.75, 4595), (1.75, 4255), (1.75, 4552), (1.75, 4241), (1.75, 2722), (1.75, 2486), (1.75, 4548), (1.75, 4084), (1.75, 3325), (1.75, 4581), (1.75, 3695), (1.75, 4000), (1.75, 3786), (1.75, 4609), (1.75, 4433), (1.75, 4510), (1.75, 3809), (1.75, 4118), (1.75, 4333), (1.75, 4588), (1.75, 4451), (1.75, 4220), (1.75, 4694), (1.75, 4673), (1.75, 3918), (1.75, 2826), (1.75, 4287), (1.75, 4425), (1.75, 4406), (1.75, 4214), (1.75, 2699), (1.75, 3917), (1.75, 4138), (1.75, 3844), (1.75, 4684), (1.75, 4699), (1.75, 4277), (1.75, 2795), (1.75, 4538), (1.75, 3652), (1.75, 4545), (1.75, 4265), (1.75, 3679), (1.75, 4442), (1.75, 4614), (1.75, 4349), (1.75, 4632), (1.75, 3719), (1.75, 4221), (1.75, 3950), (1.75, 4410), (1.75, 3730), (1.75, 4604), (1.75, 4492), (1.75, 4134), (1.75, 4172), (1.75, 4526), (1.75, 4169), (1.75, 4525), (1.75, 4494), (1.75, 4330), (1.75, 4553), (1.75, 4257), (1.75, 3737), (1.75, 3689), (1.75, 4268), (1.75, 3923), (1.75, 3054), (1.75, 4641), (1.75, 4320), (1.75, 4401), (1.75, 4550), (1.75, 4228), (1.75, 4398), (1.75, 3159), (1.75, 3755), (1.75, 3761), (1.75, 4571), (1.75, 4659), (1.75, 4106), (1.75, 3779), (1.75, 4360), (1.75, 2823), (1.75, 4504), (1.75, 4262), (1.75, 3956), (1.75, 4467), (1.75, 4601), (1.75, 4611), (1.75, 3928), (1.75, 2695), (1.75, 3280), (1.75, 4123), (1.75, 4465), (1.75, 4182), (1.75, 4062), (1.75, 4681), (1.75, 4489), (1.75, 2890), (1.75, 4580), (1.75, 4620), (1.75, 4474), (1.75, 4428), (1.75, 3969), (1.75, 3381), (1.75, 4645), (1.75, 4587), (1.75, 4179), (1.75, 4246), (1.75, 3791), (1.75, 4082), (1.75, 3983), (1.75, 3530), (1.75, 4011), (1.75, 4672), (1.75, 4297), (1.75, 4307), (1.75, 3953), (1.75, 4690), (1.75, 3490), (1.75, 4031), (1.75, 4696), (1.75, 3575), (1.75, 4211), (1.75, 4133), (1.75, 4506), (1.75, 4669), (1.75, 4644), (1.75, 4523), (1.75, 3705), (1.75, 4623), (1.75, 4024), (1.75, 4215), (1.75, 3408), (1.75, 4380), (1.75, 3633), (1.75, 4697), (1.75, 4625), (1.75, 2855), (1.75, 4532), (1.75, 4236), (1.75, 2663), (1.75, 4120), (1.75, 4483), (1.75, 4454), (1.75, 4479), (1.75, 4292), (1.75, 4321), (1.75, 4232), (1.75, 4171), (1.75, 4635), (1.75, 4177), (1.75, 4634), (1.75, 3550), (1.75, 4621), (1.75, 3676), (1.75, 3916), (1.75, 4557), (1.75, 4594), (1.75, 4379), (1.75, 2167), (1.75, 4251), (1.75, 4175), (1.75, 4515), (1.75, 4087), (1.75, 4471), (1.75, 4491), (1.75, 3762), (1.75, 3829), (1.75, 4130), (1.75, 4575), (1.75, 4302), (1.75, 4382), (1.75, 4622), (1.75, 4549), (1.75, 4151), (1.75, 3377), (1.75, 4367), (1.75, 4081), (1.75, 4290), (1.75, 4648), (1.75, 3735), (1.75, 4682), (1.75, 4463), (1.75, 4322), (1.75, 4617), (1.75, 4032), (1.75, 4248), (1.75, 4315), (1.75, 4516), (1.75, 4486), (1.75, 4564), (1.75, 4450), (1.75, 4638), (1.75, 4416), (1.75, 4505), (1.75, 4202), (1.75, 4640), (1.75, 4678), (1.75, 4546), (1.75, 4671), (1.75, 4427), (1.75, 3898), (1.75, 4325), (1.75, 4075), (1.75, 3558), (1.75, 3728), (1.75, 4273), (1.75, 4470), (1.75, 4554), (1.75, 3346), (1.75, 4261), (1.75, 4435), (1.75, 4630), (1.75, 4655), (1.75, 4569), (1.75, 4178), (1.75, 2570), (1.75, 4309), (1.75, 4528), (1.75, 4572), (1.75, 4365), (1.75, 3573), (1.75, 4414), (1.75, 3879), (1.75, 4693), (1.75, 4520), (1.75, 4675), (1.75, 4222), (1.75, 4291), (1.75, 4466), (1.75, 3966), (1.75, 4306), (1.75, 3272), (1.75, 3884), (1.75, 4562), (1.75, 4615), (1.75, 4591), (1.75, 4008), (1.75, 4434), (1.75, 4013), (1.75, 3572), (1.75, 4353), (1.75, 4677), (1.75, 4388), (1.75, 4607), (1.75, 4407), (1.75, 3979), (1.75, 4610), (1.75, 4582), (1.75, 4502), (1.75, 3715), (1.75, 4657), (1.75, 3595), (1.75, 4527), (1.75, 4196), (1.75, 4263), (1.75, 2839), (1.75, 4636), (1.75, 4173), (1.75, 4695), (1.75, 4592), (1.75, 4692), (1.75, 2957), (1.75, 4342), (1.75, 4637), (1.75, 4484), (1.75, 4285), (1.75, 4521), (1.75, 3872), (1.75, 4605), (1.75, 4389), (1.75, 4243), (1.75, 4266), (1.75, 3402), (1.75, 4343), (1.75, 4586), (1.75, 3880), (1.75, 4423), (1.75, 3375), (1.75, 4230), (1.75, 4629), (1.75, 4576), (1.75, 4647), (1.75, 4660), (1.75, 3521), (1.75, 4344), (1.75, 4651), (1.75, 2256), (1.75, 3794), (1.75, 4578), (1.75, 4679), (1.75, 4282), (1.75, 4687), (1.75, 4653), (1.75, 3988), (1.75, 4608), (1.75, 2271), (1.75, 4374), (1.75, 4481), (1.75, 3937), (1.75, 3370), (1.75, 3466), (1.75, 4094), (1.75, 3668), (1.75, 4683), (1.75, 3757), (1.75, 4461), (1.75, 4164), (1.75, 3863), (1.75, 3235), (1.75, 4518), (1.75, 4359), (1.75, 4666), (1.75, 4551), (1.75, 3357), (1.75, 4618), (1.75, 4295), (1.75, 4305), (1.75, 3586), (1.75, 4200), (1.75, 4624), (1.75, 4310), (1.75, 4021), (1.75, 4458), (1.75, 4688), (1.75, 4589), (1.75, 4519), (1.75, 4003), (1.75, 4574), (1.75, 4566), (1.75, 4156), (1.75, 2902), (1.75, 4612), (1.75, 4473), (1.75, 4565), (1.75, 4533), (1.75, 4415), (1.75, 4347), (1.75, 4561), (1.75, 4643), (1.75, 4698), (1.75, 4560), (1.75, 4210), (1.75, 4680), (1.75, 4447), (1.75, 4037), (1.75, 4076), (1.75, 4613), (1.75, 4503), (1.75, 4300), (1.75, 4424), (1.75, 4147), (1.75, 4240), (1.75, 3320), (1.75, 4358), (1.75, 3727), (1.75, 4326), (1.75, 4260), (1.75, 4446), (1.75, 4509), (1.75, 4070), (1.75, 4490), (1.75, 4495), (1.75, 4397), (1.75, 4676), (1.75, 4409), (1.75, 4626), (1.75, 3799), (1.75, 4370), (1.75, 4289), (1.75, 3854), (1.75, 4478), (1.75, 4663), (1.75, 4627), (1.75, 4206), (1.75, 4529), (1.75, 4284), (1.75, 2464), (1.75, 4298), (1.75, 4664), (1.75, 4129), (1.75, 4098), (1.75, 3830), (1.75, 4542), (1.75, 3769), (0.5, 4662), (0.375, 4668), (0.375, 4650)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4136
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4299
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4369
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4170
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4275
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 45]
[Computing fitness]
[(1.75, 4591), (1.75, 4586), (1.75, 4746), (1.75, 4620), (1.75, 4580), (1.75, 4760), (1.75, 3705), (1.75, 3595), (1.75, 4263), (1.75, 3325), (1.75, 4433), (1.75, 4608), (1.75, 4735), (1.75, 4306), (1.75, 4251), (1.75, 4451), (1.75, 4236), (1.75, 2839), (1.75, 3762), (1.75, 4342), (1.75, 4410), (1.75, 4789), (1.75, 4653), (1.75, 4106), (1.75, 4120), (1.75, 4582), (1.75, 4309), (1.75, 4177), (1.75, 4779), (1.75, 4645), (1.75, 4771), (1.75, 4601), (1.75, 3761), (1.75, 3715), (1.75, 4744), (1.75, 4349), (1.75, 4169), (1.75, 4725), (1.75, 4382), (1.75, 4481), (1.75, 4550), (1.75, 4330), (1.75, 3872), (1.75, 4268), (1.75, 4282), (1.75, 2823), (1.75, 4307), (1.75, 4164), (1.75, 4032), (1.75, 4703), (1.75, 4315), (1.75, 4679), (1.75, 3829), (1.75, 4578), (1.75, 4299), (1.75, 3408), (1.75, 4515), (1.75, 4634), (1.75, 4671), (1.75, 4504), (1.75, 4450), (1.75, 4722), (1.75, 4287), (1.75, 4709), (1.75, 3918), (1.75, 4615), (1.75, 4759), (1.75, 4520), (1.75, 4678), (1.75, 4290), (1.75, 4717), (1.75, 4062), (1.75, 4637), (1.75, 4605), (1.75, 3728), (1.75, 4360), (1.75, 4112), (1.75, 4151), (1.75, 4171), (1.75, 4118), (1.75, 4774), (1.75, 4681), (1.75, 3370), (1.75, 3466), (1.75, 4489), (1.75, 3884), (1.75, 3719), (1.75, 4470), (1.75, 3550), (1.75, 4343), (1.75, 4772), (1.75, 4638), (1.75, 4277), (1.75, 4724), (1.75, 4768), (1.75, 4406), (1.75, 4745), (1.75, 4211), (1.75, 4369), (1.75, 4502), (1.75, 4576), (1.75, 2699), (1.75, 4797), (1.75, 3863), (1.75, 4647), (1.75, 3490), (1.75, 2826), (1.75, 3689), (1.75, 4486), (1.75, 4505), (1.75, 4660), (1.75, 4230), (1.75, 4630), (1.75, 4202), (1.75, 4607), (1.75, 2486), (1.75, 4610), (1.75, 4506), (1.75, 4275), (1.75, 4692), (1.75, 4549), (1.75, 4641), (1.75, 4466), (1.75, 3809), (1.75, 3633), (1.75, 4215), (1.75, 4675), (1.75, 4241), (1.75, 4780), (1.75, 4755), (1.75, 4695), (1.75, 4795), (1.75, 4463), (1.75, 3575), (1.75, 4740), (1.75, 3966), (1.75, 4685), (1.75, 4749), (1.75, 2855), (1.75, 4631), (1.75, 4721), (1.75, 4719), (1.75, 4173), (1.75, 4365), (1.75, 4170), (1.75, 4756), (1.75, 4172), (1.75, 4516), (1.75, 4279), (1.75, 4232), (1.75, 3898), (1.75, 4758), (1.75, 2663), (1.75, 2271), (1.75, 4320), (1.75, 4321), (1.75, 4748), (1.75, 4255), (1.75, 4532), (1.75, 4682), (1.75, 4784), (1.75, 3668), (1.75, 3375), (1.75, 4659), (1.75, 4696), (1.75, 4712), (1.75, 4479), (1.75, 4526), (1.75, 4672), (1.75, 4175), (1.75, 4750), (1.75, 4527), (1.75, 4471), (1.75, 4528), (1.75, 3880), (1.75, 3572), (1.75, 4575), (1.75, 4687), (1.75, 4467), (1.75, 4273), (1.75, 3377), (1.75, 4082), (1.75, 4669), (1.75, 4554), (1.75, 3381), (1.75, 4414), (1.75, 2167), (1.75, 4548), (1.75, 4708), (1.75, 4705), (1.75, 4569), (1.75, 4138), (1.75, 4778), (1.75, 4545), (1.75, 4617), (1.75, 4628), (1.75, 4222), (1.75, 4632), (1.75, 4220), (1.75, 3757), (1.75, 3953), (1.75, 4629), (1.75, 4353), (1.75, 4123), (1.75, 4625), (1.75, 2256), (1.75, 4435), (1.75, 4753), (1.75, 4794), (1.75, 3791), (1.75, 4769), (1.75, 4587), (1.75, 4621), (1.75, 4214), (1.75, 4483), (1.75, 4666), (1.75, 4081), (1.75, 3956), (1.75, 4134), (1.75, 4538), (1.75, 4492), (1.75, 4257), (1.75, 4246), (1.75, 4715), (1.75, 4699), (1.75, 4427), (1.75, 4130), (1.75, 4182), (1.75, 4461), (1.75, 4136), (1.75, 4781), (1.75, 3679), (1.75, 4785), (1.75, 4084), (1.75, 4013), (1.75, 4087), (1.75, 3786), (1.75, 4655), (1.75, 4714), (1.75, 4704), (1.75, 3652), (1.75, 4523), (1.75, 3737), (1.75, 4266), (1.75, 4407), (1.75, 4657), (1.75, 4425), (1.75, 4325), (1.75, 3950), (1.75, 4762), (1.75, 4454), (1.75, 4757), (1.75, 3916), (1.75, 4683), (1.75, 4546), (1.75, 4474), (1.75, 4690), (1.75, 4428), (1.75, 4648), (1.75, 4398), (1.75, 4592), (1.75, 4024), (1.75, 4367), (1.75, 4693), (1.75, 4243), (1.75, 3917), (1.75, 2795), (1.75, 4594), (1.75, 4614), (1.75, 4739), (1.75, 4380), (1.75, 4031), (1.75, 4588), (1.75, 4521), (1.75, 4604), (1.75, 4787), (1.75, 4764), (1.75, 3923), (1.75, 4726), (1.75, 4766), (1.75, 3844), (1.75, 3988), (1.75, 4285), (1.75, 4742), (1.75, 3735), (1.75, 4518), (1.75, 4008), (1.75, 2890), (1.75, 4702), (1.75, 4291), (1.75, 4553), (1.75, 4011), (1.75, 3969), (1.75, 3530), (1.75, 4379), (1.75, 4763), (1.75, 4697), (1.75, 4775), (1.75, 3983), (1.75, 3272), (1.75, 4767), (1.75, 3054), (1.75, 4706), (1.75, 4564), (1.75, 4677), (1.75, 3794), (1.75, 4442), (1.75, 4423), (1.75, 2695), (1.75, 4729), (1.75, 4196), (1.75, 4773), (1.75, 4799), (1.75, 3402), (1.75, 4322), (1.75, 4572), (1.75, 4494), (1.75, 3979), (1.75, 2570), (1.75, 4434), (1.75, 4792), (1.75, 3280), (1.75, 4248), (1.75, 4684), (1.75, 3346), (1.75, 4552), (1.75, 4562), (1.75, 4581), (1.75, 4389), (1.75, 4571), (1.75, 4401), (1.75, 4359), (1.75, 4734), (1.75, 4557), (1.75, 4603), (1.75, 3779), (1.75, 4491), (1.75, 4484), (1.75, 4228), (1.75, 3573), (1.75, 2957), (1.75, 4673), (1.75, 4510), (1.75, 4416), (1.75, 4737), (1.75, 4221), (1.75, 4732), (1.75, 4623), (1.75, 4644), (1.75, 4333), (1.75, 4344), (1.75, 4525), (1.75, 4262), (1.75, 4790), (1.75, 4374), (1.75, 4651), (1.75, 4179), (1.75, 3937), (1.75, 4609), (1.75, 3879), (1.75, 4261), (1.75, 4786), (1.75, 3676), (1.75, 3730), (1.75, 4798), (1.75, 4640), (1.75, 4635), (1.75, 4770), (1.75, 4133), (1.75, 3521), (1.75, 3159), (1.75, 3928), (1.75, 4595), (1.75, 4636), (1.75, 4302), (1.75, 2722), (1.75, 4000), (1.75, 4178), (1.75, 3235), (1.75, 4694), (1.75, 4622), (1.75, 4388), (1.75, 4465), (1.75, 4265), (1.75, 4611), (1.75, 4728), (1.75, 4292), (1.75, 4738), (1.75, 3755), (1.75, 4700), (1.75, 4075), (1.75, 3558), (1.75, 3695), (1.75, 4297), (1.75, 4094), (0.5, 4783), (0.5, 4752), (0.375, 4777), (0.375, 4711), (0.375, 4731)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4591
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4586
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4746
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4620
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4580
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 46]
[Computing fitness]
[(1.75, 4769), (1.75, 4709), (1.75, 3809), (1.75, 4815), (1.75, 3880), (1.75, 4849), (1.75, 4526), (1.75, 2890), (1.75, 4806), (1.75, 4169), (1.75, 4211), (1.75, 4257), (1.75, 3786), (1.75, 4171), (1.75, 4173), (1.75, 4151), (1.75, 4755), (1.75, 4220), (1.75, 4831), (1.75, 4287), (1.75, 4859), (1.75, 4182), (1.75, 4683), (1.75, 4263), (1.75, 4494), (1.75, 4307), (1.75, 3956), (1.75, 4785), (1.75, 4744), (1.75, 4521), (1.75, 4877), (1.75, 4722), (1.75, 4739), (1.75, 4629), (1.75, 3863), (1.75, 4369), (1.75, 4756), (1.75, 4890), (1.75, 4800), (1.75, 4768), (1.75, 4608), (1.75, 4851), (1.75, 4515), (1.75, 4848), (1.75, 4740), (1.75, 4717), (1.75, 3969), (1.75, 4285), (1.75, 3280), (1.75, 4628), (1.75, 4553), (1.75, 4692), (1.75, 4471), (1.75, 4342), (1.75, 4846), (1.75, 4684), (1.75, 4398), (1.75, 4749), (1.75, 4873), (1.75, 4084), (1.75, 3719), (1.75, 4682), (1.75, 4315), (1.75, 4118), (1.75, 4895), (1.75, 3735), (1.75, 3652), (1.75, 4024), (1.75, 3917), (1.75, 4892), (1.75, 4681), (1.75, 4830), (1.75, 3466), (1.75, 4505), (1.75, 4365), (1.75, 4842), (1.75, 4829), (1.75, 2570), (1.75, 4672), (1.75, 4837), (1.75, 4878), (1.75, 4760), (1.75, 4874), (1.75, 3829), (1.75, 4582), (1.75, 4762), (1.75, 4528), (1.75, 4735), (1.75, 3375), (1.75, 4753), (1.75, 3408), (1.75, 4586), (1.75, 4671), (1.75, 4814), (1.75, 4794), (1.75, 4614), (1.75, 4433), (1.75, 4638), (1.75, 4343), (1.75, 4481), (1.75, 4275), (1.75, 4243), (1.75, 3689), (1.75, 2699), (1.75, 4202), (1.75, 4170), (1.75, 4467), (1.75, 4764), (1.75, 4266), (1.75, 4516), (1.75, 4564), (1.75, 4575), (1.75, 2823), (1.75, 4780), (1.75, 4554), (1.75, 4474), (1.75, 4866), (1.75, 4196), (1.75, 4322), (1.75, 3370), (1.75, 4423), (1.75, 4697), (1.75, 4763), (1.75, 3633), (1.75, 4721), (1.75, 3916), (1.75, 4428), (1.75, 4825), (1.75, 4621), (1.75, 4774), (1.75, 4678), (1.75, 4164), (1.75, 4548), (1.75, 4576), (1.75, 4268), (1.75, 4889), (1.75, 4823), (1.75, 4647), (1.75, 4759), (1.75, 4367), (1.75, 4592), (1.75, 4518), (1.75, 4887), (1.75, 3884), (1.75, 4062), (1.75, 4410), (1.75, 4855), (1.75, 3054), (1.75, 4632), (1.75, 3844), (1.75, 4719), (1.75, 4745), (1.75, 4804), (1.75, 3728), (1.75, 3898), (1.75, 4832), (1.75, 4816), (1.75, 4690), (1.75, 4820), (1.75, 4801), (1.75, 2695), (1.75, 4714), (1.75, 3377), (1.75, 3550), (1.75, 4750), (1.75, 4885), (1.75, 3668), (1.75, 4617), (1.75, 4601), (1.75, 4705), (1.75, 4214), (1.75, 4881), (1.75, 4106), (1.75, 4330), (1.75, 2486), (1.75, 4172), (1.75, 4625), (1.75, 4833), (1.75, 4875), (1.75, 4175), (1.75, 4299), (1.75, 4853), (1.75, 4871), (1.75, 4659), (1.75, 3923), (1.75, 2256), (1.75, 4685), (1.75, 4607), (1.75, 3490), (1.75, 4746), (1.75, 4836), (1.75, 4082), (1.75, 4545), (1.75, 4435), (1.75, 4704), (1.75, 4520), (1.75, 3346), (1.75, 3761), (1.75, 4246), (1.75, 2855), (1.75, 4177), (1.75, 4232), (1.75, 4527), (1.75, 4610), (1.75, 4789), (1.75, 4461), (1.75, 2167), (1.75, 4463), (1.75, 4795), (1.75, 4549), (1.75, 4725), (1.75, 4008), (1.75, 4506), (1.75, 4290), (1.75, 3272), (1.75, 4134), (1.75, 4236), (1.75, 4379), (1.75, 4844), (1.75, 4677), (1.75, 4241), (1.75, 4724), (1.75, 3794), (1.75, 4715), (1.75, 4827), (1.75, 4893), (1.75, 2663), (1.75, 4569), (1.75, 4222), (1.75, 4828), (1.75, 4360), (1.75, 4824), (1.75, 4742), (1.75, 4538), (1.75, 4580), (1.75, 4781), (1.75, 4502), (1.75, 4434), (1.75, 4856), (1.75, 4757), (1.75, 3572), (1.75, 4679), (1.75, 4799), (1.75, 4546), (1.75, 3381), (1.75, 4802), (1.75, 4130), (1.75, 4884), (1.75, 4248), (1.75, 4504), (1.75, 4838), (1.75, 4273), (1.75, 3575), (1.75, 4803), (1.75, 4775), (1.75, 4810), (1.75, 4863), (1.75, 4645), (1.75, 3966), (1.75, 4138), (1.75, 4807), (1.75, 4748), (1.75, 4353), (1.75, 4032), (1.75, 4427), (1.75, 4615), (1.75, 4407), (1.75, 4255), (1.75, 4847), (1.75, 3757), (1.75, 4655), (1.75, 4766), (1.75, 4706), (1.75, 4841), (1.75, 4821), (1.75, 4277), (1.75, 4897), (1.75, 4797), (1.75, 3872), (1.75, 2795), (1.75, 4809), (1.75, 4696), (1.75, 3325), (1.75, 4773), (1.75, 4784), (1.75, 4792), (1.75, 4136), (1.75, 4578), (1.75, 4641), (1.75, 4492), (1.75, 4787), (1.75, 4309), (1.75, 4349), (1.75, 4479), (1.75, 4112), (1.75, 4779), (1.75, 4693), (1.75, 4325), (1.75, 4675), (1.75, 4588), (1.75, 3988), (1.75, 4594), (1.75, 4868), (1.75, 3762), (1.75, 4870), (1.75, 4826), (1.75, 4425), (1.75, 4726), (1.75, 4011), (1.75, 4860), (1.75, 4605), (1.75, 4666), (1.75, 4013), (1.75, 4862), (1.75, 4320), (1.75, 4380), (1.75, 4630), (1.75, 3679), (1.75, 4845), (1.75, 4291), (1.75, 4648), (1.75, 4772), (1.75, 4215), (1.75, 4406), (1.75, 4687), (1.75, 4703), (1.75, 4451), (1.75, 2271), (1.75, 4031), (1.75, 2826), (1.75, 3715), (1.75, 4778), (1.75, 4840), (1.75, 4279), (1.75, 4123), (1.75, 4708), (1.75, 4882), (1.75, 3595), (1.75, 4669), (1.75, 4466), (1.75, 3737), (1.75, 3983), (1.75, 4712), (1.75, 4081), (1.75, 4813), (1.75, 3530), (1.75, 4442), (1.75, 4483), (1.75, 4572), (1.75, 4631), (1.75, 4634), (1.75, 2839), (1.75, 4382), (1.75, 4591), (1.75, 4699), (1.75, 4771), (1.75, 4604), (1.75, 4523), (1.75, 4729), (1.75, 4306), (1.75, 4450), (1.75, 4470), (1.75, 4251), (1.75, 4637), (1.75, 4767), (1.75, 4620), (1.75, 4695), (1.75, 3950), (1.75, 4811), (1.75, 4865), (1.75, 3705), (1.75, 4879), (1.75, 4702), (1.75, 4414), (1.75, 3402), (1.75, 4486), (1.75, 3979), (1.75, 4880), (1.75, 4805), (1.75, 4657), (1.75, 4120), (1.75, 4587), (1.75, 4321), (1.75, 4653), (1.75, 4898), (1.75, 4454), (1.75, 4087), (1.75, 4532), (1.75, 3791), (1.75, 4282), (1.75, 4230), (1.75, 4758), (1.75, 4489), (1.75, 4660), (1.75, 3918), (1.75, 3953), (1.75, 4818), (1.75, 4550), (0.375, 4835), (0.375, 4858)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4769
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4709
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3809
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4815
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3880
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 47]
[Computing fitness]
[(1.75, 2695), (1.75, 4828), (1.75, 4241), (1.75, 4871), (1.75, 4827), (1.75, 3490), (1.75, 4847), (1.75, 4797), (1.75, 4826), (1.75, 4892), (1.75, 4800), (1.75, 4719), (1.75, 4856), (1.75, 4841), (1.75, 4983), (1.75, 4951), (1.75, 4516), (1.75, 4479), (1.75, 4725), (1.75, 4801), (1.75, 4994), (1.75, 4724), (1.75, 4755), (1.75, 4246), (1.75, 4978), (1.75, 4897), (1.75, 4248), (1.75, 4632), (1.75, 4860), (1.75, 3969), (1.75, 4963), (1.75, 4706), (1.75, 4907), (1.75, 4315), (1.75, 4506), (1.75, 2795), (1.75, 4683), (1.75, 4471), (1.75, 4685), (1.75, 4196), (1.75, 3762), (1.75, 4726), (1.75, 4678), (1.75, 4406), (1.75, 4721), (1.75, 4277), (1.75, 4746), (1.75, 4130), (1.75, 4779), (1.75, 3786), (1.75, 4945), (1.75, 4687), (1.75, 4785), (1.75, 4474), (1.75, 4621), (1.75, 4629), (1.75, 4679), (1.75, 4735), (1.75, 2699), (1.75, 4762), (1.75, 4526), (1.75, 4309), (1.75, 4884), (1.75, 3917), (1.75, 3829), (1.75, 4659), (1.75, 4807), (1.75, 4831), (1.75, 4575), (1.75, 4836), (1.75, 4320), (1.75, 4232), (1.75, 4638), (1.75, 4929), (1.75, 4900), (1.75, 4795), (1.75, 4628), (1.75, 4625), (1.75, 4576), (1.75, 4502), (1.75, 4941), (1.75, 4962), (1.75, 4821), (1.75, 2823), (1.75, 4257), (1.75, 4842), (1.75, 4268), (1.75, 4291), (1.75, 4979), (1.75, 3466), (1.75, 4956), (1.75, 4360), (1.75, 4275), (1.75, 4919), (1.75, 4528), (1.75, 3844), (1.75, 4617), (1.75, 2486), (1.75, 4467), (1.75, 4874), (1.75, 4954), (1.75, 4648), (1.75, 4745), (1.75, 4914), (1.75, 3346), (1.75, 4349), (1.75, 4965), (1.75, 4290), (1.75, 4955), (1.75, 4594), (1.75, 4580), (1.75, 4222), (1.75, 4912), (1.75, 4742), (1.75, 4287), (1.75, 4505), (1.75, 3728), (1.75, 3916), (1.75, 4647), (1.75, 4170), (1.75, 2167), (1.75, 4520), (1.75, 3272), (1.75, 4285), (1.75, 4809), (1.75, 4832), (1.75, 3794), (1.75, 4024), (1.75, 4967), (1.75, 4112), (1.75, 4949), (1.75, 4814), (1.75, 4887), (1.75, 4824), (1.75, 4435), (1.75, 4236), (1.75, 4266), (1.75, 4895), (1.75, 4924), (1.75, 4759), (1.75, 4172), (1.75, 4175), (1.75, 4930), (1.75, 4425), (1.75, 4781), (1.75, 4851), (1.75, 4760), (1.75, 4494), (1.75, 4032), (1.75, 4802), (1.75, 4715), (1.75, 3054), (1.75, 3956), (1.75, 4492), (1.75, 4527), (1.75, 4870), (1.75, 4917), (1.75, 3923), (1.75, 3572), (1.75, 4118), (1.75, 4823), (1.75, 4958), (1.75, 4740), (1.75, 4829), (1.75, 4548), (1.75, 4784), (1.75, 4750), (1.75, 4427), (1.75, 4564), (1.75, 4988), (1.75, 4744), (1.75, 3633), (1.75, 4932), (1.75, 4903), (1.75, 4975), (1.75, 4833), (1.75, 4768), (1.75, 4881), (1.75, 4671), (1.75, 4610), (1.75, 4177), (1.75, 4803), (1.75, 4845), (1.75, 4804), (1.75, 4655), (1.75, 4901), (1.75, 4546), (1.75, 4875), (1.75, 4764), (1.75, 3408), (1.75, 4906), (1.75, 4672), (1.75, 4773), (1.75, 4379), (1.75, 4549), (1.75, 4838), (1.75, 4944), (1.75, 3872), (1.75, 4878), (1.75, 4991), (1.75, 3679), (1.75, 4705), (1.75, 3377), (1.75, 4799), (1.75, 4171), (1.75, 4844), (1.75, 2256), (1.75, 3668), (1.75, 4792), (1.75, 4849), (1.75, 4586), (1.75, 4307), (1.75, 4343), (1.75, 4614), (1.75, 4263), (1.75, 4463), (1.75, 4926), (1.75, 4214), (1.75, 4905), (1.75, 4910), (1.75, 4948), (1.75, 3966), (1.75, 4968), (1.75, 4138), (1.75, 4151), (1.75, 4504), (1.75, 4615), (1.75, 4173), (1.75, 4692), (1.75, 4885), (1.75, 4423), (1.75, 4578), (1.75, 4830), (1.75, 4608), (1.75, 4920), (1.75, 4545), (1.75, 4407), (1.75, 4922), (1.75, 4461), (1.75, 4684), (1.75, 3719), (1.75, 4641), (1.75, 4554), (1.75, 4433), (1.75, 3735), (1.75, 3880), (1.75, 4927), (1.75, 4952), (1.75, 4605), (1.75, 4889), (1.75, 2663), (1.75, 4013), (1.75, 4322), (1.75, 3689), (1.75, 4211), (1.75, 4062), (1.75, 4215), (1.75, 4082), (1.75, 4255), (1.75, 4481), (1.75, 4902), (1.75, 3757), (1.75, 4428), (1.75, 4690), (1.75, 3652), (1.75, 4704), (1.75, 4766), (1.75, 4592), (1.75, 4974), (1.75, 4986), (1.75, 4846), (1.75, 4909), (1.75, 4084), (1.75, 4946), (1.75, 4987), (1.75, 4756), (1.75, 4966), (1.75, 4899), (1.75, 4714), (1.75, 4697), (1.75, 4939), (1.75, 4369), (1.75, 4696), (1.75, 2890), (1.75, 4820), (1.75, 4806), (1.75, 3988), (1.75, 3884), (1.75, 4325), (1.75, 4106), (1.75, 4780), (1.75, 4645), (1.75, 3809), (1.75, 4717), (1.75, 4757), (1.75, 4947), (1.75, 4970), (1.75, 4937), (1.75, 4518), (1.75, 4789), (1.75, 4868), (1.75, 4601), (1.75, 4862), (1.75, 4815), (1.75, 4136), (1.75, 4515), (1.75, 4243), (1.75, 4682), (1.75, 4675), (1.75, 3575), (1.75, 4863), (1.75, 4365), (1.75, 4398), (1.75, 4787), (1.75, 4693), (1.75, 4953), (1.75, 4933), (1.75, 2570), (1.75, 3761), (1.75, 4816), (1.75, 4904), (1.75, 3898), (1.75, 4538), (1.75, 4913), (1.75, 4521), (1.75, 3550), (1.75, 4169), (1.75, 4677), (1.75, 4202), (1.75, 4134), (1.75, 4753), (1.75, 4993), (1.75, 4873), (1.75, 4749), (1.75, 4273), (1.75, 4942), (1.75, 4681), (1.75, 4666), (1.75, 4582), (1.75, 4825), (1.75, 3375), (1.75, 3280), (1.75, 4367), (1.75, 2855), (1.75, 4890), (1.75, 4877), (1.75, 4774), (1.75, 4739), (1.75, 4925), (1.75, 4380), (1.75, 4588), (1.75, 4330), (1.75, 4164), (1.75, 4859), (1.75, 4299), (1.75, 3381), (1.75, 4961), (1.75, 4763), (1.75, 4748), (1.75, 4182), (1.75, 4990), (1.75, 4342), (1.75, 4853), (1.75, 4434), (1.75, 4973), (1.75, 4848), (1.75, 4353), (1.75, 3370), (1.75, 4810), (1.75, 4569), (1.75, 4011), (1.75, 3863), (1.75, 4769), (1.75, 4866), (1.75, 4630), (1.75, 4722), (1.75, 3325), (1.75, 4837), (1.75, 4220), (1.75, 4950), (1.75, 4908), (1.75, 4772), (1.75, 4607), (1.75, 4410), (1.75, 4893), (1.75, 4943), (1.75, 4008), (1.75, 4855), (1.75, 4553), (1.75, 4709), (1.75, 4775), (1.75, 4936), (1.75, 4794), (0.5, 4972), (0.5, 4985), (0.375, 4916), (0.375, 4960), (0.375, 4935), (0.375, 4981), (0.375, 4977)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2695
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4828
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4241
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4871
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4827
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 48]
[Computing fitness]
[(1.75, 4757), (1.75, 4546), (1.75, 4962), (1.75, 4112), (1.75, 4845), (1.75, 4211), (1.75, 4905), (1.75, 4768), (1.75, 3880), (1.75, 4987), (1.75, 4740), (1.75, 4806), (1.75, 4951), (1.75, 4900), (1.75, 3633), (1.75, 4933), (1.75, 5020), (1.75, 4995), (1.75, 4675), (1.75, 3966), (1.75, 5037), (1.75, 4884), (1.75, 4554), (1.75, 4024), (1.75, 3872), (1.75, 5070), (1.75, 4735), (1.75, 4285), (1.75, 4655), (1.75, 4863), (1.75, 4678), (1.75, 4874), (1.75, 3956), (1.75, 4717), (1.75, 4899), (1.75, 4828), (1.75, 4425), (1.75, 3490), (1.75, 5038), (1.75, 4638), (1.75, 4999), (1.75, 4779), (1.75, 4784), (1.75, 4903), (1.75, 4506), (1.75, 5077), (1.75, 4369), (1.75, 4705), (1.75, 3272), (1.75, 4897), (1.75, 4243), (1.75, 4586), (1.75, 4549), (1.75, 3346), (1.75, 4826), (1.75, 4435), (1.75, 4902), (1.75, 5072), (1.75, 3969), (1.75, 4833), (1.75, 4956), (1.75, 4967), (1.75, 4991), (1.75, 4726), (1.75, 4851), (1.75, 5080), (1.75, 4827), (1.75, 4715), (1.75, 4106), (1.75, 4926), (1.75, 4815), (1.75, 4062), (1.75, 4919), (1.75, 4968), (1.75, 4277), (1.75, 4032), (1.75, 3466), (1.75, 4527), (1.75, 4427), (1.75, 5087), (1.75, 4983), (1.75, 4759), (1.75, 4082), (1.75, 4659), (1.75, 4621), (1.75, 2695), (1.75, 4809), (1.75, 4929), (1.75, 4263), (1.75, 4013), (1.75, 4580), (1.75, 4683), (1.75, 4504), (1.75, 4746), (1.75, 5035), (1.75, 4773), (1.75, 5088), (1.75, 4222), (1.75, 4807), (1.75, 4138), (1.75, 4520), (1.75, 4986), (1.75, 4605), (1.75, 5023), (1.75, 3728), (1.75, 4821), (1.75, 4744), (1.75, 4842), (1.75, 4887), (1.75, 4830), (1.75, 4952), (1.75, 3719), (1.75, 4471), (1.75, 4682), (1.75, 4958), (1.75, 5001), (1.75, 4994), (1.75, 3757), (1.75, 4592), (1.75, 4118), (1.75, 4875), (1.75, 4084), (1.75, 4871), (1.75, 4881), (1.75, 4325), (1.75, 3916), (1.75, 4502), (1.75, 5054), (1.75, 4988), (1.75, 4889), (1.75, 4927), (1.75, 5075), (1.75, 4693), (1.75, 3054), (1.75, 4914), (1.75, 4601), (1.75, 4996), (1.75, 5026), (1.75, 2823), (1.75, 5028), (1.75, 3923), (1.75, 5076), (1.75, 4795), (1.75, 4922), (1.75, 5045), (1.75, 4196), (1.75, 5015), (1.75, 4268), (1.75, 5061), (1.75, 4862), (1.75, 4979), (1.75, 4955), (1.75, 4315), (1.75, 5043), (1.75, 4892), (1.75, 4130), (1.75, 4756), (1.75, 4548), (1.75, 5011), (1.75, 4978), (1.75, 4461), (1.75, 4479), (1.75, 4379), (1.75, 4628), (1.75, 4236), (1.75, 4844), (1.75, 4913), (1.75, 4687), (1.75, 5031), (1.75, 4965), (1.75, 4309), (1.75, 4266), (1.75, 4648), (1.75, 5000), (1.75, 4781), (1.75, 4518), (1.75, 5006), (1.75, 5062), (1.75, 3575), (1.75, 4467), (1.75, 4948), (1.75, 3668), (1.75, 3377), (1.75, 4647), (1.75, 4398), (1.75, 4704), (1.75, 4963), (1.75, 4608), (1.75, 4248), (1.75, 4564), (1.75, 4906), (1.75, 4232), (1.75, 4538), (1.75, 4789), (1.75, 4692), (1.75, 5089), (1.75, 4760), (1.75, 5016), (1.75, 5019), (1.75, 4423), (1.75, 5044), (1.75, 5073), (1.75, 4136), (1.75, 4684), (1.75, 4975), (1.75, 5003), (1.75, 3898), (1.75, 3735), (1.75, 4764), (1.75, 4745), (1.75, 3809), (1.75, 4742), (1.75, 5066), (1.75, 4799), (1.75, 4287), (1.75, 5063), (1.75, 3829), (1.75, 4814), (1.75, 4910), (1.75, 4846), (1.75, 4679), (1.75, 4494), (1.75, 5093), (1.75, 4724), (1.75, 4970), (1.75, 4868), (1.75, 4801), (1.75, 5002), (1.75, 4954), (1.75, 3917), (1.75, 4171), (1.75, 5081), (1.75, 3689), (1.75, 5074), (1.75, 5027), (1.75, 4172), (1.75, 4545), (1.75, 4170), (1.75, 4823), (1.75, 5007), (1.75, 4932), (1.75, 4672), (1.75, 5017), (1.75, 5033), (1.75, 4629), (1.75, 4343), (1.75, 4719), (1.75, 5068), (1.75, 4787), (1.75, 4804), (1.75, 4428), (1.75, 3408), (1.75, 4257), (1.75, 4696), (1.75, 4937), (1.75, 5013), (1.75, 4725), (1.75, 4706), (1.75, 4690), (1.75, 4481), (1.75, 3844), (1.75, 4516), (1.75, 5009), (1.75, 5042), (1.75, 4406), (1.75, 4594), (1.75, 4878), (1.75, 4836), (1.75, 3762), (1.75, 4360), (1.75, 4526), (1.75, 2570), (1.75, 4521), (1.75, 2486), (1.75, 5091), (1.75, 5022), (1.75, 4904), (1.75, 4949), (1.75, 4831), (1.75, 4320), (1.75, 4847), (1.75, 4860), (1.75, 4632), (1.75, 4322), (1.75, 4901), (1.75, 4792), (1.75, 4241), (1.75, 4824), (1.75, 5078), (1.75, 4575), (1.75, 4802), (1.75, 4697), (1.75, 4177), (1.75, 2167), (1.75, 4785), (1.75, 4505), (1.75, 4463), (1.75, 4849), (1.75, 5083), (1.75, 4766), (1.75, 4246), (1.75, 2256), (1.75, 4930), (1.75, 5048), (1.75, 4365), (1.75, 4797), (1.75, 5057), (1.75, 4407), (1.75, 4953), (1.75, 5014), (1.75, 3572), (1.75, 3679), (1.75, 4714), (1.75, 4671), (1.75, 4290), (1.75, 4755), (1.75, 4762), (1.75, 4492), (1.75, 4966), (1.75, 4641), (1.75, 5065), (1.75, 5008), (1.75, 4917), (1.75, 4615), (1.75, 5024), (1.75, 4841), (1.75, 3786), (1.75, 4832), (1.75, 4349), (1.75, 4307), (1.75, 4173), (1.75, 5040), (1.75, 4920), (1.75, 4895), (1.75, 4433), (1.75, 2699), (1.75, 5010), (1.75, 2663), (1.75, 4816), (1.75, 4924), (1.75, 4856), (1.75, 4291), (1.75, 4997), (1.75, 5029), (1.75, 4803), (1.75, 5055), (1.75, 4610), (1.75, 3988), (1.75, 4829), (1.75, 5086), (1.75, 4721), (1.75, 4214), (1.75, 4685), (1.75, 4947), (1.75, 3761), (1.75, 4909), (1.75, 3884), (1.75, 4645), (1.75, 4974), (1.75, 5032), (1.75, 4885), (1.75, 5047), (1.75, 4838), (1.75, 2795), (1.75, 4870), (1.75, 3652), (1.75, 4515), (1.75, 4474), (1.75, 5071), (1.75, 4578), (1.75, 3794), (1.75, 4576), (1.75, 4912), (1.75, 4215), (1.75, 4175), (1.75, 4945), (1.75, 4151), (1.75, 4625), (1.75, 4750), (1.75, 4820), (1.75, 4528), (1.75, 4617), (1.75, 4944), (1.75, 4939), (1.75, 4800), (1.75, 4946), (1.75, 2890), (1.75, 4941), (1.75, 4780), (1.75, 4907), (1.75, 5085), (1.75, 4275), (1.75, 4255), (1.75, 4614), (1.75, 5039), (0.5, 5059), (0.5, 5052), (0.375, 5005), (0.375, 5095), (0.375, 5050)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4757
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4546
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4962
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4112
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4845
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Generation 49]
[Computing fitness]
[(1.75, 4927), (1.75, 5157), (1.75, 4999), (1.75, 3956), (1.75, 4586), (1.75, 2167), (1.75, 5183), (1.75, 4833), (1.75, 5148), (1.75, 4897), (1.75, 4638), (1.75, 4504), (1.75, 4671), (1.75, 3490), (1.75, 4824), (1.75, 4821), (1.75, 4706), (1.75, 5134), (1.75, 5185), (1.75, 4919), (1.75, 5120), (1.75, 5133), (1.75, 5011), (1.75, 5119), (1.75, 5075), (1.75, 4863), (1.75, 4106), (1.75, 4628), (1.75, 4518), (1.75, 4406), (1.75, 4963), (1.75, 5026), (1.75, 4906), (1.75, 4991), (1.75, 5081), (1.75, 4823), (1.75, 4471), (1.75, 4481), (1.75, 5083), (1.75, 4315), (1.75, 5153), (1.75, 4905), (1.75, 5115), (1.75, 5009), (1.75, 3719), (1.75, 5024), (1.75, 4704), (1.75, 5154), (1.75, 3054), (1.75, 3575), (1.75, 4647), (1.75, 5014), (1.75, 4809), (1.75, 4917), (1.75, 4679), (1.75, 5013), (1.75, 5141), (1.75, 4827), (1.75, 5136), (1.75, 4978), (1.75, 5098), (1.75, 4428), (1.75, 4277), (1.75, 4849), (1.75, 4995), (1.75, 5170), (1.75, 4903), (1.75, 3408), (1.75, 5184), (1.75, 5044), (1.75, 5057), (1.75, 4952), (1.75, 4425), (1.75, 5063), (1.75, 5031), (1.75, 5113), (1.75, 5072), (1.75, 5089), (1.75, 4268), (1.75, 4521), (1.75, 3829), (1.75, 4929), (1.75, 4693), (1.75, 4545), (1.75, 4407), (1.75, 4966), (1.75, 5114), (1.75, 3844), (1.75, 4435), (1.75, 4580), (1.75, 5164), (1.75, 4831), (1.75, 4795), (1.75, 4871), (1.75, 3757), (1.75, 4760), (1.75, 4970), (1.75, 4926), (1.75, 5180), (1.75, 4172), (1.75, 3898), (1.75, 3572), (1.75, 4766), (1.75, 5027), (1.75, 4360), (1.75, 4842), (1.75, 4463), (1.75, 4717), (1.75, 4844), (1.75, 2256), (1.75, 4494), (1.75, 4845), (1.75, 4285), (1.75, 3272), (1.75, 5102), (1.75, 3377), (1.75, 4130), (1.75, 4287), (1.75, 3923), (1.75, 5191), (1.75, 4641), (1.75, 4615), (1.75, 4756), (1.75, 5001), (1.75, 4979), (1.75, 4814), (1.75, 4932), (1.75, 5061), (1.75, 5111), (1.75, 5038), (1.75, 4232), (1.75, 5105), (1.75, 4112), (1.75, 5091), (1.75, 5122), (1.75, 5033), (1.75, 4601), (1.75, 5068), (1.75, 4725), (1.75, 5187), (1.75, 4828), (1.75, 4467), (1.75, 4024), (1.75, 5110), (1.75, 5172), (1.75, 5097), (1.75, 5008), (1.75, 4246), (1.75, 4785), (1.75, 4655), (1.75, 5002), (1.75, 4804), (1.75, 5163), (1.75, 4171), (1.75, 5022), (1.75, 3633), (1.75, 4138), (1.75, 4719), (1.75, 4692), (1.75, 5142), (1.75, 4826), (1.75, 4398), (1.75, 5096), (1.75, 4892), (1.75, 3880), (1.75, 4241), (1.75, 4910), (1.75, 4621), (1.75, 5045), (1.75, 4678), (1.75, 5104), (1.75, 3728), (1.75, 5173), (1.75, 4257), (1.75, 5074), (1.75, 4715), (1.75, 4369), (1.75, 2486), (1.75, 4884), (1.75, 5103), (1.75, 4682), (1.75, 4967), (1.75, 4379), (1.75, 4933), (1.75, 3916), (1.75, 4954), (1.75, 4714), (1.75, 5107), (1.75, 4492), (1.75, 4526), (1.75, 3966), (1.75, 4986), (1.75, 5080), (1.75, 4744), (1.75, 4548), (1.75, 4266), (1.75, 4914), (1.75, 4554), (1.75, 5028), (1.75, 4847), (1.75, 3969), (1.75, 4322), (1.75, 4860), (1.75, 5186), (1.75, 3668), (1.75, 5023), (1.75, 4757), (1.75, 4802), (1.75, 5019), (1.75, 5020), (1.75, 3346), (1.75, 4516), (1.75, 5017), (1.75, 4592), (1.75, 4937), (1.75, 4564), (1.75, 4594), (1.75, 4648), (1.75, 4956), (1.75, 4263), (1.75, 4787), (1.75, 3689), (1.75, 4987), (1.75, 4759), (1.75, 5158), (1.75, 4222), (1.75, 4196), (1.75, 5124), (1.75, 4672), (1.75, 5166), (1.75, 4546), (1.75, 5000), (1.75, 4461), (1.75, 5168), (1.75, 5087), (1.75, 4789), (1.75, 5125), (1.75, 5130), (1.75, 4290), (1.75, 3917), (1.75, 5116), (1.75, 5003), (1.75, 4684), (1.75, 5062), (1.75, 4309), (1.75, 2570), (1.75, 5035), (1.75, 5048), (1.75, 4768), (1.75, 5006), (1.75, 5088), (1.75, 4690), (1.75, 5182), (1.75, 5140), (1.75, 5156), (1.75, 4851), (1.75, 4575), (1.75, 5100), (1.75, 4983), (1.75, 4605), (1.75, 5152), (1.75, 5127), (1.75, 4874), (1.75, 5144), (1.75, 4675), (1.75, 5149), (1.75, 4965), (1.75, 2695), (1.75, 4243), (1.75, 4084), (1.75, 4538), (1.75, 3872), (1.75, 4988), (1.75, 4994), (1.75, 4705), (1.75, 4953), (1.75, 4762), (1.75, 4697), (1.75, 4836), (1.75, 4320), (1.75, 4868), (1.75, 4996), (1.75, 5109), (1.75, 4968), (1.75, 4922), (1.75, 4955), (1.75, 3735), (1.75, 4889), (1.75, 4755), (1.75, 4807), (1.75, 4764), (1.75, 5129), (1.75, 4801), (1.75, 5065), (1.75, 4118), (1.75, 4505), (1.75, 4904), (1.75, 5150), (1.75, 5078), (1.75, 4632), (1.75, 4781), (1.75, 4975), (1.75, 4773), (1.75, 4902), (1.75, 5042), (1.75, 5043), (1.75, 4862), (1.75, 5118), (1.75, 4740), (1.75, 5076), (1.75, 4806), (1.75, 5147), (1.75, 5066), (1.75, 4506), (1.75, 4949), (1.75, 4211), (1.75, 4742), (1.75, 4683), (1.75, 3466), (1.75, 4687), (1.75, 5132), (1.75, 4082), (1.75, 4958), (1.75, 4170), (1.75, 4248), (1.75, 5135), (1.75, 4901), (1.75, 4962), (1.75, 4236), (1.75, 4726), (1.75, 5016), (1.75, 4520), (1.75, 4930), (1.75, 4136), (1.75, 4746), (1.75, 5123), (1.75, 5015), (1.75, 3762), (1.75, 5181), (1.75, 5178), (1.75, 4745), (1.75, 4608), (1.75, 4735), (1.75, 4887), (1.75, 2823), (1.75, 5037), (1.75, 4659), (1.75, 5054), (1.75, 4032), (1.75, 4797), (1.75, 4479), (1.75, 4830), (1.75, 4881), (1.75, 5070), (1.75, 3809), (1.75, 4013), (1.75, 5126), (1.75, 3679), (1.75, 4799), (1.75, 4177), (1.75, 4784), (1.75, 4696), (1.75, 5155), (1.75, 4846), (1.75, 5101), (1.75, 4427), (1.75, 5121), (1.75, 4724), (1.75, 4948), (1.75, 5174), (1.75, 4951), (1.75, 5007), (1.75, 4899), (1.75, 4502), (1.75, 4629), (1.75, 4913), (1.75, 4878), (1.75, 4423), (1.75, 4549), (1.75, 5093), (1.75, 4815), (1.75, 5162), (1.75, 4062), (1.75, 4779), (1.75, 4343), (1.75, 5077), (1.75, 4792), (1.75, 4875), (1.75, 4365), (1.75, 4900), (1.75, 5188), (1.75, 4527), (1.75, 5175), (1.75, 4325), (1.75, 5073), (0.5, 5160), (0.5, 5177), (0.375, 5146), (0.375, 5190), (0.375, 5138)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 4927
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 5157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4999
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 3956
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 4586
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) (* x x))))
 nr_nodes: 10]
[Algorithm end]
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x 6) (* y y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* (+ x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) y))
 nr_nodes: 6]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* x 6) 6) y))
 nr_nodes: 8]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y 6) 6) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (* y 6) y) 6) x))
 nr_nodes: 10]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y (* y (* 6 (+ 6 6)))))
 nr_nodes: 10]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`6`#`#`(* ? ?)`6`#`#`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (+ 6 6) (* 6 6)) 6) 6))
 nr_nodes: 12]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 (+ x 6)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`6`#`#`6`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ 6 6)) (+ 6 6)))
 nr_nodes: 10]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 6 y) x) y))
 nr_nodes: 8]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`6`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y (* x y)) (+ (+ y x) (* y x))) (+ 6 (+ 6 x))))
 nr_nodes: 20]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* x 6)) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) 6) x))
 nr_nodes: 8]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`6`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 (+ y (* 6 x))) y))
 nr_nodes: 10]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`6`#`#`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (+ (* y 6) 6) 6) y) x))
 nr_nodes: 12]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ (+ y x) (+ y x)) 6)))
 nr_nodes: 12]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 6) (+ (* y x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (+ x y) (* y (+ y y))) 6) 6))
 nr_nodes: 14]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`6`#`#`y`#`#`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (+ (* x y) 6) y)) (* 6 x)))
 nr_nodes: 14]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`6`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 6 y) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`y`#`#`x`#`#`6`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (+ (+ 6 y) x) 6) x) y))
 nr_nodes: 12]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 6) y))
 nr_nodes: 6]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`6`#`#`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* 6 y)) (+ y (+ 6 6))))
 nr_nodes: 12]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (* (* x (+ x x)) y) 6) 6) 6))
 nr_nodes: 14]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* x (* y 6))))
 nr_nodes: 8]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`6`#`#`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 6 (+ 6 6)) x) (* x (+ y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`6`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* y 6) x) 6) (+ 6 y)))
 nr_nodes: 12]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x (* y 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`6`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (* x 6) (+ y 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x y) (* y x)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`6`#`#`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* 6 x) (+ (* y x) (+ 6 y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y y) 6) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`6`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`6`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 6 (+ y (* (* 6 y) (* x y)))) 6) (+ 6 6)))
 nr_nodes: 18]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ y 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`6`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x y) 6) (+ (* x y) (+ y 6))))
 nr_nodes: 14]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 x) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 6) x) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) (+ (+ y y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) (+ y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) (+ y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`6`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) 6) (+ x x)))
 nr_nodes: 10]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ y x)) (+ 6 6)))
 nr_nodes: 10]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (* 6 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 6) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`6`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* 6 6)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (+ x (+ x x)) y) y) y))
 nr_nodes: 12]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`6`#`#`(* ? ?)`y`#`#`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ 6 (* y (* 6 y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x (+ y 6)) y) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`6`#`#`(* ? ?)`6`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* (* (+ x 6) (* 6 y)) (+ x y)) y)))
 nr_nodes: 16]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`6`#`#`6`#`#`6`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (+ 6 6) 6) (+ y x)) (+ (+ 6 x) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ 6 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`6`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ (* (+ x (* 6 y)) y) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 6) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* x 6) 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) y))
 nr_nodes: 6]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (* y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`x`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`6`#`#`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (* y (* (+ x y) (* y y))) (+ (+ x (+ x 6)) x)) (+ (+ (+ (+ x x) (* y x)) 6) (* (* y (* y y)) (* x x)))) (* y x)))
 nr_nodes: 42]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`6`#`#`6`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 6 6) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`6`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 6 (+ x x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`(* ? ?)`6`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 (* 6 x)) 6))
 nr_nodes: 8]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`6`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (* x y) (+ 6 x)) (* x (* y x))) (+ x 6)))
 nr_nodes: 18]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ x 6) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (* y y) 6)))
 nr_nodes: 8]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 6 (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 6) x))
 nr_nodes: 6]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 6 y) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`6`#`#`(* ? ?)`(+ ? ?)`y`#`#`6`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ (* y (* x 6)) (* (+ y 6) (+ y 6)))))
 nr_nodes: 18]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`6`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 6 (* y (* (* y y) y))) (+ y y)))
 nr_nodes: 14]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 x))
 nr_nodes: 4]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`6`#`#`x`#`#`(+ ? ?)`6`#`#`y`#`#`(* ? ?)`6`#`#`6`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 y) (+ (* (+ (+ 6 x) (+ 6 y)) (* 6 6)) (* y x))))
 nr_nodes: 20]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y 6) x) x))
 nr_nodes: 8]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`6`#`#`x`#`#`(* ? ?)`6`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x (* (* 6 x) (* 6 y))) (* (+ x x) (* (* y x) y))) x))
 nr_nodes: 22]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* x (+ 6 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`6`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* 6 6)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`6`#`#`(* ? ?)`(+ ? ?)`6`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* y 6)) (* (+ 6 6) 6)))
 nr_nodes: 12]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ x (+ 6 x)) (* x (+ 6 6)))))
 nr_nodes: 14]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ x x) (+ x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x (* 6 6)))
 nr_nodes: 6]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`6`#`#`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ 6 y) 6))
 nr_nodes: 6]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* x 6))
 nr_nodes: 4]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`6`#`#`(* ? ?)`6`#`#`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y (* y 6)) (* 6 x)) (+ (* (* x y) y) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* 6 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y 6))
 nr_nodes: 4]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 y))
 nr_nodes: 4]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`6`#`#`#
 s_expr: (defun my_func (x y) 6)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`6`#`#`x`#`#`y`#`#`6`#`#`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (* (* 6 x) y) 6)) (+ x (+ 6 6))))
 nr_nodes: 16]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`(* ? ?)`6`#`#`(* ? ?)`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 6 (* 6 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ y 6) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ 6 6))
 nr_nodes: 4]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
[Generation 0]
[Computing fitness]
[(1.5, 209), (1.375, 283), (1.0, 1), (1.0, 13), (1.0, 15), (1.0, 23), (1.0, 50), (1.0, 63), (1.0, 110), (1.0, 163), (1.0, 175), (1.0, 188), (1.0, 205), (1.0, 208), (1.0, 281), (1.0, 341), (0.75, 10), (0.625, 9), (0.625, 11), (0.625, 29), (0.625, 44), (0.625, 99), (0.625, 158), (0.625, 167), (0.625, 173), (0.625, 239), (0.625, 275), (0.625, 277), (0.5, 8), (0.5, 20), (0.5, 22), (0.5, 41), (0.5, 53), (0.5, 57), (0.5, 59), (0.5, 77), (0.5, 79), (0.5, 84), (0.5, 105), (0.5, 107), (0.5, 108), (0.5, 114), (0.5, 128), (0.5, 156), (0.5, 164), (0.5, 201), (0.5, 203), (0.5, 204), (0.5, 227), (0.5, 238), (0.5, 240), (0.5, 242), (0.5, 249), (0.5, 254), (0.5, 295), (0.5, 317), (0.5, 321), (0.5, 322), (0.5, 337), (0.5, 395), (0.41666666666666663, 4), (0.41666666666666663, 52), (0.41666666666666663, 64), (0.41666666666666663, 87), (0.41666666666666663, 97), (0.41666666666666663, 132), (0.41666666666666663, 153), (0.41666666666666663, 221), (0.41666666666666663, 256), (0.41666666666666663, 284), (0.41666666666666663, 292), (0.41666666666666663, 316), (0.41666666666666663, 382), (0.375, 75), (0.375, 82), (0.375, 139), (0.375, 147), (0.375, 190), (0.375, 225), (0.375, 288), (0.29166666666666663, 212), (0.29166666666666663, 216), (0.25, 0), (0.25, 6), (0.25, 7), (0.25, 14), (0.25, 17), (0.25, 19), (0.25, 30), (0.25, 31), (0.25, 37), (0.25, 38), (0.25, 39), (0.25, 45), (0.25, 46), (0.25, 48), (0.25, 49), (0.25, 62), (0.25, 68), (0.25, 72), (0.25, 73), (0.25, 74), (0.25, 95), (0.25, 101), (0.25, 103), (0.25, 109), (0.25, 115), (0.25, 116), (0.25, 120), (0.25, 124), (0.25, 126), (0.25, 127), (0.25, 131), (0.25, 133), (0.25, 134), (0.25, 140), (0.25, 141), (0.25, 145), (0.25, 152), (0.25, 154), (0.25, 157), (0.25, 159), (0.25, 160), (0.25, 170), (0.25, 178), (0.25, 181), (0.25, 189), (0.25, 192), (0.25, 196), (0.25, 197), (0.25, 200), (0.25, 206), (0.25, 210), (0.25, 213), (0.25, 214), (0.25, 219), (0.25, 228), (0.25, 230), (0.25, 234), (0.25, 235), (0.25, 236), (0.25, 237), (0.25, 245), (0.25, 248), (0.25, 250), (0.25, 253), (0.25, 258), (0.25, 260), (0.25, 261), (0.25, 263), (0.25, 265), (0.25, 267), (0.25, 268), (0.25, 270), (0.25, 271), (0.25, 273), (0.25, 274), (0.25, 286), (0.25, 287), (0.25, 289), (0.25, 293), (0.25, 294), (0.25, 296), (0.25, 297), (0.25, 299), (0.25, 304), (0.25, 305), (0.25, 306), (0.25, 307), (0.25, 308), (0.25, 315), (0.25, 326), (0.25, 328), (0.25, 329), (0.25, 331), (0.25, 338), (0.25, 339), (0.25, 340), (0.25, 346), (0.25, 348), (0.25, 352), (0.25, 353), (0.25, 359), (0.25, 362), (0.25, 363), (0.25, 364), (0.25, 368), (0.25, 378), (0.25, 379), (0.25, 380), (0.25, 387), (0.25, 389), (0.25, 392), (0.16666666666666666, 3), (0.16666666666666666, 5), (0.16666666666666666, 21), (0.16666666666666666, 24), (0.16666666666666666, 43), (0.16666666666666666, 51), (0.16666666666666666, 70), (0.16666666666666666, 90), (0.16666666666666666, 92), (0.16666666666666666, 96), (0.16666666666666666, 100), (0.16666666666666666, 112), (0.16666666666666666, 118), (0.16666666666666666, 130), (0.16666666666666666, 138), (0.16666666666666666, 149), (0.16666666666666666, 150), (0.16666666666666666, 161), (0.16666666666666666, 166), (0.16666666666666666, 171), (0.16666666666666666, 179), (0.16666666666666666, 180), (0.16666666666666666, 193), (0.16666666666666666, 195), (0.16666666666666666, 207), (0.16666666666666666, 218), (0.16666666666666666, 232), (0.16666666666666666, 244), (0.16666666666666666, 246), (0.16666666666666666, 252), (0.16666666666666666, 255), (0.16666666666666666, 257), (0.16666666666666666, 278), (0.16666666666666666, 280), (0.16666666666666666, 285), (0.16666666666666666, 298), (0.16666666666666666, 302), (0.16666666666666666, 309), (0.16666666666666666, 324), (0.16666666666666666, 330), (0.16666666666666666, 333), (0.16666666666666666, 334), (0.16666666666666666, 335), (0.16666666666666666, 349), (0.16666666666666666, 357), (0.16666666666666666, 367), (0.16666666666666666, 370), (0.16666666666666666, 373), (0.16666666666666666, 374), (0.16666666666666666, 386), (0.16666666666666666, 390), (0.16666666666666666, 397), (0.16666666666666666, 399), (0.15625, 241), (0.125, 2), (0.125, 12), (0.125, 16), (0.125, 18), (0.125, 25), (0.125, 26), (0.125, 27), (0.125, 28), (0.125, 33), (0.125, 34), (0.125, 35), (0.125, 36), (0.125, 40), (0.125, 42), (0.125, 47), (0.125, 54), (0.125, 55), (0.125, 56), (0.125, 58), (0.125, 60), (0.125, 61), (0.125, 65), (0.125, 66), (0.125, 67), (0.125, 69), (0.125, 71), (0.125, 76), (0.125, 78), (0.125, 80), (0.125, 81), (0.125, 83), (0.125, 85), (0.125, 86), (0.125, 88), (0.125, 89), (0.125, 91), (0.125, 93), (0.125, 94), (0.125, 98), (0.125, 102), (0.125, 104), (0.125, 106), (0.125, 111), (0.125, 113), (0.125, 117), (0.125, 119), (0.125, 121), (0.125, 122), (0.125, 123), (0.125, 125), (0.125, 129), (0.125, 135), (0.125, 136), (0.125, 137), (0.125, 142), (0.125, 143), (0.125, 144), (0.125, 146), (0.125, 148), (0.125, 151), (0.125, 155), (0.125, 162), (0.125, 165), (0.125, 168), (0.125, 169), (0.125, 172), (0.125, 174), (0.125, 176), (0.125, 177), (0.125, 182), (0.125, 183), (0.125, 184), (0.125, 185), (0.125, 186), (0.125, 187), (0.125, 191), (0.125, 194), (0.125, 198), (0.125, 199), (0.125, 202), (0.125, 211), (0.125, 215), (0.125, 217), (0.125, 220), (0.125, 222), (0.125, 223), (0.125, 224), (0.125, 226), (0.125, 229), (0.125, 231), (0.125, 233), (0.125, 243), (0.125, 247), (0.125, 251), (0.125, 259), (0.125, 262), (0.125, 264), (0.125, 266), (0.125, 269), (0.125, 272), (0.125, 276), (0.125, 279), (0.125, 282), (0.125, 290), (0.125, 291), (0.125, 300), (0.125, 301), (0.125, 303), (0.125, 310), (0.125, 311), (0.125, 312), (0.125, 314), (0.125, 318), (0.125, 320), (0.125, 323), (0.125, 325), (0.125, 327), (0.125, 332), (0.125, 336), (0.125, 342), (0.125, 343), (0.125, 344), (0.125, 345), (0.125, 347), (0.125, 350), (0.125, 351), (0.125, 354), (0.125, 355), (0.125, 356), (0.125, 358), (0.125, 360), (0.125, 361), (0.125, 365), (0.125, 366), (0.125, 369), (0.125, 371), (0.125, 372), (0.125, 375), (0.125, 376), (0.125, 377), (0.125, 381), (0.125, 383), (0.125, 384), (0.125, 385), (0.125, 388), (0.125, 391), (0.125, 393), (0.125, 394), (0.125, 396), (0.125, 398), (0.1, 32), (0.1, 313), (0.08333333333333333, 319)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`6`#`#`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x 6) (* y y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`y`#`#`6`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ (* y 6) y) 6) x))
 nr_nodes: 10]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`6`#`#`(+ ? ?)`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ y (* y (* 6 (+ 6 6)))))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 209), (1.375, 283), (1.25, 401), (1.0, 281), (1.0, 406), (1.0, 163), (1.0, 421), (1.0, 205), (1.0, 341), (1.0, 50), (1.0, 1), (1.0, 23), (1.0, 13), (1.0, 409), (1.0, 110), (1.0, 436), (1.0, 175), (1.0, 437), (1.0, 15), (1.0, 63), (1.0, 188), (1.0, 433), (1.0, 410), (1.0, 208), (0.75, 10), (0.625, 275), (0.625, 44), (0.625, 9), (0.625, 167), (0.625, 417), (0.625, 239), (0.625, 173), (0.625, 452), (0.625, 158), (0.625, 29), (0.625, 444), (0.625, 277), (0.625, 99), (0.625, 418), (0.625, 412), (0.625, 413), (0.625, 11), (0.5, 321), (0.5, 164), (0.5, 439), (0.5, 434), (0.5, 424), (0.5, 254), (0.5, 408), (0.5, 295), (0.5, 395), (0.5, 156), (0.5, 105), (0.5, 227), (0.5, 41), (0.5, 22), (0.5, 415), (0.5, 203), (0.5, 238), (0.5, 108), (0.5, 20), (0.5, 317), (0.5, 57), (0.5, 53), (0.5, 77), (0.5, 240), (0.5, 474), (0.5, 242), (0.5, 128), (0.5, 204), (0.5, 441), (0.5, 337), (0.5, 457), (0.5, 107), (0.5, 423), (0.5, 425), (0.5, 59), (0.5, 249), (0.5, 79), (0.5, 114), (0.5, 432), (0.5, 8), (0.5, 429), (0.5, 322), (0.5, 84), (0.5, 422), (0.5, 201), (0.5, 402), (0.41666666666666663, 221), (0.41666666666666663, 132), (0.41666666666666663, 445), (0.41666666666666663, 87), (0.41666666666666663, 97), (0.41666666666666663, 256), (0.41666666666666663, 382), (0.41666666666666663, 450), (0.41666666666666663, 284), (0.41666666666666663, 4), (0.41666666666666663, 451), (0.41666666666666663, 316), (0.41666666666666663, 52), (0.41666666666666663, 292), (0.41666666666666663, 447), (0.41666666666666663, 443), (0.41666666666666663, 64), (0.41666666666666663, 153), (0.41666666666666663, 431), (0.41666666666666663, 446), (0.375, 75), (0.375, 82), (0.375, 139), (0.375, 456), (0.375, 288), (0.375, 225), (0.375, 147), (0.375, 190), (0.29166666666666663, 212), (0.29166666666666663, 216), (0.25, 141), (0.25, 497), (0.25, 145), (0.25, 127), (0.25, 326), (0.25, 463), (0.25, 380), (0.25, 462), (0.25, 72), (0.25, 160), (0.25, 468), (0.25, 306), (0.25, 62), (0.25, 469), (0.25, 392), (0.25, 500), (0.25, 154), (0.25, 126), (0.25, 95), (0.25, 346), (0.25, 364), (0.25, 338), (0.25, 293), (0.25, 17), (0.25, 157), (0.25, 315), (0.25, 404), (0.25, 389), (0.25, 470), (0.25, 459), (0.25, 348), (0.25, 328), (0.25, 152), (0.25, 427), (0.25, 48), (0.25, 485), (0.25, 268), (0.25, 68), (0.25, 329), (0.25, 133), (0.25, 134), (0.25, 39), (0.25, 461), (0.25, 265), (0.25, 273), (0.25, 45), (0.25, 363), (0.25, 454), (0.25, 476), (0.25, 234), (0.25, 248), (0.25, 214), (0.25, 499), (0.25, 296), (0.25, 120), (0.25, 274), (0.25, 492), (0.25, 339), (0.25, 299), (0.25, 49), (0.25, 116), (0.25, 286), (0.25, 495), (0.25, 219), (0.25, 30), (0.25, 178), (0.25, 253), (0.25, 101), (0.25, 14), (0.25, 206), (0.25, 387), (0.25, 236), (0.25, 486), (0.25, 488), (0.25, 7), (0.25, 37), (0.25, 245), (0.25, 235), (0.25, 159), (0.25, 189), (0.25, 46), (0.25, 289), (0.25, 19), (0.25, 297), (0.25, 197), (0.25, 477), (0.25, 501), (0.25, 103), (0.25, 170), (0.25, 493), (0.25, 131), (0.25, 74), (0.25, 491), (0.25, 480), (0.25, 479), (0.25, 213), (0.25, 305), (0.25, 210), (0.25, 482), (0.25, 192), (0.25, 362), (0.25, 115), (0.25, 230), (0.25, 261), (0.25, 237), (0.25, 307), (0.25, 494), (0.25, 260), (0.25, 109), (0.25, 359), (0.25, 465), (0.25, 484), (0.25, 73), (0.25, 352), (0.25, 271), (0.25, 472), (0.25, 481), (0.25, 200), (0.25, 294), (0.25, 489), (0.25, 140), (0.25, 38), (0.25, 304), (0.25, 270), (0.25, 353), (0.25, 478), (0.25, 496), (0.25, 6), (0.25, 124), (0.25, 483), (0.25, 340), (0.25, 228), (0.25, 196), (0.25, 368), (0.25, 287), (0.25, 379), (0.25, 267), (0.25, 31), (0.25, 263), (0.25, 308), (0.25, 181), (0.25, 250), (0.25, 331), (0.25, 0), (0.25, 467), (0.25, 258), (0.25, 378), (0.25, 464), (0.16666666666666666, 252), (0.16666666666666666, 420), (0.16666666666666666, 399), (0.16666666666666666, 3), (0.16666666666666666, 280), (0.16666666666666666, 232), (0.16666666666666666, 118), (0.16666666666666666, 43), (0.16666666666666666, 92), (0.16666666666666666, 21), (0.16666666666666666, 244), (0.16666666666666666, 193), (0.16666666666666666, 246), (0.16666666666666666, 330), (0.16666666666666666, 397), (0.16666666666666666, 207), (0.16666666666666666, 161), (0.16666666666666666, 390), (0.16666666666666666, 149), (0.16666666666666666, 171), (0.16666666666666666, 370), (0.16666666666666666, 278), (0.16666666666666666, 70), (0.16666666666666666, 130), (0.16666666666666666, 333), (0.16666666666666666, 138), (0.16666666666666666, 5), (0.16666666666666666, 335), (0.16666666666666666, 298), (0.16666666666666666, 357), (0.16666666666666666, 374), (0.16666666666666666, 373), (0.16666666666666666, 179), (0.16666666666666666, 255), (0.16666666666666666, 112), (0.16666666666666666, 100), (0.16666666666666666, 324), (0.16666666666666666, 334), (0.16666666666666666, 349), (0.16666666666666666, 150), (0.16666666666666666, 24), (0.16666666666666666, 180), (0.16666666666666666, 448), (0.16666666666666666, 90), (0.16666666666666666, 195), (0.16666666666666666, 96), (0.16666666666666666, 309), (0.16666666666666666, 257), (0.16666666666666666, 51), (0.16666666666666666, 386), (0.16666666666666666, 302), (0.16666666666666666, 166), (0.16666666666666666, 218), (0.16666666666666666, 367), (0.16666666666666666, 285), (0.15625, 241), (0.125, 69), (0.125, 111), (0.125, 187), (0.125, 142), (0.125, 176), (0.125, 34), (0.125, 12), (0.125, 144), (0.125, 18), (0.125, 26), (0.125, 76), (0.125, 28), (0.125, 151), (0.125, 93), (0.125, 186), (0.125, 16), (0.125, 42), (0.125, 66), (0.125, 122), (0.125, 191), (0.125, 56), (0.125, 174), (0.125, 67), (0.125, 36), (0.125, 155), (0.125, 86), (0.125, 113), (0.125, 98), (0.125, 27), (0.125, 104), (0.125, 182), (0.125, 177), (0.125, 83), (0.125, 143), (0.125, 165), (0.125, 146), (0.125, 81), (0.125, 47), (0.125, 61), (0.125, 71), (0.125, 184), (0.125, 162), (0.125, 25), (0.125, 78), (0.125, 88), (0.125, 91), (0.125, 58), (0.125, 169), (0.125, 185), (0.125, 121), (0.125, 148), (0.125, 94), (0.125, 55), (0.125, 119), (0.125, 183), (0.125, 172), (0.125, 89), (0.125, 33), (0.125, 117), (0.125, 198), (0.125, 106), (0.125, 35), (0.125, 135), (0.125, 2), (0.125, 123), (0.125, 85), (0.125, 168), (0.125, 80), (0.125, 60), (0.125, 54), (0.125, 125), (0.125, 194), (0.125, 136), (0.125, 102), (0.125, 129), (0.125, 137), (0.125, 65), (0.125, 40)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`6`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 6 (+ x y))))
 nr_nodes: 8]
(CANDIDATE)[id: 406
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`6`#`#`6`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 6 6) (+ (* y x) y)))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 209), (1.375, 283), (1.25, 401), (1.125, 554), (1.125, 517), (1.0, 163), (1.0, 13), (1.0, 433), (1.0, 410), (1.0, 63), (1.0, 503), (1.0, 514), (1.0, 437), (1.0, 436), (1.0, 110), (1.0, 208), (1.0, 409), (1.0, 507), (1.0, 1), (1.0, 50), (1.0, 281), (1.0, 188), (1.0, 506), (1.0, 421), (1.0, 519), (1.0, 515), (1.0, 341), (1.0, 23), (1.0, 406), (1.0, 205), (1.0, 15), (1.0, 175), (0.75, 10), (0.625, 526), (0.625, 524), (0.625, 158), (0.625, 444), (0.625, 557), (0.625, 277), (0.625, 239), (0.625, 525), (0.625, 521), (0.625, 167), (0.625, 504), (0.625, 413), (0.625, 275), (0.625, 44), (0.625, 533), (0.625, 522), (0.625, 452), (0.625, 417), (0.625, 29), (0.625, 11), (0.625, 99), (0.625, 173), (0.625, 9), (0.625, 412), (0.625, 418), (0.5, 425), (0.5, 563), (0.5, 317), (0.5, 544), (0.5, 254), (0.5, 402), (0.5, 53), (0.5, 8), (0.5, 84), (0.5, 321), (0.5, 22), (0.5, 520), (0.5, 107), (0.5, 156), (0.5, 536), (0.5, 559), (0.5, 20), (0.5, 577), (0.5, 439), (0.5, 128), (0.5, 474), (0.5, 530), (0.5, 41), (0.5, 408), (0.5, 457), (0.5, 238), (0.5, 57), (0.5, 395), (0.5, 415), (0.5, 429), (0.5, 337), (0.5, 114), (0.5, 432), (0.5, 240), (0.5, 441), (0.5, 203), (0.5, 541), (0.5, 105), (0.5, 548), (0.5, 108), (0.5, 59), (0.5, 593), (0.5, 422), (0.5, 423), (0.5, 532), (0.5, 164), (0.5, 77), (0.5, 560), (0.5, 510), (0.5, 434), (0.5, 249), (0.5, 553), (0.5, 227), (0.5, 201), (0.5, 424), (0.5, 295), (0.5, 512), (0.5, 322), (0.5, 539), (0.5, 545), (0.5, 79), (0.5, 576), (0.5, 204), (0.5, 535), (0.5, 242), (0.41666666666666663, 590), (0.41666666666666663, 97), (0.41666666666666663, 572), (0.41666666666666663, 447), (0.41666666666666663, 292), (0.41666666666666663, 284), (0.41666666666666663, 256), (0.41666666666666663, 443), (0.41666666666666663, 52), (0.41666666666666663, 382), (0.41666666666666663, 316), (0.41666666666666663, 571), (0.41666666666666663, 445), (0.41666666666666663, 132), (0.41666666666666663, 570), (0.41666666666666663, 4), (0.41666666666666663, 221), (0.41666666666666663, 431), (0.41666666666666663, 565), (0.41666666666666663, 64), (0.41666666666666663, 569), (0.41666666666666663, 446), (0.41666666666666663, 451), (0.41666666666666663, 568), (0.41666666666666663, 575), (0.41666666666666663, 87), (0.41666666666666663, 153), (0.41666666666666663, 450), (0.375, 456), (0.375, 147), (0.375, 579), (0.375, 139), (0.375, 75), (0.375, 190), (0.375, 82), (0.375, 288), (0.375, 528), (0.375, 225), (0.29166666666666663, 216), (0.29166666666666663, 212), (0.25, 305), (0.25, 585), (0.25, 152), (0.25, 265), (0.25, 469), (0.25, 340), (0.25, 245), (0.25, 392), (0.25, 584), (0.25, 492), (0.25, 14), (0.25, 213), (0.25, 326), (0.25, 481), (0.25, 482), (0.25, 463), (0.25, 228), (0.25, 219), (0.25, 101), (0.25, 488), (0.25, 389), (0.25, 596), (0.25, 483), (0.25, 236), (0.25, 235), (0.25, 476), (0.25, 68), (0.25, 7), (0.25, 192), (0.25, 297), (0.25, 496), (0.25, 126), (0.25, 562), (0.25, 339), (0.25, 181), (0.25, 467), (0.25, 37), (0.25, 197), (0.25, 582), (0.25, 258), (0.25, 72), (0.25, 287), (0.25, 234), (0.25, 534), (0.25, 299), (0.25, 268), (0.25, 17), (0.25, 472), (0.25, 461), (0.25, 550), (0.25, 19), (0.25, 493), (0.25, 95), (0.25, 597), (0.25, 308), (0.25, 306), (0.25, 499), (0.25, 141), (0.25, 74), (0.25, 103), (0.25, 46), (0.25, 556), (0.25, 200), (0.25, 427), (0.25, 591), (0.25, 271), (0.25, 286), (0.25, 346), (0.25, 500), (0.25, 304), (0.25, 237), (0.25, 516), (0.25, 353), (0.25, 30), (0.25, 263), (0.25, 465), (0.25, 261), (0.25, 140), (0.25, 250), (0.25, 489), (0.25, 497), (0.25, 468), (0.25, 364), (0.25, 248), (0.25, 598), (0.25, 189), (0.25, 379), (0.25, 62), (0.25, 293), (0.25, 260), (0.25, 485), (0.25, 363), (0.25, 38), (0.25, 133), (0.25, 160), (0.25, 495), (0.25, 552), (0.25, 477), (0.25, 368), (0.25, 230), (0.25, 494), (0.25, 307), (0.25, 359), (0.25, 253), (0.25, 73), (0.25, 124), (0.25, 296), (0.25, 154), (0.25, 159), (0.25, 529), (0.25, 267), (0.25, 120), (0.25, 127), (0.25, 587), (0.25, 31), (0.25, 6), (0.25, 600), (0.25, 601), (0.25, 329), (0.25, 328), (0.25, 594), (0.25, 486), (0.25, 380), (0.25, 348), (0.25, 484), (0.25, 315), (0.25, 170), (0.25, 274), (0.25, 116), (0.25, 387), (0.25, 145), (0.25, 178), (0.25, 338), (0.25, 134), (0.25, 478), (0.25, 196), (0.25, 49), (0.25, 206), (0.25, 157), (0.25, 331), (0.25, 464), (0.25, 294), (0.25, 589), (0.25, 352), (0.25, 289), (0.25, 214), (0.25, 501), (0.25, 39), (0.25, 362), (0.25, 45), (0.25, 378), (0.25, 273), (0.25, 270), (0.25, 537), (0.25, 462), (0.25, 479), (0.25, 48), (0.25, 404), (0.25, 459), (0.25, 583), (0.25, 109), (0.25, 131), (0.25, 588), (0.25, 480), (0.25, 115), (0.25, 491), (0.25, 470), (0.25, 454), (0.25, 210), (0.25, 0), (0.16666666666666666, 397), (0.16666666666666666, 218), (0.16666666666666666, 255), (0.16666666666666666, 367), (0.16666666666666666, 324), (0.16666666666666666, 193), (0.16666666666666666, 573), (0.16666666666666666, 96), (0.16666666666666666, 246), (0.16666666666666666, 244), (0.16666666666666666, 302), (0.16666666666666666, 3), (0.16666666666666666, 138), (0.16666666666666666, 257), (0.16666666666666666, 448), (0.16666666666666666, 100), (0.16666666666666666, 5), (0.16666666666666666, 90), (0.16666666666666666, 370), (0.16666666666666666, 195), (0.16666666666666666, 51), (0.16666666666666666, 171), (0.16666666666666666, 399), (0.16666666666666666, 335), (0.16666666666666666, 547), (0.16666666666666666, 543), (0.16666666666666666, 166), (0.16666666666666666, 149), (0.16666666666666666, 21), (0.16666666666666666, 309), (0.16666666666666666, 567), (0.16666666666666666, 578), (0.16666666666666666, 150), (0.16666666666666666, 357), (0.16666666666666666, 118), (0.16666666666666666, 373), (0.16666666666666666, 278), (0.16666666666666666, 179), (0.16666666666666666, 130), (0.16666666666666666, 112), (0.16666666666666666, 285), (0.16666666666666666, 334), (0.16666666666666666, 43), (0.16666666666666666, 232), (0.16666666666666666, 207), (0.16666666666666666, 161), (0.16666666666666666, 92), (0.16666666666666666, 252), (0.16666666666666666, 390), (0.16666666666666666, 386), (0.16666666666666666, 508), (0.16666666666666666, 298), (0.16666666666666666, 374), (0.16666666666666666, 180), (0.16666666666666666, 333), (0.16666666666666666, 566), (0.16666666666666666, 330), (0.16666666666666666, 24), (0.16666666666666666, 420), (0.16666666666666666, 280), (0.16666666666666666, 349), (0.16666666666666666, 70), (0.15625, 241), (0.125, 187), (0.125, 580), (0.125, 69), (0.125, 111)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 554
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`6`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y y) (* x 6)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 517
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ y x)) (+ y 6)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 209), (1.375, 617), (1.375, 283), (1.25, 401), (1.25, 603), (1.125, 517), (1.125, 554), (1.125, 658), (1.0, 605), (1.0, 618), (1.0, 519), (1.0, 614), (1.0, 1), (1.0, 663), (1.0, 437), (1.0, 175), (1.0, 15), (1.0, 23), (1.0, 208), (1.0, 642), (1.0, 421), (1.0, 506), (1.0, 205), (1.0, 436), (1.0, 110), (1.0, 612), (1.0, 410), (1.0, 50), (1.0, 13), (1.0, 433), (1.0, 163), (1.0, 406), (1.0, 606), (1.0, 188), (1.0, 63), (1.0, 514), (1.0, 507), (1.0, 515), (1.0, 608), (1.0, 281), (1.0, 503), (1.0, 409), (1.0, 620), (1.0, 619), (1.0, 341), (0.875, 645), (0.75, 10), (0.75, 641), (0.75, 667), (0.625, 452), (0.625, 418), (0.625, 29), (0.625, 633), (0.625, 660), (0.625, 275), (0.625, 167), (0.625, 173), (0.625, 158), (0.625, 637), (0.625, 623), (0.625, 655), (0.625, 521), (0.625, 639), (0.625, 9), (0.625, 444), (0.625, 643), (0.625, 628), (0.625, 664), (0.625, 11), (0.625, 522), (0.625, 640), (0.625, 525), (0.625, 239), (0.625, 557), (0.625, 277), (0.625, 524), (0.625, 413), (0.625, 653), (0.625, 504), (0.625, 634), (0.625, 99), (0.625, 412), (0.625, 417), (0.625, 526), (0.625, 44), (0.625, 533), (0.5, 674), (0.5, 254), (0.5, 539), (0.5, 240), (0.5, 423), (0.5, 649), (0.5, 105), (0.5, 79), (0.5, 535), (0.5, 563), (0.5, 59), (0.5, 679), (0.5, 84), (0.5, 57), (0.5, 8), (0.5, 610), (0.5, 317), (0.5, 402), (0.5, 441), (0.5, 22), (0.5, 439), (0.5, 560), (0.5, 668), (0.5, 636), (0.5, 424), (0.5, 627), (0.5, 322), (0.5, 114), (0.5, 429), (0.5, 593), (0.5, 156), (0.5, 541), (0.5, 665), (0.5, 657), (0.5, 203), (0.5, 415), (0.5, 532), (0.5, 128), (0.5, 164), (0.5, 512), (0.5, 676), (0.5, 204), (0.5, 249), (0.5, 659), (0.5, 666), (0.5, 577), (0.5, 474), (0.5, 553), (0.5, 227), (0.5, 654), (0.5, 337), (0.5, 548), (0.5, 675), (0.5, 425), (0.5, 457), (0.5, 53), (0.5, 559), (0.5, 510), (0.5, 238), (0.5, 672), (0.5, 107), (0.5, 422), (0.5, 108), (0.5, 242), (0.5, 434), (0.5, 662), (0.5, 530), (0.5, 648), (0.5, 408), (0.5, 41), (0.5, 520), (0.5, 20), (0.5, 321), (0.5, 651), (0.5, 616), (0.5, 545), (0.5, 77), (0.5, 661), (0.5, 295), (0.5, 432), (0.5, 544), (0.5, 576), (0.5, 201), (0.5, 536), (0.5, 395), (0.41666666666666663, 451), (0.41666666666666663, 689), (0.41666666666666663, 569), (0.41666666666666663, 571), (0.41666666666666663, 4), (0.41666666666666663, 568), (0.41666666666666663, 445), (0.41666666666666663, 690), (0.41666666666666663, 64), (0.41666666666666663, 256), (0.41666666666666663, 450), (0.41666666666666663, 647), (0.41666666666666663, 443), (0.41666666666666663, 575), (0.41666666666666663, 221), (0.41666666666666663, 570), (0.41666666666666663, 292), (0.41666666666666663, 590), (0.41666666666666663, 52), (0.41666666666666663, 565), (0.41666666666666663, 447), (0.41666666666666663, 316), (0.41666666666666663, 681), (0.41666666666666663, 685), (0.41666666666666663, 132), (0.41666666666666663, 87), (0.41666666666666663, 625), (0.41666666666666663, 682), (0.41666666666666663, 284), (0.41666666666666663, 572), (0.41666666666666663, 153), (0.41666666666666663, 382), (0.41666666666666663, 680), (0.41666666666666663, 684), (0.41666666666666663, 431), (0.41666666666666663, 446), (0.41666666666666663, 693), (0.41666666666666663, 691), (0.41666666666666663, 683), (0.41666666666666663, 97), (0.375, 139), (0.375, 288), (0.375, 579), (0.375, 190), (0.375, 75), (0.375, 82), (0.375, 147), (0.375, 225), (0.375, 456), (0.375, 528), (0.29166666666666663, 216), (0.29166666666666663, 212), (0.25, 245), (0.25, 178), (0.25, 378), (0.25, 157), (0.25, 556), (0.25, 140), (0.25, 170), (0.25, 594), (0.25, 159), (0.25, 392), (0.25, 30), (0.25, 583), (0.25, 38), (0.25, 584), (0.25, 486), (0.25, 630), (0.25, 483), (0.25, 476), (0.25, 464), (0.25, 463), (0.25, 289), (0.25, 482), (0.25, 45), (0.25, 127), (0.25, 261), (0.25, 197), (0.25, 481), (0.25, 462), (0.25, 329), (0.25, 68), (0.25, 299), (0.25, 48), (0.25, 296), (0.25, 230), (0.25, 496), (0.25, 253), (0.25, 31), (0.25, 348), (0.25, 263), (0.25, 228), (0.25, 488), (0.25, 124), (0.25, 489), (0.25, 265), (0.25, 287), (0.25, 304), (0.25, 534), (0.25, 271), (0.25, 494), (0.25, 353), (0.25, 308), (0.25, 359), (0.25, 404), (0.25, 101), (0.25, 591), (0.25, 468), (0.25, 103), (0.25, 200), (0.25, 387), (0.25, 479), (0.25, 7), (0.25, 236), (0.25, 6), (0.25, 646), (0.25, 306), (0.25, 669), (0.25, 516), (0.25, 39), (0.25, 497), (0.25, 116), (0.25, 485), (0.25, 120), (0.25, 678), (0.25, 552), (0.25, 305), (0.25, 495), (0.25, 338), (0.25, 472), (0.25, 273), (0.25, 74), (0.25, 274), (0.25, 537), (0.25, 499), (0.25, 459), (0.25, 598), (0.25, 600), (0.25, 613), (0.25, 363), (0.25, 477), (0.25, 19), (0.25, 492), (0.25, 467), (0.25, 607), (0.25, 206), (0.25, 364), (0.25, 562), (0.25, 346), (0.25, 297), (0.25, 478), (0.25, 331), (0.25, 307), (0.25, 181), (0.25, 109), (0.25, 368), (0.25, 484), (0.25, 62), (0.25, 294), (0.25, 293), (0.25, 258), (0.25, 260), (0.25, 248), (0.25, 141), (0.25, 17), (0.25, 267), (0.25, 214), (0.25, 500), (0.25, 587), (0.25, 582), (0.25, 189), (0.25, 550), (0.25, 237), (0.25, 46), (0.25, 601), (0.25, 589), (0.25, 196), (0.25, 328), (0.25, 286), (0.25, 362), (0.25, 72), (0.25, 631), (0.25, 73), (0.25, 469), (0.25, 501), (0.25, 133), (0.25, 529), (0.25, 340), (0.25, 154), (0.25, 380), (0.25, 213), (0.25, 37), (0.25, 219), (0.25, 596), (0.25, 145), (0.25, 49), (0.25, 234), (0.25, 95), (0.25, 585), (0.25, 192), (0.25, 352), (0.25, 235), (0.25, 126), (0.25, 250), (0.25, 315), (0.25, 131), (0.25, 339), (0.25, 379), (0.25, 152), (0.25, 461), (0.25, 326), (0.25, 134), (0.25, 427), (0.25, 268), (0.25, 270), (0.25, 493), (0.25, 597), (0.25, 465), (0.25, 160), (0.25, 14), (0.25, 389), (0.16666666666666666, 624), (0.16666666666666666, 687), (0.16666666666666666, 644), (0.16666666666666666, 694), (0.16666666666666666, 670), (0.16666666666666666, 602), (0.16666666666666666, 622), (0.16666666666666666, 695)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 617
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) (+ (+ y x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 603
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 209), (1.375, 757), (1.375, 617), (1.375, 283), (1.375, 699), (1.25, 603), (1.25, 401), (1.25, 728), (1.125, 517), (1.125, 711), (1.125, 702), (1.125, 554), (1.125, 658), (1.0, 409), (1.0, 708), (1.0, 723), (1.0, 606), (1.0, 433), (1.0, 406), (1.0, 721), (1.0, 612), (1.0, 725), (1.0, 619), (1.0, 608), (1.0, 614), (1.0, 1), (1.0, 605), (1.0, 506), (1.0, 188), (1.0, 23), (1.0, 63), (1.0, 175), (1.0, 792), (1.0, 718), (1.0, 205), (1.0, 503), (1.0, 519), (1.0, 720), (1.0, 13), (1.0, 50), (1.0, 714), (1.0, 707), (1.0, 163), (1.0, 421), (1.0, 620), (1.0, 437), (1.0, 719), (1.0, 410), (1.0, 341), (1.0, 712), (1.0, 618), (1.0, 110), (1.0, 436), (1.0, 507), (1.0, 281), (1.0, 208), (1.0, 642), (1.0, 514), (1.0, 15), (1.0, 663), (1.0, 515), (0.875, 744), (0.875, 645), (0.75, 667), (0.75, 10), (0.75, 729), (0.75, 750), (0.75, 641), (0.625, 740), (0.625, 412), (0.625, 173), (0.625, 747), (0.625, 557), (0.625, 735), (0.625, 158), (0.625, 277), (0.625, 9), (0.625, 660), (0.625, 765), (0.625, 640), (0.625, 526), (0.625, 786), (0.625, 525), (0.625, 791), (0.625, 730), (0.625, 637), (0.625, 739), (0.625, 524), (0.625, 772), (0.625, 167), (0.625, 746), (0.625, 11), (0.625, 522), (0.625, 275), (0.625, 634), (0.625, 755), (0.625, 628), (0.625, 29), (0.625, 741), (0.625, 413), (0.625, 504), (0.625, 639), (0.625, 751), (0.625, 643), (0.625, 653), (0.625, 239), (0.625, 749), (0.625, 444), (0.625, 787), (0.625, 743), (0.625, 705), (0.625, 44), (0.625, 452), (0.625, 664), (0.625, 417), (0.625, 533), (0.625, 734), (0.625, 99), (0.625, 633), (0.625, 623), (0.625, 418), (0.625, 745), (0.625, 655), (0.625, 521), (0.5, 434), (0.5, 128), (0.5, 79), (0.5, 424), (0.5, 415), (0.5, 8), (0.5, 77), (0.5, 535), (0.5, 474), (0.5, 771), (0.5, 432), (0.5, 675), (0.5, 661), (0.5, 616), (0.5, 441), (0.5, 610), (0.5, 337), (0.5, 425), (0.5, 457), (0.5, 520), (0.5, 679), (0.5, 576), (0.5, 548), (0.5, 657), (0.5, 317), (0.5, 553), (0.5, 422), (0.5, 770), (0.5, 105), (0.5, 240), (0.5, 544), (0.5, 59), (0.5, 536), (0.5, 57), (0.5, 108), (0.5, 249), (0.5, 577), (0.5, 659), (0.5, 107), (0.5, 402), (0.5, 512), (0.5, 539), (0.5, 20), (0.5, 321), (0.5, 674), (0.5, 764), (0.5, 510), (0.5, 423), (0.5, 164), (0.5, 651), (0.5, 790), (0.5, 530), (0.5, 429), (0.5, 773), (0.5, 763), (0.5, 201), (0.5, 676), (0.5, 254), (0.5, 408), (0.5, 203), (0.5, 776), (0.5, 227), (0.5, 563), (0.5, 672), (0.5, 781), (0.5, 654), (0.5, 762), (0.5, 41), (0.5, 709), (0.5, 636), (0.5, 788), (0.5, 295), (0.5, 53), (0.5, 703), (0.5, 593), (0.5, 84), (0.5, 541), (0.5, 662), (0.5, 766), (0.5, 204), (0.5, 775), (0.5, 395), (0.5, 242), (0.5, 666), (0.5, 156), (0.5, 760), (0.5, 532), (0.5, 439), (0.5, 322), (0.5, 742), (0.5, 22), (0.5, 759), (0.5, 627), (0.5, 238), (0.5, 758), (0.5, 114), (0.5, 668), (0.5, 665), (0.5, 648), (0.5, 559), (0.5, 560), (0.5, 545), (0.5, 649), (0.41666666666666663, 769), (0.41666666666666663, 446), (0.41666666666666663, 575), (0.41666666666666663, 316), (0.41666666666666663, 568), (0.41666666666666663, 284), (0.41666666666666663, 570), (0.41666666666666663, 64), (0.41666666666666663, 572), (0.41666666666666663, 97), (0.41666666666666663, 4), (0.41666666666666663, 680), (0.41666666666666663, 132), (0.41666666666666663, 451), (0.41666666666666663, 693), (0.41666666666666663, 625), (0.41666666666666663, 52), (0.41666666666666663, 571), (0.41666666666666663, 153), (0.41666666666666663, 382), (0.41666666666666663, 690), (0.41666666666666663, 691), (0.41666666666666663, 431), (0.41666666666666663, 689), (0.41666666666666663, 647), (0.41666666666666663, 681), (0.41666666666666663, 443), (0.41666666666666663, 684), (0.41666666666666663, 569), (0.41666666666666663, 447), (0.41666666666666663, 450), (0.41666666666666663, 590), (0.41666666666666663, 292), (0.41666666666666663, 565), (0.41666666666666663, 682), (0.41666666666666663, 87), (0.41666666666666663, 256), (0.41666666666666663, 445), (0.41666666666666663, 683), (0.41666666666666663, 221), (0.41666666666666663, 685), (0.375, 697), (0.375, 528), (0.375, 780), (0.375, 579), (0.375, 75), (0.375, 456), (0.375, 288), (0.375, 704), (0.375, 732), (0.375, 147), (0.375, 190), (0.375, 225), (0.375, 82), (0.375, 139), (0.375, 726), (0.375, 737), (0.29166666666666663, 212), (0.29166666666666663, 216), (0.25, 404), (0.25, 378), (0.25, 140), (0.25, 516), (0.25, 181), (0.25, 289), (0.25, 245), (0.25, 701), (0.25, 488), (0.25, 534), (0.25, 346), (0.25, 583), (0.25, 496), (0.25, 206), (0.25, 472), (0.25, 478), (0.25, 359), (0.25, 678), (0.25, 159), (0.25, 468), (0.25, 479), (0.25, 120), (0.25, 552), (0.25, 607), (0.25, 74), (0.25, 228), (0.25, 353), (0.25, 482), (0.25, 463), (0.25, 101), (0.25, 271), (0.25, 477), (0.25, 307), (0.25, 261), (0.25, 613), (0.25, 715), (0.25, 103), (0.25, 489), (0.25, 287), (0.25, 338), (0.25, 495), (0.25, 116), (0.25, 170), (0.25, 236), (0.25, 6), (0.25, 492), (0.25, 483), (0.25, 45), (0.25, 476), (0.25, 48), (0.25, 274), (0.25, 537), (0.25, 19), (0.25, 230), (0.25, 600), (0.25, 467), (0.25, 556), (0.25, 363), (0.25, 598), (0.25, 178), (0.25, 778), (0.25, 297), (0.25, 200), (0.25, 756), (0.25, 387), (0.25, 630), (0.25, 39), (0.25, 392), (0.25, 591), (0.25, 594), (0.25, 754), (0.25, 717), (0.25, 30), (0.25, 127), (0.25, 364), (0.25, 305), (0.25, 304), (0.25, 752), (0.25, 459), (0.25, 299), (0.25, 485), (0.25, 462), (0.25, 669), (0.25, 253), (0.25, 481), (0.25, 584), (0.25, 499), (0.25, 785), (0.25, 197), (0.25, 494), (0.25, 38), (0.25, 767), (0.25, 273), (0.25, 296), (0.25, 263), (0.25, 124), (0.25, 646), (0.25, 306), (0.25, 31), (0.25, 308), (0.25, 265), (0.25, 464), (0.25, 782), (0.25, 329), (0.25, 331), (0.25, 486), (0.25, 348), (0.25, 497), (0.25, 7), (0.25, 68), (0.25, 157), (0.25, 562), (0.16666666666666666, 731), (0.16666666666666666, 783)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 757
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* y 6) x) x) y))
 nr_nodes: 10]
(CANDIDATE)[id: 617
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) (+ (+ y x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 699
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 209), (1.5, 823), (1.375, 283), (1.375, 617), (1.375, 699), (1.375, 796), (1.375, 757), (1.25, 801), (1.25, 401), (1.25, 800), (1.25, 728), (1.25, 603), (1.25, 797), (1.125, 702), (1.125, 554), (1.125, 517), (1.125, 711), (1.125, 798), (1.125, 658), (1.125, 799), (1.125, 852), (1.0, 714), (1.0, 506), (1.0, 608), (1.0, 718), (1.0, 719), (1.0, 519), (1.0, 188), (1.0, 720), (1.0, 614), (1.0, 822), (1.0, 618), (1.0, 820), (1.0, 50), (1.0, 856), (1.0, 620), (1.0, 1), (1.0, 163), (1.0, 612), (1.0, 828), (1.0, 605), (1.0, 433), (1.0, 606), (1.0, 515), (1.0, 437), (1.0, 821), (1.0, 410), (1.0, 619), (1.0, 421), (1.0, 436), (1.0, 803), (1.0, 725), (1.0, 514), (1.0, 721), (1.0, 792), (1.0, 175), (1.0, 707), (1.0, 15), (1.0, 663), (1.0, 63), (1.0, 804), (1.0, 110), (1.0, 826), (1.0, 503), (1.0, 208), (1.0, 23), (1.0, 708), (1.0, 809), (1.0, 811), (1.0, 13), (1.0, 281), (1.0, 844), (1.0, 723), (1.0, 409), (1.0, 642), (1.0, 868), (1.0, 831), (1.0, 406), (1.0, 507), (1.0, 205), (1.0, 341), (1.0, 807), (1.0, 810), (1.0, 712), (0.875, 645), (0.875, 744), (0.75, 833), (0.75, 750), (0.75, 10), (0.75, 729), (0.75, 835), (0.75, 667), (0.75, 641), (0.625, 557), (0.625, 869), (0.625, 633), (0.625, 275), (0.625, 874), (0.625, 749), (0.625, 417), (0.625, 786), (0.625, 628), (0.625, 526), (0.625, 653), (0.625, 879), (0.625, 643), (0.625, 735), (0.625, 787), (0.625, 11), (0.625, 452), (0.625, 836), (0.625, 808), (0.625, 747), (0.625, 887), (0.625, 751), (0.625, 412), (0.625, 173), (0.625, 889), (0.625, 637), (0.625, 277), (0.625, 522), (0.625, 444), (0.625, 841), (0.625, 639), (0.625, 765), (0.625, 740), (0.625, 167), (0.625, 664), (0.625, 741), (0.625, 413), (0.625, 158), (0.625, 739), (0.625, 504), (0.625, 862), (0.625, 827), (0.625, 791), (0.625, 730), (0.625, 743), (0.625, 239), (0.625, 845), (0.625, 772), (0.625, 533), (0.625, 524), (0.625, 634), (0.625, 850), (0.625, 837), (0.625, 755), (0.625, 99), (0.625, 745), (0.625, 623), (0.625, 418), (0.625, 746), (0.625, 705), (0.625, 9), (0.625, 640), (0.625, 660), (0.625, 734), (0.625, 29), (0.625, 839), (0.625, 871), (0.625, 859), (0.625, 44), (0.625, 655), (0.625, 525), (0.625, 521), (0.5, 545), (0.5, 651), (0.5, 627), (0.5, 249), (0.5, 661), (0.5, 8), (0.5, 563), (0.5, 764), (0.5, 888), (0.5, 672), (0.5, 892), (0.5, 548), (0.5, 57), (0.5, 422), (0.5, 659), (0.5, 665), (0.5, 457), (0.5, 553), (0.5, 432), (0.5, 114), (0.5, 322), (0.5, 758), (0.5, 649), (0.5, 84), (0.5, 295), (0.5, 832), (0.5, 654), (0.5, 872), (0.5, 610), (0.5, 560), (0.5, 843), (0.5, 441), (0.5, 395), (0.5, 254), (0.5, 425), (0.5, 423), (0.5, 742), (0.5, 818), (0.5, 648), (0.5, 156), (0.5, 881), (0.5, 415), (0.5, 108), (0.5, 77), (0.5, 781), (0.5, 813), (0.5, 885), (0.5, 616), (0.5, 762), (0.5, 79), (0.5, 577), (0.5, 668), (0.5, 760), (0.5, 317), (0.5, 877), (0.5, 337), (0.5, 662), (0.5, 238), (0.5, 676), (0.5, 544), (0.5, 770), (0.5, 878), (0.5, 439), (0.5, 510), (0.5, 539), (0.5, 242), (0.5, 105), (0.5, 204), (0.5, 535), (0.5, 674), (0.5, 227), (0.5, 22), (0.5, 474), (0.5, 532), (0.5, 128), (0.5, 429), (0.5, 520), (0.5, 666), (0.5, 771), (0.5, 203), (0.5, 819), (0.5, 776), (0.5, 576), (0.5, 773), (0.5, 321), (0.5, 20), (0.5, 512), (0.5, 788), (0.5, 657), (0.5, 240), (0.5, 775), (0.5, 41), (0.5, 59), (0.5, 876), (0.5, 434), (0.5, 709), (0.5, 164), (0.5, 790), (0.5, 593), (0.5, 402), (0.5, 107), (0.5, 703), (0.5, 530), (0.5, 763), (0.5, 858), (0.5, 424), (0.5, 766), (0.5, 880), (0.5, 825), (0.5, 408), (0.5, 536), (0.5, 679), (0.5, 53), (0.5, 559), (0.5, 636), (0.5, 541), (0.5, 873), (0.5, 675), (0.5, 201), (0.5, 793), (0.5, 759), (0.41666666666666663, 431), (0.41666666666666663, 570), (0.41666666666666663, 891), (0.41666666666666663, 682), (0.41666666666666663, 221), (0.41666666666666663, 292), (0.41666666666666663, 284), (0.41666666666666663, 565), (0.41666666666666663, 4), (0.41666666666666663, 625), (0.41666666666666663, 685), (0.41666666666666663, 683), (0.41666666666666663, 64), (0.41666666666666663, 575), (0.41666666666666663, 447), (0.41666666666666663, 87), (0.41666666666666663, 681), (0.41666666666666663, 691), (0.41666666666666663, 769), (0.41666666666666663, 572), (0.41666666666666663, 52), (0.41666666666666663, 445), (0.41666666666666663, 443), (0.41666666666666663, 848), (0.41666666666666663, 446), (0.41666666666666663, 132), (0.41666666666666663, 153), (0.41666666666666663, 647), (0.41666666666666663, 97), (0.41666666666666663, 450), (0.41666666666666663, 690), (0.41666666666666663, 680), (0.41666666666666663, 693), (0.41666666666666663, 256), (0.41666666666666663, 590), (0.41666666666666663, 569), (0.41666666666666663, 568), (0.41666666666666663, 684), (0.41666666666666663, 571), (0.41666666666666663, 451), (0.41666666666666663, 382), (0.41666666666666663, 689), (0.41666666666666663, 316), (0.375, 456), (0.375, 704), (0.375, 82), (0.375, 737), (0.375, 75), (0.375, 854), (0.375, 139), (0.375, 147), (0.375, 780), (0.375, 697), (0.375, 857), (0.375, 225), (0.375, 190), (0.375, 863), (0.375, 726), (0.375, 288), (0.375, 865), (0.375, 579), (0.375, 732), (0.375, 528), (0.29166666666666663, 216), (0.29166666666666663, 212), (0.25, 715), (0.25, 307), (0.25, 359), (0.25, 228), (0.25, 378), (0.25, 478), (0.25, 552), (0.25, 795), (0.25, 353), (0.25, 583), (0.25, 140), (0.25, 271), (0.25, 181), (0.25, 516), (0.25, 482), (0.25, 245), (0.25, 261), (0.25, 287), (0.25, 846), (0.25, 468), (0.25, 206), (0.25, 120), (0.25, 806), (0.25, 472), (0.25, 479), (0.25, 613), (0.25, 101), (0.25, 488), (0.25, 701), (0.25, 678), (0.25, 159), (0.25, 103), (0.25, 463), (0.25, 607), (0.25, 404), (0.25, 860), (0.25, 477), (0.25, 74), (0.25, 489), (0.25, 534), (0.25, 346), (0.25, 289), (0.25, 496), (0.16666666666666666, 875), (0.16666666666666666, 830), (0.16666666666666666, 883), (0.16666666666666666, 867), (0.16666666666666666, 815), (0.16666666666666666, 816)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 823
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ x x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 617
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y 6) (+ (+ y x) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 699
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.5, 209), (1.5, 823), (1.375, 283), (1.375, 699), (1.375, 898), (1.375, 796), (1.375, 617), (1.375, 757), (1.25, 801), (1.25, 401), (1.25, 797), (1.25, 603), (1.25, 904), (1.25, 728), (1.25, 800), (1.125, 711), (1.125, 517), (1.125, 702), (1.125, 554), (1.125, 968), (1.125, 959), (1.125, 798), (1.125, 799), (1.125, 658), (1.125, 852), (1.0, 972), (1.0, 714), (1.0, 507), (1.0, 50), (1.0, 821), (1.0, 205), (1.0, 503), (1.0, 110), (1.0, 844), (1.0, 13), (1.0, 614), (1.0, 725), (1.0, 826), (1.0, 663), (1.0, 437), (1.0, 1), (1.0, 515), (1.0, 618), (1.0, 23), (1.0, 831), (1.0, 410), (1.0, 519), (1.0, 15), (1.0, 820), (1.0, 947), (1.0, 409), (1.0, 707), (1.0, 514), (1.0, 822), (1.0, 708), (1.0, 807), (1.0, 421), (1.0, 605), (1.0, 920), (1.0, 712), (1.0, 341), (1.0, 723), (1.0, 433), (1.0, 918), (1.0, 948), (1.0, 406), (1.0, 809), (1.0, 188), (1.0, 208), (1.0, 63), (1.0, 642), (1.0, 620), (1.0, 163), (1.0, 915), (1.0, 436), (1.0, 913), (1.0, 619), (1.0, 910), (1.0, 810), (1.0, 916), (1.0, 856), (1.0, 804), (1.0, 946), (1.0, 606), (1.0, 828), (1.0, 720), (1.0, 175), (1.0, 922), (1.0, 930), (1.0, 868), (1.0, 721), (1.0, 281), (1.0, 506), (1.0, 926), (1.0, 929), (1.0, 608), (1.0, 718), (1.0, 811), (1.0, 803), (1.0, 792), (1.0, 612), (1.0, 719), (0.875, 645), (0.875, 903), (0.875, 744), (0.75, 10), (0.75, 835), (0.75, 833), (0.75, 750), (0.75, 667), (0.75, 951), (0.75, 641), (0.75, 729), (0.625, 967), (0.625, 887), (0.625, 525), (0.625, 897), (0.625, 44), (0.625, 871), (0.625, 751), (0.625, 862), (0.625, 557), (0.625, 412), (0.625, 981), (0.625, 859), (0.625, 173), (0.625, 275), (0.625, 874), (0.625, 526), (0.625, 836), (0.625, 808), (0.625, 879), (0.625, 791), (0.625, 633), (0.625, 974), (0.625, 522), (0.625, 786), (0.625, 839), (0.625, 984), (0.625, 741), (0.625, 413), (0.625, 743), (0.625, 966), (0.625, 643), (0.625, 943), (0.625, 521), (0.625, 735), (0.625, 765), (0.625, 418), (0.625, 869), (0.625, 628), (0.625, 277), (0.625, 653), (0.625, 953), (0.625, 29), (0.625, 746), (0.625, 827), (0.625, 504), (0.625, 239), (0.625, 845), (0.625, 417), (0.625, 908), (0.625, 730), (0.625, 990), (0.625, 634), (0.625, 655), (0.625, 950), (0.625, 739), (0.625, 99), (0.625, 787), (0.625, 524), (0.625, 734), (0.625, 660), (0.625, 994), (0.625, 895), (0.625, 158), (0.625, 639), (0.625, 747), (0.625, 837), (0.625, 533), (0.625, 749), (0.625, 991), (0.625, 637), (0.625, 772), (0.625, 444), (0.625, 745), (0.625, 740), (0.625, 755), (0.625, 623), (0.625, 850), (0.625, 664), (0.625, 705), (0.625, 640), (0.625, 9), (0.625, 452), (0.625, 960), (0.625, 987), (0.625, 167), (0.625, 889), (0.625, 841), (0.625, 11), (0.5, 666), (0.5, 763), (0.5, 905), (0.5, 84), (0.5, 77), (0.5, 668), (0.5, 872), (0.5, 520), (0.5, 203), (0.5, 254), (0.5, 249), (0.5, 764), (0.5, 758), (0.5, 408), (0.5, 654), (0.5, 776), (0.5, 885), (0.5, 888), (0.5, 423), (0.5, 790), (0.5, 651), (0.5, 760), (0.5, 892), (0.5, 832), (0.5, 636), (0.5, 818), (0.5, 57), (0.5, 227), (0.5, 964), (0.5, 577), (0.5, 813), (0.5, 936), (0.5, 53), (0.5, 114), (0.5, 770), (0.5, 876), (0.5, 762), (0.5, 880), (0.5, 771), (0.5, 541), (0.5, 825), (0.5, 661), (0.5, 536), (0.5, 432), (0.5, 759), (0.5, 510), (0.5, 969), (0.5, 709), (0.5, 535), (0.5, 395), (0.5, 107), (0.5, 649), (0.5, 858), (0.5, 322), (0.5, 901), (0.5, 665), (0.5, 22), (0.5, 648), (0.5, 457), (0.5, 906), (0.5, 559), (0.5, 553), (0.5, 434), (0.5, 402), (0.5, 563), (0.5, 108), (0.5, 934), (0.5, 843), (0.5, 980), (0.5, 156), (0.5, 422), (0.5, 679), (0.5, 512), (0.5, 675), (0.5, 238), (0.5, 530), (0.5, 128), (0.5, 873), (0.5, 878), (0.5, 539), (0.5, 907), (0.5, 616), (0.5, 676), (0.5, 295), (0.5, 201), (0.5, 204), (0.5, 425), (0.5, 793), (0.5, 781), (0.5, 576), (0.5, 610), (0.5, 439), (0.5, 242), (0.5, 415), (0.5, 544), (0.5, 321), (0.5, 105), (0.5, 928), (0.5, 441), (0.5, 881), (0.5, 877), (0.5, 766), (0.5, 317), (0.5, 819), (0.5, 41), (0.5, 545), (0.5, 703), (0.5, 240), (0.5, 672), (0.5, 978), (0.5, 548), (0.5, 933), (0.5, 949), (0.5, 79), (0.5, 659), (0.5, 424), (0.5, 662), (0.5, 560), (0.5, 993), (0.5, 593), (0.5, 944), (0.5, 940), (0.5, 788), (0.5, 775), (0.5, 532), (0.5, 674), (0.5, 8), (0.5, 773), (0.5, 742), (0.5, 20), (0.5, 337), (0.5, 657), (0.5, 474), (0.5, 429), (0.5, 164), (0.5, 59), (0.5, 627), (0.41666666666666663, 647), (0.41666666666666663, 986), (0.41666666666666663, 132), (0.41666666666666663, 983), (0.41666666666666663, 625), (0.41666666666666663, 450), (0.41666666666666663, 902), (0.41666666666666663, 256), (0.41666666666666663, 153), (0.41666666666666663, 565), (0.41666666666666663, 447), (0.41666666666666663, 570), (0.41666666666666663, 690), (0.41666666666666663, 956), (0.41666666666666663, 680), (0.41666666666666663, 691), (0.41666666666666663, 443), (0.41666666666666663, 590), (0.41666666666666663, 575), (0.41666666666666663, 568), (0.41666666666666663, 64), (0.41666666666666663, 52), (0.41666666666666663, 684), (0.41666666666666663, 769), (0.41666666666666663, 685), (0.41666666666666663, 693), (0.41666666666666663, 891), (0.41666666666666663, 445), (0.41666666666666663, 284), (0.41666666666666663, 681), (0.41666666666666663, 97), (0.41666666666666663, 569), (0.41666666666666663, 446), (0.41666666666666663, 848), (0.41666666666666663, 571), (0.41666666666666663, 682), (0.41666666666666663, 431), (0.41666666666666663, 683), (0.41666666666666663, 292), (0.41666666666666663, 572), (0.41666666666666663, 221), (0.41666666666666663, 87), (0.41666666666666663, 4), (0.41666666666666663, 979), (0.375, 989), (0.375, 970), (0.375, 954), (0.375, 941), (0.375, 935), (0.375, 975), (0.375, 939), (0.375, 914), (0.375, 899), (0.29166666666666663, 962), (0.25, 976), (0.25, 938), (0.25, 931), (0.25, 923), (0.25, 924), (0.16666666666666666, 957), (0.16666666666666666, 893), (0.16666666666666666, 911)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 823
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ x x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 699
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ y (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 898
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`6`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* y 6) x) x) y))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.625, 1073), (1.5, 1003), (1.5, 823), (1.5, 209), (1.375, 1035), (1.375, 898), (1.375, 617), (1.375, 699), (1.375, 757), (1.375, 796), (1.375, 283), (1.25, 904), (1.25, 801), (1.25, 603), (1.25, 401), (1.25, 800), (1.25, 797), (1.25, 728), (1.25, 1056), (1.125, 968), (1.125, 554), (1.125, 1065), (1.125, 1022), (1.125, 852), (1.125, 798), (1.125, 1079), (1.125, 959), (1.125, 799), (1.125, 702), (1.125, 1057), (1.125, 1083), (1.125, 517), (1.125, 1012), (1.125, 711), (1.125, 1007), (1.125, 658), (1.125, 1008), (1.0, 831), (1.0, 642), (1.0, 23), (1.0, 922), (1.0, 1030), (1.0, 856), (1.0, 707), (1.0, 341), (1.0, 946), (1.0, 519), (1.0, 1009), (1.0, 712), (1.0, 606), (1.0, 972), (1.0, 1014), (1.0, 605), (1.0, 619), (1.0, 618), (1.0, 1028), (1.0, 807), (1.0, 1074), (1.0, 803), (1.0, 612), (1.0, 721), (1.0, 1043), (1.0, 1031), (1.0, 281), (1.0, 1021), (1.0, 1089), (1.0, 614), (1.0, 718), (1.0, 1), (1.0, 436), (1.0, 406), (1.0, 820), (1.0, 15), (1.0, 826), (1.0, 1055), (1.0, 822), (1.0, 437), (1.0, 926), (1.0, 821), (1.0, 1064), (1.0, 1027), (1.0, 63), (1.0, 1033), (1.0, 163), (1.0, 421), (1.0, 918), (1.0, 708), (1.0, 1005), (1.0, 929), (1.0, 1042), (1.0, 915), (1.0, 208), (1.0, 503), (1.0, 620), (1.0, 409), (1.0, 868), (1.0, 719), (1.0, 725), (1.0, 514), (1.0, 930), (1.0, 13), (1.0, 828), (1.0, 110), (1.0, 205), (1.0, 809), (1.0, 792), (1.0, 916), (1.0, 948), (1.0, 1053), (1.0, 507), (1.0, 410), (1.0, 1078), (1.0, 811), (1.0, 515), (1.0, 188), (1.0, 910), (1.0, 608), (1.0, 920), (1.0, 1061), (1.0, 723), (1.0, 1037), (1.0, 50), (1.0, 804), (1.0, 1052), (1.0, 175), (1.0, 720), (1.0, 947), (1.0, 1001), (1.0, 433), (1.0, 844), (1.0, 810), (1.0, 663), (1.0, 506), (1.0, 1024), (1.0, 913), (1.0, 714), (0.875, 903), (0.875, 744), (0.875, 645), (0.75, 833), (0.75, 1068), (0.75, 1066), (0.75, 835), (0.75, 641), (0.75, 10), (0.75, 750), (0.75, 1070), (0.75, 1071), (0.75, 667), (0.75, 729), (0.75, 951), (0.625, 705), (0.625, 412), (0.625, 158), (0.625, 841), (0.625, 837), (0.625, 730), (0.625, 504), (0.625, 765), (0.625, 859), (0.625, 808), (0.625, 99), (0.625, 660), (0.625, 889), (0.625, 637), (0.625, 987), (0.625, 869), (0.625, 787), (0.625, 417), (0.625, 664), (0.625, 643), (0.625, 887), (0.625, 634), (0.625, 743), (0.625, 839), (0.625, 749), (0.625, 967), (0.625, 990), (0.625, 628), (0.625, 745), (0.625, 751), (0.625, 994), (0.625, 526), (0.625, 879), (0.625, 1075), (0.625, 772), (0.625, 997), (0.625, 786), (0.625, 953), (0.625, 277), (0.625, 1011), (0.625, 413), (0.625, 827), (0.625, 173), (0.625, 639), (0.625, 655), (0.625, 9), (0.625, 524), (0.625, 862), (0.625, 522), (0.625, 974), (0.625, 11), (0.625, 44), (0.625, 167), (0.625, 984), (0.625, 991), (0.625, 640), (0.625, 735), (0.625, 960), (0.625, 981), (0.625, 943), (0.625, 908), (0.625, 1039), (0.625, 791), (0.625, 623), (0.625, 836), (0.625, 746), (0.625, 452), (0.625, 897), (0.625, 533), (0.625, 845), (0.625, 521), (0.625, 850), (0.625, 29), (0.625, 734), (0.625, 1091), (0.625, 525), (0.625, 966), (0.625, 739), (0.625, 1086), (0.625, 633), (0.625, 1095), (0.625, 1092), (0.625, 871), (0.625, 239), (0.625, 950), (0.625, 740), (0.625, 444), (0.625, 755), (0.625, 895), (0.625, 653), (0.625, 418), (0.625, 747), (0.625, 275), (0.625, 874), (0.625, 557), (0.625, 741), (0.5, 254), (0.5, 676), (0.5, 114), (0.5, 1034), (0.5, 545), (0.5, 662), (0.5, 661), (0.5, 156), (0.5, 242), (0.5, 203), (0.5, 672), (0.5, 424), (0.5, 1081), (0.5, 322), (0.5, 1049), (0.5, 105), (0.5, 79), (0.5, 1019), (0.5, 321), (0.5, 395), (0.5, 563), (0.5, 1093), (0.5, 57), (0.5, 832), (0.5, 439), (0.5, 666), (0.5, 770), (0.5, 659), (0.5, 560), (0.5, 709), (0.5, 881), (0.5, 764), (0.5, 240), (0.5, 813), (0.5, 944), (0.5, 818), (0.5, 1026), (0.5, 1051), (0.5, 790), (0.5, 559), (0.5, 858), (0.5, 441), (0.5, 53), (0.5, 423), (0.5, 993), (0.5, 665), (0.5, 873), (0.5, 969), (0.5, 762), (0.5, 593), (0.5, 536), (0.5, 793), (0.5, 654), (0.5, 949), (0.5, 1016), (0.5, 760), (0.5, 649), (0.5, 872), (0.5, 548), (0.5, 775), (0.5, 415), (0.5, 880), (0.5, 530), (0.5, 648), (0.5, 905), (0.5, 238), (0.5, 577), (0.5, 906), (0.5, 978), (0.5, 457), (0.5, 1013), (0.5, 201), (0.5, 636), (0.5, 1050), (0.5, 1002), (0.5, 295), (0.5, 934), (0.5, 610), (0.5, 766), (0.5, 771), (0.5, 825), (0.5, 892), (0.5, 776), (0.5, 512), (0.5, 1025), (0.5, 819), (0.5, 907), (0.5, 876), (0.5, 788), (0.5, 544), (0.5, 936), (0.5, 980), (0.5, 520), (0.5, 317), (0.5, 41), (0.5, 77), (0.5, 1063), (0.5, 227), (0.5, 408), (0.5, 878), (0.5, 781), (0.5, 108), (0.5, 535), (0.5, 1048), (0.5, 759), (0.5, 675), (0.5, 204), (0.5, 763), (0.5, 425), (0.5, 964), (0.5, 432), (0.5, 933), (0.5, 888), (0.5, 679), (0.5, 22), (0.5, 843), (0.5, 616), (0.5, 758), (0.5, 128), (0.5, 901), (0.5, 539), (0.5, 576), (0.5, 668), (0.5, 877), (0.5, 651), (0.5, 422), (0.5, 1041), (0.5, 541), (0.5, 84), (0.5, 434), (0.5, 107), (0.5, 1094), (0.5, 402), (0.5, 885), (0.5, 940), (0.5, 510), (0.5, 928), (0.5, 553), (0.5, 249), (0.5, 703), (0.41666666666666663, 1069), (0.375, 1045), (0.375, 1077), (0.25, 1080), (0.25, 1088), (0.25, 1038), (0.16666666666666666, 1084), (0.16666666666666666, 1017), (0.16666666666666666, 999), (0.16666666666666666, 1046), (0.16666666666666666, 1059), (0.16666666666666666, 1032), (0.16666666666666666, 995)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1073
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y 6) (* x (+ x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 1003
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ x (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 823
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ x x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 1035
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`6`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ y 6)) (+ y x)))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.625, 1073), (1.5, 823), (1.5, 1003), (1.5, 209), (1.5, 1097), (1.375, 699), (1.375, 898), (1.375, 283), (1.375, 1035), (1.375, 796), (1.375, 757), (1.375, 617), (1.25, 904), (1.25, 1096), (1.25, 1105), (1.25, 797), (1.25, 1124), (1.25, 728), (1.25, 1056), (1.25, 801), (1.25, 1103), (1.25, 800), (1.25, 603), (1.25, 401), (1.125, 1022), (1.125, 1007), (1.125, 1012), (1.125, 1083), (1.125, 798), (1.125, 1140), (1.125, 852), (1.125, 702), (1.125, 968), (1.125, 1079), (1.125, 799), (1.125, 1109), (1.125, 517), (1.125, 1057), (1.125, 554), (1.125, 1065), (1.125, 1008), (1.125, 1114), (1.125, 711), (1.125, 959), (1.125, 658), (1.125, 1106), (1.0, 821), (1.0, 110), (1.0, 831), (1.0, 1164), (1.0, 1100), (1.0, 915), (1.0, 1005), (1.0, 913), (1.0, 820), (1.0, 809), (1.0, 614), (1.0, 792), (1.0, 922), (1.0, 920), (1.0, 1033), (1.0, 916), (1.0, 1061), (1.0, 1182), (1.0, 1021), (1.0, 721), (1.0, 188), (1.0, 828), (1.0, 620), (1.0, 1), (1.0, 341), (1.0, 1043), (1.0, 605), (1.0, 410), (1.0, 50), (1.0, 712), (1.0, 281), (1.0, 163), (1.0, 663), (1.0, 1126), (1.0, 1157), (1.0, 719), (1.0, 63), (1.0, 1089), (1.0, 515), (1.0, 1037), (1.0, 930), (1.0, 1055), (1.0, 822), (1.0, 1027), (1.0, 1137), (1.0, 1180), (1.0, 1160), (1.0, 807), (1.0, 23), (1.0, 506), (1.0, 826), (1.0, 844), (1.0, 1121), (1.0, 1125), (1.0, 868), (1.0, 1024), (1.0, 421), (1.0, 642), (1.0, 1001), (1.0, 718), (1.0, 1174), (1.0, 1141), (1.0, 1009), (1.0, 15), (1.0, 946), (1.0, 514), (1.0, 926), (1.0, 1101), (1.0, 612), (1.0, 13), (1.0, 1162), (1.0, 1133), (1.0, 1128), (1.0, 608), (1.0, 720), (1.0, 1145), (1.0, 409), (1.0, 1052), (1.0, 1014), (1.0, 1030), (1.0, 618), (1.0, 810), (1.0, 1031), (1.0, 803), (1.0, 433), (1.0, 929), (1.0, 1042), (1.0, 1167), (1.0, 1111), (1.0, 1181), (1.0, 972), (1.0, 1053), (1.0, 947), (1.0, 856), (1.0, 725), (1.0, 619), (1.0, 1176), (1.0, 910), (1.0, 507), (1.0, 519), (1.0, 208), (1.0, 606), (1.0, 1159), (1.0, 1183), (1.0, 1064), (1.0, 707), (1.0, 436), (1.0, 1028), (1.0, 205), (1.0, 918), (1.0, 1078), (1.0, 1074), (1.0, 714), (1.0, 175), (1.0, 811), (1.0, 1099), (1.0, 723), (1.0, 804), (1.0, 503), (1.0, 406), (1.0, 708), (1.0, 948), (1.0, 437), (0.875, 645), (0.875, 744), (0.875, 903), (0.75, 951), (0.75, 667), (0.75, 835), (0.75, 1192), (0.75, 641), (0.75, 1071), (0.75, 729), (0.75, 10), (0.75, 1070), (0.75, 1189), (0.75, 1193), (0.75, 1187), (0.75, 1066), (0.75, 1068), (0.75, 750), (0.75, 833), (0.75, 1107), (0.75, 1113), (0.625, 533), (0.625, 874), (0.625, 755), (0.625, 1092), (0.625, 869), (0.625, 943), (0.625, 1091), (0.625, 526), (0.625, 643), (0.625, 11), (0.625, 1095), (0.625, 623), (0.625, 452), (0.625, 167), (0.625, 889), (0.625, 633), (0.625, 772), (0.625, 745), (0.625, 524), (0.625, 522), (0.625, 1039), (0.625, 950), (0.625, 879), (0.625, 640), (0.625, 841), (0.625, 837), (0.625, 994), (0.625, 504), (0.625, 44), (0.625, 967), (0.625, 984), (0.625, 557), (0.625, 1011), (0.625, 634), (0.625, 743), (0.625, 981), (0.625, 1075), (0.625, 1127), (0.625, 417), (0.625, 99), (0.625, 827), (0.625, 747), (0.625, 987), (0.625, 791), (0.625, 897), (0.625, 887), (0.625, 412), (0.625, 705), (0.625, 1186), (0.625, 444), (0.625, 730), (0.625, 1086), (0.625, 655), (0.625, 953), (0.625, 741), (0.625, 974), (0.625, 158), (0.625, 990), (0.625, 895), (0.625, 29), (0.625, 9), (0.625, 765), (0.625, 739), (0.625, 628), (0.625, 966), (0.625, 997), (0.625, 735), (0.625, 277), (0.625, 908), (0.625, 740), (0.625, 845), (0.625, 1117), (0.625, 751), (0.625, 1136), (0.625, 862), (0.625, 637), (0.625, 859), (0.625, 734), (0.625, 871), (0.625, 525), (0.625, 786), (0.625, 749), (0.625, 275), (0.625, 787), (0.625, 850), (0.625, 746), (0.625, 960), (0.625, 660), (0.625, 653), (0.625, 639), (0.625, 664), (0.625, 839), (0.625, 836), (0.625, 239), (0.625, 418), (0.625, 808), (0.625, 1098), (0.625, 1116), (0.625, 173), (0.625, 413), (0.625, 521), (0.625, 991), (0.5, 593), (0.5, 790), (0.5, 905), (0.5, 978), (0.5, 201), (0.5, 665), (0.5, 560), (0.5, 424), (0.5, 649), (0.5, 813), (0.5, 661), (0.5, 1002), (0.5, 238), (0.5, 321), (0.5, 1026), (0.5, 709), (0.5, 636), (0.5, 793), (0.5, 1168), (0.5, 764), (0.5, 659), (0.5, 1019), (0.5, 53), (0.5, 832), (0.5, 295), (0.5, 944), (0.5, 240), (0.5, 559), (0.5, 906), (0.5, 760), (0.5, 648), (0.5, 1175), (0.5, 858), (0.5, 1081), (0.5, 1143), (0.5, 1148), (0.5, 969), (0.5, 1049), (0.5, 666), (0.5, 441), (0.5, 114), (0.5, 1034), (0.5, 530), (0.5, 1171), (0.5, 1050), (0.5, 577), (0.5, 762), (0.5, 1122), (0.5, 395), (0.5, 548), (0.5, 563), (0.5, 1170), (0.5, 423), (0.5, 415), (0.5, 1178), (0.5, 457), (0.5, 934), (0.5, 1158), (0.5, 672), (0.5, 1102), (0.5, 993), (0.5, 676), (0.5, 322), (0.5, 105), (0.5, 1013), (0.5, 242), (0.5, 1016), (0.5, 818), (0.5, 1169), (0.5, 1131), (0.5, 949), (0.5, 1051), (0.5, 254), (0.5, 1115), (0.5, 536), (0.5, 880), (0.5, 610), (0.5, 79), (0.5, 156), (0.5, 1150), (0.5, 662), (0.5, 545), (0.5, 872), (0.5, 775), (0.5, 881), (0.5, 203), (0.5, 770), (0.5, 873), (0.5, 439), (0.5, 654), (0.5, 57), (0.5, 1093), (0.41666666666666663, 1191), (0.41666666666666663, 1163), (0.375, 1135), (0.375, 1153), (0.29166666666666663, 1139), (0.29166666666666663, 1166), (0.25, 1151), (0.25, 1123), (0.25, 1146), (0.25, 1138), (0.25, 1173), (0.16666666666666666, 1119), (0.16666666666666666, 1156), (0.16666666666666666, 1184), (0.16666666666666666, 1155), (0.16666666666666666, 1130)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1073
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`6`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y 6) (* x (+ x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 823
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ x x) (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1003
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`6`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ x (+ x 6)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`6`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) (* x x)) 6))
 nr_nodes: 10]
(CANDIDATE)[id: 1097
 encoding: (defun my_func (x y) ?)`(+ ? ?)`6`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 6 (+ (+ x x) (* x x))))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (+ (* y x) (+ 6 (+ x y))))

Process finished with exit code 0
