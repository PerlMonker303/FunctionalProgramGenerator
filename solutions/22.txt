D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ 1 x) 1) (+ (* y 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (- 1 1)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- x x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 1 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(- ? ?)`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (- (- x x) (+ 1 y)) (- (* y y) (* y x))) (* y 1)))
 nr_nodes: 20]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 y) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (+ y 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- y (* (- y x) (+ 1 y))) (* (+ (* x x) 1) y)))
 nr_nodes: 18]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (* (* 1 y) x) (+ x (+ x 1))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`y`#`#`(- ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ x 1) y) (- (* y y) (- y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 1) y) x))
 nr_nodes: 8]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- y y) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- x 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (- y x) (- y 1)) y) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x x) (* y (* x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`(- ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x (- y x)) y) x))
 nr_nodes: 10]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 1) 1) (* y (* x (* x 1)))))
 nr_nodes: 14]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`x`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- (* (+ 1 1) x) x) (- y (- x (- 1 1)))))
 nr_nodes: 16]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y (+ (* x y) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (* y (* x (+ y x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* x x) (+ x y)) (- (* y 1) (* x y))))
 nr_nodes: 16]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (* (+ 1 y) x) (+ (- x x) (* y 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* y y) x) (- (+ y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- 1 y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- (- 1 x) x) y) y))
 nr_nodes: 10]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(- ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (- (- x (* 1 x)) (* (* x y) y))))
 nr_nodes: 14]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`1`#`#`x`#`#`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (- 1 x)) (+ (- 1 1) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* y x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (- (- (+ x 1) (- y 1)) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* 1 y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`(+ ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- (+ 1 x) x) 1) (+ x (* 1 y))))
 nr_nodes: 14]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`(- ? ?)`x`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- (- x 1) (+ x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y x) (- 1 x)) (+ y (+ y 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`1`#`#`(- ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- (- (* (- y 1) (+ x y)) 1) (- 1 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (- (+ (- y x) (+ y 1)) (+ y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (- (+ y 1) y)) (- 1 x)))
 nr_nodes: 12]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (* y y) x) (* x 1)) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`1`#`#`(- ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- x 1) (- y 1)) (- (+ (+ 1 1) (+ 1 1)) (+ y y))))
 nr_nodes: 20]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (* 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* x (* (+ 1 y) 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) x) (* 1 y)))
 nr_nodes: 10]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x y))
 nr_nodes: 4]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) (* 1 y)))
 nr_nodes: 8]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`1`#`#`(- ? ?)`1`#`#`1`#`#`(- ? ?)`(+ ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* x 1) (- 1 1)) (- (+ 1 y) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) (+ x (* (+ 1 1) (+ x x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`(- ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (- x 1) (+ x 1)) (* (- y 1) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- 1 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 (+ y (* y 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ y y)) (* (+ x y) (- x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(- ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 1 (- (+ 1 y) (* y 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(- ? ?)`(+ ? ?)`1`#`#`1`#`#`(- ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (- (+ 1 1) (- 1 1))) (+ y (* (- 1 1) (* y x)))))
 nr_nodes: 20]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x 1) (* 1 x)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- x 1) (- 1 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 y) (* (- 1 y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (- x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) (- y y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(- ? ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ y 1) (- (+ (- x x) (+ 1 x)) x)))
 nr_nodes: 14]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(- ? ?)`(- ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (- (- x y) (* x y)) (+ x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`1`#`#`(- ? ?)`(* ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x (+ 1 (- (* 1 1) (* y 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) (+ (+ x (+ y y)) (+ x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(- ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (- 1 y)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- x x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 (+ x (+ 1 y))) (* x 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(- ? ?)`(- ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- x (- (- y x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) (+ 1 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- 1 x) (- 1 y)) (* (- x 1) (* y x))))
 nr_nodes: 16]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* (- x 1) (* x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 1) (+ (* y 1) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 1) (- y (+ y y))))
 nr_nodes: 10]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (* (* 1 y) 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`x`#`#`1`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* x 1) y) (+ (+ y 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (- 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ x y) (+ y y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(* ? ?)`x`#`#`(- ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (- (* x (- x y)) (+ (+ y 1) (+ y x))) y))
 nr_nodes: 16]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y 1) 1) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) (* 1 (+ (+ x 1) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (- y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- (+ y 1) (+ y 1)) (* x 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (- (* (+ y x) (+ y y)) (+ y (* x x))) x))
 nr_nodes: 16]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (- x (+ 1 y)) (+ y 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y x) 1) (+ (+ y x) (* y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x x)) (- y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`(- ? ?)`1`#`#`(- ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 1 y) (- (* y 1) y)) (- (- 1 (- y x)) (+ (+ 1 x) (+ y 1)))))
 nr_nodes: 24]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* x 1)) (* (* 1 y) (+ y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`(+ ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- x (+ (- 1 1) (* 1 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (- y (+ x x))))
 nr_nodes: 8]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(- ? ?)`1`#`#`(- ? ?)`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- 1 (- x (- x (+ x 1)))))
 nr_nodes: 10]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* x x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* (* y 1) (* x x))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- y 1) (* 1 (+ 1 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`y`#`#`(* ? ?)`1`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (+ y 1) (* (- (- 1 x) y) (* 1 (- 1 x)))))
 nr_nodes: 16]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* (- 1 (+ y y)) (* (- y y) (* x x))) (* (+ x (+ y 1)) x)))
 nr_nodes: 22]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (- x 1)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* y x) (+ y y)) (+ (+ 1 y) (+ 1 1))) y))
 nr_nodes: 18]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (* x (+ y x))) (- (+ y y) (* 1 (+ 1 1)))))
 nr_nodes: 18]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- y y) (* 1 (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (- 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`(- ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- x (* x (* x 1))) (* (- 1 (+ y 1)) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`1`#`#`(+ ? ?)`y`#`#`y`#`#`(- ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (- (* (* (* x 1) (+ y y)) (- (* y 1) y)) (- 1 x)))
 nr_nodes: 18]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`(- ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (* x x) (- (+ x 1) (- x y))) x))
 nr_nodes: 14]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- y y))
 nr_nodes: 4]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (- y (+ x (+ 1 1))) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`(- ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (- x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
[Generation 0]
[Computing fitness]
[(1.5, 63), (1.5, 101), (1.375, 146), (1.25, 6), (1.25, 16), (1.25, 37), (1.25, 160), (1.25, 185), (1.25, 197), (1.25, 221), (1.25, 226), (1.25, 234), (1.25, 249), (1.25, 269), (1.125, 36), (1.125, 74), (1.125, 81), (1.125, 174), (1.125, 189), (1.0, 40), (1.0, 98), (1.0, 141), (1.0, 204), (0.9166666666666666, 10), (0.875, 43), (0.875, 52), (0.875, 71), (0.875, 73), (0.875, 152), (0.875, 162), (0.875, 199), (0.875, 232), (0.875, 239), (0.875, 252), (0.875, 292), (0.875, 293), (0.7916666666666666, 106), (0.7916666666666666, 225), (0.75, 22), (0.75, 53), (0.75, 58), (0.75, 78), (0.75, 86), (0.75, 111), (0.75, 128), (0.75, 149), (0.75, 170), (0.75, 171), (0.75, 175), (0.75, 200), (0.75, 230), (0.75, 243), (0.75, 246), (0.75, 294), (0.6666666666666666, 285), (0.625, 25), (0.625, 45), (0.625, 51), (0.625, 61), (0.625, 87), (0.625, 113), (0.625, 120), (0.625, 130), (0.625, 133), (0.625, 150), (0.625, 190), (0.625, 202), (0.625, 286), (0.5416666666666666, 41), (0.5416666666666666, 109), (0.5416666666666666, 288), (0.5, 34), (0.5, 57), (0.5, 84), (0.5, 85), (0.5, 92), (0.5, 97), (0.5, 105), (0.5, 110), (0.5, 116), (0.5, 125), (0.5, 173), (0.5, 186), (0.5, 195), (0.5, 205), (0.5, 211), (0.5, 242), (0.5, 245), (0.5, 257), (0.5, 264), (0.5, 267), (0.5, 295), (0.41666666666666663, 19), (0.41666666666666663, 35), (0.41666666666666663, 65), (0.41666666666666663, 122), (0.41666666666666663, 132), (0.41666666666666663, 139), (0.41666666666666663, 157), (0.41666666666666663, 182), (0.41666666666666663, 262), (0.41666666666666663, 266), (0.375, 5), (0.375, 14), (0.375, 38), (0.375, 50), (0.375, 54), (0.375, 64), (0.375, 82), (0.375, 99), (0.375, 104), (0.375, 117), (0.375, 148), (0.375, 192), (0.375, 218), (0.375, 228), (0.375, 247), (0.375, 274), (0.375, 276), (0.35, 0), (0.35, 1), (0.35, 2), (0.35, 3), (0.35, 12), (0.35, 15), (0.35, 17), (0.35, 18), (0.35, 23), (0.35, 24), (0.35, 27), (0.35, 30), (0.35, 33), (0.35, 39), (0.35, 46), (0.35, 47), (0.35, 55), (0.35, 59), (0.35, 62), (0.35, 67), (0.35, 75), (0.35, 76), (0.35, 77), (0.35, 80), (0.35, 83), (0.35, 88), (0.35, 89), (0.35, 93), (0.35, 95), (0.35, 96), (0.35, 102), (0.35, 103), (0.35, 108), (0.35, 112), (0.35, 114), (0.35, 118), (0.35, 126), (0.35, 127), (0.35, 131), (0.35, 136), (0.35, 137), (0.35, 138), (0.35, 140), (0.35, 142), (0.35, 143), (0.35, 144), (0.35, 145), (0.35, 147), (0.35, 151), (0.35, 154), (0.35, 158), (0.35, 161), (0.35, 165), (0.35, 167), (0.35, 169), (0.35, 172), (0.35, 176), (0.35, 178), (0.35, 179), (0.35, 180), (0.35, 181), (0.35, 188), (0.35, 201), (0.35, 203), (0.35, 209), (0.35, 215), (0.35, 216), (0.35, 223), (0.35, 224), (0.35, 233), (0.35, 236), (0.35, 241), (0.35, 244), (0.35, 248), (0.35, 250), (0.35, 253), (0.35, 258), (0.35, 261), (0.35, 263), (0.35, 268), (0.35, 270), (0.35, 272), (0.35, 275), (0.35, 277), (0.35, 278), (0.35, 280), (0.35, 281), (0.35, 284), (0.35, 287), (0.35, 290), (0.35, 291), (0.35, 296), (0.35, 297), (0.35, 298), (0.35, 299), (0.29166666666666663, 20), (0.29166666666666663, 123), (0.29166666666666663, 194), (0.29166666666666663, 231), (0.25, 7), (0.25, 26), (0.25, 134), (0.25, 177), (0.25, 213), (0.25, 217), (0.25, 259), (0.16666666666666666, 13), (0.16666666666666666, 32), (0.16666666666666666, 207), (0.125, 8), (0.125, 28), (0.125, 66), (0.125, 69), (0.125, 79), (0.125, 90), (0.125, 115), (0.125, 135), (0.125, 153), (0.125, 155), (0.125, 166), (0.125, 191), (0.125, 212), (0.125, 222), (0.125, 227), (0.125, 237), (0.125, 289), (0.1, 4), (0.1, 9), (0.1, 11), (0.1, 21), (0.1, 29), (0.1, 31), (0.1, 42), (0.1, 44), (0.1, 48), (0.1, 49), (0.1, 56), (0.1, 60), (0.1, 68), (0.1, 70), (0.1, 72), (0.1, 91), (0.1, 94), (0.1, 100), (0.1, 107), (0.1, 119), (0.1, 121), (0.1, 124), (0.1, 129), (0.1, 156), (0.1, 159), (0.1, 163), (0.1, 164), (0.1, 168), (0.1, 183), (0.1, 184), (0.1, 187), (0.1, 193), (0.1, 196), (0.1, 198), (0.1, 206), (0.1, 208), (0.1, 210), (0.1, 214), (0.1, 219), (0.1, 220), (0.1, 229), (0.1, 235), (0.1, 240), (0.1, 251), (0.1, 254), (0.1, 255), (0.1, 256), (0.1, 260), (0.1, 265), (0.1, 271), (0.1, 273), (0.1, 279), (0.1, 282), (0.1, 283), (0.08333333333333333, 238)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* y y) x) (- (+ y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (* y y) x) (* x 1)) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(- ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 1 (- (+ 1 y) (* y 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(- ? ?)`(- ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (- (+ 1 x) 1) (+ (* y 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 y) x) (* y (- y y))))
 nr_nodes: 12]
[Generation 1]
[Computing fitness]
[(1.5, 63), (1.5, 101), (1.375, 146), (1.375, 312), (1.375, 341), (1.375, 370), (1.25, 6), (1.25, 269), (1.25, 234), (1.25, 221), (1.25, 226), (1.25, 37), (1.25, 334), (1.25, 302), (1.25, 197), (1.25, 160), (1.25, 185), (1.25, 16), (1.25, 249), (1.125, 81), (1.125, 74), (1.125, 174), (1.125, 189), (1.125, 36), (1.0, 367), (1.0, 141), (1.0, 306), (1.0, 98), (1.0, 303), (1.0, 40), (1.0, 204), (1.0, 347), (0.9166666666666666, 10), (0.875, 71), (0.875, 162), (0.875, 323), (0.875, 52), (0.875, 152), (0.875, 232), (0.875, 239), (0.875, 252), (0.875, 320), (0.875, 73), (0.875, 293), (0.875, 292), (0.875, 331), (0.875, 43), (0.875, 199), (0.875, 349), (0.875, 317), (0.875, 322), (0.7916666666666666, 106), (0.7916666666666666, 225), (0.75, 53), (0.75, 22), (0.75, 86), (0.75, 128), (0.75, 246), (0.75, 294), (0.75, 175), (0.75, 200), (0.75, 230), (0.75, 171), (0.75, 304), (0.75, 149), (0.75, 111), (0.75, 170), (0.75, 58), (0.75, 243), (0.75, 348), (0.75, 78), (0.6666666666666666, 285), (0.6666666666666666, 314), (0.625, 286), (0.625, 333), (0.625, 61), (0.625, 202), (0.625, 113), (0.625, 45), (0.625, 190), (0.625, 330), (0.625, 51), (0.625, 344), (0.625, 311), (0.625, 25), (0.625, 133), (0.625, 335), (0.625, 130), (0.625, 336), (0.625, 87), (0.625, 300), (0.625, 365), (0.625, 346), (0.625, 150), (0.625, 326), (0.625, 120), (0.5416666666666666, 288), (0.5416666666666666, 329), (0.5416666666666666, 109), (0.5416666666666666, 41), (0.5, 301), (0.5, 34), (0.5, 85), (0.5, 267), (0.5, 295), (0.5, 345), (0.5, 186), (0.5, 195), (0.5, 372), (0.5, 327), (0.5, 205), (0.5, 264), (0.5, 308), (0.5, 318), (0.5, 245), (0.5, 105), (0.5, 211), (0.5, 357), (0.5, 92), (0.5, 125), (0.5, 257), (0.5, 57), (0.5, 84), (0.5, 355), (0.5, 324), (0.5, 316), (0.5, 242), (0.5, 116), (0.5, 173), (0.5, 97), (0.5, 328), (0.5, 110), (0.41666666666666663, 132), (0.41666666666666663, 122), (0.41666666666666663, 332), (0.41666666666666663, 359), (0.41666666666666663, 262), (0.41666666666666663, 307), (0.41666666666666663, 139), (0.41666666666666663, 182), (0.41666666666666663, 65), (0.41666666666666663, 360), (0.41666666666666663, 266), (0.41666666666666663, 157), (0.41666666666666663, 35), (0.41666666666666663, 19), (0.375, 50), (0.375, 338), (0.375, 371), (0.375, 274), (0.375, 369), (0.375, 14), (0.375, 54), (0.375, 218), (0.375, 368), (0.375, 5), (0.375, 99), (0.375, 64), (0.375, 247), (0.375, 276), (0.375, 117), (0.375, 104), (0.375, 192), (0.375, 228), (0.375, 148), (0.375, 38), (0.375, 82), (0.35, 258), (0.35, 287), (0.35, 2), (0.35, 261), (0.35, 215), (0.35, 112), (0.35, 277), (0.35, 382), (0.35, 253), (0.35, 280), (0.35, 143), (0.35, 158), (0.35, 1), (0.35, 298), (0.35, 281), (0.35, 151), (0.35, 394), (0.35, 147), (0.35, 268), (0.35, 145), (0.35, 93), (0.35, 144), (0.35, 131), (0.35, 39), (0.35, 169), (0.35, 179), (0.35, 47), (0.35, 180), (0.35, 392), (0.35, 272), (0.35, 395), (0.35, 88), (0.35, 284), (0.35, 102), (0.35, 181), (0.35, 374), (0.35, 244), (0.35, 165), (0.35, 136), (0.35, 27), (0.35, 178), (0.35, 126), (0.35, 77), (0.35, 386), (0.35, 278), (0.35, 296), (0.35, 59), (0.35, 89), (0.35, 216), (0.35, 24), (0.35, 236), (0.35, 80), (0.35, 103), (0.35, 18), (0.35, 30), (0.35, 388), (0.35, 275), (0.35, 223), (0.35, 233), (0.35, 248), (0.35, 299), (0.35, 203), (0.35, 138), (0.35, 118), (0.35, 172), (0.35, 3), (0.35, 391), (0.35, 142), (0.35, 95), (0.35, 23), (0.35, 0), (0.35, 290), (0.35, 375), (0.35, 67), (0.35, 75), (0.35, 384), (0.35, 17), (0.35, 250), (0.35, 297), (0.35, 241), (0.35, 140), (0.35, 201), (0.35, 33), (0.35, 167), (0.35, 108), (0.35, 127), (0.35, 379), (0.35, 209), (0.35, 96), (0.35, 188), (0.35, 224), (0.35, 396), (0.35, 380), (0.35, 15), (0.35, 55), (0.35, 291), (0.35, 114), (0.35, 263), (0.35, 270), (0.35, 377), (0.35, 83), (0.35, 154), (0.35, 76), (0.35, 176), (0.35, 161), (0.35, 137), (0.35, 62), (0.35, 12), (0.35, 389), (0.35, 46), (0.35, 393), (0.29166666666666663, 123), (0.29166666666666663, 231), (0.29166666666666663, 343), (0.29166666666666663, 358), (0.29166666666666663, 194), (0.29166666666666663, 20), (0.25, 217), (0.25, 352), (0.25, 26), (0.25, 213), (0.25, 339), (0.25, 134), (0.25, 7), (0.25, 363), (0.25, 177), (0.25, 259), (0.16666666666666666, 310), (0.125, 354), (0.125, 353), (0.125, 366), (0.125, 361), (0.125, 351)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* y y) x) (- (+ y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (* y y) x) (* x 1)) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(- ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 1 (- (+ 1 y) (* y 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ (+ y 1) y)) (- 1 x)))
 nr_nodes: 12]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(- ? ?)`(- ? ?)`1`#`#`x`#`#`1`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (- (- 1 x) 1) (* (- x 1) x)))
 nr_nodes: 12]
[Generation 2]
[Computing fitness]
[(1.75, 407), (1.5, 63), (1.5, 447), (1.5, 101), (1.5, 405), (1.5, 418), (1.375, 312), (1.375, 341), (1.375, 146), (1.375, 425), (1.375, 397), (1.375, 370), (1.25, 197), (1.25, 221), (1.25, 269), (1.25, 443), (1.25, 6), (1.25, 491), (1.25, 37), (1.25, 302), (1.25, 160), (1.25, 437), (1.25, 249), (1.25, 16), (1.25, 226), (1.25, 334), (1.25, 185), (1.25, 234), (1.125, 174), (1.125, 36), (1.125, 441), (1.125, 481), (1.125, 81), (1.125, 189), (1.125, 74), (1.125, 444), (1.0, 367), (1.0, 409), (1.0, 141), (1.0, 413), (1.0, 417), (1.0, 204), (1.0, 446), (1.0, 98), (1.0, 306), (1.0, 404), (1.0, 412), (1.0, 347), (1.0, 40), (1.0, 303), (0.9166666666666666, 10), (0.875, 293), (0.875, 320), (0.875, 199), (0.875, 52), (0.875, 331), (0.875, 427), (0.875, 449), (0.875, 71), (0.875, 73), (0.875, 317), (0.875, 485), (0.875, 252), (0.875, 322), (0.875, 349), (0.875, 462), (0.875, 323), (0.875, 431), (0.875, 473), (0.875, 422), (0.875, 232), (0.875, 239), (0.875, 162), (0.875, 292), (0.875, 43), (0.875, 484), (0.875, 152), (0.875, 415), (0.7916666666666666, 106), (0.7916666666666666, 225), (0.75, 86), (0.75, 78), (0.75, 175), (0.75, 200), (0.75, 111), (0.75, 58), (0.75, 477), (0.75, 170), (0.75, 348), (0.75, 53), (0.75, 454), (0.75, 474), (0.75, 246), (0.75, 243), (0.75, 436), (0.75, 149), (0.75, 294), (0.75, 442), (0.75, 469), (0.75, 304), (0.75, 230), (0.75, 22), (0.75, 488), (0.75, 171), (0.75, 128), (0.6666666666666666, 314), (0.6666666666666666, 285), (0.6666666666666666, 399), (0.625, 344), (0.625, 365), (0.625, 346), (0.625, 429), (0.625, 402), (0.625, 401), (0.625, 311), (0.625, 51), (0.625, 113), (0.625, 202), (0.625, 330), (0.625, 463), (0.625, 335), (0.625, 286), (0.625, 424), (0.625, 458), (0.625, 130), (0.625, 457), (0.625, 61), (0.625, 460), (0.625, 150), (0.625, 45), (0.625, 300), (0.625, 25), (0.625, 87), (0.625, 336), (0.625, 333), (0.625, 133), (0.625, 190), (0.625, 326), (0.625, 120), (0.5416666666666666, 466), (0.5416666666666666, 41), (0.5416666666666666, 435), (0.5416666666666666, 288), (0.5416666666666666, 329), (0.5416666666666666, 109), (0.5, 92), (0.5, 85), (0.5, 295), (0.5, 173), (0.5, 84), (0.5, 478), (0.5, 419), (0.5, 34), (0.5, 267), (0.5, 482), (0.5, 257), (0.5, 459), (0.5, 105), (0.5, 327), (0.5, 345), (0.5, 97), (0.5, 205), (0.5, 301), (0.5, 355), (0.5, 186), (0.5, 316), (0.5, 245), (0.5, 357), (0.5, 328), (0.5, 211), (0.5, 451), (0.5, 455), (0.5, 308), (0.5, 475), (0.5, 420), (0.5, 318), (0.5, 324), (0.5, 195), (0.5, 242), (0.5, 57), (0.5, 125), (0.5, 110), (0.5, 480), (0.5, 264), (0.5, 372), (0.5, 116), (0.41666666666666663, 122), (0.41666666666666663, 65), (0.41666666666666663, 332), (0.41666666666666663, 433), (0.41666666666666663, 359), (0.41666666666666663, 35), (0.41666666666666663, 19), (0.41666666666666663, 465), (0.41666666666666663, 157), (0.41666666666666663, 360), (0.41666666666666663, 139), (0.41666666666666663, 182), (0.41666666666666663, 262), (0.41666666666666663, 307), (0.41666666666666663, 489), (0.41666666666666663, 132), (0.41666666666666663, 266), (0.375, 452), (0.375, 38), (0.375, 368), (0.375, 228), (0.375, 99), (0.375, 148), (0.375, 247), (0.375, 338), (0.375, 476), (0.375, 497), (0.375, 493), (0.375, 276), (0.375, 82), (0.375, 104), (0.375, 192), (0.375, 498), (0.375, 369), (0.375, 486), (0.375, 371), (0.375, 117), (0.375, 5), (0.375, 274), (0.375, 64), (0.375, 218), (0.375, 408), (0.375, 50), (0.375, 54), (0.375, 468), (0.375, 14), (0.35, 261), (0.35, 30), (0.35, 275), (0.35, 47), (0.35, 80), (0.35, 216), (0.35, 394), (0.35, 278), (0.35, 298), (0.35, 268), (0.35, 386), (0.35, 388), (0.35, 180), (0.35, 215), (0.35, 126), (0.35, 112), (0.35, 253), (0.35, 27), (0.35, 395), (0.35, 236), (0.35, 88), (0.35, 143), (0.35, 244), (0.35, 89), (0.35, 1), (0.35, 281), (0.35, 287), (0.35, 93), (0.35, 77), (0.35, 24), (0.35, 103), (0.35, 374), (0.35, 169), (0.35, 223), (0.35, 296), (0.35, 151), (0.35, 258), (0.35, 382), (0.35, 39), (0.35, 284), (0.35, 158), (0.35, 136), (0.35, 272), (0.35, 179), (0.35, 144), (0.35, 18), (0.35, 165), (0.35, 280), (0.35, 178), (0.35, 59), (0.35, 147), (0.35, 102), (0.35, 2), (0.35, 277), (0.35, 145), (0.35, 131), (0.35, 392), (0.35, 181), (0.29166666666666663, 439), (0.25, 495), (0.25, 492), (0.25, 423), (0.25, 490), (0.16666666666666666, 496), (0.125, 471), (0.125, 487), (0.125, 410), (0.125, 432)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 407
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ x 1) x) (* 1 (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(- ? ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (- (* (* y y) x) (- (+ y y) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 447
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* y x)) (- 1 x)))
 nr_nodes: 12]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (* y y) x) (* x 1)) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 405
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y 1) x) (* y (* x y))))
 nr_nodes: 12]
[Generation 3]
[Computing fitness]
[(1.75, 514), (1.75, 518), (1.75, 407), (1.625, 541), (1.5, 447), (1.5, 405), (1.5, 101), (1.5, 418), (1.5, 63), (1.375, 562), (1.375, 341), (1.375, 397), (1.375, 499), (1.375, 370), (1.375, 146), (1.375, 501), (1.375, 425), (1.375, 312), (1.25, 269), (1.25, 555), (1.25, 160), (1.25, 553), (1.25, 437), (1.25, 185), (1.25, 37), (1.25, 221), (1.25, 536), (1.25, 302), (1.25, 6), (1.25, 491), (1.25, 529), (1.25, 226), (1.25, 197), (1.25, 512), (1.25, 595), (1.25, 249), (1.25, 443), (1.25, 234), (1.25, 525), (1.25, 16), (1.25, 334), (1.125, 36), (1.125, 444), (1.125, 591), (1.125, 174), (1.125, 74), (1.125, 441), (1.125, 189), (1.125, 81), (1.125, 481), (1.125, 503), (1.0, 367), (1.0, 98), (1.0, 412), (1.0, 409), (1.0, 303), (1.0, 527), (1.0, 509), (1.0, 306), (1.0, 347), (1.0, 40), (1.0, 141), (1.0, 204), (1.0, 417), (1.0, 523), (1.0, 578), (1.0, 522), (1.0, 560), (1.0, 413), (1.0, 404), (1.0, 446), (0.9166666666666666, 10), (0.875, 565), (0.875, 449), (0.875, 575), (0.875, 582), (0.875, 485), (0.875, 431), (0.875, 73), (0.875, 232), (0.875, 484), (0.875, 548), (0.875, 543), (0.875, 427), (0.875, 538), (0.875, 539), (0.875, 71), (0.875, 349), (0.875, 504), (0.875, 292), (0.875, 252), (0.875, 323), (0.875, 199), (0.875, 415), (0.875, 546), (0.875, 545), (0.875, 52), (0.875, 43), (0.875, 331), (0.875, 322), (0.875, 422), (0.875, 535), (0.875, 239), (0.875, 162), (0.875, 558), (0.875, 320), (0.875, 473), (0.875, 293), (0.875, 462), (0.875, 317), (0.875, 540), (0.875, 152), (0.875, 568), (0.7916666666666666, 106), (0.7916666666666666, 225), (0.75, 488), (0.75, 175), (0.75, 58), (0.75, 454), (0.75, 78), (0.75, 474), (0.75, 86), (0.75, 149), (0.75, 304), (0.75, 550), (0.75, 243), (0.75, 436), (0.75, 442), (0.75, 111), (0.75, 230), (0.75, 22), (0.75, 563), (0.75, 171), (0.75, 53), (0.75, 348), (0.75, 128), (0.75, 246), (0.75, 294), (0.75, 567), (0.75, 170), (0.75, 200), (0.75, 477), (0.75, 469), (0.6666666666666666, 592), (0.6666666666666666, 314), (0.6666666666666666, 570), (0.6666666666666666, 285), (0.6666666666666666, 399), (0.625, 573), (0.625, 574), (0.625, 547), (0.625, 579), (0.625, 506), (0.625, 520), (0.625, 457), (0.625, 500), (0.625, 190), (0.625, 336), (0.625, 401), (0.625, 113), (0.625, 202), (0.625, 458), (0.625, 585), (0.625, 150), (0.625, 460), (0.625, 120), (0.625, 330), (0.625, 130), (0.625, 344), (0.625, 286), (0.625, 346), (0.625, 424), (0.625, 429), (0.625, 333), (0.625, 584), (0.625, 593), (0.625, 25), (0.625, 463), (0.625, 571), (0.625, 87), (0.625, 326), (0.625, 365), (0.625, 300), (0.625, 311), (0.625, 51), (0.625, 335), (0.625, 588), (0.625, 515), (0.625, 532), (0.625, 45), (0.625, 133), (0.625, 61), (0.625, 402), (0.5416666666666666, 329), (0.5416666666666666, 435), (0.5416666666666666, 109), (0.5416666666666666, 288), (0.5416666666666666, 466), (0.5416666666666666, 41), (0.5, 301), (0.5, 84), (0.5, 92), (0.5, 551), (0.5, 316), (0.5, 526), (0.5, 85), (0.5, 327), (0.5, 475), (0.5, 419), (0.5, 205), (0.5, 116), (0.5, 318), (0.5, 482), (0.5, 245), (0.5, 97), (0.5, 459), (0.5, 478), (0.5, 328), (0.5, 34), (0.5, 599), (0.5, 186), (0.5, 355), (0.5, 257), (0.5, 110), (0.5, 295), (0.5, 598), (0.5, 308), (0.5, 455), (0.5, 557), (0.5, 507), (0.5, 105), (0.5, 324), (0.5, 242), (0.5, 125), (0.5, 195), (0.5, 267), (0.5, 516), (0.5, 173), (0.5, 345), (0.5, 357), (0.5, 480), (0.5, 264), (0.5, 420), (0.5, 57), (0.5, 451), (0.5, 372), (0.5, 211), (0.41666666666666663, 132), (0.41666666666666663, 465), (0.41666666666666663, 65), (0.41666666666666663, 489), (0.41666666666666663, 182), (0.41666666666666663, 19), (0.41666666666666663, 433), (0.41666666666666663, 139), (0.41666666666666663, 587), (0.41666666666666663, 35), (0.41666666666666663, 360), (0.41666666666666663, 262), (0.41666666666666663, 307), (0.41666666666666663, 581), (0.41666666666666663, 359), (0.41666666666666663, 332), (0.41666666666666663, 266), (0.41666666666666663, 157), (0.41666666666666663, 122), (0.375, 590), (0.375, 497), (0.375, 452), (0.375, 276), (0.375, 476), (0.375, 493), (0.375, 521), (0.375, 552), (0.375, 148), (0.375, 369), (0.375, 498), (0.375, 556), (0.375, 38), (0.375, 486), (0.375, 228), (0.375, 577), (0.375, 82), (0.375, 5), (0.375, 247), (0.375, 117), (0.375, 274), (0.375, 338), (0.375, 534), (0.375, 368), (0.375, 519), (0.375, 99), (0.375, 192), (0.375, 104), (0.375, 371), (0.25, 542), (0.25, 511), (0.25, 566), (0.25, 530), (0.16666666666666666, 596)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 514
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 518
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x (+ 1 y))) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 407
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ x 1) x) (* 1 (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 541
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- y 1) (* (* 1 y) (+ y x))))
 nr_nodes: 12]
(CANDIDATE)[id: 447
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* y x)) (- 1 x)))
 nr_nodes: 12]
[Generation 4]
[Computing fitness]
[(1.75, 600), (1.75, 518), (1.75, 514), (1.75, 407), (1.625, 642), (1.625, 679), (1.625, 676), (1.625, 541), (1.5, 447), (1.5, 418), (1.5, 604), (1.5, 101), (1.5, 63), (1.5, 405), (1.5, 602), (1.375, 312), (1.375, 370), (1.375, 603), (1.375, 397), (1.375, 619), (1.375, 669), (1.375, 613), (1.375, 146), (1.375, 609), (1.375, 668), (1.375, 634), (1.375, 425), (1.375, 501), (1.375, 341), (1.375, 499), (1.375, 615), (1.375, 631), (1.375, 562), (1.25, 249), (1.25, 334), (1.25, 16), (1.25, 269), (1.25, 621), (1.25, 525), (1.25, 616), (1.25, 197), (1.25, 160), (1.25, 302), (1.25, 234), (1.25, 553), (1.25, 491), (1.25, 595), (1.25, 512), (1.25, 221), (1.25, 529), (1.25, 6), (1.25, 536), (1.25, 37), (1.25, 672), (1.25, 624), (1.25, 437), (1.25, 555), (1.25, 185), (1.25, 226), (1.25, 625), (1.25, 443), (1.125, 591), (1.125, 606), (1.125, 189), (1.125, 81), (1.125, 441), (1.125, 629), (1.125, 74), (1.125, 481), (1.125, 174), (1.125, 503), (1.125, 605), (1.125, 36), (1.125, 444), (1.0, 509), (1.0, 523), (1.0, 303), (1.0, 522), (1.0, 367), (1.0, 413), (1.0, 141), (1.0, 40), (1.0, 630), (1.0, 98), (1.0, 578), (1.0, 347), (1.0, 417), (1.0, 404), (1.0, 446), (1.0, 409), (1.0, 560), (1.0, 412), (1.0, 306), (1.0, 204), (1.0, 527), (1.0, 627), (0.9166666666666666, 10), (0.875, 73), (0.875, 293), (0.875, 582), (0.875, 449), (0.875, 655), (0.875, 462), (0.875, 635), (0.875, 317), (0.875, 232), (0.875, 568), (0.875, 473), (0.875, 545), (0.875, 349), (0.875, 484), (0.875, 663), (0.875, 331), (0.875, 548), (0.875, 539), (0.875, 649), (0.875, 575), (0.875, 658), (0.875, 632), (0.875, 645), (0.875, 152), (0.875, 666), (0.875, 504), (0.875, 622), (0.875, 651), (0.875, 652), (0.875, 71), (0.875, 239), (0.875, 648), (0.875, 199), (0.875, 650), (0.875, 535), (0.875, 543), (0.875, 538), (0.875, 670), (0.875, 558), (0.875, 427), (0.875, 485), (0.875, 608), (0.875, 322), (0.875, 546), (0.875, 52), (0.875, 565), (0.875, 415), (0.875, 422), (0.875, 323), (0.875, 431), (0.875, 540), (0.875, 320), (0.875, 659), (0.875, 43), (0.875, 162), (0.875, 292), (0.875, 252), (0.7916666666666666, 225), (0.7916666666666666, 106), (0.75, 22), (0.75, 689), (0.75, 230), (0.75, 678), (0.75, 488), (0.75, 611), (0.75, 243), (0.75, 664), (0.75, 171), (0.75, 454), (0.75, 170), (0.75, 58), (0.75, 469), (0.75, 442), (0.75, 687), (0.75, 563), (0.75, 111), (0.75, 128), (0.75, 567), (0.75, 200), (0.75, 474), (0.75, 436), (0.75, 550), (0.75, 175), (0.75, 626), (0.75, 78), (0.75, 477), (0.75, 348), (0.75, 682), (0.75, 86), (0.75, 692), (0.75, 246), (0.75, 149), (0.75, 673), (0.75, 304), (0.75, 53), (0.75, 294), (0.75, 640), (0.75, 618), (0.6666666666666666, 592), (0.6666666666666666, 691), (0.6666666666666666, 314), (0.6666666666666666, 285), (0.6666666666666666, 399), (0.6666666666666666, 570), (0.625, 300), (0.625, 133), (0.625, 429), (0.625, 662), (0.625, 333), (0.625, 584), (0.625, 573), (0.625, 458), (0.625, 571), (0.625, 25), (0.625, 579), (0.625, 326), (0.625, 365), (0.625, 628), (0.625, 190), (0.625, 588), (0.625, 402), (0.625, 585), (0.625, 87), (0.625, 335), (0.625, 593), (0.625, 547), (0.625, 130), (0.625, 610), (0.625, 330), (0.625, 286), (0.625, 520), (0.625, 346), (0.625, 686), (0.625, 61), (0.625, 641), (0.625, 515), (0.625, 113), (0.625, 45), (0.625, 660), (0.625, 401), (0.625, 460), (0.625, 424), (0.625, 638), (0.625, 150), (0.625, 311), (0.625, 336), (0.625, 506), (0.625, 500), (0.625, 532), (0.625, 654), (0.625, 51), (0.625, 202), (0.625, 457), (0.625, 574), (0.625, 344), (0.625, 463), (0.625, 120), (0.625, 636), (0.5416666666666666, 466), (0.5416666666666666, 435), (0.5416666666666666, 41), (0.5416666666666666, 109), (0.5416666666666666, 329), (0.5416666666666666, 288), (0.5, 110), (0.5, 85), (0.5, 97), (0.5, 34), (0.5, 186), (0.5, 295), (0.5, 482), (0.5, 92), (0.5, 478), (0.5, 665), (0.5, 84), (0.5, 116), (0.5, 599), (0.5, 205), (0.5, 245), (0.5, 475), (0.5, 551), (0.5, 419), (0.5, 355), (0.5, 316), (0.5, 318), (0.5, 327), (0.5, 526), (0.5, 257), (0.5, 681), (0.5, 656), (0.5, 674), (0.5, 459), (0.5, 301), (0.5, 328), (0.41666666666666663, 671), (0.375, 690), (0.375, 612), (0.375, 643), (0.25, 647), (0.25, 683), (0.16666666666666666, 617), (0.16666666666666666, 675), (0.125, 685)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 600
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 518
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x (+ 1 y))) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 514
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 407
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ x 1) x) (* 1 (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 642
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`(- ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- (- y x) (- y 1)) x) y))
 nr_nodes: 12]
[Generation 5]
[Computing fitness]
[(1.75, 735), (1.75, 757), (1.75, 514), (1.75, 744), (1.75, 600), (1.75, 518), (1.75, 407), (1.625, 739), (1.625, 676), (1.625, 728), (1.625, 679), (1.625, 642), (1.625, 697), (1.625, 541), (1.5, 447), (1.5, 602), (1.5, 101), (1.5, 405), (1.5, 715), (1.5, 418), (1.5, 604), (1.5, 63), (1.375, 370), (1.375, 615), (1.375, 609), (1.375, 613), (1.375, 752), (1.375, 761), (1.375, 631), (1.375, 634), (1.375, 397), (1.375, 312), (1.375, 707), (1.375, 668), (1.375, 669), (1.375, 603), (1.375, 425), (1.375, 705), (1.375, 562), (1.375, 501), (1.375, 749), (1.375, 499), (1.375, 341), (1.375, 619), (1.375, 702), (1.375, 146), (1.25, 621), (1.25, 197), (1.25, 443), (1.25, 616), (1.25, 491), (1.25, 712), (1.25, 302), (1.25, 703), (1.25, 529), (1.25, 624), (1.25, 512), (1.25, 784), (1.25, 625), (1.25, 6), (1.25, 694), (1.25, 553), (1.25, 16), (1.25, 221), (1.25, 226), (1.25, 269), (1.25, 160), (1.25, 778), (1.25, 555), (1.25, 672), (1.25, 334), (1.25, 37), (1.25, 249), (1.25, 536), (1.25, 595), (1.25, 185), (1.25, 234), (1.25, 437), (1.25, 525), (1.125, 606), (1.125, 736), (1.125, 441), (1.125, 481), (1.125, 700), (1.125, 591), (1.125, 74), (1.125, 189), (1.125, 174), (1.125, 444), (1.125, 81), (1.125, 605), (1.125, 721), (1.125, 629), (1.125, 503), (1.125, 36), (1.125, 698), (1.0, 141), (1.0, 523), (1.0, 746), (1.0, 413), (1.0, 734), (1.0, 578), (1.0, 446), (1.0, 347), (1.0, 560), (1.0, 98), (1.0, 726), (1.0, 509), (1.0, 303), (1.0, 627), (1.0, 204), (1.0, 522), (1.0, 527), (1.0, 754), (1.0, 417), (1.0, 367), (1.0, 630), (1.0, 745), (1.0, 409), (1.0, 306), (1.0, 404), (1.0, 750), (1.0, 412), (1.0, 40), (1.0, 725), (1.0, 711), (0.9166666666666666, 771), (0.9166666666666666, 10), (0.875, 322), (0.875, 415), (0.875, 568), (0.875, 73), (0.875, 548), (0.875, 292), (0.875, 558), (0.875, 779), (0.875, 763), (0.875, 645), (0.875, 422), (0.875, 756), (0.875, 608), (0.875, 449), (0.875, 663), (0.875, 538), (0.875, 696), (0.875, 431), (0.875, 635), (0.875, 252), (0.875, 649), (0.875, 239), (0.875, 71), (0.875, 539), (0.875, 427), (0.875, 199), (0.875, 782), (0.875, 540), (0.875, 320), (0.875, 462), (0.875, 783), (0.875, 770), (0.875, 781), (0.875, 484), (0.875, 232), (0.875, 719), (0.875, 162), (0.875, 632), (0.875, 666), (0.875, 152), (0.875, 52), (0.875, 323), (0.875, 753), (0.875, 659), (0.875, 582), (0.875, 543), (0.875, 658), (0.875, 652), (0.875, 699), (0.875, 765), (0.875, 780), (0.875, 473), (0.875, 670), (0.875, 648), (0.875, 349), (0.875, 43), (0.875, 545), (0.875, 317), (0.875, 575), (0.875, 718), (0.875, 565), (0.875, 485), (0.875, 546), (0.875, 655), (0.875, 331), (0.875, 504), (0.875, 651), (0.875, 293), (0.875, 535), (0.875, 755), (0.875, 622), (0.875, 650), (0.7916666666666666, 225), (0.7916666666666666, 106), (0.75, 640), (0.75, 58), (0.75, 708), (0.75, 128), (0.75, 693), (0.75, 682), (0.75, 678), (0.75, 618), (0.75, 149), (0.75, 626), (0.75, 664), (0.75, 567), (0.75, 294), (0.75, 764), (0.75, 713), (0.75, 717), (0.75, 22), (0.75, 550), (0.75, 611), (0.75, 78), (0.75, 687), (0.75, 111), (0.75, 230), (0.75, 488), (0.75, 729), (0.75, 689), (0.75, 436), (0.75, 243), (0.75, 454), (0.75, 673), (0.75, 767), (0.75, 469), (0.75, 304), (0.75, 53), (0.75, 86), (0.75, 477), (0.75, 175), (0.75, 200), (0.75, 170), (0.75, 692), (0.75, 442), (0.75, 769), (0.75, 474), (0.75, 171), (0.75, 246), (0.75, 348), (0.75, 563), (0.6666666666666666, 285), (0.6666666666666666, 570), (0.6666666666666666, 759), (0.6666666666666666, 314), (0.6666666666666666, 399), (0.6666666666666666, 691), (0.6666666666666666, 592), (0.625, 579), (0.625, 547), (0.625, 458), (0.625, 628), (0.625, 429), (0.625, 365), (0.625, 87), (0.625, 326), (0.625, 573), (0.625, 701), (0.625, 585), (0.625, 133), (0.625, 190), (0.625, 730), (0.625, 776), (0.625, 402), (0.625, 747), (0.625, 588), (0.625, 571), (0.625, 130), (0.625, 584), (0.625, 333), (0.625, 300), (0.625, 25), (0.625, 768), (0.625, 662), (0.625, 593), (0.625, 335), (0.625, 610), (0.5416666666666666, 738), (0.5416666666666666, 760), (0.5, 773), (0.5, 727), (0.5, 732), (0.5, 737), (0.5, 766), (0.5, 723), (0.5, 774), (0.5, 762), (0.41666666666666663, 741), (0.25, 751), (0.25, 775), (0.16666666666666666, 709), (0.125, 743)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 735
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y y) x) (* (+ x 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 757
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (* x x) (- x (- x 1))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 514
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 600
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
[Generation 6]
[Computing fitness]
[(1.75, 788), (1.75, 744), (1.75, 518), (1.75, 844), (1.75, 786), (1.75, 757), (1.75, 790), (1.75, 820), (1.75, 735), (1.75, 600), (1.75, 407), (1.75, 825), (1.75, 829), (1.75, 514), (1.75, 807), (1.625, 642), (1.625, 541), (1.625, 679), (1.625, 676), (1.625, 728), (1.625, 860), (1.625, 739), (1.625, 697), (1.625, 792), (1.5, 63), (1.5, 604), (1.5, 602), (1.5, 418), (1.5, 796), (1.5, 101), (1.5, 797), (1.5, 405), (1.5, 447), (1.5, 715), (1.375, 609), (1.375, 312), (1.375, 761), (1.375, 613), (1.375, 707), (1.375, 619), (1.375, 499), (1.375, 341), (1.375, 799), (1.375, 146), (1.375, 634), (1.375, 631), (1.375, 853), (1.375, 615), (1.375, 397), (1.375, 562), (1.375, 370), (1.375, 425), (1.375, 702), (1.375, 785), (1.375, 802), (1.375, 501), (1.375, 749), (1.375, 752), (1.375, 831), (1.375, 603), (1.375, 668), (1.375, 705), (1.375, 669), (1.25, 160), (1.25, 197), (1.25, 882), (1.25, 491), (1.25, 789), (1.25, 302), (1.25, 555), (1.25, 712), (1.25, 234), (1.25, 529), (1.25, 334), (1.25, 616), (1.25, 862), (1.25, 625), (1.25, 703), (1.25, 249), (1.25, 6), (1.25, 814), (1.25, 870), (1.25, 621), (1.25, 778), (1.25, 826), (1.25, 595), (1.25, 221), (1.25, 37), (1.25, 672), (1.25, 269), (1.25, 226), (1.25, 835), (1.25, 536), (1.25, 694), (1.25, 512), (1.25, 443), (1.25, 624), (1.25, 553), (1.25, 437), (1.25, 817), (1.25, 16), (1.25, 185), (1.25, 784), (1.25, 525), (1.25, 821), (1.25, 800), (1.125, 503), (1.125, 606), (1.125, 74), (1.125, 81), (1.125, 700), (1.125, 815), (1.125, 629), (1.125, 736), (1.125, 591), (1.125, 444), (1.125, 850), (1.125, 174), (1.125, 481), (1.125, 189), (1.125, 36), (1.125, 698), (1.125, 721), (1.125, 839), (1.125, 441), (1.125, 605), (1.125, 840), (1.125, 858), (1.0, 303), (1.0, 527), (1.0, 509), (1.0, 560), (1.0, 726), (1.0, 578), (1.0, 822), (1.0, 863), (1.0, 827), (1.0, 417), (1.0, 746), (1.0, 745), (1.0, 803), (1.0, 306), (1.0, 522), (1.0, 880), (1.0, 711), (1.0, 40), (1.0, 404), (1.0, 409), (1.0, 734), (1.0, 413), (1.0, 754), (1.0, 347), (1.0, 793), (1.0, 861), (1.0, 446), (1.0, 725), (1.0, 141), (1.0, 847), (1.0, 856), (1.0, 412), (1.0, 204), (1.0, 630), (1.0, 523), (1.0, 627), (1.0, 750), (1.0, 98), (1.0, 367), (0.9166666666666666, 10), (0.9166666666666666, 771), (0.875, 779), (0.875, 331), (0.875, 293), (0.875, 645), (0.875, 622), (0.875, 635), (0.875, 43), (0.875, 659), (0.875, 473), (0.875, 322), (0.875, 651), (0.875, 655), (0.875, 718), (0.875, 781), (0.875, 582), (0.875, 422), (0.875, 719), (0.875, 568), (0.875, 836), (0.875, 608), (0.875, 449), (0.875, 232), (0.875, 199), (0.875, 152), (0.875, 545), (0.875, 484), (0.875, 575), (0.875, 548), (0.875, 546), (0.875, 535), (0.875, 71), (0.875, 765), (0.875, 780), (0.875, 317), (0.875, 650), (0.875, 782), (0.875, 543), (0.875, 252), (0.875, 162), (0.875, 485), (0.875, 699), (0.875, 649), (0.875, 320), (0.875, 323), (0.875, 753), (0.875, 292), (0.875, 73), (0.875, 666), (0.875, 349), (0.875, 632), (0.875, 648), (0.875, 770), (0.875, 670), (0.875, 415), (0.875, 658), (0.875, 652), (0.875, 431), (0.875, 876), (0.875, 849), (0.875, 783), (0.875, 837), (0.875, 538), (0.875, 427), (0.875, 696), (0.875, 755), (0.875, 558), (0.875, 663), (0.875, 462), (0.875, 539), (0.875, 52), (0.875, 504), (0.875, 540), (0.875, 763), (0.875, 812), (0.875, 239), (0.875, 565), (0.875, 756), (0.7916666666666666, 106), (0.7916666666666666, 225), (0.75, 294), (0.75, 791), (0.75, 693), (0.75, 842), (0.75, 664), (0.75, 550), (0.75, 764), (0.75, 618), (0.75, 717), (0.75, 678), (0.75, 111), (0.75, 149), (0.75, 611), (0.75, 813), (0.75, 795), (0.75, 128), (0.75, 687), (0.75, 708), (0.75, 22), (0.75, 626), (0.75, 640), (0.75, 878), (0.75, 713), (0.75, 881), (0.75, 809), (0.75, 682), (0.75, 230), (0.75, 871), (0.75, 567), (0.75, 78), (0.75, 823), (0.75, 818), (0.75, 852), (0.75, 58), (0.625, 873), (0.625, 877), (0.625, 806), (0.625, 869), (0.625, 857), (0.625, 854), (0.5416666666666666, 833), (0.5, 874), (0.5, 810), (0.5, 855), (0.5, 875), (0.5, 804), (0.5, 846), (0.5, 865), (0.41666666666666663, 867), (0.25, 859), (0.16666666666666666, 843), (0.125, 834)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 788
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 y) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 518
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x (+ 1 y))) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 844
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (- (- (+ x x) x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 786
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
[Generation 7]
[Computing fitness]
[(1.75, 757), (1.75, 825), (1.75, 920), (1.75, 807), (1.75, 518), (1.75, 829), (1.75, 888), (1.75, 407), (1.75, 844), (1.75, 514), (1.75, 790), (1.75, 820), (1.75, 938), (1.75, 735), (1.75, 788), (1.75, 786), (1.75, 600), (1.75, 744), (1.625, 792), (1.625, 697), (1.625, 739), (1.625, 679), (1.625, 728), (1.625, 886), (1.625, 894), (1.625, 642), (1.625, 676), (1.625, 541), (1.625, 860), (1.5, 63), (1.5, 796), (1.5, 418), (1.5, 602), (1.5, 797), (1.5, 447), (1.5, 715), (1.5, 923), (1.5, 925), (1.5, 604), (1.5, 405), (1.5, 101), (1.375, 707), (1.375, 631), (1.375, 562), (1.375, 831), (1.375, 425), (1.375, 785), (1.375, 609), (1.375, 761), (1.375, 146), (1.375, 702), (1.375, 312), (1.375, 853), (1.375, 903), (1.375, 749), (1.375, 802), (1.375, 937), (1.375, 370), (1.375, 613), (1.375, 501), (1.375, 752), (1.375, 341), (1.375, 935), (1.375, 669), (1.375, 915), (1.375, 668), (1.375, 603), (1.375, 619), (1.375, 499), (1.375, 799), (1.375, 705), (1.375, 889), (1.375, 615), (1.375, 397), (1.375, 634), (1.25, 269), (1.25, 902), (1.25, 817), (1.25, 934), (1.25, 624), (1.25, 221), (1.25, 672), (1.25, 185), (1.25, 616), (1.25, 944), (1.25, 6), (1.25, 814), (1.25, 197), (1.25, 904), (1.25, 491), (1.25, 892), (1.25, 945), (1.25, 703), (1.25, 784), (1.25, 967), (1.25, 555), (1.25, 334), (1.25, 16), (1.25, 789), (1.25, 939), (1.25, 512), (1.25, 973), (1.25, 835), (1.25, 625), (1.25, 249), (1.25, 37), (1.25, 936), (1.25, 529), (1.25, 908), (1.25, 437), (1.25, 800), (1.25, 972), (1.25, 919), (1.25, 226), (1.25, 621), (1.25, 912), (1.25, 525), (1.25, 302), (1.25, 694), (1.25, 862), (1.25, 931), (1.25, 553), (1.25, 896), (1.25, 595), (1.25, 712), (1.25, 160), (1.25, 443), (1.25, 821), (1.25, 234), (1.25, 960), (1.25, 870), (1.25, 882), (1.25, 536), (1.25, 890), (1.25, 778), (1.25, 826), (1.25, 927), (1.125, 606), (1.125, 958), (1.125, 36), (1.125, 481), (1.125, 840), (1.125, 736), (1.125, 858), (1.125, 441), (1.125, 503), (1.125, 815), (1.125, 81), (1.125, 700), (1.125, 444), (1.125, 839), (1.125, 957), (1.125, 591), (1.125, 629), (1.125, 74), (1.125, 721), (1.125, 174), (1.125, 605), (1.125, 189), (1.125, 850), (1.125, 698), (1.125, 893), (1.125, 909), (1.0, 964), (1.0, 40), (1.0, 928), (1.0, 822), (1.0, 750), (1.0, 303), (1.0, 745), (1.0, 627), (1.0, 347), (1.0, 446), (1.0, 306), (1.0, 887), (1.0, 413), (1.0, 141), (1.0, 412), (1.0, 898), (1.0, 880), (1.0, 856), (1.0, 523), (1.0, 930), (1.0, 527), (1.0, 417), (1.0, 204), (1.0, 98), (1.0, 827), (1.0, 734), (1.0, 863), (1.0, 560), (1.0, 711), (1.0, 509), (1.0, 409), (1.0, 522), (1.0, 746), (1.0, 861), (1.0, 901), (1.0, 725), (1.0, 726), (1.0, 803), (1.0, 630), (1.0, 963), (1.0, 793), (1.0, 754), (1.0, 404), (1.0, 578), (1.0, 847), (1.0, 367), (0.9166666666666666, 771), (0.9166666666666666, 10), (0.875, 545), (0.875, 422), (0.875, 650), (0.875, 622), (0.875, 152), (0.875, 43), (0.875, 232), (0.875, 485), (0.875, 199), (0.875, 899), (0.875, 632), (0.875, 546), (0.875, 548), (0.875, 836), (0.875, 293), (0.875, 670), (0.875, 652), (0.875, 658), (0.875, 780), (0.875, 635), (0.875, 719), (0.875, 568), (0.875, 655), (0.875, 473), (0.875, 666), (0.875, 782), (0.875, 659), (0.875, 535), (0.875, 317), (0.875, 73), (0.875, 449), (0.875, 71), (0.875, 320), (0.875, 718), (0.875, 331), (0.875, 781), (0.875, 349), (0.875, 753), (0.875, 162), (0.875, 699), (0.875, 322), (0.875, 543), (0.875, 252), (0.875, 575), (0.875, 608), (0.875, 779), (0.875, 916), (0.875, 891), (0.875, 765), (0.875, 484), (0.875, 648), (0.875, 649), (0.875, 651), (0.875, 323), (0.875, 292), (0.875, 645), (0.875, 900), (0.875, 415), (0.875, 582), (0.875, 770), (0.75, 922), (0.75, 906), (0.75, 918), (0.75, 971), (0.75, 883), (0.75, 910), (0.625, 949), (0.625, 970), (0.625, 885), (0.625, 966), (0.625, 951), (0.625, 884), (0.625, 913), (0.625, 968), (0.625, 940), (0.625, 950), (0.625, 929), (0.5416666666666666, 897), (0.5, 961), (0.5, 911), (0.5, 942), (0.5, 947), (0.5, 969), (0.5, 955), (0.5, 954), (0.5, 953), (0.5, 907), (0.41666666666666663, 932), (0.29166666666666663, 962)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 757
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (* x x) (- x (- x 1))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 825
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 1) y) (- y (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 920
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) (* (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 807
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* y x)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 518
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x (+ 1 y))) (- y y)))
 nr_nodes: 12]
[Generation 8]
[Computing fitness]
[(1.75, 735), (1.75, 757), (1.75, 744), (1.75, 1042), (1.75, 788), (1.75, 518), (1.75, 844), (1.75, 888), (1.75, 981), (1.75, 825), (1.75, 790), (1.75, 1015), (1.75, 1055), (1.75, 600), (1.75, 786), (1.75, 979), (1.75, 820), (1.75, 920), (1.75, 938), (1.75, 514), (1.75, 829), (1.75, 992), (1.75, 807), (1.75, 983), (1.75, 407), (1.625, 676), (1.625, 792), (1.625, 989), (1.625, 860), (1.625, 679), (1.625, 739), (1.625, 541), (1.625, 728), (1.625, 642), (1.625, 894), (1.625, 697), (1.625, 986), (1.625, 977), (1.625, 990), (1.625, 886), (1.625, 988), (1.5, 923), (1.5, 63), (1.5, 101), (1.5, 604), (1.5, 925), (1.5, 602), (1.5, 796), (1.5, 405), (1.5, 447), (1.5, 1018), (1.5, 1019), (1.5, 715), (1.5, 1012), (1.5, 797), (1.5, 418), (1.375, 1023), (1.375, 982), (1.375, 501), (1.375, 613), (1.375, 799), (1.375, 1004), (1.375, 669), (1.375, 634), (1.375, 603), (1.375, 937), (1.375, 752), (1.375, 707), (1.375, 499), (1.375, 935), (1.375, 615), (1.375, 761), (1.375, 562), (1.375, 619), (1.375, 831), (1.375, 425), (1.375, 853), (1.375, 1007), (1.375, 631), (1.375, 785), (1.375, 146), (1.375, 370), (1.375, 397), (1.375, 903), (1.375, 609), (1.375, 312), (1.375, 702), (1.375, 1066), (1.375, 1071), (1.375, 889), (1.375, 980), (1.375, 749), (1.375, 705), (1.375, 1047), (1.375, 341), (1.375, 915), (1.375, 668), (1.375, 802), (1.25, 437), (1.25, 555), (1.25, 892), (1.25, 904), (1.25, 800), (1.25, 703), (1.25, 1054), (1.25, 835), (1.25, 672), (1.25, 936), (1.25, 553), (1.25, 529), (1.25, 821), (1.25, 1028), (1.25, 6), (1.25, 912), (1.25, 302), (1.25, 890), (1.25, 1061), (1.25, 945), (1.25, 1029), (1.25, 817), (1.25, 249), (1.25, 1048), (1.25, 37), (1.25, 826), (1.25, 625), (1.25, 616), (1.25, 1032), (1.25, 896), (1.25, 334), (1.25, 789), (1.25, 908), (1.25, 712), (1.25, 870), (1.25, 927), (1.25, 944), (1.25, 934), (1.25, 197), (1.25, 919), (1.25, 234), (1.25, 973), (1.25, 1050), (1.25, 1046), (1.25, 621), (1.25, 1053), (1.25, 960), (1.25, 1051), (1.25, 536), (1.25, 221), (1.25, 882), (1.25, 931), (1.25, 595), (1.25, 972), (1.25, 784), (1.25, 512), (1.25, 624), (1.25, 967), (1.25, 902), (1.25, 269), (1.25, 443), (1.25, 226), (1.25, 491), (1.25, 939), (1.25, 694), (1.25, 16), (1.25, 976), (1.25, 814), (1.25, 862), (1.25, 778), (1.25, 525), (1.25, 160), (1.25, 185), (1.125, 957), (1.125, 591), (1.125, 736), (1.125, 629), (1.125, 840), (1.125, 698), (1.125, 1041), (1.125, 1070), (1.125, 81), (1.125, 605), (1.125, 700), (1.125, 993), (1.125, 189), (1.125, 815), (1.125, 444), (1.125, 74), (1.125, 481), (1.125, 909), (1.125, 858), (1.125, 958), (1.125, 850), (1.125, 503), (1.125, 839), (1.125, 893), (1.125, 36), (1.125, 174), (1.125, 721), (1.125, 1016), (1.125, 441), (1.125, 606), (1.0, 734), (1.0, 861), (1.0, 856), (1.0, 928), (1.0, 40), (1.0, 793), (1.0, 898), (1.0, 527), (1.0, 347), (1.0, 446), (1.0, 303), (1.0, 1060), (1.0, 998), (1.0, 523), (1.0, 560), (1.0, 412), (1.0, 522), (1.0, 627), (1.0, 725), (1.0, 901), (1.0, 711), (1.0, 964), (1.0, 827), (1.0, 745), (1.0, 754), (1.0, 509), (1.0, 141), (1.0, 630), (1.0, 880), (1.0, 409), (1.0, 98), (1.0, 726), (1.0, 204), (1.0, 367), (1.0, 963), (1.0, 822), (1.0, 750), (1.0, 803), (1.0, 578), (1.0, 930), (1.0, 975), (1.0, 413), (1.0, 1072), (1.0, 887), (1.0, 417), (1.0, 847), (1.0, 404), (1.0, 306), (1.0, 746), (1.0, 863), (1.0, 984), (0.9166666666666666, 10), (0.9166666666666666, 771), (0.875, 1069), (0.875, 1017), (0.875, 1003), (0.875, 1022), (0.875, 1045), (0.875, 546), (0.875, 1038), (0.875, 422), (0.875, 622), (0.875, 152), (0.875, 545), (0.875, 650), (0.875, 485), (0.875, 548), (0.875, 1021), (0.875, 232), (0.875, 836), (0.875, 43), (0.875, 1013), (0.875, 899), (0.875, 632), (0.875, 199), (0.875, 1036), (0.875, 1058), (0.75, 1073), (0.75, 997), (0.75, 1040), (0.75, 1062), (0.75, 1065), (0.75, 1011), (0.75, 999), (0.75, 1056), (0.75, 1052), (0.625, 1025), (0.625, 1026), (0.625, 1014), (0.625, 996), (0.5, 1030), (0.5, 1043), (0.5, 1063), (0.5, 994), (0.41666666666666663, 1001), (0.41666666666666663, 1067), (0.375, 1005), (0.16666666666666666, 1009), (0.16666666666666666, 1034)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 735
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y y) x) (* (+ x 1) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 757
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`(- ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- (* x x) (- x (- x 1))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 1042
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- y 1) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 788
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 y) (* 1 y)) (- y y)))
 nr_nodes: 12]
[Generation 9]
[Computing fitness]
[(1.75, 807), (1.75, 600), (1.75, 981), (1.75, 744), (1.75, 1152), (1.75, 1092), (1.75, 518), (1.75, 992), (1.75, 938), (1.75, 786), (1.75, 514), (1.75, 407), (1.75, 829), (1.75, 757), (1.75, 1093), (1.75, 1149), (1.75, 1132), (1.75, 1080), (1.75, 790), (1.75, 844), (1.75, 920), (1.75, 820), (1.75, 1042), (1.75, 983), (1.75, 979), (1.75, 888), (1.75, 1055), (1.75, 1015), (1.75, 1141), (1.75, 735), (1.75, 1081), (1.75, 788), (1.75, 825), (1.75, 1091), (1.75, 1076), (1.625, 1133), (1.625, 886), (1.625, 989), (1.625, 1084), (1.625, 988), (1.625, 676), (1.625, 1098), (1.625, 792), (1.625, 697), (1.625, 642), (1.625, 541), (1.625, 894), (1.625, 986), (1.625, 739), (1.625, 728), (1.625, 990), (1.625, 977), (1.625, 679), (1.625, 860), (1.5, 101), (1.5, 604), (1.5, 796), (1.5, 923), (1.5, 405), (1.5, 1106), (1.5, 1012), (1.5, 797), (1.5, 1019), (1.5, 447), (1.5, 1018), (1.5, 1145), (1.5, 602), (1.5, 418), (1.5, 1139), (1.5, 63), (1.5, 715), (1.5, 925), (1.375, 1071), (1.375, 499), (1.375, 1135), (1.375, 370), (1.375, 1007), (1.375, 397), (1.375, 562), (1.375, 613), (1.375, 1120), (1.375, 935), (1.375, 915), (1.375, 668), (1.375, 501), (1.375, 903), (1.375, 705), (1.375, 619), (1.375, 761), (1.375, 1130), (1.375, 982), (1.375, 631), (1.375, 889), (1.375, 702), (1.375, 1023), (1.375, 634), (1.375, 937), (1.375, 1110), (1.375, 980), (1.375, 669), (1.375, 615), (1.375, 312), (1.375, 1004), (1.375, 341), (1.375, 799), (1.375, 831), (1.375, 425), (1.375, 785), (1.375, 1066), (1.375, 603), (1.375, 609), (1.375, 146), (1.375, 1127), (1.375, 1047), (1.375, 707), (1.375, 749), (1.375, 853), (1.375, 1108), (1.375, 1125), (1.375, 1112), (1.375, 1131), (1.375, 802), (1.375, 752), (1.25, 1157), (1.25, 1143), (1.25, 553), (1.25, 672), (1.25, 1146), (1.25, 625), (1.25, 1129), (1.25, 1029), (1.25, 185), (1.25, 16), (1.25, 800), (1.25, 973), (1.25, 621), (1.25, 1051), (1.25, 1097), (1.25, 912), (1.25, 226), (1.25, 908), (1.25, 902), (1.25, 334), (1.25, 870), (1.25, 821), (1.25, 536), (1.25, 1172), (1.25, 967), (1.25, 817), (1.25, 1028), (1.25, 1124), (1.25, 221), (1.25, 927), (1.25, 826), (1.25, 160), (1.25, 919), (1.25, 491), (1.25, 972), (1.25, 892), (1.25, 555), (1.25, 302), (1.25, 1162), (1.25, 814), (1.25, 529), (1.25, 1046), (1.25, 269), (1.25, 896), (1.25, 234), (1.25, 1032), (1.25, 6), (1.25, 1079), (1.25, 712), (1.25, 944), (1.25, 437), (1.25, 249), (1.25, 1050), (1.25, 789), (1.25, 939), (1.25, 1048), (1.25, 512), (1.25, 443), (1.25, 882), (1.25, 1054), (1.25, 197), (1.25, 976), (1.25, 1085), (1.25, 904), (1.25, 694), (1.25, 1166), (1.25, 936), (1.25, 703), (1.25, 1142), (1.25, 862), (1.25, 616), (1.25, 890), (1.25, 778), (1.25, 1154), (1.25, 934), (1.25, 784), (1.25, 37), (1.25, 525), (1.25, 835), (1.25, 1061), (1.25, 595), (1.25, 1053), (1.25, 945), (1.25, 960), (1.25, 1151), (1.25, 624), (1.25, 931), (1.125, 36), (1.125, 174), (1.125, 629), (1.125, 909), (1.125, 839), (1.125, 1070), (1.125, 858), (1.125, 444), (1.125, 815), (1.125, 993), (1.125, 74), (1.125, 189), (1.125, 958), (1.125, 481), (1.125, 606), (1.125, 1117), (1.125, 736), (1.125, 605), (1.125, 721), (1.125, 1016), (1.125, 700), (1.125, 1140), (1.125, 1095), (1.125, 840), (1.125, 893), (1.125, 441), (1.125, 957), (1.125, 1099), (1.125, 850), (1.125, 81), (1.125, 698), (1.125, 591), (1.125, 503), (1.125, 1041), (1.0, 1109), (1.0, 522), (1.0, 40), (1.0, 964), (1.0, 734), (1.0, 827), (1.0, 1138), (1.0, 1163), (1.0, 412), (1.0, 725), (1.0, 856), (1.0, 928), (1.0, 901), (1.0, 1089), (1.0, 745), (1.0, 523), (1.0, 998), (1.0, 793), (1.0, 861), (1.0, 1159), (1.0, 711), (1.0, 527), (1.0, 1119), (1.0, 1060), (1.0, 446), (1.0, 303), (1.0, 627), (1.0, 560), (1.0, 898), (1.0, 347), (0.875, 1087), (0.875, 1105), (0.875, 1114), (0.875, 1122), (0.875, 1101), (0.875, 1082), (0.875, 1113), (0.875, 1096), (0.875, 1155), (0.75, 1153), (0.75, 1169), (0.75, 1116), (0.75, 1102), (0.75, 1168), (0.625, 1103), (0.625, 1074), (0.625, 1170), (0.625, 1115), (0.625, 1165), (0.625, 1137), (0.625, 1144), (0.5, 1167), (0.5, 1078), (0.5, 1111), (0.375, 1147), (0.375, 1161)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 807
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* y x)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 600
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 981
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* y x) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 1152
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* 1 x)) (* y (+ x y))))
 nr_nodes: 12]
[Generation 10]
[Computing fitness]
[(1.75, 1152), (1.75, 1184), (1.75, 1194), (1.75, 844), (1.75, 1091), (1.75, 981), (1.75, 1080), (1.75, 1196), (1.75, 1181), (1.75, 992), (1.75, 1042), (1.75, 1175), (1.75, 1015), (1.75, 888), (1.75, 1188), (1.75, 1192), (1.75, 1191), (1.75, 938), (1.75, 1081), (1.75, 829), (1.75, 1149), (1.75, 979), (1.75, 1253), (1.75, 1055), (1.75, 1227), (1.75, 744), (1.75, 983), (1.75, 518), (1.75, 407), (1.75, 920), (1.75, 790), (1.75, 1076), (1.75, 807), (1.75, 1132), (1.75, 788), (1.75, 514), (1.75, 1246), (1.75, 735), (1.75, 757), (1.75, 1092), (1.75, 1255), (1.75, 825), (1.75, 1093), (1.75, 1198), (1.75, 820), (1.75, 1141), (1.75, 600), (1.75, 786), (1.625, 990), (1.625, 1205), (1.625, 894), (1.625, 977), (1.625, 1209), (1.625, 697), (1.625, 989), (1.625, 986), (1.625, 676), (1.625, 1199), (1.625, 1084), (1.625, 728), (1.625, 988), (1.625, 886), (1.625, 792), (1.625, 860), (1.625, 679), (1.625, 739), (1.625, 1133), (1.625, 1098), (1.625, 642), (1.625, 541), (1.625, 1203), (1.5, 101), (1.5, 1219), (1.5, 63), (1.5, 602), (1.5, 923), (1.5, 1212), (1.5, 1012), (1.5, 1019), (1.5, 1207), (1.5, 1200), (1.5, 447), (1.5, 1139), (1.5, 405), (1.5, 418), (1.5, 604), (1.5, 796), (1.5, 1018), (1.5, 1145), (1.5, 715), (1.5, 1106), (1.5, 925), (1.5, 1235), (1.5, 797), (1.375, 915), (1.375, 1218), (1.375, 668), (1.375, 613), (1.375, 761), (1.375, 785), (1.375, 1266), (1.375, 935), (1.375, 1229), (1.375, 501), (1.375, 425), (1.375, 341), (1.375, 634), (1.375, 889), (1.375, 1236), (1.375, 702), (1.375, 799), (1.375, 397), (1.375, 937), (1.375, 1004), (1.375, 1131), (1.375, 853), (1.375, 802), (1.375, 603), (1.375, 749), (1.375, 1023), (1.375, 615), (1.375, 1108), (1.375, 370), (1.375, 752), (1.375, 705), (1.375, 146), (1.375, 1071), (1.375, 312), (1.375, 669), (1.375, 1047), (1.375, 631), (1.375, 1180), (1.375, 707), (1.375, 1112), (1.375, 619), (1.375, 1239), (1.375, 1135), (1.375, 980), (1.375, 499), (1.375, 609), (1.375, 1120), (1.375, 1244), (1.375, 1224), (1.375, 982), (1.375, 1110), (1.375, 562), (1.375, 1242), (1.375, 903), (1.375, 1130), (1.375, 1125), (1.375, 1127), (1.375, 1007), (1.375, 831), (1.375, 1066), (1.375, 1176), (1.25, 862), (1.25, 1162), (1.25, 1172), (1.25, 226), (1.25, 1085), (1.25, 712), (1.25, 890), (1.25, 1079), (1.25, 536), (1.25, 1054), (1.25, 694), (1.25, 595), (1.25, 269), (1.25, 904), (1.25, 1154), (1.25, 944), (1.25, 1050), (1.25, 1124), (1.25, 789), (1.25, 1268), (1.25, 1146), (1.25, 624), (1.25, 616), (1.25, 814), (1.25, 919), (1.25, 1157), (1.25, 703), (1.25, 908), (1.25, 934), (1.25, 826), (1.25, 555), (1.25, 1029), (1.25, 1032), (1.25, 234), (1.25, 1142), (1.25, 16), (1.25, 1053), (1.25, 525), (1.25, 1028), (1.25, 972), (1.25, 160), (1.25, 1061), (1.25, 197), (1.25, 960), (1.25, 784), (1.25, 976), (1.25, 443), (1.25, 1051), (1.25, 437), (1.25, 1206), (1.25, 821), (1.25, 939), (1.25, 945), (1.25, 902), (1.25, 512), (1.25, 37), (1.25, 931), (1.25, 529), (1.25, 1129), (1.25, 927), (1.25, 817), (1.25, 892), (1.25, 221), (1.25, 778), (1.25, 1143), (1.25, 1166), (1.25, 1225), (1.25, 6), (1.25, 1257), (1.25, 1046), (1.25, 553), (1.25, 491), (1.25, 1048), (1.25, 672), (1.25, 1187), (1.25, 967), (1.25, 302), (1.25, 1151), (1.25, 882), (1.25, 249), (1.25, 1256), (1.25, 185), (1.25, 1222), (1.25, 870), (1.25, 334), (1.25, 1190), (1.25, 936), (1.25, 1202), (1.25, 800), (1.25, 621), (1.25, 896), (1.25, 912), (1.25, 973), (1.25, 835), (1.25, 1097), (1.25, 625), (1.125, 189), (1.125, 958), (1.125, 909), (1.125, 481), (1.125, 858), (1.125, 1265), (1.125, 444), (1.125, 629), (1.125, 993), (1.125, 1178), (1.125, 606), (1.125, 74), (1.125, 174), (1.125, 815), (1.125, 839), (1.125, 36), (1.125, 1263), (1.125, 1186), (1.125, 1070), (1.0, 1214), (1.0, 1231), (0.875, 1183), (0.875, 1248), (0.875, 1223), (0.875, 1220), (0.875, 1241), (0.875, 1230), (0.875, 1258), (0.875, 1237), (0.875, 1260), (0.875, 1208), (0.875, 1240), (0.875, 1270), (0.75, 1216), (0.75, 1211), (0.75, 1249), (0.6666666666666666, 1217), (0.625, 1247), (0.625, 1243), (0.625, 1195), (0.625, 1174), (0.5416666666666666, 1204), (0.5416666666666666, 1234), (0.5, 1267), (0.5, 1232), (0.375, 1252), (0.375, 1213), (0.25, 1261), (0.25, 1250)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1152
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* 1 x)) (* y (+ x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1184
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y (- y 1)) 1) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1194
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) (* (- x 1) (* 1 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 844
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (- (- (+ x x) x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 1091
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y x) (* 1 y)) (- y y)))
 nr_nodes: 12]
[Generation 11]
[Computing fitness]
[(1.75, 920), (1.75, 1181), (1.75, 1042), (1.75, 518), (1.75, 938), (1.75, 983), (1.75, 807), (1.75, 1015), (1.75, 1342), (1.75, 979), (1.75, 514), (1.75, 1080), (1.75, 844), (1.75, 1253), (1.75, 1296), (1.75, 407), (1.75, 788), (1.75, 820), (1.75, 825), (1.75, 888), (1.75, 1281), (1.75, 1246), (1.75, 1289), (1.75, 1055), (1.75, 1093), (1.75, 790), (1.75, 981), (1.75, 1255), (1.75, 735), (1.75, 1297), (1.75, 1194), (1.75, 829), (1.75, 1274), (1.75, 1188), (1.75, 1132), (1.75, 1184), (1.75, 744), (1.75, 1076), (1.75, 1175), (1.75, 1192), (1.75, 1149), (1.75, 1152), (1.75, 1198), (1.75, 1196), (1.75, 1227), (1.75, 1081), (1.75, 757), (1.75, 992), (1.75, 1091), (1.75, 1287), (1.75, 1141), (1.75, 786), (1.75, 1191), (1.75, 1288), (1.75, 600), (1.75, 1092), (1.625, 1298), (1.625, 1319), (1.625, 1098), (1.625, 886), (1.625, 541), (1.625, 676), (1.625, 894), (1.625, 1282), (1.625, 990), (1.625, 1290), (1.625, 1203), (1.625, 977), (1.625, 988), (1.625, 728), (1.625, 860), (1.625, 989), (1.625, 679), (1.625, 739), (1.625, 1209), (1.625, 1084), (1.625, 1199), (1.625, 697), (1.625, 792), (1.625, 1205), (1.625, 1302), (1.625, 642), (1.625, 986), (1.625, 1133), (1.5, 1200), (1.5, 1321), (1.5, 923), (1.5, 1304), (1.5, 1343), (1.5, 1019), (1.5, 1145), (1.5, 101), (1.5, 1012), (1.5, 797), (1.5, 796), (1.5, 1235), (1.5, 447), (1.5, 715), (1.5, 418), (1.5, 1106), (1.5, 63), (1.5, 1207), (1.5, 604), (1.5, 405), (1.5, 1139), (1.5, 1353), (1.5, 602), (1.5, 1018), (1.5, 1219), (1.5, 1344), (1.5, 1301), (1.5, 925), (1.5, 1324), (1.5, 1212), (1.375, 312), (1.375, 1127), (1.375, 1120), (1.375, 889), (1.375, 1341), (1.375, 370), (1.375, 702), (1.375, 1135), (1.375, 1349), (1.375, 937), (1.375, 499), (1.375, 1229), (1.375, 802), (1.375, 752), (1.375, 903), (1.375, 982), (1.375, 980), (1.375, 1180), (1.375, 915), (1.375, 341), (1.375, 146), (1.375, 1007), (1.375, 1275), (1.375, 669), (1.375, 631), (1.375, 1266), (1.375, 1108), (1.375, 1224), (1.375, 1347), (1.375, 761), (1.375, 609), (1.375, 668), (1.375, 1244), (1.375, 853), (1.375, 1047), (1.375, 1004), (1.375, 501), (1.375, 1176), (1.375, 1112), (1.375, 562), (1.375, 613), (1.375, 397), (1.375, 935), (1.375, 1066), (1.375, 749), (1.375, 705), (1.375, 619), (1.375, 1110), (1.375, 634), (1.375, 1130), (1.375, 425), (1.375, 1218), (1.375, 785), (1.375, 615), (1.375, 831), (1.375, 707), (1.375, 1131), (1.375, 1239), (1.375, 1242), (1.375, 1023), (1.375, 1125), (1.375, 1352), (1.375, 1236), (1.375, 799), (1.375, 1322), (1.375, 603), (1.375, 1071), (1.25, 512), (1.25, 1257), (1.25, 6), (1.25, 1129), (1.25, 927), (1.25, 160), (1.25, 1054), (1.25, 1124), (1.25, 712), (1.25, 908), (1.25, 1051), (1.25, 1046), (1.25, 1146), (1.25, 529), (1.25, 221), (1.25, 37), (1.25, 862), (1.25, 1317), (1.25, 226), (1.25, 826), (1.25, 1028), (1.25, 1142), (1.25, 945), (1.25, 1355), (1.25, 1294), (1.25, 1053), (1.25, 1279), (1.25, 443), (1.25, 1310), (1.25, 976), (1.25, 1329), (1.25, 960), (1.25, 1354), (1.25, 1286), (1.25, 536), (1.25, 1225), (1.25, 1085), (1.25, 902), (1.25, 931), (1.25, 1357), (1.25, 234), (1.25, 789), (1.25, 939), (1.25, 1206), (1.25, 1061), (1.25, 1143), (1.25, 972), (1.25, 1157), (1.25, 703), (1.25, 16), (1.25, 595), (1.25, 892), (1.25, 821), (1.25, 1268), (1.25, 555), (1.25, 1032), (1.25, 616), (1.25, 814), (1.25, 904), (1.25, 437), (1.25, 1162), (1.25, 1154), (1.25, 817), (1.25, 778), (1.25, 934), (1.25, 525), (1.25, 1172), (1.25, 269), (1.25, 1166), (1.25, 890), (1.25, 1029), (1.25, 944), (1.25, 919), (1.25, 1079), (1.25, 694), (1.25, 1050), (1.25, 1291), (1.25, 197), (1.25, 624), (1.25, 784), (1.25, 1350), (1.125, 1271), (1.125, 1299), (1.125, 1280), (1.125, 1308), (1.125, 1333), (1.125, 1326), (1.0, 1306), (1.0, 1292), (1.0, 1284), (1.0, 1316), (0.875, 1318), (0.875, 1323), (0.875, 1307), (0.875, 1312), (0.875, 1314), (0.875, 1338), (0.875, 1351), (0.875, 1276), (0.875, 1340), (0.875, 1325), (0.875, 1278), (0.875, 1337), (0.875, 1305), (0.75, 1359), (0.75, 1285), (0.75, 1295), (0.75, 1327), (0.75, 1335), (0.6666666666666666, 1309), (0.625, 1300), (0.625, 1273), (0.625, 1283), (0.625, 1313), (0.625, 1339), (0.625, 1358), (0.5, 1356), (0.41666666666666663, 1331), (0.375, 1346)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 920
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) (* (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1181
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 1) x) (- x (+ y x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1042
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- y 1) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 518
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* x (+ 1 y))) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 938
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* 1 x)) (* 1 (- y y))))
 nr_nodes: 12]
[Generation 12]
[Computing fitness]
[(1.75, 1093), (1.75, 1132), (1.75, 1042), (1.75, 938), (1.75, 1246), (1.75, 825), (1.75, 407), (1.75, 983), (1.75, 1253), (1.75, 514), (1.75, 979), (1.75, 1152), (1.75, 981), (1.75, 1091), (1.75, 1289), (1.75, 920), (1.75, 1198), (1.75, 1194), (1.75, 790), (1.75, 844), (1.75, 807), (1.75, 1181), (1.75, 1288), (1.75, 1382), (1.75, 744), (1.75, 1287), (1.75, 1184), (1.75, 1191), (1.75, 820), (1.75, 1080), (1.75, 1342), (1.75, 1188), (1.75, 786), (1.75, 829), (1.75, 788), (1.75, 1371), (1.75, 1296), (1.75, 1281), (1.75, 1192), (1.75, 1081), (1.75, 1366), (1.75, 1408), (1.75, 1297), (1.75, 1196), (1.75, 1092), (1.75, 1405), (1.75, 1055), (1.75, 1274), (1.75, 518), (1.75, 1227), (1.75, 1255), (1.75, 1076), (1.75, 888), (1.75, 992), (1.75, 600), (1.75, 1394), (1.75, 1141), (1.75, 1015), (1.75, 1175), (1.75, 1377), (1.75, 1370), (1.75, 735), (1.75, 1414), (1.75, 757), (1.75, 1149), (1.625, 1388), (1.625, 739), (1.625, 1098), (1.625, 886), (1.625, 676), (1.625, 988), (1.625, 1360), (1.625, 1407), (1.625, 728), (1.625, 1409), (1.625, 541), (1.625, 1302), (1.625, 642), (1.625, 1381), (1.625, 1205), (1.625, 1298), (1.625, 1404), (1.625, 679), (1.625, 1410), (1.625, 792), (1.625, 977), (1.625, 989), (1.625, 1282), (1.625, 1084), (1.625, 1199), (1.625, 697), (1.625, 1209), (1.625, 986), (1.625, 894), (1.625, 1319), (1.625, 990), (1.625, 1133), (1.625, 1290), (1.625, 1203), (1.625, 860), (1.5, 1012), (1.5, 602), (1.5, 405), (1.5, 1402), (1.5, 418), (1.5, 797), (1.5, 1321), (1.5, 1343), (1.5, 715), (1.5, 1324), (1.5, 447), (1.5, 1417), (1.5, 1018), (1.5, 101), (1.5, 1304), (1.5, 1301), (1.5, 796), (1.5, 1139), (1.5, 1344), (1.5, 1019), (1.5, 1106), (1.5, 1145), (1.5, 1200), (1.5, 1235), (1.5, 1419), (1.5, 604), (1.5, 63), (1.5, 923), (1.5, 1353), (1.5, 1207), (1.5, 925), (1.5, 1219), (1.5, 1212), (1.5, 1375), (1.375, 707), (1.375, 785), (1.375, 1112), (1.375, 669), (1.375, 1047), (1.375, 1413), (1.375, 1444), (1.375, 903), (1.375, 631), (1.375, 1007), (1.375, 603), (1.375, 915), (1.375, 1352), (1.375, 1447), (1.375, 312), (1.375, 702), (1.375, 501), (1.375, 1242), (1.375, 980), (1.375, 562), (1.375, 499), (1.375, 1266), (1.375, 982), (1.375, 1066), (1.375, 1398), (1.375, 831), (1.375, 615), (1.375, 1322), (1.375, 1218), (1.375, 1239), (1.375, 1071), (1.375, 1023), (1.375, 1176), (1.375, 1392), (1.375, 1131), (1.375, 1347), (1.375, 937), (1.375, 341), (1.375, 853), (1.375, 619), (1.375, 935), (1.375, 1229), (1.375, 1110), (1.375, 799), (1.375, 1180), (1.375, 1224), (1.375, 802), (1.375, 1431), (1.375, 889), (1.375, 1004), (1.375, 1400), (1.375, 1125), (1.375, 370), (1.375, 1130), (1.375, 425), (1.375, 1341), (1.375, 1401), (1.375, 1236), (1.375, 1127), (1.375, 752), (1.375, 397), (1.375, 1135), (1.375, 1420), (1.375, 668), (1.375, 1120), (1.375, 634), (1.375, 1349), (1.375, 1244), (1.375, 609), (1.375, 1433), (1.375, 749), (1.375, 146), (1.375, 613), (1.375, 1275), (1.375, 1362), (1.375, 761), (1.375, 1108), (1.375, 705), (1.25, 1355), (1.25, 1369), (1.25, 789), (1.25, 1452), (1.25, 6), (1.25, 1310), (1.25, 1279), (1.25, 712), (1.25, 908), (1.25, 826), (1.25, 1317), (1.25, 512), (1.25, 443), (1.25, 1354), (1.25, 221), (1.25, 1053), (1.25, 234), (1.25, 1146), (1.25, 1406), (1.25, 1257), (1.25, 1357), (1.25, 862), (1.25, 1391), (1.25, 1361), (1.25, 1142), (1.25, 1294), (1.25, 1085), (1.25, 1046), (1.25, 976), (1.25, 1455), (1.25, 529), (1.25, 1380), (1.25, 902), (1.25, 1028), (1.25, 1054), (1.25, 536), (1.25, 1364), (1.25, 1434), (1.25, 37), (1.25, 160), (1.25, 1124), (1.25, 1225), (1.25, 1286), (1.25, 960), (1.25, 1372), (1.25, 1418), (1.25, 1427), (1.25, 945), (1.25, 939), (1.25, 1329), (1.25, 1442), (1.25, 1129), (1.25, 226), (1.25, 1051), (1.25, 927), (1.25, 931), (1.25, 1206), (1.125, 1430), (1.125, 1387), (1.125, 1445), (1.125, 1441), (1.125, 1379), (1.0, 1390), (1.0, 1378), (1.0, 1438), (1.0, 1384), (1.0, 1373), (1.0, 1421), (1.0, 1448), (1.0, 1368), (1.0, 1432), (0.875, 1396), (0.875, 1424), (0.875, 1440), (0.875, 1439), (0.75, 1403), (0.75, 1454), (0.75, 1453), (0.625, 1429), (0.625, 1412), (0.625, 1422), (0.625, 1363), (0.625, 1425), (0.5, 1386), (0.5, 1449), (0.5, 1451), (0.41666666666666663, 1436), (0.41666666666666663, 1416)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1093
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 1) (* (+ 1 y) (+ x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1132
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* y (* (- 1 1) (* y x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 1042
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (- y 1) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 938
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* 1 x)) (* 1 (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1246
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(- ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`(- ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- x (- (+ y 1) y)) (- x x)))
 nr_nodes: 12]
[Generation 13]
[Computing fitness]
[(1.75, 1370), (1.75, 1459), (1.75, 1188), (1.75, 1483), (1.75, 1529), (1.75, 1181), (1.75, 844), (1.75, 600), (1.75, 1537), (1.75, 1152), (1.75, 514), (1.75, 1377), (1.75, 1296), (1.75, 1092), (1.75, 1149), (1.75, 1274), (1.75, 1405), (1.75, 1246), (1.75, 1091), (1.75, 820), (1.75, 1196), (1.75, 888), (1.75, 1288), (1.75, 1408), (1.75, 1192), (1.75, 979), (1.75, 757), (1.75, 1055), (1.75, 1489), (1.75, 1474), (1.75, 1414), (1.75, 1297), (1.75, 1081), (1.75, 1042), (1.75, 1476), (1.75, 1080), (1.75, 938), (1.75, 744), (1.75, 1394), (1.75, 1289), (1.75, 1481), (1.75, 1482), (1.75, 1281), (1.75, 735), (1.75, 981), (1.75, 1198), (1.75, 1255), (1.75, 1253), (1.75, 1191), (1.75, 992), (1.75, 1342), (1.75, 1498), (1.75, 1382), (1.75, 790), (1.75, 518), (1.75, 983), (1.75, 1076), (1.75, 1184), (1.75, 407), (1.75, 829), (1.75, 1015), (1.75, 1093), (1.75, 1132), (1.75, 807), (1.75, 1175), (1.75, 1366), (1.75, 788), (1.75, 1194), (1.75, 1371), (1.75, 1141), (1.75, 825), (1.75, 786), (1.75, 1227), (1.75, 920), (1.75, 1287), (1.75, 1479), (1.75, 1551), (1.625, 1302), (1.625, 1512), (1.625, 1522), (1.625, 986), (1.625, 739), (1.625, 1360), (1.625, 728), (1.625, 1514), (1.625, 977), (1.625, 792), (1.625, 1410), (1.625, 1133), (1.625, 541), (1.625, 1203), (1.625, 1298), (1.625, 990), (1.625, 1520), (1.625, 676), (1.625, 1205), (1.625, 1209), (1.625, 679), (1.625, 1404), (1.625, 697), (1.625, 894), (1.625, 860), (1.625, 1282), (1.625, 988), (1.625, 1480), (1.625, 1409), (1.625, 1319), (1.625, 1098), (1.625, 1084), (1.625, 642), (1.625, 1381), (1.625, 886), (1.625, 1290), (1.625, 989), (1.625, 1388), (1.625, 1407), (1.625, 1199), (1.625, 1510), (1.5, 796), (1.5, 1106), (1.5, 925), (1.5, 1207), (1.5, 1417), (1.5, 797), (1.5, 1353), (1.5, 1139), (1.5, 1478), (1.5, 1509), (1.5, 1019), (1.5, 1375), (1.5, 1301), (1.5, 1548), (1.5, 1235), (1.5, 1012), (1.5, 1518), (1.5, 1419), (1.5, 1535), (1.5, 1145), (1.5, 418), (1.5, 1324), (1.5, 1219), (1.5, 447), (1.5, 715), (1.5, 1343), (1.5, 63), (1.5, 405), (1.5, 923), (1.5, 1344), (1.5, 1402), (1.5, 602), (1.5, 1304), (1.5, 1200), (1.5, 1018), (1.5, 101), (1.5, 1212), (1.5, 604), (1.5, 1466), (1.5, 1504), (1.5, 1321), (1.5, 1460), (1.375, 915), (1.375, 1239), (1.375, 669), (1.375, 761), (1.375, 1549), (1.375, 1244), (1.375, 889), (1.375, 1007), (1.375, 1352), (1.375, 1392), (1.375, 1362), (1.375, 603), (1.375, 1431), (1.375, 831), (1.375, 1322), (1.375, 1023), (1.375, 1135), (1.375, 1127), (1.375, 1229), (1.375, 1493), (1.375, 631), (1.375, 501), (1.375, 1492), (1.375, 1047), (1.375, 609), (1.375, 499), (1.375, 1550), (1.375, 1349), (1.375, 749), (1.375, 1131), (1.375, 668), (1.375, 1120), (1.375, 1400), (1.375, 752), (1.375, 425), (1.375, 702), (1.375, 1444), (1.375, 785), (1.375, 615), (1.375, 341), (1.375, 935), (1.375, 1242), (1.375, 1125), (1.375, 853), (1.375, 1398), (1.375, 982), (1.375, 1004), (1.375, 903), (1.375, 1110), (1.375, 802), (1.375, 1401), (1.375, 1108), (1.375, 1341), (1.375, 1180), (1.375, 1218), (1.375, 562), (1.375, 1495), (1.375, 397), (1.375, 1112), (1.375, 619), (1.375, 980), (1.375, 1433), (1.375, 1275), (1.375, 1071), (1.375, 705), (1.375, 799), (1.375, 1224), (1.375, 1176), (1.375, 146), (1.375, 312), (1.375, 1413), (1.375, 1539), (1.375, 1066), (1.375, 707), (1.375, 1516), (1.375, 1420), (1.375, 634), (1.375, 370), (1.375, 1447), (1.375, 613), (1.375, 1130), (1.375, 1266), (1.375, 1347), (1.375, 937), (1.375, 1236), (1.25, 1458), (1.25, 1552), (1.25, 1279), (1.25, 1452), (1.25, 826), (1.25, 1517), (1.25, 1310), (1.25, 6), (1.25, 1468), (1.25, 1490), (1.25, 1497), (1.25, 789), (1.25, 712), (1.25, 1355), (1.25, 1473), (1.25, 908), (1.25, 1464), (1.25, 1457), (1.25, 1496), (1.25, 1527), (1.25, 1525), (1.25, 1531), (1.25, 1470), (1.25, 1317), (1.25, 1475), (1.25, 1369), (1.25, 512), (1.25, 1463), (1.25, 443), (1.125, 1543), (1.125, 1526), (1.125, 1506), (1.125, 1484), (1.125, 1511), (1.0, 1462), (0.9166666666666666, 1502), (0.9166666666666666, 1519), (0.875, 1556), (0.875, 1524), (0.875, 1500), (0.875, 1485), (0.875, 1472), (0.875, 1553), (0.75, 1541), (0.75, 1540), (0.75, 1521), (0.75, 1534), (0.6666666666666666, 1555), (0.625, 1546), (0.5416666666666666, 1508), (0.5, 1557), (0.5, 1545), (0.41666666666666663, 1558), (0.41666666666666663, 1487), (0.375, 1533)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1370
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* 1 x) x) (- y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1459
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 1) y) (- y (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1188
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) (+ (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1483
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- x x) x) (- y (+ x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1529
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`(* ? ?)`y`#`#`1`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x x) (- (* y 1) (* x y))))
 nr_nodes: 12]
[Generation 14]
[Computing fitness]
[(1.75, 1566), (1.75, 1567), (1.75, 1481), (1.75, 788), (1.75, 407), (1.75, 1196), (1.75, 1081), (1.75, 1342), (1.75, 1408), (1.75, 1055), (1.75, 1583), (1.75, 888), (1.75, 983), (1.75, 981), (1.75, 992), (1.75, 820), (1.75, 1489), (1.75, 1287), (1.75, 1589), (1.75, 1474), (1.75, 1366), (1.75, 1132), (1.75, 1188), (1.75, 1080), (1.75, 1092), (1.75, 1198), (1.75, 1246), (1.75, 1093), (1.75, 938), (1.75, 1175), (1.75, 1377), (1.75, 600), (1.75, 1537), (1.75, 829), (1.75, 735), (1.75, 1192), (1.75, 1253), (1.75, 790), (1.75, 1149), (1.75, 1371), (1.75, 1551), (1.75, 1627), (1.75, 979), (1.75, 744), (1.75, 1152), (1.75, 1255), (1.75, 1529), (1.75, 757), (1.75, 1598), (1.75, 1498), (1.75, 1141), (1.75, 1076), (1.75, 1382), (1.75, 1405), (1.75, 1370), (1.75, 1297), (1.75, 1184), (1.75, 1288), (1.75, 1578), (1.75, 514), (1.75, 1289), (1.75, 1015), (1.75, 1600), (1.75, 1459), (1.75, 1560), (1.75, 825), (1.75, 518), (1.75, 1296), (1.75, 807), (1.75, 1194), (1.75, 1181), (1.75, 1394), (1.75, 1606), (1.75, 1042), (1.75, 1274), (1.75, 1482), (1.75, 786), (1.75, 844), (1.75, 1091), (1.75, 1476), (1.75, 1414), (1.75, 1581), (1.75, 1483), (1.75, 920), (1.75, 1191), (1.75, 1281), (1.75, 1227), (1.75, 1479), (1.625, 1098), (1.625, 541), (1.625, 990), (1.625, 1407), (1.625, 1520), (1.625, 1410), (1.625, 1203), (1.625, 1282), (1.625, 860), (1.625, 1609), (1.625, 1614), (1.625, 1626), (1.625, 739), (1.625, 894), (1.625, 1209), (1.625, 1199), (1.625, 679), (1.625, 1133), (1.625, 989), (1.625, 886), (1.625, 1205), (1.625, 642), (1.625, 1404), (1.625, 1381), (1.625, 676), (1.625, 1510), (1.625, 1613), (1.625, 1642), (1.625, 1388), (1.625, 1298), (1.625, 1360), (1.625, 697), (1.625, 792), (1.625, 1522), (1.625, 988), (1.625, 1599), (1.625, 1290), (1.625, 1617), (1.625, 1409), (1.625, 1612), (1.625, 986), (1.625, 1514), (1.625, 1512), (1.625, 1302), (1.625, 1319), (1.625, 728), (1.625, 1084), (1.625, 1480), (1.625, 977), (1.5, 1012), (1.5, 1344), (1.5, 1145), (1.5, 1650), (1.5, 1321), (1.5, 602), (1.5, 63), (1.5, 1535), (1.5, 447), (1.5, 1343), (1.5, 1417), (1.5, 1466), (1.5, 101), (1.5, 1518), (1.5, 1597), (1.5, 796), (1.5, 1629), (1.5, 1301), (1.5, 1235), (1.5, 1548), (1.5, 1419), (1.5, 405), (1.5, 418), (1.5, 1509), (1.5, 604), (1.5, 1353), (1.5, 1478), (1.5, 1460), (1.5, 1018), (1.5, 1324), (1.5, 1637), (1.5, 1212), (1.5, 715), (1.5, 1106), (1.5, 1402), (1.5, 797), (1.5, 1375), (1.5, 1200), (1.5, 1019), (1.5, 925), (1.5, 1304), (1.5, 923), (1.5, 1504), (1.5, 1635), (1.5, 1139), (1.5, 1219), (1.5, 1207), (1.375, 761), (1.375, 831), (1.375, 499), (1.375, 1108), (1.375, 1229), (1.375, 1565), (1.375, 631), (1.375, 1242), (1.375, 1362), (1.375, 1625), (1.375, 1603), (1.375, 1392), (1.375, 619), (1.375, 501), (1.375, 702), (1.375, 1400), (1.375, 1120), (1.375, 1569), (1.375, 915), (1.375, 397), (1.375, 1341), (1.375, 1559), (1.375, 1322), (1.375, 935), (1.375, 749), (1.375, 1047), (1.375, 1023), (1.375, 980), (1.375, 1398), (1.375, 785), (1.375, 1007), (1.375, 752), (1.375, 1004), (1.375, 982), (1.375, 341), (1.375, 1071), (1.375, 1244), (1.375, 903), (1.375, 1125), (1.375, 1431), (1.375, 669), (1.375, 1135), (1.375, 1401), (1.375, 1180), (1.375, 562), (1.375, 1550), (1.375, 1112), (1.375, 889), (1.375, 1218), (1.375, 705), (1.375, 1604), (1.375, 1433), (1.375, 1444), (1.375, 1619), (1.375, 615), (1.375, 1127), (1.375, 1131), (1.375, 802), (1.375, 1495), (1.375, 1575), (1.375, 1493), (1.375, 1492), (1.375, 668), (1.375, 1275), (1.375, 1239), (1.375, 603), (1.375, 1549), (1.375, 609), (1.375, 1352), (1.375, 1349), (1.375, 1110), (1.375, 853), (1.375, 425), (1.25, 1576), (1.25, 1582), (1.25, 1585), (1.25, 1584), (1.25, 1568), (1.25, 1588), (1.25, 1570), (1.25, 1607), (1.25, 1591), (1.25, 1621), (1.25, 1561), (1.25, 1579), (1.25, 1577), (1.25, 1590), (1.25, 1645), (1.125, 1595), (1.125, 1643), (1.125, 1624), (1.0, 1573), (1.0, 1632), (1.0, 1580), (1.0, 1616), (1.0, 1640), (1.0, 1602), (1.0, 1646), (1.0, 1628), (1.0, 1587), (1.0, 1594), (0.9166666666666666, 1593), (0.875, 1631), (0.875, 1572), (0.875, 1574), (0.875, 1564), (0.75, 1636), (0.75, 1618), (0.75, 1633), (0.75, 1638), (0.75, 1648), (0.75, 1644), (0.75, 1623), (0.625, 1611), (0.5, 1592), (0.5, 1562)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1566
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1567
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1481
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x y) (* (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 788
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 y) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 407
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ x 1) x) (* 1 (- y y))))
 nr_nodes: 12]
[Generation 15]
[Computing fitness]
[(1.75, 1141), (1.75, 1297), (1.75, 1092), (1.75, 1578), (1.75, 1227), (1.75, 1377), (1.75, 1042), (1.75, 1482), (1.75, 1081), (1.75, 1076), (1.75, 1287), (1.75, 829), (1.75, 1055), (1.75, 1600), (1.75, 1551), (1.75, 1253), (1.75, 1184), (1.75, 757), (1.75, 1288), (1.75, 1342), (1.75, 1489), (1.75, 514), (1.75, 844), (1.75, 1281), (1.75, 407), (1.75, 788), (1.75, 600), (1.75, 1703), (1.75, 1149), (1.75, 820), (1.75, 1685), (1.75, 1627), (1.75, 1188), (1.75, 938), (1.75, 1366), (1.75, 1191), (1.75, 1656), (1.75, 1583), (1.75, 1498), (1.75, 1296), (1.75, 1175), (1.75, 1537), (1.75, 1194), (1.75, 1192), (1.75, 1152), (1.75, 1382), (1.75, 1693), (1.75, 1566), (1.75, 735), (1.75, 1606), (1.75, 1408), (1.75, 1476), (1.75, 1405), (1.75, 790), (1.75, 1481), (1.75, 1246), (1.75, 1581), (1.75, 888), (1.75, 1093), (1.75, 1132), (1.75, 825), (1.75, 992), (1.75, 981), (1.75, 518), (1.75, 1483), (1.75, 1567), (1.75, 1589), (1.75, 920), (1.75, 1091), (1.75, 979), (1.75, 1705), (1.75, 1459), (1.75, 1181), (1.75, 1658), (1.75, 1598), (1.75, 1529), (1.75, 1289), (1.75, 786), (1.75, 744), (1.75, 1198), (1.75, 1370), (1.75, 983), (1.75, 1670), (1.75, 1394), (1.75, 1560), (1.75, 1414), (1.75, 1474), (1.75, 1479), (1.75, 1015), (1.75, 1667), (1.75, 1080), (1.75, 1371), (1.75, 1653), (1.75, 807), (1.75, 1274), (1.75, 1661), (1.75, 1196), (1.75, 1255), (1.625, 1510), (1.625, 1084), (1.625, 1298), (1.625, 1290), (1.625, 1522), (1.625, 1209), (1.625, 1613), (1.625, 1098), (1.625, 1721), (1.625, 728), (1.625, 977), (1.625, 1711), (1.625, 1520), (1.625, 1205), (1.625, 1407), (1.625, 1626), (1.625, 1133), (1.625, 1404), (1.625, 1599), (1.625, 1727), (1.625, 1514), (1.625, 1609), (1.625, 1747), (1.625, 792), (1.625, 1480), (1.625, 1360), (1.625, 1381), (1.625, 894), (1.625, 1714), (1.625, 1612), (1.625, 1319), (1.625, 697), (1.625, 1302), (1.625, 1694), (1.625, 988), (1.625, 642), (1.625, 679), (1.625, 1410), (1.625, 1728), (1.625, 1614), (1.625, 1409), (1.625, 886), (1.625, 860), (1.625, 1512), (1.625, 1642), (1.625, 1724), (1.625, 1708), (1.625, 1739), (1.625, 676), (1.625, 1199), (1.625, 1282), (1.625, 1725), (1.625, 1732), (1.625, 1617), (1.625, 986), (1.625, 541), (1.625, 989), (1.625, 1388), (1.625, 739), (1.625, 1203), (1.625, 990), (1.5, 1012), (1.5, 1402), (1.5, 1207), (1.5, 715), (1.5, 1018), (1.5, 796), (1.5, 1671), (1.5, 1344), (1.5, 447), (1.5, 1212), (1.5, 1321), (1.5, 1460), (1.5, 925), (1.5, 1324), (1.5, 1419), (1.5, 1343), (1.5, 604), (1.5, 797), (1.5, 1301), (1.5, 1710), (1.5, 1145), (1.5, 1518), (1.5, 405), (1.5, 1139), (1.5, 1680), (1.5, 1353), (1.5, 1235), (1.5, 1417), (1.5, 1466), (1.5, 1200), (1.5, 1629), (1.5, 101), (1.5, 63), (1.5, 1304), (1.5, 1219), (1.5, 1637), (1.5, 1535), (1.5, 1635), (1.5, 1742), (1.5, 1650), (1.5, 1019), (1.5, 1478), (1.5, 1375), (1.5, 1509), (1.5, 1597), (1.5, 418), (1.5, 1106), (1.5, 1504), (1.5, 923), (1.5, 602), (1.5, 1548), (1.375, 1565), (1.375, 1431), (1.375, 397), (1.375, 499), (1.375, 1603), (1.375, 1659), (1.375, 1717), (1.375, 702), (1.375, 1718), (1.375, 1047), (1.375, 1664), (1.375, 1244), (1.375, 1569), (1.375, 831), (1.375, 631), (1.375, 1242), (1.375, 1559), (1.375, 915), (1.375, 669), (1.375, 1398), (1.375, 1229), (1.375, 1362), (1.375, 749), (1.375, 1341), (1.375, 1071), (1.375, 1392), (1.375, 980), (1.375, 619), (1.375, 1023), (1.375, 1696), (1.375, 1125), (1.375, 1400), (1.375, 1625), (1.375, 1120), (1.375, 1004), (1.375, 1108), (1.375, 1734), (1.375, 341), (1.375, 1322), (1.375, 752), (1.375, 935), (1.375, 785), (1.375, 501), (1.375, 982), (1.375, 903), (1.375, 761), (1.375, 1007), (1.25, 1662), (1.25, 1706), (1.25, 1681), (1.25, 1699), (1.25, 1743), (1.25, 1707), (1.25, 1713), (1.25, 1716), (1.25, 1673), (1.25, 1682), (1.25, 1678), (1.25, 1698), (1.125, 1729), (1.125, 1683), (1.125, 1704), (1.125, 1715), (1.0, 1663), (1.0, 1686), (1.0, 1730), (1.0, 1668), (1.0, 1657), (1.0, 1688), (1.0, 1674), (1.0, 1719), (0.875, 1723), (0.875, 1691), (0.875, 1695), (0.875, 1666), (0.875, 1731), (0.875, 1741), (0.875, 1736), (0.875, 1655), (0.75, 1740), (0.75, 1702), (0.75, 1652), (0.75, 1748), (0.75, 1745), (0.75, 1689), (0.75, 1692), (0.625, 1737), (0.625, 1676), (0.625, 1684), (0.5416666666666666, 1701)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1141
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- x 1) (* 1 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1297
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`y`#`#`(- ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) y) (- x (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1092
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x 1) x) (* 1 (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1578
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`y`#`#`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y 1) y) (+ y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1227
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* (- y y) (* (* x y) y))))
 nr_nodes: 12]
[Generation 16]
[Computing fitness]
[(1.75, 1091), (1.75, 1366), (1.75, 1560), (1.75, 1795), (1.75, 744), (1.75, 1459), (1.75, 1289), (1.75, 1192), (1.75, 1092), (1.75, 1408), (1.75, 1583), (1.75, 786), (1.75, 600), (1.75, 1834), (1.75, 1803), (1.75, 825), (1.75, 1042), (1.75, 1194), (1.75, 1296), (1.75, 1371), (1.75, 979), (1.75, 1191), (1.75, 1342), (1.75, 807), (1.75, 1287), (1.75, 757), (1.75, 1782), (1.75, 790), (1.75, 1196), (1.75, 1805), (1.75, 888), (1.75, 1394), (1.75, 1483), (1.75, 1081), (1.75, 920), (1.75, 820), (1.75, 1753), (1.75, 1481), (1.75, 1255), (1.75, 1281), (1.75, 1658), (1.75, 1181), (1.75, 1297), (1.75, 1551), (1.75, 1581), (1.75, 1132), (1.75, 1529), (1.75, 938), (1.75, 1606), (1.75, 1670), (1.75, 1175), (1.75, 1809), (1.75, 1274), (1.75, 1751), (1.75, 1600), (1.75, 983), (1.75, 1377), (1.75, 1246), (1.75, 1537), (1.75, 1055), (1.75, 1184), (1.75, 518), (1.75, 1785), (1.75, 1808), (1.75, 407), (1.75, 1198), (1.75, 1758), (1.75, 1227), (1.75, 1693), (1.75, 1405), (1.75, 1685), (1.75, 1076), (1.75, 1764), (1.75, 1149), (1.75, 1566), (1.75, 1080), (1.75, 1093), (1.75, 1703), (1.75, 1787), (1.75, 1653), (1.75, 1667), (1.75, 1253), (1.75, 1762), (1.75, 1780), (1.75, 1755), (1.75, 1370), (1.75, 1791), (1.75, 1015), (1.75, 1152), (1.75, 844), (1.75, 1414), (1.75, 1656), (1.75, 1476), (1.75, 1705), (1.75, 1589), (1.75, 1498), (1.75, 1141), (1.75, 1661), (1.75, 1578), (1.75, 1598), (1.75, 1188), (1.75, 1474), (1.75, 1482), (1.75, 735), (1.75, 1479), (1.75, 514), (1.75, 1382), (1.75, 1489), (1.75, 992), (1.75, 1627), (1.75, 1567), (1.75, 788), (1.75, 829), (1.75, 981), (1.75, 1749), (1.75, 1288), (1.625, 1807), (1.625, 860), (1.625, 1642), (1.625, 1512), (1.625, 977), (1.625, 1098), (1.625, 1714), (1.625, 1694), (1.625, 1282), (1.625, 1822), (1.625, 642), (1.625, 1290), (1.625, 1520), (1.625, 988), (1.625, 1199), (1.625, 1747), (1.625, 1820), (1.625, 1721), (1.625, 1404), (1.625, 1612), (1.625, 541), (1.625, 676), (1.625, 1711), (1.625, 986), (1.625, 697), (1.625, 1817), (1.625, 1302), (1.625, 1388), (1.625, 1480), (1.625, 728), (1.625, 792), (1.625, 739), (1.625, 1510), (1.625, 1739), (1.625, 1819), (1.625, 886), (1.625, 1514), (1.625, 1725), (1.625, 1381), (1.625, 1084), (1.625, 1617), (1.625, 989), (1.625, 1614), (1.625, 1609), (1.625, 1319), (1.625, 990), (1.625, 1407), (1.625, 1724), (1.625, 1825), (1.625, 1410), (1.625, 1409), (1.625, 1298), (1.625, 1203), (1.625, 1599), (1.625, 1732), (1.625, 1360), (1.625, 1205), (1.625, 679), (1.625, 1839), (1.625, 1522), (1.625, 1708), (1.625, 1727), (1.625, 1846), (1.625, 1626), (1.625, 1209), (1.625, 1133), (1.625, 1728), (1.625, 1613), (1.625, 894), (1.5, 1139), (1.5, 1417), (1.5, 602), (1.5, 1478), (1.5, 796), (1.5, 1219), (1.5, 1637), (1.5, 1518), (1.5, 1019), (1.5, 923), (1.5, 1353), (1.5, 405), (1.5, 1301), (1.5, 1460), (1.5, 1509), (1.5, 447), (1.5, 925), (1.5, 1635), (1.5, 418), (1.5, 1548), (1.5, 1235), (1.5, 1106), (1.5, 1200), (1.5, 797), (1.5, 1504), (1.5, 715), (1.5, 1321), (1.5, 1344), (1.5, 1671), (1.5, 1629), (1.5, 1304), (1.5, 101), (1.5, 63), (1.5, 1207), (1.5, 1018), (1.5, 1535), (1.5, 1767), (1.5, 604), (1.5, 1419), (1.5, 1742), (1.5, 1343), (1.5, 1680), (1.5, 1466), (1.5, 1402), (1.5, 1597), (1.5, 1710), (1.5, 1145), (1.5, 1831), (1.5, 1324), (1.5, 1012), (1.5, 1375), (1.5, 1650), (1.5, 1212), (1.375, 831), (1.375, 1565), (1.375, 1664), (1.375, 1845), (1.375, 499), (1.375, 702), (1.375, 1431), (1.375, 1047), (1.375, 1659), (1.375, 1718), (1.375, 1797), (1.375, 1766), (1.375, 1842), (1.375, 1603), (1.375, 1244), (1.375, 1717), (1.375, 1844), (1.375, 1815), (1.375, 1770), (1.375, 631), (1.375, 397), (1.375, 1569), (1.25, 1790), (1.25, 1813), (1.25, 1792), (1.25, 1773), (1.25, 1776), (1.25, 1775), (1.25, 1760), (1.25, 1799), (1.25, 1759), (1.25, 1796), (1.25, 1818), (1.25, 1768), (1.125, 1827), (1.125, 1848), (1.125, 1841), (1.125, 1798), (1.125, 1793), (1.125, 1786), (1.0, 1812), (1.0, 1830), (1.0, 1833), (1.0, 1757), (1.0, 1826), (1.0, 1828), (1.0, 1794), (0.9166666666666666, 1774), (0.875, 1778), (0.875, 1800), (0.875, 1804), (0.875, 1837), (0.875, 1765), (0.875, 1788), (0.875, 1824), (0.875, 1784), (0.75, 1801), (0.75, 1763), (0.75, 1761), (0.75, 1835), (0.625, 1811), (0.41666666666666663, 1772)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1091
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y x) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1366
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`y`#`#`y`#`#`(- ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y y) y) (- y (+ x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1560
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`x`#`#`(- ? ?)`y`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- x x) x) (- y (- x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1795
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`1`#`#`x`#`#`(- ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 1) x) (- y (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
[Generation 17]
[Computing fitness]
[(1.75, 1868), (1.75, 1885), (1.75, 1184), (1.75, 1749), (1.75, 1281), (1.75, 1925), (1.75, 1198), (1.75, 788), (1.75, 983), (1.75, 1919), (1.75, 1479), (1.75, 790), (1.75, 1670), (1.75, 1656), (1.75, 1382), (1.75, 1055), (1.75, 807), (1.75, 1370), (1.75, 1567), (1.75, 1782), (1.75, 1342), (1.75, 1787), (1.75, 1791), (1.75, 1834), (1.75, 1914), (1.75, 1042), (1.75, 1287), (1.75, 938), (1.75, 786), (1.75, 1181), (1.75, 1627), (1.75, 518), (1.75, 1288), (1.75, 1598), (1.75, 1857), (1.75, 1092), (1.75, 1529), (1.75, 1764), (1.75, 1661), (1.75, 1566), (1.75, 844), (1.75, 1076), (1.75, 888), (1.75, 1483), (1.75, 920), (1.75, 1377), (1.75, 1755), (1.75, 514), (1.75, 979), (1.75, 1780), (1.75, 1175), (1.75, 1606), (1.75, 1474), (1.75, 1498), (1.75, 1246), (1.75, 1188), (1.75, 1481), (1.75, 744), (1.75, 1871), (1.75, 1753), (1.75, 1489), (1.75, 600), (1.75, 1795), (1.75, 1296), (1.75, 1685), (1.75, 1851), (1.75, 1482), (1.75, 1560), (1.75, 1785), (1.75, 1703), (1.75, 1600), (1.75, 1808), (1.75, 820), (1.75, 1762), (1.75, 1705), (1.75, 1889), (1.75, 1581), (1.75, 981), (1.75, 1578), (1.75, 1803), (1.75, 1191), (1.75, 1141), (1.75, 1015), (1.75, 1805), (1.75, 1297), (1.75, 1751), (1.75, 1667), (1.75, 1091), (1.75, 1080), (1.75, 1192), (1.75, 1227), (1.75, 1255), (1.75, 1876), (1.75, 1405), (1.75, 1289), (1.75, 1926), (1.75, 1196), (1.75, 1253), (1.75, 1893), (1.75, 1394), (1.75, 825), (1.75, 1551), (1.75, 735), (1.75, 1414), (1.75, 757), (1.75, 1081), (1.75, 1537), (1.75, 1809), (1.75, 1758), (1.75, 1476), (1.75, 1459), (1.75, 829), (1.75, 1366), (1.75, 1093), (1.75, 1852), (1.75, 1152), (1.75, 1408), (1.75, 1371), (1.75, 1149), (1.75, 1658), (1.75, 1274), (1.75, 1902), (1.75, 992), (1.75, 1928), (1.75, 1693), (1.75, 407), (1.75, 1850), (1.75, 1194), (1.75, 1856), (1.75, 1589), (1.75, 1583), (1.75, 1653), (1.75, 1132), (1.75, 1853), (1.625, 792), (1.625, 1617), (1.625, 1614), (1.625, 1199), (1.625, 1282), (1.625, 1522), (1.625, 1875), (1.625, 894), (1.625, 989), (1.625, 676), (1.625, 1727), (1.625, 1943), (1.625, 1879), (1.625, 1918), (1.625, 1613), (1.625, 1298), (1.625, 1942), (1.625, 1205), (1.625, 697), (1.625, 1612), (1.625, 1599), (1.625, 1381), (1.625, 1480), (1.625, 1714), (1.625, 1642), (1.625, 1747), (1.625, 1388), (1.625, 886), (1.625, 860), (1.625, 986), (1.625, 1203), (1.625, 1098), (1.625, 1302), (1.625, 1721), (1.625, 1725), (1.625, 1807), (1.625, 679), (1.625, 1694), (1.625, 1404), (1.625, 1940), (1.625, 1931), (1.625, 541), (1.625, 1817), (1.625, 1913), (1.625, 1839), (1.625, 1739), (1.625, 1209), (1.625, 1410), (1.625, 1514), (1.625, 1290), (1.625, 1360), (1.625, 990), (1.625, 1711), (1.625, 1820), (1.625, 1626), (1.625, 1609), (1.625, 1708), (1.625, 1822), (1.625, 1882), (1.625, 1724), (1.625, 1732), (1.625, 1941), (1.625, 1846), (1.625, 1510), (1.625, 1939), (1.625, 988), (1.625, 739), (1.625, 1409), (1.625, 1319), (1.625, 1133), (1.625, 1407), (1.625, 1728), (1.625, 1825), (1.625, 1512), (1.625, 1858), (1.625, 642), (1.625, 728), (1.625, 977), (1.625, 1819), (1.625, 1084), (1.625, 1520), (1.5, 1139), (1.5, 1419), (1.5, 1235), (1.5, 1742), (1.5, 447), (1.5, 796), (1.5, 604), (1.5, 1304), (1.5, 715), (1.5, 1518), (1.5, 405), (1.5, 1019), (1.5, 1321), (1.5, 1417), (1.5, 1548), (1.5, 1767), (1.5, 602), (1.5, 1907), (1.5, 925), (1.5, 63), (1.5, 1301), (1.5, 797), (1.5, 1460), (1.5, 1917), (1.5, 1930), (1.5, 923), (1.5, 1535), (1.5, 1207), (1.5, 1504), (1.5, 1635), (1.5, 1478), (1.5, 1637), (1.5, 1018), (1.5, 1344), (1.5, 1671), (1.5, 1219), (1.5, 1106), (1.5, 1200), (1.5, 1509), (1.5, 1353), (1.5, 1629), (1.5, 101), (1.5, 418), (1.375, 1877), (1.375, 1923), (1.375, 1933), (1.25, 1873), (1.25, 1854), (1.25, 1862), (1.25, 1937), (1.25, 1867), (1.25, 1895), (1.25, 1896), (1.25, 1881), (1.25, 1938), (1.25, 1905), (1.125, 1932), (1.125, 1900), (1.125, 1927), (1.125, 1904), (1.125, 1916), (1.125, 1946), (1.0, 1888), (1.0, 1891), (1.0, 1936), (1.0, 1894), (1.0, 1921), (1.0, 1949), (0.875, 1870), (0.875, 1922), (0.875, 1860), (0.875, 1892), (0.875, 1947), (0.875, 1864), (0.875, 1910), (0.875, 1874), (0.875, 1934), (0.875, 1887), (0.875, 1898), (0.875, 1880), (0.875, 1883), (0.75, 1908), (0.75, 1912), (0.625, 1944), (0.375, 1866)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1868
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) (* (- x x) (- x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1885
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- y 1) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1184
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y (- y 1)) 1) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1749
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- x 1) (+ x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1281
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x (* 1 x)) (* 1 (- y y))))
 nr_nodes: 12]
[Generation 18]
[Computing fitness]
[(1.875, 2025), (1.75, 981), (1.75, 2031), (1.75, 790), (1.75, 744), (1.75, 1902), (1.75, 1956), (1.75, 1889), (1.75, 1868), (1.75, 1191), (1.75, 979), (1.75, 1092), (1.75, 1342), (1.75, 1566), (1.75, 1483), (1.75, 2017), (1.75, 1685), (1.75, 2007), (1.75, 1015), (1.75, 1751), (1.75, 1194), (1.75, 1141), (1.75, 825), (1.75, 1753), (1.75, 1876), (1.75, 1489), (1.75, 1965), (1.75, 829), (1.75, 1281), (1.75, 1808), (1.75, 1287), (1.75, 1196), (1.75, 1926), (1.75, 1600), (1.75, 1297), (1.75, 1377), (1.75, 1076), (1.75, 992), (1.75, 1175), (1.75, 1227), (1.75, 786), (1.75, 1762), (1.75, 920), (1.75, 1181), (1.75, 1479), (1.75, 1857), (1.75, 1925), (1.75, 1976), (1.75, 1803), (1.75, 1782), (1.75, 1667), (1.75, 1919), (1.75, 2001), (1.75, 1132), (1.75, 1703), (1.75, 1780), (1.75, 1850), (1.75, 1537), (1.75, 1852), (1.75, 1997), (1.75, 1042), (1.75, 1964), (1.75, 1476), (1.75, 1149), (1.75, 1093), (1.75, 1764), (1.75, 1255), (1.75, 1529), (1.75, 2003), (1.75, 1992), (1.75, 1928), (1.75, 1371), (1.75, 1982), (1.75, 518), (1.75, 1474), (1.75, 1598), (1.75, 1198), (1.75, 1366), (1.75, 1809), (1.75, 1289), (1.75, 1966), (1.75, 1853), (1.75, 1405), (1.75, 2010), (1.75, 1560), (1.75, 1658), (1.75, 1953), (1.75, 1296), (1.75, 514), (1.75, 1481), (1.75, 983), (1.75, 1606), (1.75, 1091), (1.75, 1152), (1.75, 1589), (1.75, 2039), (1.75, 1551), (1.75, 1791), (1.75, 1670), (1.75, 1583), (1.75, 1408), (1.75, 788), (1.75, 1871), (1.75, 1705), (1.75, 1805), (1.75, 1370), (1.75, 1414), (1.75, 1192), (1.75, 1755), (1.75, 1482), (1.75, 1785), (1.75, 1498), (1.75, 1081), (1.75, 1893), (1.75, 2029), (1.75, 1274), (1.75, 820), (1.75, 1188), (1.75, 888), (1.75, 1055), (1.75, 757), (1.75, 1758), (1.75, 1787), (1.75, 1653), (1.75, 1749), (1.75, 807), (1.75, 1914), (1.75, 1581), (1.75, 1246), (1.75, 1184), (1.75, 844), (1.75, 1851), (1.75, 1627), (1.75, 600), (1.75, 1978), (1.75, 1656), (1.75, 1972), (1.75, 1834), (1.75, 1080), (1.75, 938), (1.75, 1661), (1.75, 1885), (1.75, 1382), (1.75, 1394), (1.75, 407), (1.75, 1693), (1.75, 1795), (1.75, 1253), (1.75, 1567), (1.75, 1288), (1.75, 1578), (1.75, 1856), (1.75, 1995), (1.75, 1459), (1.75, 735), (1.75, 1981), (1.625, 1084), (1.625, 1205), (1.625, 1133), (1.625, 679), (1.625, 2043), (1.625, 1609), (1.625, 1725), (1.625, 2041), (1.625, 1820), (1.625, 1381), (1.625, 1941), (1.625, 988), (1.625, 1514), (1.625, 1819), (1.625, 1732), (1.625, 1388), (1.625, 1913), (1.625, 1943), (1.625, 1839), (1.625, 2033), (1.625, 1302), (1.625, 1875), (1.625, 1599), (1.625, 1708), (1.625, 728), (1.625, 1727), (1.625, 1724), (1.625, 1290), (1.625, 1711), (1.625, 739), (1.625, 894), (1.625, 1298), (1.625, 1747), (1.625, 1480), (1.625, 1825), (1.625, 1879), (1.625, 642), (1.625, 1404), (1.625, 1694), (1.625, 1714), (1.625, 1807), (1.625, 1409), (1.625, 1882), (1.625, 1360), (1.625, 541), (1.625, 1203), (1.625, 1613), (1.625, 1846), (1.625, 1940), (1.625, 1858), (1.625, 1721), (1.625, 1626), (1.625, 1319), (1.625, 986), (1.625, 1931), (1.625, 1612), (1.625, 1970), (1.625, 1520), (1.625, 1617), (1.625, 1512), (1.625, 1510), (1.625, 1209), (1.625, 1642), (1.625, 1939), (1.625, 792), (1.625, 1098), (1.625, 1282), (1.625, 989), (1.625, 1407), (1.625, 676), (1.625, 1728), (1.625, 886), (1.625, 990), (1.625, 1410), (1.625, 697), (1.625, 1942), (1.625, 1522), (1.625, 1918), (1.625, 1822), (1.625, 1614), (1.625, 1817), (1.625, 860), (1.625, 1739), (1.625, 1199), (1.625, 977), (1.5, 796), (1.5, 1235), (1.5, 1987), (1.5, 1518), (1.5, 604), (1.5, 1419), (1.5, 1742), (1.5, 1139), (1.5, 447), (1.5, 715), (1.5, 2037), (1.5, 1975), (1.5, 1304), (1.375, 2034), (1.375, 2000), (1.375, 1989), (1.375, 2023), (1.25, 1967), (1.25, 2022), (1.25, 1980), (1.25, 1963), (1.25, 2036), (1.25, 1971), (1.25, 1959), (1.25, 1990), (1.25, 2009), (1.25, 2027), (1.25, 1968), (1.25, 1979), (1.25, 1960), (1.25, 1991), (1.25, 1986), (1.25, 1954), (1.25, 2006), (1.25, 2018), (1.25, 2004), (1.25, 1962), (1.25, 2026), (1.125, 1993), (1.125, 1996), (1.125, 1952), (1.125, 2040), (1.125, 1977), (1.125, 2008), (1.0, 1988), (1.0, 1984), (1.0, 1955), (1.0, 1973), (0.9166666666666666, 1999), (0.9166666666666666, 2005), (0.875, 2028), (0.875, 2012), (0.75, 1961), (0.75, 2014), (0.625, 2016), (0.625, 1958), (0.5416666666666666, 2020), (0.5416666666666666, 1951), (0.5, 1985)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 981
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`y`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* y x) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2031
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y (* (- 1 1) (* y (+ y 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 790
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- y x) (* (- x x) (* x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 744
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (- y x)) (* (- 1 1) 1)))
 nr_nodes: 12]
[Generation 19]
[Computing fitness]
[(1.875, 2025), (1.75, 1780), (1.75, 2001), (1.75, 1809), (1.75, 1893), (1.75, 1184), (1.75, 2127), (1.75, 1627), (1.75, 1476), (1.75, 2113), (1.75, 2117), (1.75, 1661), (1.75, 1191), (1.75, 744), (1.75, 888), (1.75, 1670), (1.75, 1982), (1.75, 2058), (1.75, 1296), (1.75, 1537), (1.75, 1685), (1.75, 2126), (1.75, 1749), (1.75, 1055), (1.75, 1926), (1.75, 2045), (1.75, 820), (1.75, 2136), (1.75, 1902), (1.75, 1093), (1.75, 1366), (1.75, 1149), (1.75, 1914), (1.75, 1856), (1.75, 1964), (1.75, 1703), (1.75, 1583), (1.75, 1076), (1.75, 1227), (1.75, 2094), (1.75, 518), (1.75, 1693), (1.75, 407), (1.75, 1551), (1.75, 2050), (1.75, 1795), (1.75, 1414), (1.75, 2007), (1.75, 1274), (1.75, 1481), (1.75, 2039), (1.75, 1578), (1.75, 1566), (1.75, 1152), (1.75, 1479), (1.75, 1953), (1.75, 2031), (1.75, 2029), (1.75, 1785), (1.75, 1297), (1.75, 1966), (1.75, 1141), (1.75, 2061), (1.75, 2017), (1.75, 2079), (1.75, 1091), (1.75, 938), (1.75, 1764), (1.75, 1498), (1.75, 1782), (1.75, 1382), (1.75, 2086), (1.75, 1850), (1.75, 1928), (1.75, 2085), (1.75, 1192), (1.75, 1600), (1.75, 735), (1.75, 1598), (1.75, 1976), (1.75, 1080), (1.75, 1198), (1.75, 1787), (1.75, 1834), (1.75, 1474), (1.75, 1997), (1.75, 1876), (1.75, 2069), (1.75, 1377), (1.75, 1762), (1.75, 979), (1.75, 2003), (1.75, 1919), (1.75, 1253), (1.75, 1871), (1.75, 788), (1.75, 1015), (1.75, 2105), (1.75, 1656), (1.75, 2010), (1.75, 1868), (1.75, 1978), (1.75, 2134), (1.75, 2088), (1.75, 1992), (1.75, 1758), (1.75, 2075), (1.75, 2100), (1.75, 600), (1.75, 1853), (1.75, 2052), (1.75, 1805), (1.75, 1803), (1.75, 1606), (1.75, 2102), (1.75, 1589), (1.75, 1342), (1.75, 1567), (1.75, 1132), (1.75, 1956), (1.75, 1408), (1.75, 2051), (1.75, 1658), (1.75, 1042), (1.75, 1482), (1.75, 786), (1.75, 2082), (1.75, 2053), (1.75, 1560), (1.75, 1489), (1.75, 1196), (1.75, 1255), (1.75, 1394), (1.75, 1081), (1.75, 1405), (1.75, 1885), (1.75, 2130), (1.75, 1791), (1.75, 1751), (1.75, 1288), (1.75, 825), (1.75, 1889), (1.75, 1851), (1.75, 829), (1.75, 2114), (1.75, 1371), (1.75, 2062), (1.75, 2047), (1.75, 1529), (1.75, 983), (1.75, 1925), (1.75, 1581), (1.75, 1483), (1.75, 790), (1.75, 1181), (1.75, 1995), (1.75, 1188), (1.75, 1246), (1.75, 1705), (1.75, 1857), (1.75, 1808), (1.75, 1370), (1.75, 2063), (1.75, 1175), (1.75, 1289), (1.75, 1459), (1.75, 992), (1.75, 1653), (1.75, 1753), (1.75, 807), (1.75, 844), (1.75, 757), (1.75, 920), (1.75, 1092), (1.75, 1194), (1.75, 514), (1.75, 1972), (1.75, 1852), (1.75, 1667), (1.75, 1965), (1.75, 1287), (1.75, 981), (1.75, 1981), (1.75, 1281), (1.75, 2119), (1.75, 1755), (1.625, 1319), (1.625, 1626), (1.625, 2041), (1.625, 1825), (1.625, 1725), (1.625, 894), (1.625, 989), (1.625, 1298), (1.625, 739), (1.625, 1724), (1.625, 1820), (1.625, 1084), (1.625, 1940), (1.625, 1360), (1.625, 1807), (1.625, 1882), (1.625, 1404), (1.625, 1879), (1.625, 1388), (1.625, 1381), (1.625, 1282), (1.625, 2043), (1.625, 2072), (1.625, 1846), (1.625, 1943), (1.625, 1858), (1.625, 1694), (1.625, 988), (1.625, 1609), (1.625, 1939), (1.625, 1098), (1.625, 1599), (1.625, 1407), (1.625, 1931), (1.625, 1209), (1.625, 541), (1.625, 1819), (1.625, 1747), (1.625, 1512), (1.625, 1714), (1.625, 2124), (1.625, 2033), (1.625, 642), (1.625, 2064), (1.625, 792), (1.625, 1617), (1.625, 1510), (1.625, 1203), (1.625, 1727), (1.625, 1721), (1.625, 1302), (1.625, 1613), (1.625, 1409), (1.625, 1732), (1.625, 728), (1.625, 986), (1.625, 1875), (1.625, 1913), (1.625, 2097), (1.625, 1133), (1.625, 1205), (1.625, 1290), (1.625, 1514), (1.625, 1711), (1.625, 1612), (1.625, 1970), (1.625, 1839), (1.625, 679), (1.625, 1941), (1.625, 1480), (1.625, 1520), (1.625, 1708), (1.625, 1642), (1.5, 2116), (1.5, 2123), (1.375, 2065), (1.375, 2133), (1.375, 2131), (1.25, 2104), (1.25, 2091), (1.25, 2106), (1.25, 2044), (1.25, 2103), (1.25, 2098), (1.25, 2046), (1.25, 2107), (1.25, 2059), (1.25, 2132), (1.25, 2139), (1.25, 2066), (1.25, 2138), (1.25, 2089), (1.125, 2118), (1.125, 2055), (1.0, 2081), (1.0, 2067), (1.0, 2074), (1.0, 2070), (0.9166666666666666, 2049), (0.875, 2090), (0.875, 2077), (0.875, 2108), (0.875, 2080), (0.875, 2122), (0.875, 2071), (0.875, 2120), (0.875, 2093), (0.875, 2112), (0.875, 2084), (0.75, 2057), (0.625, 2129), (0.5, 2110), (0.5, 2101), (0.5, 2096)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1780
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- x x) (* (- x 1) (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2001
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (- 1 1) (* y (+ x 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 1809
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y x) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1893
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ y x)) (* 1 (- y y))))
 nr_nodes: 12]
[Generation 20]
[Computing fitness]
[(1.875, 2025), (1.75, 1342), (1.75, 983), (1.75, 2029), (1.75, 2127), (1.75, 786), (1.75, 1782), (1.75, 2100), (1.75, 2213), (1.75, 1785), (1.75, 1965), (1.75, 1928), (1.75, 1852), (1.75, 2105), (1.75, 2146), (1.75, 2184), (1.75, 1287), (1.75, 1868), (1.75, 2017), (1.75, 1567), (1.75, 1196), (1.75, 2075), (1.75, 1141), (1.75, 1246), (1.75, 1394), (1.75, 514), (1.75, 1498), (1.75, 820), (1.75, 2216), (1.75, 981), (1.75, 1482), (1.75, 825), (1.75, 1982), (1.75, 1606), (1.75, 788), (1.75, 1755), (1.75, 1288), (1.75, 2079), (1.75, 1474), (1.75, 2047), (1.75, 1762), (1.75, 1808), (1.75, 844), (1.75, 1188), (1.75, 2136), (1.75, 518), (1.75, 2201), (1.75, 2119), (1.75, 1093), (1.75, 1656), (1.75, 1184), (1.75, 1479), (1.75, 1194), (1.75, 1198), (1.75, 1997), (1.75, 2082), (1.75, 1289), (1.75, 2058), (1.75, 1627), (1.75, 2183), (1.75, 2172), (1.75, 1992), (1.75, 2200), (1.75, 1489), (1.75, 1476), (1.75, 1749), (1.75, 1953), (1.75, 2088), (1.75, 2212), (1.75, 2219), (1.75, 1914), (1.75, 1753), (1.75, 2205), (1.75, 1091), (1.75, 1537), (1.75, 1297), (1.75, 1978), (1.75, 1227), (1.75, 1956), (1.75, 1966), (1.75, 1685), (1.75, 1856), (1.75, 1192), (1.75, 2192), (1.75, 2170), (1.75, 1972), (1.75, 2085), (1.75, 1981), (1.75, 2052), (1.75, 1274), (1.75, 1705), (1.75, 1667), (1.75, 2159), (1.75, 1080), (1.75, 920), (1.75, 1405), (1.75, 938), (1.75, 2053), (1.75, 2160), (1.75, 2045), (1.75, 2039), (1.75, 2001), (1.75, 1583), (1.75, 1408), (1.75, 888), (1.75, 1191), (1.75, 1758), (1.75, 1042), (1.75, 2113), (1.75, 1764), (1.75, 407), (1.75, 1076), (1.75, 1092), (1.75, 1081), (1.75, 1529), (1.75, 1661), (1.75, 600), (1.75, 2102), (1.75, 2154), (1.75, 2003), (1.75, 2007), (1.75, 2050), (1.75, 2155), (1.75, 1481), (1.75, 1149), (1.75, 1885), (1.75, 2051), (1.75, 1926), (1.75, 1370), (1.75, 2126), (1.75, 1566), (1.75, 1483), (1.75, 1015), (1.75, 1850), (1.75, 1902), (1.75, 735), (1.75, 1919), (1.75, 1670), (1.75, 1795), (1.75, 1055), (1.75, 2227), (1.75, 2156), (1.75, 1253), (1.75, 1600), (1.75, 1382), (1.75, 1780), (1.75, 2069), (1.75, 1296), (1.75, 1181), (1.75, 2031), (1.75, 1803), (1.75, 829), (1.75, 790), (1.75, 1414), (1.75, 1853), (1.75, 1703), (1.75, 2224), (1.75, 1132), (1.75, 1976), (1.75, 1871), (1.75, 2117), (1.75, 1751), (1.75, 1805), (1.75, 2130), (1.75, 1851), (1.75, 1366), (1.75, 1152), (1.75, 2063), (1.75, 1459), (1.75, 1889), (1.75, 992), (1.75, 1560), (1.75, 1551), (1.75, 2234), (1.75, 1791), (1.75, 1995), (1.75, 2114), (1.75, 1371), (1.75, 1589), (1.75, 1175), (1.75, 1925), (1.75, 1578), (1.75, 1787), (1.75, 1658), (1.75, 2206), (1.75, 1693), (1.75, 1964), (1.75, 744), (1.75, 1857), (1.75, 979), (1.75, 2094), (1.75, 1834), (1.75, 2061), (1.75, 1809), (1.75, 1255), (1.75, 2148), (1.75, 1598), (1.75, 757), (1.75, 807), (1.75, 2010), (1.75, 2134), (1.75, 1281), (1.75, 2140), (1.75, 1377), (1.75, 2086), (1.75, 1876), (1.75, 1653), (1.75, 2174), (1.75, 1581), (1.75, 1893), (1.75, 2062), (1.625, 1724), (1.625, 1931), (1.625, 2041), (1.625, 1599), (1.625, 1879), (1.625, 1747), (1.625, 2043), (1.625, 739), (1.625, 1084), (1.625, 1694), (1.625, 1407), (1.625, 1388), (1.625, 988), (1.625, 1626), (1.625, 1858), (1.625, 894), (1.625, 2157), (1.625, 1807), (1.625, 1939), (1.625, 1298), (1.625, 1609), (1.625, 1725), (1.625, 1098), (1.625, 1404), (1.625, 1282), (1.625, 1882), (1.625, 1825), (1.625, 989), (1.625, 1319), (1.625, 541), (1.625, 1846), (1.625, 2072), (1.625, 1381), (1.625, 2173), (1.625, 1940), (1.625, 1209), (1.625, 1512), (1.625, 1819), (1.625, 1943), (1.625, 1360), (1.625, 1820), (1.5, 2167), (1.375, 2232), (1.375, 2141), (1.375, 2185), (1.375, 2233), (1.375, 2161), (1.375, 2181), (1.375, 2186), (1.25, 2152), (1.25, 2163), (1.25, 2230), (1.25, 2145), (1.25, 2196), (1.25, 2214), (1.25, 2207), (1.25, 2166), (1.25, 2198), (1.25, 2191), (1.25, 2223), (1.25, 2190), (1.25, 2220), (1.25, 2226), (1.25, 2187), (1.25, 2235), (1.25, 2150), (1.25, 2162), (1.25, 2217), (1.25, 2179), (1.25, 2193), (1.25, 2189), (1.25, 2222), (1.25, 2182), (1.25, 2208), (1.0, 2177), (1.0, 2147), (1.0, 2194), (1.0, 2142), (1.0, 2164), (0.9166666666666666, 2229), (0.9166666666666666, 2204), (0.875, 2175), (0.875, 2180), (0.875, 2209), (0.75, 2144), (0.75, 2169), (0.75, 2203), (0.5, 2231), (0.5, 2210)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1342
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`1`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- y 1) (* (- x x) (+ 1 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 983
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 y) (* 1 y)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 2029
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* 1 y) x) (* y (- y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2127
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(- ? ?)`(- ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (- (- (+ x x) x) x)))
 nr_nodes: 12]
[Generation 21]
[Computing fitness]
[(1.875, 2025), (1.75, 1808), (1.75, 2047), (1.75, 1753), (1.75, 2119), (1.75, 2170), (1.75, 2051), (1.75, 2319), (1.75, 1192), (1.75, 2039), (1.75, 2327), (1.75, 1342), (1.75, 1787), (1.75, 1876), (1.75, 2234), (1.75, 1919), (1.75, 1589), (1.75, 2294), (1.75, 1476), (1.75, 757), (1.75, 2140), (1.75, 1479), (1.75, 1653), (1.75, 2292), (1.75, 1366), (1.75, 2259), (1.75, 2172), (1.75, 2001), (1.75, 1703), (1.75, 1092), (1.75, 2219), (1.75, 2100), (1.75, 2216), (1.75, 1976), (1.75, 790), (1.75, 1925), (1.75, 2045), (1.75, 1377), (1.75, 1081), (1.75, 844), (1.75, 1483), (1.75, 1481), (1.75, 1997), (1.75, 2240), (1.75, 1289), (1.75, 1181), (1.75, 1537), (1.75, 1175), (1.75, 1566), (1.75, 2281), (1.75, 1785), (1.75, 2267), (1.75, 2160), (1.75, 2310), (1.75, 1408), (1.75, 1851), (1.75, 2136), (1.75, 1091), (1.75, 1498), (1.75, 1255), (1.75, 2306), (1.75, 1253), (1.75, 2017), (1.75, 2213), (1.75, 2117), (1.75, 1667), (1.75, 1227), (1.75, 1914), (1.75, 2148), (1.75, 1489), (1.75, 1995), (1.75, 1055), (1.75, 1370), (1.75, 2052), (1.75, 2262), (1.75, 1982), (1.75, 1780), (1.75, 1184), (1.75, 2114), (1.75, 1749), (1.75, 2058), (1.75, 2156), (1.75, 829), (1.75, 2328), (1.75, 1371), (1.75, 1297), (1.75, 1196), (1.75, 1627), (1.75, 2075), (1.75, 1661), (1.75, 992), (1.75, 1578), (1.75, 2255), (1.75, 1149), (1.75, 983), (1.75, 1405), (1.75, 1928), (1.75, 2224), (1.75, 1693), (1.75, 1459), (1.75, 1658), (1.75, 786), (1.75, 2082), (1.75, 2212), (1.75, 1902), (1.75, 1482), (1.75, 1152), (1.75, 2007), (1.75, 1606), (1.75, 1762), (1.75, 1685), (1.75, 981), (1.75, 2316), (1.75, 518), (1.75, 1093), (1.75, 1560), (1.75, 1972), (1.75, 1751), (1.75, 2334), (1.75, 2113), (1.75, 1076), (1.75, 2247), (1.75, 2085), (1.75, 1755), (1.75, 1656), (1.75, 1281), (1.75, 1288), (1.75, 1871), (1.75, 1551), (1.75, 2246), (1.75, 1581), (1.75, 1188), (1.75, 1198), (1.75, 979), (1.75, 2154), (1.75, 920), (1.75, 2130), (1.75, 600), (1.75, 1893), (1.75, 2205), (1.75, 888), (1.75, 2288), (1.75, 1981), (1.75, 2105), (1.75, 1782), (1.75, 2086), (1.75, 2126), (1.75, 1758), (1.75, 2102), (1.75, 1382), (1.75, 744), (1.75, 1978), (1.75, 1926), (1.75, 1856), (1.75, 1191), (1.75, 1287), (1.75, 1567), (1.75, 2134), (1.75, 2127), (1.75, 2146), (1.75, 1868), (1.75, 1141), (1.75, 1042), (1.75, 2200), (1.75, 1583), (1.75, 407), (1.75, 1885), (1.75, 1965), (1.75, 2268), (1.75, 2079), (1.75, 2053), (1.75, 2183), (1.75, 1132), (1.75, 2069), (1.75, 1015), (1.75, 1529), (1.75, 1791), (1.75, 807), (1.75, 1853), (1.75, 514), (1.75, 2094), (1.75, 1414), (1.75, 1194), (1.75, 820), (1.75, 2174), (1.75, 2031), (1.75, 2300), (1.75, 2159), (1.75, 1764), (1.75, 2206), (1.75, 2003), (1.75, 1857), (1.75, 2061), (1.75, 2293), (1.75, 2192), (1.75, 1296), (1.75, 2062), (1.75, 1834), (1.75, 1809), (1.75, 2155), (1.75, 2227), (1.75, 2243), (1.75, 1705), (1.75, 2184), (1.75, 735), (1.75, 2010), (1.75, 1966), (1.75, 2029), (1.75, 1964), (1.75, 1803), (1.75, 825), (1.75, 1956), (1.75, 1795), (1.75, 1953), (1.75, 938), (1.75, 1992), (1.75, 2309), (1.75, 2201), (1.75, 1670), (1.75, 2323), (1.75, 788), (1.75, 1805), (1.75, 1394), (1.75, 1889), (1.75, 2063), (1.75, 1274), (1.75, 1080), (1.75, 1598), (1.75, 1246), (1.75, 2088), (1.75, 1600), (1.75, 1850), (1.75, 2050), (1.75, 1852), (1.75, 1474), (1.625, 2256), (1.625, 1626), (1.625, 1747), (1.625, 1694), (1.625, 2282), (1.625, 988), (1.625, 1931), (1.625, 1599), (1.625, 1388), (1.625, 2041), (1.625, 1879), (1.625, 739), (1.625, 2043), (1.625, 1084), (1.625, 1724), (1.625, 1407), (1.5, 2251), (1.5, 2252), (1.5, 2278), (1.5, 2318), (1.5, 2253), (1.375, 2286), (1.375, 2333), (1.375, 2304), (1.375, 2297), (1.25, 2290), (1.25, 2330), (1.25, 2238), (1.25, 2332), (1.25, 2312), (1.25, 2265), (1.25, 2320), (1.25, 2313), (1.25, 2248), (1.25, 2325), (1.25, 2326), (1.25, 2269), (1.25, 2311), (1.25, 2285), (1.125, 2279), (1.125, 2245), (1.125, 2322), (1.125, 2254), (1.0, 2261), (1.0, 2314), (1.0, 2295), (1.0, 2276), (1.0, 2242), (1.0, 2291), (1.0, 2237), (1.0, 2284), (1.0, 2321), (1.0, 2271), (0.9166666666666666, 2257), (0.875, 2274), (0.875, 2239), (0.875, 2289), (0.875, 2250), (0.875, 2308), (0.875, 2303), (0.75, 2277), (0.625, 2302), (0.625, 2264), (0.625, 2299), (0.375, 2273)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 1808
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- y y) (* 1 x)) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 2047
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`y`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- y x) (* (- x x) (* x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 1753
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(- ? ?)`y`#`#`y`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* (- y y) (* (* x y) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2119
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`x`#`#`(* ? ?)`1`#`#`x`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* (- x (* 1 x)) (- y y))))
 nr_nodes: 12]
[Generation 22]
[Computing fitness]
[(1.875, 2025), (1.75, 2227), (1.75, 1184), (1.75, 2216), (1.75, 2134), (1.75, 820), (1.75, 2206), (1.75, 1928), (1.75, 2102), (1.75, 2085), (1.75, 807), (1.75, 1377), (1.75, 1567), (1.75, 2402), (1.75, 1693), (1.75, 2058), (1.75, 1803), (1.75, 1749), (1.75, 1751), (1.75, 600), (1.75, 1964), (1.75, 1868), (1.75, 2294), (1.75, 2267), (1.75, 2031), (1.75, 1366), (1.75, 2100), (1.75, 1152), (1.75, 1498), (1.75, 2363), (1.75, 2375), (1.75, 1653), (1.75, 844), (1.75, 2062), (1.75, 1685), (1.75, 1476), (1.75, 1253), (1.75, 757), (1.75, 2381), (1.75, 1758), (1.75, 735), (1.75, 1606), (1.75, 2130), (1.75, 1405), (1.75, 1787), (1.75, 1925), (1.75, 2359), (1.75, 2174), (1.75, 2183), (1.75, 1982), (1.75, 2053), (1.75, 2156), (1.75, 979), (1.75, 981), (1.75, 1956), (1.75, 2146), (1.75, 2126), (1.75, 2082), (1.75, 514), (1.75, 1808), (1.75, 790), (1.75, 1705), (1.75, 2386), (1.75, 992), (1.75, 2371), (1.75, 2422), (1.75, 2259), (1.75, 2154), (1.75, 2127), (1.75, 829), (1.75, 1175), (1.75, 1893), (1.75, 2240), (1.75, 1482), (1.75, 2425), (1.75, 1289), (1.75, 2344), (1.75, 2105), (1.75, 1081), (1.75, 2201), (1.75, 2117), (1.75, 1408), (1.75, 2086), (1.75, 1196), (1.75, 1953), (1.75, 1627), (1.75, 2051), (1.75, 1856), (1.75, 1589), (1.75, 1371), (1.75, 2017), (1.75, 1919), (1.75, 1489), (1.75, 2334), (1.75, 1795), (1.75, 2045), (1.75, 1755), (1.75, 1566), (1.75, 1297), (1.75, 1287), (1.75, 2094), (1.75, 2306), (1.75, 2170), (1.75, 1015), (1.75, 2349), (1.75, 2159), (1.75, 1198), (1.75, 1782), (1.75, 2224), (1.75, 2063), (1.75, 407), (1.75, 2300), (1.75, 2247), (1.75, 1885), (1.75, 1703), (1.75, 2119), (1.75, 1857), (1.75, 2136), (1.75, 1042), (1.75, 2213), (1.75, 1583), (1.75, 2113), (1.75, 2075), (1.75, 1805), (1.75, 2310), (1.75, 2255), (1.75, 1889), (1.75, 1191), (1.75, 1288), (1.75, 2234), (1.75, 983), (1.75, 1537), (1.75, 920), (1.75, 1459), (1.75, 2007), (1.75, 2350), (1.75, 2319), (1.75, 1192), (1.75, 2323), (1.75, 2362), (1.75, 2052), (1.75, 1976), (1.75, 1764), (1.75, 2401), (1.75, 1091), (1.75, 2039), (1.75, 2155), (1.75, 1382), (1.75, 2316), (1.75, 2268), (1.75, 1753), (1.75, 1141), (1.75, 786), (1.75, 2346), (1.75, 2205), (1.75, 1149), (1.75, 825), (1.75, 2292), (1.75, 1853), (1.75, 1876), (1.75, 1809), (1.75, 1093), (1.75, 1972), (1.75, 2281), (1.75, 1780), (1.75, 2029), (1.75, 2010), (1.75, 2003), (1.75, 1414), (1.75, 1342), (1.75, 2246), (1.75, 1992), (1.75, 2409), (1.75, 1834), (1.75, 2212), (1.75, 1670), (1.75, 2172), (1.75, 1227), (1.75, 1370), (1.75, 1255), (1.75, 1667), (1.75, 2219), (1.75, 2407), (1.75, 1132), (1.75, 2309), (1.75, 1997), (1.75, 744), (1.75, 1656), (1.75, 788), (1.75, 1581), (1.75, 1981), (1.75, 1965), (1.75, 1394), (1.75, 2243), (1.75, 1281), (1.75, 2428), (1.75, 1483), (1.75, 1785), (1.75, 2293), (1.75, 2328), (1.75, 518), (1.75, 2378), (1.75, 1791), (1.75, 1551), (1.75, 1902), (1.75, 2387), (1.75, 1871), (1.75, 2411), (1.75, 1481), (1.75, 888), (1.75, 1966), (1.75, 2160), (1.75, 1194), (1.75, 2366), (1.75, 1479), (1.75, 1076), (1.75, 2140), (1.75, 2061), (1.75, 1995), (1.75, 2327), (1.75, 1762), (1.75, 1188), (1.75, 2047), (1.75, 2288), (1.75, 1181), (1.75, 2200), (1.75, 1578), (1.75, 2001), (1.75, 2114), (1.75, 1658), (1.75, 2079), (1.75, 2184), (1.75, 2370), (1.75, 1914), (1.75, 2069), (1.75, 1560), (1.75, 1851), (1.75, 2355), (1.75, 1055), (1.75, 2192), (1.75, 2148), (1.75, 938), (1.75, 2392), (1.75, 1296), (1.75, 2262), (1.75, 1661), (1.75, 1529), (1.75, 1978), (1.75, 1926), (1.75, 1092), (1.625, 2396), (1.625, 2339), (1.625, 2427), (1.5, 2415), (1.375, 2416), (1.375, 2360), (1.375, 2389), (1.375, 2399), (1.25, 2397), (1.25, 2413), (1.25, 2336), (1.25, 2377), (1.25, 2410), (1.25, 2358), (1.25, 2338), (1.25, 2417), (1.25, 2343), (1.25, 2412), (1.25, 2393), (1.25, 2423), (1.25, 2369), (1.25, 2429), (1.25, 2348), (1.25, 2354), (1.25, 2391), (1.25, 2353), (1.25, 2342), (1.25, 2406), (1.125, 2340), (1.0, 2404), (1.0, 2372), (1.0, 2365), (1.0, 2379), (1.0, 2418), (1.0, 2337), (0.875, 2352), (0.875, 2382), (0.875, 2420), (0.875, 2361), (0.875, 2398), (0.875, 2357), (0.875, 2384), (0.875, 2356), (0.875, 2367), (0.875, 2351), (0.7916666666666666, 2368), (0.75, 2388), (0.625, 2347), (0.375, 2374), (0, 2394)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 2227
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`y`#`#`1`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- y 1) x) (* (- x x) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 1184
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(+ ? ?)`y`#`#`(- ? ?)`y`#`#`1`#`#`1`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (+ y (- y 1)) 1) (- y y)))
 nr_nodes: 12]
(CANDIDATE)[id: 2216
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* (- x x) (* x (* y x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 2134
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`(* ? ?)`(- ? ?)`1`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ x 1) x) (* (- 1 1) 1)))
 nr_nodes: 12]
[Generation 23]
[Computing fitness]
[(1.875, 2025), (1.875, 2482), (1.75, 2246), (1.75, 2401), (1.75, 788), (1.75, 2366), (1.75, 2288), (1.75, 2508), (1.75, 1370), (1.75, 1459), (1.75, 1141), (1.75, 2344), (1.75, 1972), (1.75, 1091), (1.75, 2487), (1.75, 2243), (1.75, 1498), (1.75, 1705), (1.75, 2422), (1.75, 2387), (1.75, 2136), (1.75, 2206), (1.75, 2140), (1.75, 1093), (1.75, 2281), (1.75, 1567), (1.75, 1551), (1.75, 1808), (1.75, 2031), (1.75, 1255), (1.75, 888), (1.75, 829), (1.75, 1281), (1.75, 2010), (1.75, 1081), (1.75, 2440), (1.75, 1893), (1.75, 2520), (1.75, 2160), (1.75, 2381), (1.75, 2259), (1.75, 2213), (1.75, 920), (1.75, 1287), (1.75, 2444), (1.75, 2328), (1.75, 2029), (1.75, 2349), (1.75, 2407), (1.75, 2409), (1.75, 825), (1.75, 2172), (1.75, 2513), (1.75, 2102), (1.75, 1703), (1.75, 2441), (1.75, 2485), (1.75, 2501), (1.75, 1482), (1.75, 1871), (1.75, 2350), (1.75, 1583), (1.75, 2334), (1.75, 2212), (1.75, 2047), (1.75, 1791), (1.75, 2491), (1.75, 1809), (1.75, 1755), (1.75, 407), (1.75, 2062), (1.75, 2268), (1.75, 992), (1.75, 2359), (1.75, 790), (1.75, 2510), (1.75, 1606), (1.75, 2119), (1.75, 2003), (1.75, 1476), (1.75, 2117), (1.75, 2146), (1.75, 2039), (1.75, 1782), (1.75, 2159), (1.75, 2425), (1.75, 2063), (1.75, 2294), (1.75, 1289), (1.75, 1982), (1.75, 1902), (1.75, 518), (1.75, 2468), (1.75, 1919), (1.75, 981), (1.75, 514), (1.75, 1371), (1.75, 1981), (1.75, 2458), (1.75, 2154), (1.75, 2094), (1.75, 2205), (1.75, 2007), (1.75, 1780), (1.75, 2224), (1.75, 1042), (1.75, 2017), (1.75, 2219), (1.75, 1181), (1.75, 1382), (1.75, 1925), (1.75, 1377), (1.75, 1483), (1.75, 2378), (1.75, 2058), (1.75, 1751), (1.75, 2170), (1.75, 1627), (1.75, 1667), (1.75, 1184), (1.75, 1132), (1.75, 2300), (1.75, 844), (1.75, 1366), (1.75, 2310), (1.75, 2363), (1.75, 1966), (1.75, 2216), (1.75, 2155), (1.75, 1753), (1.75, 2511), (1.75, 1868), (1.75, 1288), (1.75, 2045), (1.75, 1834), (1.75, 2227), (1.75, 2445), (1.75, 1889), (1.75, 1965), (1.75, 2471), (1.75, 1149), (1.75, 2293), (1.75, 2462), (1.75, 820), (1.75, 2267), (1.75, 1566), (1.75, 2454), (1.75, 2105), (1.75, 2126), (1.75, 1749), (1.75, 735), (1.75, 2509), (1.75, 1194), (1.75, 1408), (1.75, 2386), (1.75, 2061), (1.75, 1976), (1.75, 1191), (1.75, 1297), (1.75, 2446), (1.75, 2052), (1.75, 2319), (1.75, 2411), (1.75, 2134), (1.75, 1405), (1.75, 1342), (1.75, 1175), (1.75, 786), (1.75, 1803), (1.75, 1992), (1.75, 1188), (1.75, 2439), (1.75, 1964), (1.75, 1589), (1.75, 983), (1.75, 2247), (1.75, 2402), (1.75, 1481), (1.75, 979), (1.75, 1693), (1.75, 1653), (1.75, 1670), (1.75, 2240), (1.75, 1394), (1.75, 1537), (1.75, 2316), (1.75, 2053), (1.75, 1997), (1.75, 1876), (1.75, 2309), (1.75, 2255), (1.75, 600), (1.75, 1196), (1.75, 1758), (1.75, 1414), (1.75, 744), (1.75, 1253), (1.75, 1581), (1.75, 1479), (1.75, 1192), (1.75, 2464), (1.75, 1795), (1.75, 1856), (1.75, 2183), (1.75, 1928), (1.75, 807), (1.75, 1198), (1.75, 757), (1.75, 2174), (1.75, 2085), (1.75, 2323), (1.75, 1885), (1.75, 1853), (1.75, 1857), (1.75, 2292), (1.75, 1685), (1.75, 1489), (1.75, 2362), (1.75, 1785), (1.75, 2497), (1.75, 2156), (1.75, 2127), (1.75, 2086), (1.75, 1805), (1.75, 1764), (1.75, 1152), (1.75, 1227), (1.75, 2375), (1.75, 1015), (1.75, 2428), (1.75, 2113), (1.75, 2100), (1.75, 1787), (1.75, 2051), (1.75, 2201), (1.75, 1656), (1.75, 2234), (1.75, 1762), (1.75, 2371), (1.75, 1076), (1.75, 2327), (1.75, 2130), (1.75, 1956), (1.75, 2075), (1.75, 1995), (1.75, 1953), (1.75, 2082), (1.75, 2346), (1.75, 2306), (1.625, 2451), (1.625, 2443), (1.625, 2463), (1.5, 2486), (1.375, 2436), (1.375, 2453), (1.375, 2456), (1.375, 2465), (1.25, 2507), (1.25, 2480), (1.25, 2472), (1.25, 2517), (1.25, 2457), (1.25, 2460), (1.25, 2506), (1.25, 2434), (1.25, 2500), (1.25, 2526), (1.25, 2477), (1.25, 2438), (1.25, 2461), (1.25, 2493), (1.25, 2518), (1.25, 2437), (1.25, 2479), (1.25, 2484), (1.25, 2499), (1.25, 2475), (1.25, 2488), (1.25, 2489), (1.25, 2496), (1.25, 2521), (1.125, 2470), (1.0, 2494), (1.0, 2455), (1.0, 2495), (1.0, 2515), (1.0, 2467), (0.9166666666666666, 2502), (0.875, 2474), (0.875, 2448), (0.875, 2524), (0.875, 2523), (0.875, 2519), (0.875, 2431), (0.875, 2498), (0.75, 2478), (0.625, 2433), (0.625, 2466), (0.625, 2450), (0.625, 2504)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 2025
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`(- ? ?)`1`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (- 1 y) (* (- 1 x) (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 2482
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(- ? ?)`1`#`#`x`#`#`x`#`#`(- ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (- 1 x) x) (- x (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2246
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`(* ? ?)`y`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (* 1 x) x) (* y (- x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 2401
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`(* ? ?)`(- ? ?)`x`#`#`x`#`#`(- ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) (* (- x x) (- x y))))
 nr_nodes: 12]
(CANDIDATE)[id: 788
 encoding: (defun my_func (x y) ?)`(* ? ?)`(- ? ?)`(- ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`(- ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (- (- 1 y) (* 1 y)) (- y y)))
 nr_nodes: 12]
[Generation 24]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (* (- 1 x) (* (- 1 y) (+ x y))))

Process finished with exit code 0
