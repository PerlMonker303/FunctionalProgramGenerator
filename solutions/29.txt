D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ y (+ x 2))))
 nr_nodes: 8]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ y 1) y) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`2`#`#`(* ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (* (+ x y) 2)) (* y (* 1 (* 2 x)))))
 nr_nodes: 16]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x y) (+ 2 x)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* y 1)) (* 1 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 2))
 nr_nodes: 4]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 2 1))
 nr_nodes: 4]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (+ y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`(* ? ?)`2`#`#`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 (* (* 2 1) y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 1 1) (* y x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`2`#`#`(* ? ?)`2`#`#`2`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`(* ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 2) (* 2 2)) (+ (* x 1) (* 1 2))))
 nr_nodes: 16]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 2 2) 2) x))
 nr_nodes: 8]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 y) (* 1 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* (+ 2 2) (* x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ 1 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y y)))
 nr_nodes: 6]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`(+ ? ?)`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* 1 (+ x y))) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ y (+ (* x 1) x)) 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y (* 2 2)) 2) (* (* 2 x) (* x 2))))
 nr_nodes: 16]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 1) (* 1 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 2 (+ x 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 2 1))
 nr_nodes: 4]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (+ 1 x) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 2 1))
 nr_nodes: 4]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 1) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 2 2) 1) x))
 nr_nodes: 8]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* 1 (* y y))))
 nr_nodes: 8]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 2) y))
 nr_nodes: 6]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* x (+ y y))) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (+ x x) (+ y (+ x 2)))))
 nr_nodes: 12]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`1`#`#`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) 1) (* (* 2 (+ 1 2)) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ (+ 2 x) (* y (+ 1 1)))))
 nr_nodes: 12]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* y y))))
 nr_nodes: 8]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (+ x y) y)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 2 x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 2 1))
 nr_nodes: 4]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ 1 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 1) (* 1 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* x (* 2 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) y) (+ (* x 2) (+ x 2))))
 nr_nodes: 14]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`(+ ? ?)`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 2) (+ 2 x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 2 x) 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 1) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 2 1))
 nr_nodes: 4]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 2) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (* (* x y) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* y (* (* 1 x) x))))
 nr_nodes: 10]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ 1 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`(+ ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 2 (+ (* y 1) y)) (+ 2 x)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* y y)) (* x (* 1 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`1`#`#`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ 2 y) 1) (+ (* (* 1 (+ 2 1)) (* x (+ x 1))) 2)))
 nr_nodes: 20]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* y 1)) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`(* ? ?)`2`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* (* 2 1) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 x) (+ 1 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`(* ? ?)`1`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ 1 (* 1 (+ y y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`1`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ 1 2) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* y (+ 1 (+ y 1)))))
 nr_nodes: 10]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* y (* x (* 2 y)))))
 nr_nodes: 10]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
[Generation 0]
[Computing fitness]
[(1.125, 317), (1.0, 182), (1.0, 247), (1.0, 272), (1.0, 281), (1.0, 293), (1.0, 358), (0.875, 140), (0.6666666666666666, 172), (0.5416666666666666, 153), (0.5416666666666666, 176), (0.5416666666666666, 379), (0.5, 14), (0.5, 82), (0.5, 86), (0.5, 146), (0.5, 198), (0.5, 240), (0.5, 246), (0.5, 251), (0.5, 275), (0.5, 321), (0.5, 334), (0.5, 363), (0.5, 394), (0.475, 45), (0.475, 253), (0.41666666666666663, 89), (0.41666666666666663, 174), (0.41666666666666663, 211), (0.41666666666666663, 254), (0.41666666666666663, 336), (0.375, 72), (0.375, 75), (0.375, 135), (0.375, 337), (0.375, 357), (0.375, 367), (0.375, 383), (0.375, 396), (0.35, 62), (0.35, 129), (0.35, 148), (0.35, 252), (0.35, 360), (0.3333333333333333, 13), (0.3333333333333333, 17), (0.3333333333333333, 21), (0.3333333333333333, 26), (0.3333333333333333, 30), (0.3333333333333333, 33), (0.3333333333333333, 46), (0.3333333333333333, 47), (0.3333333333333333, 51), (0.3333333333333333, 52), (0.3333333333333333, 54), (0.3333333333333333, 56), (0.3333333333333333, 57), (0.3333333333333333, 59), (0.3333333333333333, 60), (0.3333333333333333, 84), (0.3333333333333333, 87), (0.3333333333333333, 90), (0.3333333333333333, 92), (0.3333333333333333, 93), (0.3333333333333333, 97), (0.3333333333333333, 102), (0.3333333333333333, 113), (0.3333333333333333, 118), (0.3333333333333333, 125), (0.3333333333333333, 138), (0.3333333333333333, 139), (0.3333333333333333, 144), (0.3333333333333333, 155), (0.3333333333333333, 156), (0.3333333333333333, 161), (0.3333333333333333, 162), (0.3333333333333333, 164), (0.3333333333333333, 184), (0.3333333333333333, 187), (0.3333333333333333, 188), (0.3333333333333333, 193), (0.3333333333333333, 197), (0.3333333333333333, 199), (0.3333333333333333, 202), (0.3333333333333333, 204), (0.3333333333333333, 206), (0.3333333333333333, 212), (0.3333333333333333, 215), (0.3333333333333333, 218), (0.3333333333333333, 222), (0.3333333333333333, 231), (0.3333333333333333, 232), (0.3333333333333333, 233), (0.3333333333333333, 241), (0.3333333333333333, 242), (0.3333333333333333, 243), (0.3333333333333333, 256), (0.3333333333333333, 257), (0.3333333333333333, 266), (0.3333333333333333, 268), (0.3333333333333333, 269), (0.3333333333333333, 274), (0.3333333333333333, 276), (0.3333333333333333, 278), (0.3333333333333333, 286), (0.3333333333333333, 287), (0.3333333333333333, 289), (0.3333333333333333, 295), (0.3333333333333333, 297), (0.3333333333333333, 301), (0.3333333333333333, 302), (0.3333333333333333, 307), (0.3333333333333333, 316), (0.3333333333333333, 330), (0.3333333333333333, 332), (0.3333333333333333, 335), (0.3333333333333333, 346), (0.3333333333333333, 348), (0.3333333333333333, 365), (0.3333333333333333, 368), (0.3333333333333333, 378), (0.3333333333333333, 380), (0.3333333333333333, 390), (0.3333333333333333, 393), (0.3333333333333333, 395), (0.29166666666666663, 277), (0.29166666666666663, 279), (0.29166666666666663, 376), (0.29166666666666663, 387), (0.25, 31), (0.25, 34), (0.25, 36), (0.25, 64), (0.25, 80), (0.25, 96), (0.25, 107), (0.25, 124), (0.25, 126), (0.25, 180), (0.25, 201), (0.25, 239), (0.25, 267), (0.25, 284), (0.225, 0), (0.225, 11), (0.225, 19), (0.225, 27), (0.225, 40), (0.225, 50), (0.225, 77), (0.225, 78), (0.225, 100), (0.225, 108), (0.225, 112), (0.225, 121), (0.225, 137), (0.225, 143), (0.225, 159), (0.225, 165), (0.225, 171), (0.225, 173), (0.225, 185), (0.225, 220), (0.225, 234), (0.225, 249), (0.225, 262), (0.225, 292), (0.225, 304), (0.225, 341), (0.225, 369), (0.225, 372), (0.20833333333333331, 7), (0.20833333333333331, 9), (0.20833333333333331, 18), (0.20833333333333331, 20), (0.20833333333333331, 22), (0.20833333333333331, 25), (0.20833333333333331, 28), (0.20833333333333331, 35), (0.20833333333333331, 38), (0.20833333333333331, 61), (0.20833333333333331, 68), (0.20833333333333331, 69), (0.20833333333333331, 73), (0.20833333333333331, 85), (0.20833333333333331, 101), (0.20833333333333331, 104), (0.20833333333333331, 105), (0.20833333333333331, 110), (0.20833333333333331, 111), (0.20833333333333331, 114), (0.20833333333333331, 116), (0.20833333333333331, 122), (0.20833333333333331, 134), (0.20833333333333331, 147), (0.20833333333333331, 150), (0.20833333333333331, 157), (0.20833333333333331, 170), (0.20833333333333331, 179), (0.20833333333333331, 186), (0.20833333333333331, 189), (0.20833333333333331, 203), (0.20833333333333331, 205), (0.20833333333333331, 207), (0.20833333333333331, 216), (0.20833333333333331, 217), (0.20833333333333331, 219), (0.20833333333333331, 224), (0.20833333333333331, 226), (0.20833333333333331, 229), (0.20833333333333331, 236), (0.20833333333333331, 237), (0.20833333333333331, 248), (0.20833333333333331, 258), (0.20833333333333331, 259), (0.20833333333333331, 271), (0.20833333333333331, 282), (0.20833333333333331, 294), (0.20833333333333331, 300), (0.20833333333333331, 303), (0.20833333333333331, 310), (0.20833333333333331, 312), (0.20833333333333331, 313), (0.20833333333333331, 315), (0.20833333333333331, 323), (0.20833333333333331, 327), (0.20833333333333331, 338), (0.20833333333333331, 339), (0.20833333333333331, 340), (0.20833333333333331, 344), (0.20833333333333331, 353), (0.20833333333333331, 361), (0.20833333333333331, 370), (0.20833333333333331, 374), (0.20833333333333331, 382), (0.20833333333333331, 386), (0.20833333333333331, 392), (0.16666666666666666, 1), (0.16666666666666666, 8), (0.16666666666666666, 83), (0.16666666666666666, 200), (0.16666666666666666, 299), (0.16666666666666666, 375), (0.16666666666666666, 381), (0.125, 167), (0.125, 168), (0.125, 270), (0.125, 290), (0.125, 311), (0.125, 329), (0.125, 333), (0.125, 355), (0.1, 10), (0.1, 43), (0.1, 44), (0.1, 58), (0.1, 63), (0.1, 65), (0.1, 66), (0.1, 71), (0.1, 74), (0.1, 94), (0.1, 95), (0.1, 117), (0.1, 119), (0.1, 123), (0.1, 127), (0.1, 132), (0.1, 145), (0.1, 175), (0.1, 181), (0.1, 183), (0.1, 221), (0.1, 225), (0.1, 230), (0.1, 235), (0.1, 273), (0.1, 288), (0.1, 298), (0.1, 322), (0.1, 324), (0.1, 347), (0.1, 352), (0.1, 359), (0.1, 362), (0.1, 366), (0.1, 371), (0.08333333333333333, 2), (0.08333333333333333, 3), (0.08333333333333333, 4), (0.08333333333333333, 5), (0.08333333333333333, 6), (0.08333333333333333, 12), (0.08333333333333333, 15), (0.08333333333333333, 16), (0.08333333333333333, 23), (0.08333333333333333, 24), (0.08333333333333333, 29), (0.08333333333333333, 32), (0.08333333333333333, 37), (0.08333333333333333, 39), (0.08333333333333333, 41), (0.08333333333333333, 42), (0.08333333333333333, 48), (0.08333333333333333, 49), (0.08333333333333333, 53), (0.08333333333333333, 55), (0.08333333333333333, 67), (0.08333333333333333, 70), (0.08333333333333333, 76), (0.08333333333333333, 79), (0.08333333333333333, 81), (0.08333333333333333, 88), (0.08333333333333333, 91), (0.08333333333333333, 98), (0.08333333333333333, 99), (0.08333333333333333, 103), (0.08333333333333333, 106), (0.08333333333333333, 109), (0.08333333333333333, 115), (0.08333333333333333, 120), (0.08333333333333333, 128), (0.08333333333333333, 130), (0.08333333333333333, 131), (0.08333333333333333, 133), (0.08333333333333333, 136), (0.08333333333333333, 141), (0.08333333333333333, 142), (0.08333333333333333, 149), (0.08333333333333333, 151), (0.08333333333333333, 152), (0.08333333333333333, 154), (0.08333333333333333, 158), (0.08333333333333333, 160), (0.08333333333333333, 163), (0.08333333333333333, 166), (0.08333333333333333, 169), (0.08333333333333333, 177), (0.08333333333333333, 178), (0.08333333333333333, 190), (0.08333333333333333, 191), (0.08333333333333333, 192), (0.08333333333333333, 194), (0.08333333333333333, 195), (0.08333333333333333, 196), (0.08333333333333333, 208), (0.08333333333333333, 209), (0.08333333333333333, 210), (0.08333333333333333, 213), (0.08333333333333333, 214), (0.08333333333333333, 223), (0.08333333333333333, 227), (0.08333333333333333, 228), (0.08333333333333333, 238), (0.08333333333333333, 244), (0.08333333333333333, 245), (0.08333333333333333, 250), (0.08333333333333333, 255), (0.08333333333333333, 260), (0.08333333333333333, 261), (0.08333333333333333, 263), (0.08333333333333333, 264), (0.08333333333333333, 265), (0.08333333333333333, 280), (0.08333333333333333, 283), (0.08333333333333333, 285), (0.08333333333333333, 291), (0.08333333333333333, 296), (0.08333333333333333, 305), (0.08333333333333333, 306), (0.08333333333333333, 308), (0.08333333333333333, 309), (0.08333333333333333, 314), (0.08333333333333333, 318), (0.08333333333333333, 319), (0.08333333333333333, 320), (0.08333333333333333, 325), (0.08333333333333333, 326), (0.08333333333333333, 328), (0.08333333333333333, 331), (0.08333333333333333, 342), (0.08333333333333333, 343), (0.08333333333333333, 345), (0.08333333333333333, 349), (0.08333333333333333, 350), (0.08333333333333333, 351), (0.08333333333333333, 354), (0.08333333333333333, 356), (0.08333333333333333, 364), (0.08333333333333333, 373), (0.08333333333333333, 377), (0.08333333333333333, 384), (0.08333333333333333, 385), (0.08333333333333333, 388), (0.08333333333333333, 389), (0.08333333333333333, 391), (0.08333333333333333, 397), (0.08333333333333333, 398), (0.08333333333333333, 399)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`1`#`#`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) 1) (* (* 2 (+ 1 2)) 1)))
 nr_nodes: 14]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) y) (+ (* x 2) (+ x 2))))
 nr_nodes: 14]
[Generation 1]
[Computing fitness]
[(1.125, 317), (1.0, 272), (1.0, 293), (1.0, 358), (1.0, 247), (1.0, 281), (1.0, 182), (1.0, 403), (0.875, 140), (0.6666666666666666, 172), (0.5416666666666666, 153), (0.5416666666666666, 379), (0.5416666666666666, 176), (0.5416666666666666, 406), (0.5, 82), (0.5, 394), (0.5, 14), (0.5, 86), (0.5, 412), (0.5, 411), (0.5, 240), (0.5, 334), (0.5, 401), (0.5, 251), (0.5, 275), (0.5, 246), (0.5, 363), (0.5, 321), (0.5, 198), (0.5, 146), (0.475, 45), (0.475, 253), (0.41666666666666663, 211), (0.41666666666666663, 490), (0.41666666666666663, 254), (0.41666666666666663, 174), (0.41666666666666663, 336), (0.41666666666666663, 89), (0.41666666666666663, 418), (0.375, 337), (0.375, 357), (0.375, 421), (0.375, 367), (0.375, 75), (0.375, 383), (0.375, 419), (0.375, 414), (0.375, 420), (0.375, 135), (0.375, 396), (0.375, 479), (0.375, 72), (0.35, 148), (0.35, 62), (0.35, 252), (0.35, 129), (0.35, 427), (0.35, 360), (0.3333333333333333, 432), (0.3333333333333333, 429), (0.3333333333333333, 289), (0.3333333333333333, 204), (0.3333333333333333, 458), (0.3333333333333333, 378), (0.3333333333333333, 448), (0.3333333333333333, 97), (0.3333333333333333, 445), (0.3333333333333333, 199), (0.3333333333333333, 476), (0.3333333333333333, 13), (0.3333333333333333, 276), (0.3333333333333333, 206), (0.3333333333333333, 233), (0.3333333333333333, 462), (0.3333333333333333, 118), (0.3333333333333333, 125), (0.3333333333333333, 444), (0.3333333333333333, 460), (0.3333333333333333, 242), (0.3333333333333333, 155), (0.3333333333333333, 431), (0.3333333333333333, 465), (0.3333333333333333, 102), (0.3333333333333333, 17), (0.3333333333333333, 164), (0.3333333333333333, 87), (0.3333333333333333, 441), (0.3333333333333333, 301), (0.3333333333333333, 330), (0.3333333333333333, 454), (0.3333333333333333, 456), (0.3333333333333333, 202), (0.3333333333333333, 442), (0.3333333333333333, 439), (0.3333333333333333, 470), (0.3333333333333333, 144), (0.3333333333333333, 59), (0.3333333333333333, 139), (0.3333333333333333, 21), (0.3333333333333333, 60), (0.3333333333333333, 188), (0.3333333333333333, 335), (0.3333333333333333, 474), (0.3333333333333333, 269), (0.3333333333333333, 162), (0.3333333333333333, 434), (0.3333333333333333, 380), (0.3333333333333333, 56), (0.3333333333333333, 161), (0.3333333333333333, 231), (0.3333333333333333, 197), (0.3333333333333333, 33), (0.3333333333333333, 218), (0.3333333333333333, 84), (0.3333333333333333, 332), (0.3333333333333333, 156), (0.3333333333333333, 390), (0.3333333333333333, 286), (0.3333333333333333, 467), (0.3333333333333333, 92), (0.3333333333333333, 287), (0.3333333333333333, 449), (0.3333333333333333, 346), (0.3333333333333333, 436), (0.3333333333333333, 471), (0.3333333333333333, 447), (0.3333333333333333, 295), (0.3333333333333333, 463), (0.3333333333333333, 46), (0.3333333333333333, 266), (0.3333333333333333, 212), (0.3333333333333333, 222), (0.3333333333333333, 57), (0.3333333333333333, 433), (0.3333333333333333, 241), (0.3333333333333333, 473), (0.3333333333333333, 193), (0.3333333333333333, 464), (0.3333333333333333, 307), (0.3333333333333333, 113), (0.3333333333333333, 187), (0.3333333333333333, 30), (0.3333333333333333, 232), (0.3333333333333333, 430), (0.3333333333333333, 395), (0.3333333333333333, 393), (0.3333333333333333, 268), (0.3333333333333333, 438), (0.3333333333333333, 478), (0.3333333333333333, 184), (0.3333333333333333, 457), (0.3333333333333333, 297), (0.3333333333333333, 138), (0.3333333333333333, 52), (0.3333333333333333, 26), (0.3333333333333333, 278), (0.3333333333333333, 47), (0.3333333333333333, 243), (0.3333333333333333, 451), (0.3333333333333333, 348), (0.3333333333333333, 54), (0.3333333333333333, 257), (0.3333333333333333, 469), (0.3333333333333333, 477), (0.3333333333333333, 215), (0.3333333333333333, 365), (0.3333333333333333, 93), (0.3333333333333333, 466), (0.3333333333333333, 51), (0.3333333333333333, 461), (0.3333333333333333, 256), (0.3333333333333333, 316), (0.3333333333333333, 274), (0.3333333333333333, 90), (0.3333333333333333, 443), (0.3333333333333333, 453), (0.3333333333333333, 475), (0.3333333333333333, 368), (0.3333333333333333, 302), (0.29166666666666663, 279), (0.29166666666666663, 481), (0.29166666666666663, 277), (0.29166666666666663, 376), (0.29166666666666663, 387), (0.29166666666666663, 407), (0.29166666666666663, 486), (0.25, 34), (0.25, 267), (0.25, 80), (0.25, 239), (0.25, 489), (0.25, 64), (0.25, 31), (0.25, 408), (0.25, 107), (0.25, 485), (0.25, 180), (0.25, 284), (0.25, 422), (0.25, 36), (0.25, 96), (0.25, 126), (0.25, 201), (0.25, 488), (0.25, 124), (0.25, 400), (0.25, 484), (0.225, 495), (0.225, 19), (0.225, 100), (0.225, 262), (0.225, 121), (0.225, 171), (0.225, 165), (0.225, 369), (0.225, 292), (0.225, 50), (0.225, 159), (0.225, 185), (0.225, 173), (0.225, 78), (0.225, 493), (0.225, 11), (0.225, 137), (0.225, 27), (0.225, 234), (0.225, 77), (0.225, 341), (0.225, 0), (0.225, 108), (0.225, 372), (0.225, 249), (0.225, 112), (0.225, 491), (0.225, 143), (0.225, 426), (0.225, 40), (0.225, 304), (0.225, 220), (0.20833333333333331, 315), (0.20833333333333331, 105), (0.20833333333333331, 248), (0.20833333333333331, 217), (0.20833333333333331, 150), (0.20833333333333331, 38), (0.20833333333333331, 259), (0.20833333333333331, 7), (0.20833333333333331, 101), (0.20833333333333331, 134), (0.20833333333333331, 224), (0.20833333333333331, 189), (0.20833333333333331, 300), (0.20833333333333331, 186), (0.20833333333333331, 303), (0.20833333333333331, 226), (0.20833333333333331, 327), (0.20833333333333331, 73), (0.20833333333333331, 353), (0.20833333333333331, 237), (0.20833333333333331, 386), (0.20833333333333331, 104), (0.20833333333333331, 205), (0.20833333333333331, 122), (0.20833333333333331, 312), (0.20833333333333331, 147), (0.20833333333333331, 338), (0.20833333333333331, 323), (0.20833333333333331, 157), (0.20833333333333331, 340), (0.20833333333333331, 28), (0.20833333333333331, 68), (0.20833333333333331, 310), (0.20833333333333331, 203), (0.20833333333333331, 271), (0.20833333333333331, 370), (0.20833333333333331, 392), (0.20833333333333331, 22), (0.20833333333333331, 20), (0.20833333333333331, 207), (0.20833333333333331, 339), (0.20833333333333331, 18), (0.20833333333333331, 282), (0.20833333333333331, 25), (0.20833333333333331, 35), (0.20833333333333331, 361), (0.20833333333333331, 229), (0.20833333333333331, 111), (0.20833333333333331, 116), (0.20833333333333331, 9), (0.20833333333333331, 219), (0.20833333333333331, 69), (0.20833333333333331, 258), (0.20833333333333331, 216), (0.20833333333333331, 236), (0.20833333333333331, 61), (0.20833333333333331, 85), (0.20833333333333331, 294), (0.20833333333333331, 110), (0.20833333333333331, 344), (0.20833333333333331, 313), (0.20833333333333331, 179), (0.20833333333333331, 114), (0.20833333333333331, 382), (0.20833333333333331, 374), (0.20833333333333331, 170), (0.16666666666666666, 200), (0.16666666666666666, 424), (0.16666666666666666, 381), (0.16666666666666666, 8), (0.16666666666666666, 1), (0.16666666666666666, 483), (0.16666666666666666, 299), (0.16666666666666666, 83), (0.16666666666666666, 375), (0.125, 417), (0.125, 329), (0.125, 167), (0.125, 409), (0.125, 270), (0.125, 333), (0.125, 311), (0.125, 355), (0.125, 168), (0.125, 405), (0.125, 290), (0.1, 95), (0.1, 119), (0.1, 230), (0.1, 366), (0.1, 117), (0.1, 413), (0.1, 298), (0.1, 44), (0.1, 359), (0.1, 273), (0.1, 322), (0.1, 127), (0.1, 235), (0.1, 58), (0.1, 371), (0.1, 65), (0.1, 63), (0.1, 123), (0.1, 362), (0.1, 221), (0.1, 425), (0.1, 183), (0.1, 74), (0.1, 145), (0.1, 352), (0.1, 71), (0.1, 175), (0.1, 43), (0.1, 288), (0.1, 324), (0.1, 66), (0.1, 132), (0.1, 94), (0.1, 415), (0.1, 225), (0.1, 10), (0.1, 181), (0.1, 347), (0.08333333333333333, 88), (0.08333333333333333, 70), (0.08333333333333333, 55), (0.08333333333333333, 91), (0.08333333333333333, 3), (0.08333333333333333, 67), (0.08333333333333333, 99), (0.08333333333333333, 79), (0.08333333333333333, 81), (0.08333333333333333, 130), (0.08333333333333333, 109), (0.08333333333333333, 37), (0.08333333333333333, 24), (0.08333333333333333, 49), (0.08333333333333333, 5), (0.08333333333333333, 98), (0.08333333333333333, 4), (0.08333333333333333, 6), (0.08333333333333333, 2), (0.08333333333333333, 39), (0.08333333333333333, 115), (0.08333333333333333, 76), (0.08333333333333333, 12), (0.08333333333333333, 41), (0.08333333333333333, 15), (0.08333333333333333, 103), (0.08333333333333333, 29), (0.08333333333333333, 131), (0.08333333333333333, 32), (0.08333333333333333, 16), (0.08333333333333333, 128), (0.08333333333333333, 23), (0.08333333333333333, 53), (0.08333333333333333, 106), (0.08333333333333333, 42), (0.08333333333333333, 120), (0.08333333333333333, 48)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`(+ ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 2 (+ (* y 1) y)) (+ 2 x)) x))
 nr_nodes: 14]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`(+ ? ?)`1`#`#`2`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) 1) (* (* 2 (+ 1 2)) 1)))
 nr_nodes: 14]
[Generation 2]
[Computing fitness]
[(1.25, 501), (1.125, 317), (1.0, 497), (1.0, 293), (1.0, 403), (1.0, 505), (1.0, 498), (1.0, 358), (1.0, 182), (1.0, 281), (1.0, 272), (1.0, 247), (0.875, 140), (0.6666666666666666, 172), (0.5416666666666666, 502), (0.5416666666666666, 153), (0.5416666666666666, 406), (0.5416666666666666, 176), (0.5416666666666666, 379), (0.5, 506), (0.5, 82), (0.5, 401), (0.5, 363), (0.5, 500), (0.5, 275), (0.5, 86), (0.5, 240), (0.5, 515), (0.5, 246), (0.5, 412), (0.5, 146), (0.5, 198), (0.5, 514), (0.5, 411), (0.5, 511), (0.5, 394), (0.5, 521), (0.5, 14), (0.5, 334), (0.5, 321), (0.5, 251), (0.5, 507), (0.475, 253), (0.475, 529), (0.475, 45), (0.475, 517), (0.41666666666666663, 174), (0.41666666666666663, 89), (0.41666666666666663, 512), (0.41666666666666663, 211), (0.41666666666666663, 418), (0.41666666666666663, 336), (0.41666666666666663, 254), (0.41666666666666663, 490), (0.375, 522), (0.375, 421), (0.375, 75), (0.375, 526), (0.375, 419), (0.375, 383), (0.375, 337), (0.375, 72), (0.375, 135), (0.375, 357), (0.375, 396), (0.375, 414), (0.375, 524), (0.375, 479), (0.375, 420), (0.375, 367), (0.35, 534), (0.35, 252), (0.35, 148), (0.35, 533), (0.35, 62), (0.35, 129), (0.35, 360), (0.35, 427), (0.3333333333333333, 573), (0.3333333333333333, 438), (0.3333333333333333, 46), (0.3333333333333333, 466), (0.3333333333333333, 567), (0.3333333333333333, 139), (0.3333333333333333, 592), (0.3333333333333333, 458), (0.3333333333333333, 442), (0.3333333333333333, 559), (0.3333333333333333, 581), (0.3333333333333333, 575), (0.3333333333333333, 33), (0.3333333333333333, 21), (0.3333333333333333, 269), (0.3333333333333333, 542), (0.3333333333333333, 87), (0.3333333333333333, 102), (0.3333333333333333, 576), (0.3333333333333333, 204), (0.3333333333333333, 393), (0.3333333333333333, 52), (0.3333333333333333, 84), (0.3333333333333333, 469), (0.3333333333333333, 97), (0.3333333333333333, 17), (0.3333333333333333, 550), (0.3333333333333333, 464), (0.3333333333333333, 188), (0.3333333333333333, 348), (0.3333333333333333, 560), (0.3333333333333333, 447), (0.3333333333333333, 535), (0.3333333333333333, 197), (0.3333333333333333, 56), (0.3333333333333333, 473), (0.3333333333333333, 125), (0.3333333333333333, 274), (0.3333333333333333, 243), (0.3333333333333333, 60), (0.3333333333333333, 59), (0.3333333333333333, 57), (0.3333333333333333, 287), (0.3333333333333333, 222), (0.3333333333333333, 161), (0.3333333333333333, 574), (0.3333333333333333, 461), (0.3333333333333333, 266), (0.3333333333333333, 462), (0.3333333333333333, 390), (0.3333333333333333, 51), (0.3333333333333333, 256), (0.3333333333333333, 257), (0.3333333333333333, 335), (0.3333333333333333, 584), (0.3333333333333333, 155), (0.3333333333333333, 368), (0.3333333333333333, 553), (0.3333333333333333, 430), (0.3333333333333333, 448), (0.3333333333333333, 449), (0.3333333333333333, 193), (0.3333333333333333, 443), (0.3333333333333333, 445), (0.3333333333333333, 206), (0.3333333333333333, 184), (0.3333333333333333, 544), (0.3333333333333333, 26), (0.3333333333333333, 92), (0.3333333333333333, 54), (0.3333333333333333, 475), (0.3333333333333333, 429), (0.3333333333333333, 93), (0.3333333333333333, 199), (0.3333333333333333, 118), (0.3333333333333333, 478), (0.3333333333333333, 295), (0.3333333333333333, 538), (0.3333333333333333, 539), (0.3333333333333333, 268), (0.3333333333333333, 278), (0.3333333333333333, 439), (0.3333333333333333, 434), (0.3333333333333333, 307), (0.3333333333333333, 569), (0.3333333333333333, 431), (0.3333333333333333, 540), (0.3333333333333333, 585), (0.3333333333333333, 380), (0.3333333333333333, 588), (0.3333333333333333, 551), (0.3333333333333333, 563), (0.3333333333333333, 156), (0.3333333333333333, 276), (0.3333333333333333, 465), (0.3333333333333333, 451), (0.3333333333333333, 164), (0.3333333333333333, 346), (0.3333333333333333, 316), (0.3333333333333333, 441), (0.3333333333333333, 545), (0.3333333333333333, 587), (0.3333333333333333, 456), (0.3333333333333333, 212), (0.3333333333333333, 579), (0.3333333333333333, 301), (0.3333333333333333, 202), (0.3333333333333333, 138), (0.3333333333333333, 436), (0.3333333333333333, 470), (0.3333333333333333, 586), (0.3333333333333333, 187), (0.3333333333333333, 471), (0.3333333333333333, 433), (0.3333333333333333, 144), (0.3333333333333333, 474), (0.3333333333333333, 536), (0.3333333333333333, 47), (0.3333333333333333, 594), (0.3333333333333333, 113), (0.3333333333333333, 215), (0.3333333333333333, 378), (0.3333333333333333, 562), (0.3333333333333333, 476), (0.3333333333333333, 571), (0.3333333333333333, 541), (0.3333333333333333, 582), (0.3333333333333333, 286), (0.3333333333333333, 432), (0.3333333333333333, 477), (0.3333333333333333, 557), (0.3333333333333333, 302), (0.3333333333333333, 566), (0.3333333333333333, 564), (0.3333333333333333, 218), (0.3333333333333333, 555), (0.3333333333333333, 365), (0.3333333333333333, 242), (0.3333333333333333, 30), (0.3333333333333333, 297), (0.3333333333333333, 593), (0.3333333333333333, 289), (0.3333333333333333, 395), (0.3333333333333333, 162), (0.3333333333333333, 453), (0.3333333333333333, 233), (0.3333333333333333, 549), (0.3333333333333333, 457), (0.3333333333333333, 463), (0.3333333333333333, 467), (0.3333333333333333, 232), (0.3333333333333333, 444), (0.3333333333333333, 231), (0.3333333333333333, 547), (0.3333333333333333, 330), (0.3333333333333333, 454), (0.3333333333333333, 577), (0.3333333333333333, 596), (0.3333333333333333, 595), (0.3333333333333333, 13), (0.3333333333333333, 90), (0.3333333333333333, 241), (0.3333333333333333, 590), (0.3333333333333333, 332), (0.3333333333333333, 583), (0.3333333333333333, 558), (0.3333333333333333, 460), (0.29166666666666663, 481), (0.29166666666666663, 509), (0.29166666666666663, 277), (0.29166666666666663, 387), (0.29166666666666663, 376), (0.29166666666666663, 407), (0.29166666666666663, 486), (0.29166666666666663, 279), (0.25, 180), (0.25, 201), (0.25, 484), (0.25, 80), (0.25, 124), (0.25, 422), (0.25, 96), (0.25, 126), (0.25, 408), (0.25, 34), (0.25, 400), (0.25, 267), (0.25, 284), (0.25, 488), (0.25, 485), (0.25, 31), (0.25, 489), (0.25, 36), (0.25, 107), (0.25, 520), (0.25, 64), (0.25, 239), (0.225, 369), (0.225, 50), (0.225, 19), (0.225, 304), (0.225, 112), (0.225, 341), (0.225, 159), (0.225, 249), (0.225, 100), (0.225, 532), (0.225, 372), (0.225, 0), (0.225, 173), (0.225, 78), (0.225, 426), (0.225, 234), (0.225, 165), (0.225, 121), (0.225, 143), (0.225, 40), (0.225, 137), (0.225, 262), (0.225, 292), (0.225, 495), (0.225, 493), (0.225, 108), (0.225, 11), (0.225, 171), (0.225, 77), (0.225, 185), (0.225, 27), (0.225, 491), (0.225, 220), (0.20833333333333331, 85), (0.20833333333333331, 203), (0.20833333333333331, 303), (0.20833333333333331, 114), (0.20833333333333331, 189), (0.20833333333333331, 7), (0.20833333333333331, 110), (0.20833333333333331, 313), (0.20833333333333331, 122), (0.20833333333333331, 353), (0.20833333333333331, 282), (0.20833333333333331, 300), (0.20833333333333331, 344), (0.20833333333333331, 18), (0.20833333333333331, 186), (0.20833333333333331, 73), (0.20833333333333331, 22), (0.20833333333333331, 38), (0.20833333333333331, 248), (0.20833333333333331, 104), (0.20833333333333331, 374), (0.20833333333333331, 134), (0.20833333333333331, 20), (0.20833333333333331, 68), (0.20833333333333331, 259), (0.20833333333333331, 105), (0.20833333333333331, 35), (0.20833333333333331, 179), (0.20833333333333331, 207), (0.20833333333333331, 28), (0.20833333333333331, 229), (0.20833333333333331, 226), (0.20833333333333331, 327), (0.20833333333333331, 361), (0.20833333333333331, 170), (0.20833333333333331, 392), (0.20833333333333331, 216), (0.20833333333333331, 61), (0.20833333333333331, 219), (0.20833333333333331, 9), (0.20833333333333331, 205), (0.20833333333333331, 116), (0.20833333333333331, 258), (0.20833333333333331, 217), (0.20833333333333331, 157), (0.20833333333333331, 339), (0.20833333333333331, 323), (0.20833333333333331, 111), (0.20833333333333331, 147), (0.20833333333333331, 294), (0.20833333333333331, 271), (0.20833333333333331, 312), (0.20833333333333331, 101), (0.20833333333333331, 237), (0.20833333333333331, 25), (0.20833333333333331, 370), (0.20833333333333331, 310), (0.20833333333333331, 224), (0.20833333333333331, 386), (0.20833333333333331, 150), (0.20833333333333331, 315), (0.20833333333333331, 340), (0.20833333333333331, 69), (0.20833333333333331, 338), (0.20833333333333331, 236), (0.20833333333333331, 382), (0.16666666666666666, 200), (0.16666666666666666, 1), (0.16666666666666666, 530), (0.16666666666666666, 519), (0.16666666666666666, 299), (0.16666666666666666, 424), (0.16666666666666666, 381), (0.16666666666666666, 375), (0.16666666666666666, 83), (0.16666666666666666, 8), (0.16666666666666666, 483), (0.16666666666666666, 504), (0.125, 333), (0.125, 168), (0.125, 528), (0.125, 167), (0.125, 355), (0.125, 409), (0.125, 311), (0.125, 503), (0.125, 405), (0.125, 329), (0.125, 290), (0.125, 417), (0.125, 270), (0.1, 518)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 497
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ 2 (+ 2 1))) (+ (+ 1 1) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 403
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* (* 2 2) 2) (+ y (+ x 2)))))
 nr_nodes: 14]
[Generation 3]
[Computing fitness]
[(1.25, 501), (1.125, 317), (1.0, 599), (1.0, 505), (1.0, 497), (1.0, 293), (1.0, 281), (1.0, 358), (1.0, 498), (1.0, 247), (1.0, 272), (1.0, 403), (1.0, 182), (0.875, 140), (0.75, 605), (0.6666666666666666, 172), (0.5416666666666666, 632), (0.5416666666666666, 379), (0.5416666666666666, 176), (0.5416666666666666, 406), (0.5416666666666666, 502), (0.5416666666666666, 153), (0.5, 514), (0.5, 240), (0.5, 146), (0.5, 411), (0.5, 86), (0.5, 621), (0.5, 521), (0.5, 507), (0.5, 506), (0.5, 637), (0.5, 334), (0.5, 275), (0.5, 412), (0.5, 363), (0.5, 198), (0.5, 615), (0.5, 618), (0.5, 14), (0.5, 600), (0.5, 251), (0.5, 401), (0.5, 630), (0.5, 394), (0.5, 82), (0.5, 515), (0.5, 511), (0.5, 321), (0.5, 616), (0.5, 500), (0.5, 246), (0.475, 627), (0.475, 517), (0.475, 529), (0.475, 253), (0.475, 628), (0.475, 45), (0.41666666666666663, 629), (0.41666666666666663, 174), (0.41666666666666663, 89), (0.41666666666666663, 490), (0.41666666666666663, 512), (0.41666666666666663, 418), (0.41666666666666663, 633), (0.41666666666666663, 211), (0.41666666666666663, 613), (0.41666666666666663, 336), (0.41666666666666663, 254), (0.375, 414), (0.375, 135), (0.375, 72), (0.375, 479), (0.375, 610), (0.375, 524), (0.375, 396), (0.375, 357), (0.375, 383), (0.375, 636), (0.375, 639), (0.375, 75), (0.375, 526), (0.375, 367), (0.375, 603), (0.375, 640), (0.375, 419), (0.375, 421), (0.375, 420), (0.375, 522), (0.375, 337), (0.35, 360), (0.35, 648), (0.35, 62), (0.35, 645), (0.35, 602), (0.35, 252), (0.35, 148), (0.35, 534), (0.35, 427), (0.35, 646), (0.35, 533), (0.35, 129), (0.3333333333333333, 454), (0.3333333333333333, 585), (0.3333333333333333, 473), (0.3333333333333333, 278), (0.3333333333333333, 52), (0.3333333333333333, 571), (0.3333333333333333, 547), (0.3333333333333333, 688), (0.3333333333333333, 541), (0.3333333333333333, 694), (0.3333333333333333, 243), (0.3333333333333333, 477), (0.3333333333333333, 698), (0.3333333333333333, 302), (0.3333333333333333, 266), (0.3333333333333333, 138), (0.3333333333333333, 564), (0.3333333333333333, 276), (0.3333333333333333, 667), (0.3333333333333333, 87), (0.3333333333333333, 297), (0.3333333333333333, 666), (0.3333333333333333, 218), (0.3333333333333333, 269), (0.3333333333333333, 549), (0.3333333333333333, 466), (0.3333333333333333, 365), (0.3333333333333333, 54), (0.3333333333333333, 102), (0.3333333333333333, 557), (0.3333333333333333, 550), (0.3333333333333333, 434), (0.3333333333333333, 574), (0.3333333333333333, 286), (0.3333333333333333, 84), (0.3333333333333333, 475), (0.3333333333333333, 587), (0.3333333333333333, 535), (0.3333333333333333, 156), (0.3333333333333333, 551), (0.3333333333333333, 439), (0.3333333333333333, 161), (0.3333333333333333, 295), (0.3333333333333333, 118), (0.3333333333333333, 699), (0.3333333333333333, 451), (0.3333333333333333, 465), (0.3333333333333333, 544), (0.3333333333333333, 113), (0.3333333333333333, 658), (0.3333333333333333, 540), (0.3333333333333333, 206), (0.3333333333333333, 538), (0.3333333333333333, 579), (0.3333333333333333, 301), (0.3333333333333333, 348), (0.3333333333333333, 474), (0.3333333333333333, 21), (0.3333333333333333, 457), (0.3333333333333333, 432), (0.3333333333333333, 346), (0.3333333333333333, 241), (0.3333333333333333, 458), (0.3333333333333333, 162), (0.3333333333333333, 655), (0.3333333333333333, 684), (0.3333333333333333, 662), (0.3333333333333333, 680), (0.3333333333333333, 677), (0.3333333333333333, 202), (0.3333333333333333, 90), (0.3333333333333333, 696), (0.3333333333333333, 164), (0.3333333333333333, 689), (0.3333333333333333, 449), (0.3333333333333333, 332), (0.3333333333333333, 663), (0.3333333333333333, 691), (0.3333333333333333, 683), (0.3333333333333333, 187), (0.3333333333333333, 559), (0.3333333333333333, 692), (0.3333333333333333, 155), (0.3333333333333333, 445), (0.3333333333333333, 560), (0.3333333333333333, 125), (0.3333333333333333, 47), (0.3333333333333333, 456), (0.3333333333333333, 184), (0.3333333333333333, 13), (0.3333333333333333, 212), (0.3333333333333333, 460), (0.3333333333333333, 215), (0.3333333333333333, 654), (0.3333333333333333, 368), (0.3333333333333333, 586), (0.3333333333333333, 590), (0.3333333333333333, 675), (0.3333333333333333, 567), (0.3333333333333333, 575), (0.3333333333333333, 469), (0.3333333333333333, 380), (0.3333333333333333, 233), (0.3333333333333333, 287), (0.3333333333333333, 672), (0.3333333333333333, 470), (0.3333333333333333, 232), (0.3333333333333333, 653), (0.3333333333333333, 562), (0.3333333333333333, 93), (0.3333333333333333, 335), (0.3333333333333333, 256), (0.3333333333333333, 693), (0.3333333333333333, 447), (0.3333333333333333, 594), (0.3333333333333333, 395), (0.3333333333333333, 51), (0.3333333333333333, 56), (0.3333333333333333, 569), (0.3333333333333333, 669), (0.3333333333333333, 660), (0.3333333333333333, 197), (0.3333333333333333, 545), (0.3333333333333333, 448), (0.3333333333333333, 193), (0.3333333333333333, 442), (0.3333333333333333, 316), (0.3333333333333333, 393), (0.3333333333333333, 682), (0.3333333333333333, 436), (0.3333333333333333, 307), (0.3333333333333333, 443), (0.3333333333333333, 581), (0.3333333333333333, 57), (0.3333333333333333, 583), (0.3333333333333333, 536), (0.3333333333333333, 671), (0.3333333333333333, 476), (0.3333333333333333, 222), (0.3333333333333333, 462), (0.3333333333333333, 686), (0.3333333333333333, 659), (0.3333333333333333, 268), (0.3333333333333333, 431), (0.3333333333333333, 26), (0.3333333333333333, 257), (0.3333333333333333, 577), (0.3333333333333333, 573), (0.3333333333333333, 665), (0.3333333333333333, 97), (0.3333333333333333, 430), (0.3333333333333333, 593), (0.3333333333333333, 46), (0.3333333333333333, 453), (0.3333333333333333, 330), (0.3333333333333333, 139), (0.3333333333333333, 576), (0.3333333333333333, 582), (0.3333333333333333, 274), (0.3333333333333333, 656), (0.3333333333333333, 242), (0.3333333333333333, 289), (0.3333333333333333, 433), (0.3333333333333333, 444), (0.3333333333333333, 441), (0.3333333333333333, 429), (0.3333333333333333, 463), (0.3333333333333333, 596), (0.3333333333333333, 664), (0.3333333333333333, 595), (0.3333333333333333, 566), (0.3333333333333333, 539), (0.3333333333333333, 33), (0.3333333333333333, 378), (0.3333333333333333, 30), (0.3333333333333333, 652), (0.3333333333333333, 553), (0.3333333333333333, 461), (0.3333333333333333, 650), (0.3333333333333333, 584), (0.3333333333333333, 558), (0.3333333333333333, 438), (0.3333333333333333, 59), (0.3333333333333333, 464), (0.3333333333333333, 678), (0.3333333333333333, 17), (0.3333333333333333, 555), (0.3333333333333333, 204), (0.3333333333333333, 390), (0.3333333333333333, 231), (0.3333333333333333, 144), (0.3333333333333333, 588), (0.3333333333333333, 92), (0.3333333333333333, 478), (0.3333333333333333, 592), (0.3333333333333333, 471), (0.3333333333333333, 199), (0.3333333333333333, 467), (0.3333333333333333, 188), (0.3333333333333333, 542), (0.3333333333333333, 60), (0.3333333333333333, 563), (0.3333333333333333, 673), (0.29166666666666663, 486), (0.29166666666666663, 407), (0.29166666666666663, 481), (0.29166666666666663, 279), (0.29166666666666663, 277), (0.29166666666666663, 376), (0.29166666666666663, 509), (0.29166666666666663, 387), (0.25, 267), (0.25, 180), (0.25, 284), (0.25, 484), (0.25, 107), (0.25, 64), (0.25, 80), (0.25, 622), (0.25, 604), (0.25, 400), (0.25, 124), (0.25, 239), (0.25, 422), (0.25, 36), (0.25, 612), (0.25, 520), (0.25, 31), (0.25, 96), (0.25, 489), (0.25, 34), (0.25, 597), (0.25, 201), (0.25, 485), (0.25, 408), (0.25, 488), (0.25, 126), (0.225, 100), (0.225, 262), (0.225, 108), (0.225, 493), (0.225, 159), (0.225, 0), (0.225, 185), (0.225, 249), (0.225, 137), (0.225, 426), (0.225, 112), (0.225, 341), (0.225, 491), (0.225, 634), (0.225, 77), (0.225, 220), (0.225, 292), (0.225, 19), (0.225, 532), (0.225, 304), (0.225, 50), (0.225, 165), (0.225, 27), (0.225, 11), (0.225, 372), (0.225, 143), (0.225, 78), (0.225, 173), (0.225, 40), (0.225, 369), (0.225, 234), (0.225, 495), (0.225, 171), (0.225, 121), (0.20833333333333331, 18), (0.20833333333333331, 73), (0.20833333333333331, 189), (0.20833333333333331, 300), (0.20833333333333331, 353), (0.20833333333333331, 7), (0.20833333333333331, 114), (0.20833333333333331, 313), (0.20833333333333331, 22), (0.20833333333333331, 303), (0.20833333333333331, 186), (0.20833333333333331, 344), (0.20833333333333331, 203), (0.20833333333333331, 122), (0.20833333333333331, 110), (0.20833333333333331, 282), (0.20833333333333331, 85), (0.16666666666666666, 642), (0.16666666666666666, 641), (0.16666666666666666, 606), (0.125, 619), (0.125, 608), (0.125, 644), (0.125, 624), (0.1, 609), (0.1, 625), (0.1, 647)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 599
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* (* 2 2) 1) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 505
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`2`#`#`(* ? ?)`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 2) (* 2 2)) (* y (+ 1 2))))
 nr_nodes: 14]
(CANDIDATE)[id: 497
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ 2 (+ 2 1))) (+ (+ 1 1) y)))
 nr_nodes: 14]
[Generation 4]
[Computing fitness]
[(1.25, 501), (1.125, 721), (1.125, 317), (1.125, 704), (1.0, 281), (1.0, 358), (1.0, 182), (1.0, 497), (1.0, 505), (1.0, 701), (1.0, 705), (1.0, 293), (1.0, 731), (1.0, 702), (1.0, 403), (1.0, 730), (1.0, 247), (1.0, 599), (1.0, 272), (1.0, 498), (0.875, 140), (0.75, 605), (0.75, 707), (0.6666666666666666, 172), (0.625, 750), (0.625, 703), (0.625, 712), (0.625, 754), (0.5416666666666666, 153), (0.5416666666666666, 632), (0.5416666666666666, 379), (0.5416666666666666, 176), (0.5416666666666666, 502), (0.5416666666666666, 406), (0.5, 82), (0.5, 719), (0.5, 521), (0.5, 621), (0.5, 600), (0.5, 411), (0.5, 321), (0.5, 394), (0.5, 728), (0.5, 753), (0.5, 412), (0.5, 729), (0.5, 506), (0.5, 14), (0.5, 240), (0.5, 618), (0.5, 507), (0.5, 514), (0.5, 401), (0.5, 334), (0.5, 720), (0.5, 735), (0.5, 615), (0.5, 251), (0.5, 198), (0.5, 363), (0.5, 246), (0.5, 723), (0.5, 726), (0.5, 86), (0.5, 500), (0.5, 275), (0.5, 616), (0.5, 146), (0.5, 637), (0.5, 511), (0.5, 515), (0.5, 630), (0.475, 253), (0.475, 627), (0.475, 732), (0.475, 517), (0.475, 743), (0.475, 733), (0.475, 628), (0.475, 734), (0.475, 529), (0.475, 45), (0.41666666666666663, 738), (0.41666666666666663, 418), (0.41666666666666663, 254), (0.41666666666666663, 629), (0.41666666666666663, 174), (0.41666666666666663, 336), (0.41666666666666663, 613), (0.41666666666666663, 512), (0.41666666666666663, 89), (0.41666666666666663, 490), (0.41666666666666663, 211), (0.41666666666666663, 633), (0.41666666666666663, 740), (0.375, 396), (0.375, 603), (0.375, 420), (0.375, 357), (0.375, 414), (0.375, 742), (0.375, 640), (0.375, 383), (0.375, 135), (0.375, 727), (0.375, 746), (0.375, 479), (0.375, 526), (0.375, 72), (0.375, 610), (0.375, 710), (0.375, 337), (0.375, 419), (0.375, 724), (0.375, 639), (0.375, 747), (0.375, 421), (0.375, 522), (0.375, 524), (0.375, 75), (0.375, 636), (0.375, 367), (0.35, 427), (0.35, 533), (0.35, 534), (0.35, 129), (0.35, 648), (0.35, 62), (0.35, 602), (0.35, 645), (0.35, 148), (0.35, 762), (0.35, 755), (0.35, 360), (0.35, 646), (0.35, 252), (0.3333333333333333, 783), (0.3333333333333333, 671), (0.3333333333333333, 788), (0.3333333333333333, 102), (0.3333333333333333, 138), (0.3333333333333333, 395), (0.3333333333333333, 775), (0.3333333333333333, 793), (0.3333333333333333, 557), (0.3333333333333333, 656), (0.3333333333333333, 47), (0.3333333333333333, 596), (0.3333333333333333, 465), (0.3333333333333333, 544), (0.3333333333333333, 573), (0.3333333333333333, 380), (0.3333333333333333, 688), (0.3333333333333333, 774), (0.3333333333333333, 587), (0.3333333333333333, 286), (0.3333333333333333, 698), (0.3333333333333333, 555), (0.3333333333333333, 477), (0.3333333333333333, 454), (0.3333333333333333, 779), (0.3333333333333333, 582), (0.3333333333333333, 274), (0.3333333333333333, 204), (0.3333333333333333, 539), (0.3333333333333333, 553), (0.3333333333333333, 463), (0.3333333333333333, 542), (0.3333333333333333, 650), (0.3333333333333333, 443), (0.3333333333333333, 471), (0.3333333333333333, 193), (0.3333333333333333, 26), (0.3333333333333333, 316), (0.3333333333333333, 436), (0.3333333333333333, 576), (0.3333333333333333, 659), (0.3333333333333333, 289), (0.3333333333333333, 584), (0.3333333333333333, 795), (0.3333333333333333, 13), (0.3333333333333333, 56), (0.3333333333333333, 771), (0.3333333333333333, 97), (0.3333333333333333, 434), (0.3333333333333333, 778), (0.3333333333333333, 256), (0.3333333333333333, 125), (0.3333333333333333, 585), (0.3333333333333333, 652), (0.3333333333333333, 666), (0.3333333333333333, 588), (0.3333333333333333, 257), (0.3333333333333333, 693), (0.3333333333333333, 33), (0.3333333333333333, 144), (0.3333333333333333, 447), (0.3333333333333333, 675), (0.3333333333333333, 118), (0.3333333333333333, 763), (0.3333333333333333, 444), (0.3333333333333333, 538), (0.3333333333333333, 449), (0.3333333333333333, 466), (0.3333333333333333, 766), (0.3333333333333333, 653), (0.3333333333333333, 540), (0.3333333333333333, 558), (0.3333333333333333, 464), (0.3333333333333333, 691), (0.3333333333333333, 686), (0.3333333333333333, 789), (0.3333333333333333, 577), (0.3333333333333333, 767), (0.3333333333333333, 393), (0.3333333333333333, 473), (0.3333333333333333, 458), (0.3333333333333333, 595), (0.3333333333333333, 696), (0.3333333333333333, 17), (0.3333333333333333, 378), (0.3333333333333333, 785), (0.3333333333333333, 390), (0.3333333333333333, 287), (0.3333333333333333, 60), (0.3333333333333333, 569), (0.3333333333333333, 562), (0.3333333333333333, 242), (0.3333333333333333, 654), (0.3333333333333333, 683), (0.3333333333333333, 547), (0.3333333333333333, 429), (0.3333333333333333, 188), (0.3333333333333333, 330), (0.3333333333333333, 84), (0.3333333333333333, 59), (0.3333333333333333, 302), (0.3333333333333333, 551), (0.3333333333333333, 268), (0.3333333333333333, 162), (0.3333333333333333, 536), (0.3333333333333333, 655), (0.3333333333333333, 232), (0.3333333333333333, 663), (0.3333333333333333, 438), (0.3333333333333333, 332), (0.3333333333333333, 365), (0.3333333333333333, 559), (0.3333333333333333, 21), (0.3333333333333333, 184), (0.3333333333333333, 30), (0.3333333333333333, 202), (0.3333333333333333, 583), (0.3333333333333333, 792), (0.3333333333333333, 541), (0.3333333333333333, 680), (0.3333333333333333, 781), (0.3333333333333333, 550), (0.3333333333333333, 57), (0.3333333333333333, 469), (0.3333333333333333, 295), (0.3333333333333333, 87), (0.3333333333333333, 448), (0.3333333333333333, 773), (0.3333333333333333, 206), (0.3333333333333333, 470), (0.3333333333333333, 665), (0.3333333333333333, 669), (0.3333333333333333, 243), (0.3333333333333333, 567), (0.3333333333333333, 672), (0.3333333333333333, 278), (0.3333333333333333, 348), (0.3333333333333333, 90), (0.3333333333333333, 266), (0.3333333333333333, 368), (0.3333333333333333, 593), (0.3333333333333333, 571), (0.3333333333333333, 155), (0.3333333333333333, 301), (0.3333333333333333, 335), (0.3333333333333333, 780), (0.3333333333333333, 563), (0.3333333333333333, 457), (0.3333333333333333, 769), (0.3333333333333333, 431), (0.3333333333333333, 592), (0.3333333333333333, 575), (0.3333333333333333, 233), (0.3333333333333333, 660), (0.3333333333333333, 462), (0.3333333333333333, 92), (0.3333333333333333, 456), (0.3333333333333333, 770), (0.3333333333333333, 476), (0.3333333333333333, 689), (0.3333333333333333, 579), (0.3333333333333333, 699), (0.3333333333333333, 139), (0.3333333333333333, 564), (0.3333333333333333, 445), (0.3333333333333333, 432), (0.3333333333333333, 52), (0.3333333333333333, 54), (0.3333333333333333, 461), (0.3333333333333333, 433), (0.3333333333333333, 594), (0.3333333333333333, 664), (0.3333333333333333, 241), (0.3333333333333333, 667), (0.3333333333333333, 215), (0.3333333333333333, 658), (0.3333333333333333, 786), (0.3333333333333333, 307), (0.3333333333333333, 231), (0.3333333333333333, 164), (0.3333333333333333, 467), (0.3333333333333333, 692), (0.3333333333333333, 791), (0.3333333333333333, 453), (0.3333333333333333, 46), (0.3333333333333333, 93), (0.3333333333333333, 222), (0.3333333333333333, 442), (0.3333333333333333, 51), (0.3333333333333333, 684), (0.3333333333333333, 199), (0.3333333333333333, 161), (0.3333333333333333, 439), (0.3333333333333333, 475), (0.3333333333333333, 678), (0.3333333333333333, 581), (0.3333333333333333, 549), (0.3333333333333333, 218), (0.3333333333333333, 460), (0.3333333333333333, 776), (0.3333333333333333, 566), (0.3333333333333333, 113), (0.3333333333333333, 662), (0.3333333333333333, 545), (0.3333333333333333, 269), (0.3333333333333333, 694), (0.3333333333333333, 212), (0.3333333333333333, 346), (0.3333333333333333, 535), (0.3333333333333333, 574), (0.3333333333333333, 765), (0.3333333333333333, 673), (0.3333333333333333, 276), (0.3333333333333333, 451), (0.3333333333333333, 560), (0.3333333333333333, 478), (0.3333333333333333, 187), (0.3333333333333333, 590), (0.3333333333333333, 586), (0.3333333333333333, 430), (0.3333333333333333, 156), (0.3333333333333333, 682), (0.3333333333333333, 474), (0.3333333333333333, 441), (0.3333333333333333, 677), (0.3333333333333333, 197), (0.3333333333333333, 297), (0.29166666666666663, 509), (0.29166666666666663, 407), (0.29166666666666663, 279), (0.29166666666666663, 744), (0.29166666666666663, 708), (0.29166666666666663, 714), (0.29166666666666663, 387), (0.29166666666666663, 706), (0.29166666666666663, 481), (0.29166666666666663, 277), (0.29166666666666663, 376), (0.29166666666666663, 486), (0.25, 400), (0.25, 239), (0.25, 604), (0.25, 484), (0.25, 80), (0.25, 107), (0.25, 752), (0.25, 749), (0.25, 64), (0.25, 267), (0.25, 124), (0.25, 622), (0.25, 284), (0.25, 737), (0.25, 180), (0.25, 741), (0.16666666666666666, 700), (0.16666666666666666, 715), (0.125, 751), (0.1, 758), (0.1, 716), (0.1, 756), (0.1, 718), (0.1, 760), (0.1, 759)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 721
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y y)) (* (+ 2 x) (* 1 y))))
 nr_nodes: 14]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 704
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) y) (+ (* x 2) (+ x 2))))
 nr_nodes: 14]
[Generation 5]
[Computing fitness]
[(1.25, 501), (1.125, 803), (1.125, 704), (1.125, 317), (1.125, 721), (1.0, 498), (1.0, 505), (1.0, 358), (1.0, 182), (1.0, 730), (1.0, 272), (1.0, 281), (1.0, 705), (1.0, 599), (1.0, 497), (1.0, 701), (1.0, 868), (1.0, 702), (1.0, 293), (1.0, 403), (1.0, 247), (1.0, 804), (1.0, 731), (1.0, 805), (0.875, 808), (0.875, 140), (0.75, 605), (0.75, 865), (0.75, 809), (0.75, 862), (0.75, 707), (0.6666666666666666, 857), (0.6666666666666666, 172), (0.625, 754), (0.625, 712), (0.625, 797), (0.625, 864), (0.625, 750), (0.625, 796), (0.625, 836), (0.625, 703), (0.625, 821), (0.625, 812), (0.5416666666666666, 632), (0.5416666666666666, 153), (0.5416666666666666, 406), (0.5416666666666666, 502), (0.5416666666666666, 176), (0.5416666666666666, 835), (0.5416666666666666, 379), (0.5, 198), (0.5, 838), (0.5, 820), (0.5, 507), (0.5, 825), (0.5, 858), (0.5, 600), (0.5, 500), (0.5, 515), (0.5, 630), (0.5, 834), (0.5, 729), (0.5, 720), (0.5, 506), (0.5, 511), (0.5, 146), (0.5, 719), (0.5, 837), (0.5, 251), (0.5, 616), (0.5, 848), (0.5, 637), (0.5, 822), (0.5, 860), (0.5, 334), (0.5, 618), (0.5, 723), (0.5, 728), (0.5, 363), (0.5, 753), (0.5, 394), (0.5, 806), (0.5, 401), (0.5, 240), (0.5, 321), (0.5, 833), (0.5, 521), (0.5, 866), (0.5, 275), (0.5, 412), (0.5, 735), (0.5, 246), (0.5, 621), (0.5, 514), (0.5, 82), (0.5, 726), (0.5, 14), (0.5, 411), (0.5, 844), (0.5, 615), (0.5, 831), (0.5, 847), (0.5, 86), (0.475, 253), (0.475, 45), (0.475, 841), (0.475, 734), (0.475, 517), (0.475, 843), (0.475, 743), (0.475, 839), (0.475, 732), (0.475, 842), (0.475, 733), (0.475, 628), (0.475, 840), (0.475, 529), (0.475, 627), (0.41666666666666663, 89), (0.41666666666666663, 336), (0.41666666666666663, 801), (0.41666666666666663, 174), (0.41666666666666663, 490), (0.41666666666666663, 211), (0.41666666666666663, 740), (0.41666666666666663, 613), (0.41666666666666663, 418), (0.41666666666666663, 738), (0.41666666666666663, 633), (0.41666666666666663, 512), (0.41666666666666663, 629), (0.41666666666666663, 254), (0.375, 852), (0.375, 367), (0.375, 383), (0.375, 337), (0.375, 636), (0.375, 479), (0.375, 610), (0.375, 414), (0.375, 72), (0.375, 640), (0.375, 603), (0.375, 522), (0.375, 724), (0.375, 135), (0.375, 710), (0.375, 75), (0.375, 420), (0.375, 421), (0.375, 870), (0.375, 746), (0.375, 357), (0.375, 867), (0.375, 639), (0.375, 742), (0.375, 747), (0.375, 524), (0.375, 419), (0.375, 807), (0.375, 526), (0.375, 396), (0.375, 811), (0.375, 727), (0.35, 533), (0.35, 360), (0.35, 872), (0.35, 880), (0.35, 755), (0.35, 645), (0.35, 427), (0.35, 534), (0.35, 648), (0.35, 252), (0.35, 602), (0.35, 878), (0.35, 877), (0.35, 646), (0.35, 129), (0.35, 148), (0.35, 62), (0.35, 762), (0.3333333333333333, 307), (0.3333333333333333, 558), (0.3333333333333333, 555), (0.3333333333333333, 434), (0.3333333333333333, 51), (0.3333333333333333, 696), (0.3333333333333333, 90), (0.3333333333333333, 883), (0.3333333333333333, 785), (0.3333333333333333, 792), (0.3333333333333333, 793), (0.3333333333333333, 330), (0.3333333333333333, 571), (0.3333333333333333, 204), (0.3333333333333333, 332), (0.3333333333333333, 138), (0.3333333333333333, 664), (0.3333333333333333, 569), (0.3333333333333333, 206), (0.3333333333333333, 429), (0.3333333333333333, 97), (0.3333333333333333, 665), (0.3333333333333333, 162), (0.3333333333333333, 783), (0.3333333333333333, 770), (0.3333333333333333, 348), (0.3333333333333333, 445), (0.3333333333333333, 795), (0.3333333333333333, 789), (0.3333333333333333, 465), (0.3333333333333333, 118), (0.3333333333333333, 658), (0.3333333333333333, 442), (0.3333333333333333, 295), (0.3333333333333333, 652), (0.3333333333333333, 433), (0.3333333333333333, 390), (0.3333333333333333, 184), (0.3333333333333333, 232), (0.3333333333333333, 575), (0.3333333333333333, 444), (0.3333333333333333, 60), (0.3333333333333333, 233), (0.3333333333333333, 773), (0.3333333333333333, 540), (0.3333333333333333, 463), (0.3333333333333333, 655), (0.3333333333333333, 447), (0.3333333333333333, 301), (0.3333333333333333, 557), (0.3333333333333333, 576), (0.3333333333333333, 577), (0.3333333333333333, 791), (0.3333333333333333, 47), (0.3333333333333333, 57), (0.3333333333333333, 592), (0.3333333333333333, 448), (0.3333333333333333, 686), (0.3333333333333333, 763), (0.3333333333333333, 457), (0.3333333333333333, 659), (0.3333333333333333, 87), (0.3333333333333333, 256), (0.3333333333333333, 780), (0.3333333333333333, 769), (0.3333333333333333, 884), (0.3333333333333333, 46), (0.3333333333333333, 767), (0.3333333333333333, 663), (0.3333333333333333, 477), (0.3333333333333333, 278), (0.3333333333333333, 266), (0.3333333333333333, 579), (0.3333333333333333, 30), (0.3333333333333333, 563), (0.3333333333333333, 155), (0.3333333333333333, 885), (0.3333333333333333, 287), (0.3333333333333333, 766), (0.3333333333333333, 666), (0.3333333333333333, 541), (0.3333333333333333, 669), (0.3333333333333333, 13), (0.3333333333333333, 656), (0.3333333333333333, 593), (0.3333333333333333, 432), (0.3333333333333333, 887), (0.3333333333333333, 52), (0.3333333333333333, 588), (0.3333333333333333, 231), (0.3333333333333333, 596), (0.3333333333333333, 289), (0.3333333333333333, 544), (0.3333333333333333, 654), (0.3333333333333333, 595), (0.3333333333333333, 456), (0.3333333333333333, 881), (0.3333333333333333, 775), (0.3333333333333333, 778), (0.3333333333333333, 692), (0.3333333333333333, 469), (0.3333333333333333, 582), (0.3333333333333333, 454), (0.3333333333333333, 536), (0.3333333333333333, 672), (0.3333333333333333, 144), (0.3333333333333333, 587), (0.3333333333333333, 781), (0.3333333333333333, 473), (0.3333333333333333, 888), (0.3333333333333333, 779), (0.3333333333333333, 202), (0.3333333333333333, 689), (0.3333333333333333, 59), (0.3333333333333333, 691), (0.3333333333333333, 553), (0.3333333333333333, 21), (0.3333333333333333, 671), (0.3333333333333333, 550), (0.3333333333333333, 471), (0.3333333333333333, 564), (0.3333333333333333, 33), (0.3333333333333333, 257), (0.3333333333333333, 538), (0.3333333333333333, 17), (0.3333333333333333, 461), (0.3333333333333333, 886), (0.3333333333333333, 458), (0.3333333333333333, 193), (0.3333333333333333, 286), (0.3333333333333333, 585), (0.3333333333333333, 542), (0.3333333333333333, 653), (0.3333333333333333, 241), (0.3333333333333333, 584), (0.3333333333333333, 26), (0.3333333333333333, 786), (0.3333333333333333, 464), (0.3333333333333333, 771), (0.3333333333333333, 368), (0.3333333333333333, 395), (0.3333333333333333, 188), (0.3333333333333333, 443), (0.3333333333333333, 688), (0.3333333333333333, 449), (0.3333333333333333, 573), (0.3333333333333333, 380), (0.3333333333333333, 583), (0.3333333333333333, 93), (0.3333333333333333, 788), (0.3333333333333333, 438), (0.3333333333333333, 316), (0.3333333333333333, 693), (0.3333333333333333, 92), (0.3333333333333333, 393), (0.3333333333333333, 559), (0.3333333333333333, 378), (0.3333333333333333, 476), (0.3333333333333333, 243), (0.3333333333333333, 650), (0.3333333333333333, 125), (0.3333333333333333, 56), (0.3333333333333333, 680), (0.3333333333333333, 699), (0.3333333333333333, 594), (0.3333333333333333, 215), (0.3333333333333333, 698), (0.3333333333333333, 335), (0.3333333333333333, 54), (0.3333333333333333, 547), (0.3333333333333333, 466), (0.3333333333333333, 462), (0.3333333333333333, 102), (0.3333333333333333, 164), (0.3333333333333333, 467), (0.3333333333333333, 453), (0.3333333333333333, 436), (0.3333333333333333, 660), (0.3333333333333333, 567), (0.3333333333333333, 675), (0.3333333333333333, 667), (0.3333333333333333, 274), (0.3333333333333333, 302), (0.3333333333333333, 84), (0.3333333333333333, 365), (0.3333333333333333, 551), (0.3333333333333333, 562), (0.3333333333333333, 139), (0.3333333333333333, 539), (0.3333333333333333, 683), (0.3333333333333333, 470), (0.3333333333333333, 268), (0.3333333333333333, 431), (0.3333333333333333, 222), (0.3333333333333333, 242), (0.3333333333333333, 774), (0.29166666666666663, 850), (0.25, 863), (0.25, 819), (0.25, 845), (0.25, 799), (0.16666666666666666, 815), (0.16666666666666666, 798), (0.16666666666666666, 824), (0.16666666666666666, 829), (0.16666666666666666, 816), (0.16666666666666666, 853), (0.16666666666666666, 813), (0.16666666666666666, 818), (0.16666666666666666, 851), (0.125, 855), (0.125, 832), (0.125, 827), (0.125, 828), (0.125, 826), (0.1, 874), (0.1, 876), (0.1, 871)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 803
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 704
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 721
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y y)) (* (+ 2 x) (* 1 y))))
 nr_nodes: 14]
[Generation 6]
[Computing fitness]
[(1.25, 501), (1.125, 721), (1.125, 704), (1.125, 317), (1.125, 803), (1.125, 889), (1.125, 897), (1.0, 505), (1.0, 358), (1.0, 944), (1.0, 731), (1.0, 247), (1.0, 403), (1.0, 901), (1.0, 498), (1.0, 868), (1.0, 805), (1.0, 272), (1.0, 912), (1.0, 730), (1.0, 896), (1.0, 705), (1.0, 497), (1.0, 804), (1.0, 702), (1.0, 293), (1.0, 599), (1.0, 701), (1.0, 281), (1.0, 182), (0.875, 808), (0.875, 905), (0.875, 140), (0.75, 865), (0.75, 862), (0.75, 809), (0.75, 707), (0.75, 605), (0.75, 940), (0.6666666666666666, 857), (0.6666666666666666, 172), (0.625, 754), (0.625, 750), (0.625, 703), (0.625, 891), (0.625, 987), (0.625, 911), (0.625, 812), (0.625, 909), (0.625, 864), (0.625, 937), (0.625, 797), (0.625, 821), (0.625, 916), (0.625, 918), (0.625, 796), (0.625, 712), (0.625, 836), (0.5416666666666666, 176), (0.5416666666666666, 153), (0.5416666666666666, 923), (0.5416666666666666, 406), (0.5416666666666666, 502), (0.5416666666666666, 835), (0.5416666666666666, 632), (0.5416666666666666, 910), (0.5416666666666666, 379), (0.5416666666666666, 921), (0.5, 928), (0.5, 720), (0.5, 954), (0.5, 858), (0.5, 500), (0.5, 753), (0.5, 515), (0.5, 927), (0.5, 938), (0.5, 848), (0.5, 936), (0.5, 825), (0.5, 240), (0.5, 943), (0.5, 973), (0.5, 86), (0.5, 822), (0.5, 506), (0.5, 514), (0.5, 615), (0.5, 837), (0.5, 251), (0.5, 618), (0.5, 637), (0.5, 929), (0.5, 616), (0.5, 246), (0.5, 82), (0.5, 899), (0.5, 949), (0.5, 957), (0.5, 14), (0.5, 838), (0.5, 321), (0.5, 926), (0.5, 834), (0.5, 198), (0.5, 630), (0.5, 931), (0.5, 844), (0.5, 831), (0.5, 511), (0.5, 890), (0.5, 728), (0.5, 833), (0.5, 941), (0.5, 723), (0.5, 985), (0.5, 860), (0.5, 600), (0.5, 363), (0.5, 394), (0.5, 945), (0.5, 621), (0.5, 866), (0.5, 847), (0.5, 820), (0.5, 735), (0.5, 806), (0.5, 932), (0.5, 401), (0.5, 904), (0.5, 953), (0.5, 521), (0.5, 146), (0.5, 411), (0.5, 507), (0.5, 719), (0.5, 903), (0.5, 956), (0.5, 729), (0.5, 275), (0.5, 726), (0.5, 334), (0.5, 412), (0.475, 970), (0.475, 841), (0.475, 733), (0.475, 734), (0.475, 840), (0.475, 843), (0.475, 839), (0.475, 967), (0.475, 964), (0.475, 743), (0.475, 962), (0.475, 628), (0.475, 517), (0.475, 529), (0.475, 732), (0.475, 842), (0.475, 253), (0.475, 969), (0.475, 965), (0.475, 627), (0.475, 966), (0.475, 45), (0.41666666666666663, 738), (0.41666666666666663, 89), (0.41666666666666663, 933), (0.41666666666666663, 512), (0.41666666666666663, 740), (0.41666666666666663, 336), (0.41666666666666663, 211), (0.41666666666666663, 613), (0.41666666666666663, 418), (0.41666666666666663, 801), (0.41666666666666663, 174), (0.41666666666666663, 629), (0.41666666666666663, 951), (0.41666666666666663, 977), (0.41666666666666663, 490), (0.41666666666666663, 633), (0.41666666666666663, 254), (0.375, 747), (0.375, 479), (0.375, 383), (0.375, 724), (0.375, 75), (0.375, 971), (0.375, 524), (0.375, 870), (0.375, 639), (0.375, 337), (0.375, 526), (0.375, 807), (0.375, 710), (0.375, 867), (0.375, 135), (0.375, 414), (0.375, 811), (0.375, 603), (0.375, 979), (0.375, 636), (0.375, 975), (0.375, 742), (0.375, 727), (0.375, 610), (0.375, 420), (0.375, 421), (0.375, 988), (0.375, 72), (0.375, 852), (0.375, 640), (0.375, 522), (0.375, 367), (0.375, 419), (0.375, 746), (0.375, 357), (0.375, 396), (0.35, 533), (0.35, 427), (0.35, 872), (0.35, 129), (0.35, 252), (0.35, 62), (0.35, 646), (0.35, 878), (0.35, 602), (0.35, 755), (0.35, 534), (0.35, 880), (0.35, 645), (0.35, 877), (0.35, 762), (0.35, 360), (0.35, 648), (0.35, 148), (0.3333333333333333, 26), (0.3333333333333333, 97), (0.3333333333333333, 17), (0.3333333333333333, 773), (0.3333333333333333, 301), (0.3333333333333333, 587), (0.3333333333333333, 231), (0.3333333333333333, 786), (0.3333333333333333, 540), (0.3333333333333333, 21), (0.3333333333333333, 596), (0.3333333333333333, 204), (0.3333333333333333, 390), (0.3333333333333333, 429), (0.3333333333333333, 663), (0.3333333333333333, 666), (0.3333333333333333, 51), (0.3333333333333333, 232), (0.3333333333333333, 689), (0.3333333333333333, 584), (0.3333333333333333, 579), (0.3333333333333333, 595), (0.3333333333333333, 33), (0.3333333333333333, 395), (0.3333333333333333, 569), (0.3333333333333333, 778), (0.3333333333333333, 669), (0.3333333333333333, 90), (0.3333333333333333, 550), (0.3333333333333333, 442), (0.3333333333333333, 241), (0.3333333333333333, 30), (0.3333333333333333, 659), (0.3333333333333333, 793), (0.3333333333333333, 781), (0.3333333333333333, 538), (0.3333333333333333, 770), (0.3333333333333333, 888), (0.3333333333333333, 655), (0.3333333333333333, 368), (0.3333333333333333, 881), (0.3333333333333333, 144), (0.3333333333333333, 432), (0.3333333333333333, 542), (0.3333333333333333, 886), (0.3333333333333333, 653), (0.3333333333333333, 456), (0.3333333333333333, 544), (0.3333333333333333, 457), (0.3333333333333333, 783), (0.3333333333333333, 593), (0.3333333333333333, 557), (0.3333333333333333, 791), (0.3333333333333333, 289), (0.3333333333333333, 465), (0.3333333333333333, 471), (0.3333333333333333, 672), (0.3333333333333333, 445), (0.3333333333333333, 582), (0.3333333333333333, 785), (0.3333333333333333, 558), (0.3333333333333333, 266), (0.3333333333333333, 766), (0.3333333333333333, 885), (0.3333333333333333, 576), (0.3333333333333333, 295), (0.3333333333333333, 555), (0.3333333333333333, 469), (0.3333333333333333, 664), (0.3333333333333333, 461), (0.3333333333333333, 464), (0.3333333333333333, 780), (0.3333333333333333, 692), (0.3333333333333333, 654), (0.3333333333333333, 57), (0.3333333333333333, 458), (0.3333333333333333, 46), (0.3333333333333333, 671), (0.3333333333333333, 307), (0.3333333333333333, 257), (0.3333333333333333, 434), (0.3333333333333333, 473), (0.3333333333333333, 536), (0.3333333333333333, 775), (0.3333333333333333, 463), (0.3333333333333333, 433), (0.3333333333333333, 443), (0.3333333333333333, 330), (0.3333333333333333, 652), (0.3333333333333333, 155), (0.3333333333333333, 795), (0.3333333333333333, 887), (0.3333333333333333, 348), (0.3333333333333333, 52), (0.3333333333333333, 138), (0.3333333333333333, 691), (0.3333333333333333, 656), (0.3333333333333333, 771), (0.3333333333333333, 13), (0.3333333333333333, 118), (0.3333333333333333, 763), (0.3333333333333333, 202), (0.3333333333333333, 696), (0.3333333333333333, 577), (0.3333333333333333, 448), (0.3333333333333333, 286), (0.3333333333333333, 779), (0.3333333333333333, 665), (0.3333333333333333, 287), (0.3333333333333333, 575), (0.3333333333333333, 162), (0.3333333333333333, 553), (0.3333333333333333, 332), (0.3333333333333333, 87), (0.3333333333333333, 767), (0.3333333333333333, 588), (0.3333333333333333, 585), (0.3333333333333333, 188), (0.3333333333333333, 789), (0.3333333333333333, 563), (0.3333333333333333, 233), (0.3333333333333333, 883), (0.3333333333333333, 184), (0.3333333333333333, 769), (0.3333333333333333, 884), (0.3333333333333333, 59), (0.3333333333333333, 193), (0.3333333333333333, 541), (0.3333333333333333, 658), (0.3333333333333333, 571), (0.3333333333333333, 47), (0.3333333333333333, 792), (0.3333333333333333, 444), (0.3333333333333333, 592), (0.3333333333333333, 278), (0.3333333333333333, 206), (0.3333333333333333, 256), (0.3333333333333333, 686), (0.3333333333333333, 564), (0.3333333333333333, 447), (0.3333333333333333, 60), (0.3333333333333333, 454), (0.3333333333333333, 477), (0.29166666666666663, 982), (0.29166666666666663, 907), (0.29166666666666663, 989), (0.25, 946), (0.25, 893), (0.25, 980), (0.25, 955), (0.25, 935), (0.25, 900), (0.25, 895), (0.25, 978), (0.25, 983), (0.16666666666666666, 981), (0.125, 924), (0.125, 958), (0.125, 948), (0.125, 914), (0.125, 976), (0.125, 919), (0.1, 974), (0.1, 960)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 721
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (* y y)) (* (+ 2 x) (* 1 y))))
 nr_nodes: 14]
(CANDIDATE)[id: 704
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* (* (* 2 2) 2) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 (+ 2 2)) (+ (+ 1 1) (+ x 1))))
 nr_nodes: 14]
(CANDIDATE)[id: 803
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
[Generation 7]
[Computing fitness]
[(1.25, 990), (1.25, 501), (1.125, 803), (1.125, 897), (1.125, 889), (1.125, 317), (1.125, 704), (1.125, 721), (1.125, 993), (1.0, 281), (1.0, 182), (1.0, 1068), (1.0, 730), (1.0, 1005), (1.0, 996), (1.0, 293), (1.0, 896), (1.0, 498), (1.0, 998), (1.0, 403), (1.0, 701), (1.0, 912), (1.0, 731), (1.0, 1009), (1.0, 247), (1.0, 599), (1.0, 702), (1.0, 868), (1.0, 991), (1.0, 804), (1.0, 994), (1.0, 705), (1.0, 944), (1.0, 805), (1.0, 505), (1.0, 358), (1.0, 901), (1.0, 272), (1.0, 497), (1.0, 1004), (0.875, 140), (0.875, 1008), (0.875, 1001), (0.875, 1027), (0.875, 1007), (0.875, 905), (0.875, 808), (0.75, 809), (0.75, 940), (0.75, 1032), (0.75, 862), (0.75, 1014), (0.75, 1010), (0.75, 707), (0.75, 865), (0.75, 1054), (0.75, 605), (0.6666666666666666, 172), (0.6666666666666666, 1028), (0.6666666666666666, 857), (0.625, 797), (0.625, 937), (0.625, 864), (0.625, 918), (0.625, 703), (0.625, 891), (0.625, 836), (0.625, 909), (0.625, 1047), (0.625, 712), (0.625, 987), (0.625, 812), (0.625, 796), (0.625, 821), (0.625, 916), (0.625, 1011), (0.625, 1063), (0.625, 754), (0.625, 911), (0.625, 750), (0.625, 1024), (0.5416666666666666, 379), (0.5416666666666666, 406), (0.5416666666666666, 923), (0.5416666666666666, 835), (0.5416666666666666, 502), (0.5416666666666666, 153), (0.5416666666666666, 910), (0.5416666666666666, 1029), (0.5416666666666666, 1025), (0.5416666666666666, 176), (0.5416666666666666, 632), (0.5416666666666666, 921), (0.5, 1065), (0.5, 600), (0.5, 735), (0.5, 847), (0.5, 844), (0.5, 941), (0.5, 506), (0.5, 240), (0.5, 904), (0.5, 1072), (0.5, 1012), (0.5, 1045), (0.5, 1069), (0.5, 363), (0.5, 1003), (0.5, 834), (0.5, 926), (0.5, 858), (0.5, 637), (0.5, 943), (0.5, 1066), (0.5, 927), (0.5, 726), (0.5, 929), (0.5, 1020), (0.5, 723), (0.5, 14), (0.5, 932), (0.5, 1058), (0.5, 729), (0.5, 275), (0.5, 1039), (0.5, 753), (0.5, 511), (0.5, 1043), (0.5, 949), (0.5, 822), (0.5, 500), (0.5, 630), (0.5, 146), (0.5, 1053), (0.5, 899), (0.5, 321), (0.5, 719), (0.5, 515), (0.5, 334), (0.5, 728), (0.5, 831), (0.5, 82), (0.5, 931), (0.5, 957), (0.5, 86), (0.5, 1076), (0.5, 973), (0.5, 945), (0.5, 246), (0.5, 1064), (0.5, 837), (0.5, 1052), (0.5, 838), (0.5, 1019), (0.5, 928), (0.5, 1060), (0.5, 616), (0.5, 938), (0.5, 820), (0.5, 615), (0.5, 521), (0.5, 956), (0.5, 720), (0.5, 1023), (0.5, 1044), (0.5, 514), (0.5, 1037), (0.5, 198), (0.5, 1078), (0.5, 412), (0.5, 1067), (0.5, 825), (0.5, 1059), (0.5, 866), (0.5, 848), (0.5, 1073), (0.5, 1002), (0.5, 890), (0.5, 985), (0.5, 1036), (0.5, 1006), (0.5, 903), (0.5, 953), (0.5, 833), (0.5, 251), (0.5, 394), (0.5, 936), (0.5, 621), (0.5, 806), (0.5, 401), (0.5, 860), (0.5, 954), (0.5, 411), (0.5, 1057), (0.5, 618), (0.5, 507), (0.475, 962), (0.475, 969), (0.475, 965), (0.475, 733), (0.475, 841), (0.475, 627), (0.475, 840), (0.475, 529), (0.475, 253), (0.475, 517), (0.475, 732), (0.475, 967), (0.475, 743), (0.475, 45), (0.475, 628), (0.475, 964), (0.475, 1083), (0.475, 966), (0.475, 970), (0.475, 839), (0.475, 1080), (0.475, 842), (0.475, 1081), (0.475, 734), (0.475, 843), (0.41666666666666663, 490), (0.41666666666666663, 740), (0.41666666666666663, 254), (0.41666666666666663, 613), (0.41666666666666663, 933), (0.41666666666666663, 801), (0.41666666666666663, 512), (0.41666666666666663, 89), (0.41666666666666663, 629), (0.41666666666666663, 951), (0.41666666666666663, 418), (0.41666666666666663, 633), (0.41666666666666663, 738), (0.41666666666666663, 211), (0.41666666666666663, 174), (0.41666666666666663, 977), (0.41666666666666663, 336), (0.375, 995), (0.375, 870), (0.375, 811), (0.375, 747), (0.375, 636), (0.375, 603), (0.375, 75), (0.375, 746), (0.375, 357), (0.375, 421), (0.375, 72), (0.375, 135), (0.375, 610), (0.375, 524), (0.375, 337), (0.375, 807), (0.375, 852), (0.375, 414), (0.375, 640), (0.375, 367), (0.375, 979), (0.375, 639), (0.375, 971), (0.375, 522), (0.375, 419), (0.375, 383), (0.375, 988), (0.375, 727), (0.375, 867), (0.375, 479), (0.375, 710), (0.375, 526), (0.375, 742), (0.375, 975), (0.375, 724), (0.375, 1055), (0.375, 420), (0.375, 1071), (0.375, 396), (0.35, 148), (0.35, 1075), (0.35, 762), (0.35, 602), (0.35, 648), (0.35, 645), (0.35, 878), (0.35, 252), (0.35, 129), (0.35, 427), (0.35, 534), (0.35, 877), (0.35, 360), (0.35, 880), (0.35, 62), (0.35, 533), (0.35, 872), (0.35, 646), (0.35, 755), (0.3333333333333333, 26), (0.3333333333333333, 97), (0.3333333333333333, 786), (0.3333333333333333, 666), (0.3333333333333333, 307), (0.3333333333333333, 463), (0.3333333333333333, 692), (0.3333333333333333, 144), (0.3333333333333333, 558), (0.3333333333333333, 457), (0.3333333333333333, 473), (0.3333333333333333, 442), (0.3333333333333333, 596), (0.3333333333333333, 544), (0.3333333333333333, 295), (0.3333333333333333, 330), (0.3333333333333333, 461), (0.3333333333333333, 664), (0.3333333333333333, 433), (0.3333333333333333, 471), (0.3333333333333333, 231), (0.3333333333333333, 881), (0.3333333333333333, 21), (0.3333333333333333, 289), (0.3333333333333333, 33), (0.3333333333333333, 584), (0.3333333333333333, 434), (0.3333333333333333, 550), (0.3333333333333333, 654), (0.3333333333333333, 569), (0.3333333333333333, 456), (0.3333333333333333, 885), (0.3333333333333333, 576), (0.3333333333333333, 390), (0.3333333333333333, 766), (0.3333333333333333, 241), (0.3333333333333333, 232), (0.3333333333333333, 57), (0.3333333333333333, 689), (0.3333333333333333, 770), (0.3333333333333333, 458), (0.3333333333333333, 46), (0.3333333333333333, 555), (0.3333333333333333, 429), (0.3333333333333333, 659), (0.3333333333333333, 579), (0.3333333333333333, 301), (0.3333333333333333, 465), (0.3333333333333333, 464), (0.3333333333333333, 793), (0.3333333333333333, 595), (0.3333333333333333, 593), (0.3333333333333333, 538), (0.3333333333333333, 395), (0.3333333333333333, 791), (0.3333333333333333, 669), (0.3333333333333333, 582), (0.3333333333333333, 257), (0.3333333333333333, 536), (0.3333333333333333, 773), (0.3333333333333333, 445), (0.3333333333333333, 785), (0.3333333333333333, 775), (0.3333333333333333, 51), (0.3333333333333333, 671), (0.3333333333333333, 672), (0.3333333333333333, 780), (0.3333333333333333, 540), (0.3333333333333333, 368), (0.3333333333333333, 469), (0.3333333333333333, 886), (0.3333333333333333, 663), (0.3333333333333333, 17), (0.3333333333333333, 783), (0.3333333333333333, 652), (0.3333333333333333, 204), (0.3333333333333333, 888), (0.3333333333333333, 443), (0.3333333333333333, 778), (0.3333333333333333, 432), (0.3333333333333333, 266), (0.3333333333333333, 90), (0.3333333333333333, 30), (0.3333333333333333, 781), (0.3333333333333333, 653), (0.3333333333333333, 542), (0.3333333333333333, 557), (0.3333333333333333, 587), (0.3333333333333333, 655), (0.29166666666666663, 1042), (0.25, 1021), (0.25, 1062), (0.25, 1000), (0.25, 1051), (0.25, 1016), (0.25, 1026), (0.25, 1049), (0.16666666666666666, 999), (0.16666666666666666, 1018), (0.16666666666666666, 1034), (0.125, 1031), (0.1, 1056), (0.1, 1041), (0.1, 1077)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 990
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 803
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
(CANDIDATE)[id: 897
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`2`#`#`1`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ (* (* 2 2) 1) (* y (+ x 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 889
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`2`#`#`1`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x (+ (+ 2 y) (+ 2 1))) (+ x y)))
 nr_nodes: 14]
[Generation 8]
[Computing fitness]
[(1.25, 990), (1.25, 1121), (1.25, 1159), (1.25, 1084), (1.25, 501), (1.25, 1168), (1.125, 1098), (1.125, 317), (1.125, 897), (1.125, 803), (1.125, 889), (1.125, 1086), (1.125, 721), (1.125, 704), (1.125, 1131), (1.125, 993), (1.125, 1178), (1.0, 994), (1.0, 1137), (1.0, 182), (1.0, 1005), (1.0, 247), (1.0, 272), (1.0, 804), (1.0, 896), (1.0, 868), (1.0, 1169), (1.0, 944), (1.0, 702), (1.0, 403), (1.0, 281), (1.0, 358), (1.0, 497), (1.0, 1096), (1.0, 731), (1.0, 1004), (1.0, 730), (1.0, 1102), (1.0, 991), (1.0, 1093), (1.0, 1068), (1.0, 705), (1.0, 1009), (1.0, 599), (1.0, 498), (1.0, 293), (1.0, 805), (1.0, 701), (1.0, 996), (1.0, 998), (1.0, 912), (1.0, 505), (1.0, 901), (0.875, 1007), (0.875, 808), (0.875, 1117), (0.875, 1174), (0.875, 140), (0.875, 1027), (0.875, 905), (0.875, 1114), (0.875, 1008), (0.875, 1001), (0.75, 1032), (0.75, 862), (0.75, 940), (0.75, 605), (0.75, 865), (0.75, 1054), (0.75, 1119), (0.75, 1118), (0.75, 707), (0.75, 1010), (0.75, 1014), (0.75, 1122), (0.75, 809), (0.75, 1115), (0.6666666666666666, 857), (0.6666666666666666, 1028), (0.6666666666666666, 1123), (0.6666666666666666, 172), (0.625, 703), (0.625, 918), (0.625, 821), (0.625, 937), (0.625, 1112), (0.625, 1011), (0.625, 750), (0.625, 909), (0.625, 1128), (0.625, 796), (0.625, 1101), (0.625, 812), (0.625, 712), (0.625, 1047), (0.625, 891), (0.625, 1105), (0.625, 916), (0.625, 911), (0.625, 836), (0.625, 1167), (0.625, 797), (0.625, 987), (0.625, 1063), (0.625, 754), (0.625, 1024), (0.625, 864), (0.5416666666666666, 923), (0.5416666666666666, 632), (0.5416666666666666, 1138), (0.5416666666666666, 406), (0.5416666666666666, 1150), (0.5416666666666666, 176), (0.5416666666666666, 502), (0.5416666666666666, 835), (0.5416666666666666, 379), (0.5416666666666666, 1025), (0.5416666666666666, 1029), (0.5416666666666666, 153), (0.5416666666666666, 910), (0.5416666666666666, 921), (0.5416666666666666, 1140), (0.5, 866), (0.5, 1175), (0.5, 904), (0.5, 729), (0.5, 838), (0.5, 1145), (0.5, 956), (0.5, 929), (0.5, 825), (0.5, 321), (0.5, 927), (0.5, 1092), (0.5, 1012), (0.5, 637), (0.5, 985), (0.5, 1019), (0.5, 1023), (0.5, 500), (0.5, 1149), (0.5, 412), (0.5, 1045), (0.5, 1126), (0.5, 1044), (0.5, 1059), (0.5, 616), (0.5, 246), (0.5, 945), (0.5, 515), (0.5, 1037), (0.5, 1064), (0.5, 521), (0.5, 1144), (0.5, 1078), (0.5, 1151), (0.5, 1066), (0.5, 1053), (0.5, 847), (0.5, 1072), (0.5, 1060), (0.5, 1043), (0.5, 411), (0.5, 943), (0.5, 1003), (0.5, 899), (0.5, 1058), (0.5, 719), (0.5, 844), (0.5, 401), (0.5, 728), (0.5, 1170), (0.5, 240), (0.5, 1036), (0.5, 1090), (0.5, 822), (0.5, 938), (0.5, 834), (0.5, 831), (0.5, 858), (0.5, 1039), (0.5, 820), (0.5, 931), (0.5, 1073), (0.5, 837), (0.5, 363), (0.5, 928), (0.5, 936), (0.5, 926), (0.5, 1171), (0.5, 941), (0.5, 1103), (0.5, 1065), (0.5, 1076), (0.5, 735), (0.5, 1160), (0.5, 953), (0.5, 615), (0.5, 890), (0.5, 507), (0.5, 1161), (0.5, 146), (0.5, 618), (0.5, 86), (0.5, 630), (0.5, 932), (0.5, 949), (0.5, 251), (0.5, 806), (0.5, 1067), (0.5, 1146), (0.5, 1127), (0.5, 903), (0.5, 1006), (0.5, 848), (0.5, 1087), (0.5, 1177), (0.5, 506), (0.5, 600), (0.5, 973), (0.5, 82), (0.5, 511), (0.5, 275), (0.5, 1052), (0.5, 954), (0.5, 726), (0.5, 957), (0.5, 860), (0.5, 621), (0.5, 334), (0.5, 1069), (0.5, 1057), (0.5, 394), (0.5, 198), (0.5, 1097), (0.5, 720), (0.5, 514), (0.5, 1148), (0.5, 1100), (0.5, 833), (0.5, 723), (0.5, 1088), (0.5, 753), (0.5, 1002), (0.5, 1157), (0.5, 1020), (0.5, 14), (0.475, 841), (0.475, 1080), (0.475, 965), (0.475, 842), (0.475, 1083), (0.475, 529), (0.475, 964), (0.475, 627), (0.475, 733), (0.475, 517), (0.475, 743), (0.475, 45), (0.475, 962), (0.475, 1130), (0.475, 840), (0.475, 732), (0.475, 967), (0.475, 628), (0.475, 734), (0.475, 1081), (0.475, 253), (0.475, 966), (0.475, 969), (0.475, 839), (0.475, 843), (0.475, 970), (0.41666666666666663, 951), (0.41666666666666663, 174), (0.41666666666666663, 633), (0.41666666666666663, 613), (0.41666666666666663, 1110), (0.41666666666666663, 336), (0.41666666666666663, 211), (0.41666666666666663, 801), (0.41666666666666663, 490), (0.41666666666666663, 254), (0.41666666666666663, 89), (0.41666666666666663, 738), (0.41666666666666663, 629), (0.41666666666666663, 1162), (0.41666666666666663, 418), (0.41666666666666663, 740), (0.41666666666666663, 512), (0.41666666666666663, 933), (0.41666666666666663, 977), (0.375, 807), (0.375, 870), (0.375, 420), (0.375, 414), (0.375, 357), (0.375, 971), (0.375, 867), (0.375, 979), (0.375, 852), (0.375, 747), (0.375, 1055), (0.375, 811), (0.375, 610), (0.375, 135), (0.375, 419), (0.375, 603), (0.375, 988), (0.375, 727), (0.375, 367), (0.375, 639), (0.375, 72), (0.375, 1089), (0.375, 710), (0.375, 383), (0.375, 526), (0.375, 1163), (0.375, 1135), (0.375, 746), (0.375, 724), (0.375, 1139), (0.375, 742), (0.375, 522), (0.375, 524), (0.375, 75), (0.375, 396), (0.375, 636), (0.375, 479), (0.375, 640), (0.375, 975), (0.375, 337), (0.375, 995), (0.375, 421), (0.375, 1071), (0.35, 1172), (0.35, 646), (0.35, 533), (0.35, 648), (0.35, 129), (0.35, 1075), (0.35, 762), (0.35, 148), (0.35, 427), (0.35, 880), (0.35, 534), (0.35, 878), (0.35, 62), (0.35, 877), (0.35, 645), (0.35, 872), (0.35, 755), (0.35, 602), (0.35, 252), (0.35, 360), (0.3333333333333333, 21), (0.3333333333333333, 666), (0.3333333333333333, 26), (0.3333333333333333, 295), (0.3333333333333333, 596), (0.3333333333333333, 463), (0.3333333333333333, 550), (0.3333333333333333, 434), (0.3333333333333333, 544), (0.3333333333333333, 289), (0.3333333333333333, 692), (0.3333333333333333, 461), (0.3333333333333333, 33), (0.3333333333333333, 584), (0.3333333333333333, 330), (0.3333333333333333, 558), (0.3333333333333333, 881), (0.3333333333333333, 231), (0.3333333333333333, 433), (0.3333333333333333, 473), (0.3333333333333333, 144), (0.3333333333333333, 664), (0.3333333333333333, 654), (0.3333333333333333, 442), (0.3333333333333333, 457), (0.3333333333333333, 307), (0.3333333333333333, 471), (0.3333333333333333, 97), (0.3333333333333333, 786), (0.29166666666666663, 1155), (0.25, 1165), (0.25, 1158), (0.25, 1095), (0.25, 1153), (0.25, 1142), (0.25, 1125), (0.25, 1156), (0.25, 1107), (0.25, 1106), (0.25, 1129), (0.16666666666666666, 1141), (0.16666666666666666, 1109), (0.16666666666666666, 1143), (0.125, 1133), (0.1, 1176)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 990
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 1121
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 1) (* (* 2 y) (* y (* 2 x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 1159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 1 x) 1) (* (* 2 x) (* y 2))))
 nr_nodes: 14]
(CANDIDATE)[id: 1084
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
[Generation 9]
[Computing fitness]
[(1.25, 1084), (1.25, 1168), (1.25, 990), (1.25, 1121), (1.25, 501), (1.25, 1159), (1.125, 1222), (1.125, 1131), (1.125, 1098), (1.125, 1184), (1.125, 803), (1.125, 721), (1.125, 317), (1.125, 897), (1.125, 1178), (1.125, 704), (1.125, 1239), (1.125, 993), (1.125, 1086), (1.125, 889), (1.0, 1193), (1.0, 1096), (1.0, 805), (1.0, 901), (1.0, 1004), (1.0, 1198), (1.0, 1005), (1.0, 1169), (1.0, 731), (1.0, 247), (1.0, 505), (1.0, 998), (1.0, 1206), (1.0, 868), (1.0, 281), (1.0, 498), (1.0, 293), (1.0, 912), (1.0, 996), (1.0, 701), (1.0, 705), (1.0, 991), (1.0, 994), (1.0, 1242), (1.0, 1194), (1.0, 804), (1.0, 1009), (1.0, 730), (1.0, 497), (1.0, 944), (1.0, 1214), (1.0, 182), (1.0, 403), (1.0, 1102), (1.0, 599), (1.0, 358), (1.0, 272), (1.0, 1197), (1.0, 1186), (1.0, 1137), (1.0, 1093), (1.0, 896), (1.0, 1189), (1.0, 1199), (1.0, 702), (1.0, 1068), (1.0, 1202), (1.0, 1251), (0.875, 140), (0.875, 808), (0.875, 1236), (0.875, 1238), (0.875, 1114), (0.875, 1008), (0.875, 1174), (0.875, 1007), (0.875, 905), (0.875, 1001), (0.875, 1117), (0.875, 1027), (0.75, 1229), (0.75, 1221), (0.75, 1115), (0.75, 1235), (0.75, 809), (0.75, 1054), (0.75, 707), (0.75, 1122), (0.75, 1119), (0.75, 1118), (0.75, 605), (0.75, 1216), (0.75, 1032), (0.75, 1014), (0.75, 1213), (0.75, 862), (0.75, 865), (0.75, 1010), (0.75, 1260), (0.75, 940), (0.6666666666666666, 857), (0.6666666666666666, 1225), (0.6666666666666666, 172), (0.6666666666666666, 1123), (0.6666666666666666, 1215), (0.6666666666666666, 1028), (0.625, 821), (0.625, 1201), (0.625, 864), (0.625, 1112), (0.625, 1230), (0.625, 916), (0.625, 750), (0.625, 1101), (0.625, 1047), (0.625, 911), (0.625, 1024), (0.625, 836), (0.625, 891), (0.625, 1231), (0.625, 937), (0.625, 1233), (0.625, 712), (0.625, 1192), (0.625, 909), (0.625, 1179), (0.625, 797), (0.625, 703), (0.625, 1063), (0.625, 1261), (0.625, 1167), (0.625, 812), (0.625, 918), (0.625, 1181), (0.625, 1011), (0.625, 796), (0.625, 1128), (0.625, 754), (0.625, 1105), (0.625, 987), (0.625, 1240), (0.5416666666666666, 406), (0.5416666666666666, 921), (0.5416666666666666, 923), (0.5416666666666666, 1138), (0.5416666666666666, 1150), (0.5416666666666666, 835), (0.5416666666666666, 502), (0.5416666666666666, 1029), (0.5416666666666666, 379), (0.5416666666666666, 632), (0.5416666666666666, 910), (0.5416666666666666, 153), (0.5416666666666666, 1025), (0.5416666666666666, 1140), (0.5416666666666666, 176), (0.5, 515), (0.5, 1208), (0.5, 1266), (0.5, 1072), (0.5, 1126), (0.5, 334), (0.5, 866), (0.5, 956), (0.5, 985), (0.5, 954), (0.5, 820), (0.5, 1097), (0.5, 1043), (0.5, 847), (0.5, 726), (0.5, 858), (0.5, 1185), (0.5, 735), (0.5, 1039), (0.5, 1267), (0.5, 1263), (0.5, 1037), (0.5, 927), (0.5, 953), (0.5, 146), (0.5, 1052), (0.5, 831), (0.5, 1157), (0.5, 514), (0.5, 1100), (0.5, 1177), (0.5, 1053), (0.5, 945), (0.5, 1067), (0.5, 1044), (0.5, 932), (0.5, 806), (0.5, 1002), (0.5, 941), (0.5, 363), (0.5, 936), (0.5, 394), (0.5, 630), (0.5, 1078), (0.5, 1045), (0.5, 929), (0.5, 719), (0.5, 1149), (0.5, 521), (0.5, 931), (0.5, 834), (0.5, 616), (0.5, 973), (0.5, 928), (0.5, 1006), (0.5, 1036), (0.5, 1190), (0.5, 500), (0.5, 637), (0.5, 401), (0.5, 1073), (0.5, 1088), (0.5, 1057), (0.5, 321), (0.5, 1160), (0.5, 618), (0.5, 507), (0.5, 1060), (0.5, 1161), (0.5, 1200), (0.5, 246), (0.5, 720), (0.5, 1066), (0.5, 1146), (0.5, 837), (0.5, 833), (0.5, 600), (0.5, 860), (0.5, 838), (0.5, 1255), (0.5, 1103), (0.5, 1059), (0.5, 14), (0.5, 1012), (0.5, 899), (0.5, 1092), (0.5, 511), (0.5, 1019), (0.5, 822), (0.5, 753), (0.5, 240), (0.5, 1020), (0.5, 251), (0.5, 1127), (0.5, 1145), (0.5, 1023), (0.5, 1188), (0.5, 1064), (0.5, 1058), (0.5, 1076), (0.5, 957), (0.5, 411), (0.5, 1205), (0.5, 890), (0.5, 949), (0.5, 844), (0.5, 728), (0.5, 1170), (0.5, 1144), (0.5, 275), (0.5, 86), (0.5, 1262), (0.5, 621), (0.5, 506), (0.5, 723), (0.5, 82), (0.5, 938), (0.5, 904), (0.5, 903), (0.5, 729), (0.5, 1175), (0.5, 1171), (0.5, 615), (0.5, 1069), (0.5, 1090), (0.5, 1003), (0.5, 1151), (0.5, 1065), (0.5, 1148), (0.5, 825), (0.5, 926), (0.5, 1087), (0.5, 848), (0.5, 412), (0.5, 198), (0.5, 943), (0.475, 253), (0.475, 839), (0.475, 842), (0.475, 843), (0.475, 840), (0.475, 841), (0.475, 1081), (0.475, 965), (0.475, 962), (0.475, 45), (0.475, 1130), (0.475, 1083), (0.475, 517), (0.475, 966), (0.475, 970), (0.475, 969), (0.475, 529), (0.475, 734), (0.475, 1080), (0.475, 627), (0.475, 743), (0.475, 732), (0.475, 964), (0.475, 967), (0.475, 628), (0.475, 733), (0.41666666666666663, 174), (0.41666666666666663, 951), (0.41666666666666663, 1245), (0.41666666666666663, 211), (0.41666666666666663, 629), (0.41666666666666663, 1162), (0.41666666666666663, 1110), (0.41666666666666663, 633), (0.41666666666666663, 801), (0.41666666666666663, 89), (0.41666666666666663, 977), (0.41666666666666663, 738), (0.41666666666666663, 418), (0.41666666666666663, 254), (0.41666666666666663, 613), (0.41666666666666663, 1204), (0.41666666666666663, 490), (0.41666666666666663, 740), (0.41666666666666663, 933), (0.41666666666666663, 512), (0.41666666666666663, 1257), (0.41666666666666663, 1217), (0.41666666666666663, 336), (0.375, 414), (0.375, 524), (0.375, 746), (0.375, 357), (0.375, 135), (0.375, 979), (0.375, 610), (0.375, 742), (0.375, 811), (0.375, 867), (0.375, 1089), (0.375, 639), (0.375, 419), (0.375, 603), (0.375, 747), (0.375, 1055), (0.375, 526), (0.375, 1163), (0.375, 727), (0.375, 522), (0.375, 988), (0.375, 724), (0.375, 870), (0.375, 383), (0.375, 1139), (0.375, 710), (0.375, 1135), (0.375, 971), (0.375, 1191), (0.375, 367), (0.375, 852), (0.375, 420), (0.375, 72), (0.375, 1219), (0.375, 807), (0.29166666666666663, 1180), (0.29166666666666663, 1248), (0.29166666666666663, 1243), (0.29166666666666663, 1258), (0.25, 1227), (0.25, 1196), (0.25, 1195), (0.25, 1252), (0.25, 1207), (0.25, 1234), (0.25, 1182), (0.25, 1223), (0.25, 1183), (0.16666666666666666, 1241), (0.16666666666666666, 1209), (0.16666666666666666, 1244), (0.16666666666666666, 1210), (0.16666666666666666, 1212), (0.16666666666666666, 1247), (0.125, 1250), (0.125, 1253), (0.125, 1246), (0.125, 1249), (0.1, 1265)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1084
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 1168
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) 1) (* (* x x) (* y y))))
 nr_nodes: 14]
(CANDIDATE)[id: 990
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 1121
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 1) (* (* 2 y) (* y (* 2 x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 501
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
[Generation 10]
[Computing fitness]
[(1.375, 1344), (1.25, 1121), (1.25, 1084), (1.25, 1325), (1.25, 1159), (1.25, 501), (1.25, 1168), (1.25, 990), (1.125, 897), (1.125, 1098), (1.125, 803), (1.125, 993), (1.125, 721), (1.125, 889), (1.125, 1239), (1.125, 1131), (1.125, 1086), (1.125, 704), (1.125, 1280), (1.125, 1222), (1.125, 1184), (1.125, 317), (1.125, 1178), (1.0, 1189), (1.0, 1328), (1.0, 998), (1.0, 1296), (1.0, 599), (1.0, 996), (1.0, 498), (1.0, 1206), (1.0, 1102), (1.0, 805), (1.0, 901), (1.0, 281), (1.0, 1194), (1.0, 1199), (1.0, 1202), (1.0, 731), (1.0, 1282), (1.0, 1214), (1.0, 272), (1.0, 1323), (1.0, 505), (1.0, 912), (1.0, 1186), (1.0, 497), (1.0, 1004), (1.0, 403), (1.0, 1291), (1.0, 1068), (1.0, 1318), (1.0, 1096), (1.0, 896), (1.0, 1198), (1.0, 1193), (1.0, 1005), (1.0, 701), (1.0, 1293), (1.0, 1009), (1.0, 1242), (1.0, 182), (1.0, 702), (1.0, 1304), (1.0, 358), (1.0, 804), (1.0, 868), (1.0, 994), (1.0, 730), (1.0, 1169), (1.0, 1351), (1.0, 1093), (1.0, 944), (1.0, 991), (1.0, 247), (1.0, 1251), (1.0, 1284), (1.0, 705), (1.0, 293), (1.0, 1197), (1.0, 1137), (0.875, 1236), (0.875, 1174), (0.875, 1117), (0.875, 1313), (0.875, 1001), (0.875, 1238), (0.875, 1334), (0.875, 808), (0.875, 1114), (0.875, 905), (0.875, 1008), (0.875, 1027), (0.875, 1007), (0.875, 140), (0.75, 1260), (0.75, 605), (0.75, 1054), (0.75, 707), (0.75, 1122), (0.75, 1324), (0.75, 1317), (0.75, 1118), (0.75, 1270), (0.75, 1327), (0.75, 1119), (0.75, 1115), (0.75, 865), (0.75, 940), (0.75, 1235), (0.75, 1273), (0.75, 1229), (0.75, 1032), (0.75, 1216), (0.75, 1213), (0.75, 1272), (0.75, 1010), (0.75, 862), (0.75, 1221), (0.75, 809), (0.75, 1014), (0.6666666666666666, 1028), (0.6666666666666666, 857), (0.6666666666666666, 1336), (0.6666666666666666, 1215), (0.6666666666666666, 172), (0.6666666666666666, 1225), (0.6666666666666666, 1123), (0.625, 812), (0.625, 1275), (0.625, 1101), (0.625, 1302), (0.625, 1128), (0.625, 1343), (0.625, 712), (0.625, 1179), (0.625, 754), (0.625, 1297), (0.625, 864), (0.625, 1063), (0.625, 909), (0.625, 750), (0.625, 836), (0.625, 1231), (0.625, 891), (0.625, 797), (0.625, 911), (0.625, 916), (0.625, 1346), (0.625, 1181), (0.625, 1274), (0.625, 1339), (0.625, 1024), (0.625, 1167), (0.625, 937), (0.625, 1319), (0.625, 796), (0.625, 703), (0.625, 1230), (0.625, 1233), (0.625, 987), (0.625, 1261), (0.625, 821), (0.625, 1105), (0.625, 1047), (0.625, 1240), (0.625, 1349), (0.625, 1192), (0.625, 1112), (0.625, 1347), (0.625, 1201), (0.625, 918), (0.625, 1011), (0.625, 1283), (0.5416666666666666, 1138), (0.5416666666666666, 176), (0.5416666666666666, 1345), (0.5416666666666666, 910), (0.5416666666666666, 923), (0.5416666666666666, 153), (0.5416666666666666, 835), (0.5416666666666666, 406), (0.5416666666666666, 632), (0.5416666666666666, 379), (0.5416666666666666, 1025), (0.5416666666666666, 1029), (0.5416666666666666, 1150), (0.5416666666666666, 921), (0.5416666666666666, 1140), (0.5416666666666666, 502), (0.5, 1322), (0.5, 401), (0.5, 506), (0.5, 899), (0.5, 848), (0.5, 729), (0.5, 1262), (0.5, 1067), (0.5, 363), (0.5, 1281), (0.5, 1103), (0.5, 954), (0.5, 1311), (0.5, 1175), (0.5, 1012), (0.5, 1148), (0.5, 82), (0.5, 936), (0.5, 890), (0.5, 985), (0.5, 1188), (0.5, 953), (0.5, 275), (0.5, 321), (0.5, 1044), (0.5, 1090), (0.5, 14), (0.5, 514), (0.5, 507), (0.5, 1190), (0.5, 1045), (0.5, 1287), (0.5, 1069), (0.5, 822), (0.5, 412), (0.5, 1020), (0.5, 1043), (0.5, 858), (0.5, 1039), (0.5, 1208), (0.5, 866), (0.5, 956), (0.5, 1100), (0.5, 1072), (0.5, 1092), (0.5, 615), (0.5, 720), (0.5, 831), (0.5, 1205), (0.5, 1023), (0.5, 949), (0.5, 1151), (0.5, 637), (0.5, 1354), (0.5, 1053), (0.5, 500), (0.5, 1060), (0.5, 521), (0.5, 1278), (0.5, 1300), (0.5, 860), (0.5, 932), (0.5, 1002), (0.5, 1320), (0.5, 618), (0.5, 1333), (0.5, 833), (0.5, 1289), (0.5, 1144), (0.5, 1066), (0.5, 1177), (0.5, 1003), (0.5, 511), (0.5, 929), (0.5, 621), (0.5, 1255), (0.5, 1314), (0.5, 726), (0.5, 1307), (0.5, 820), (0.5, 728), (0.5, 1308), (0.5, 926), (0.5, 1266), (0.5, 246), (0.5, 1171), (0.5, 630), (0.5, 847), (0.5, 1145), (0.5, 1058), (0.5, 723), (0.5, 806), (0.5, 1330), (0.5, 1127), (0.5, 1294), (0.5, 825), (0.5, 837), (0.5, 1076), (0.5, 838), (0.5, 1036), (0.5, 146), (0.5, 1200), (0.5, 334), (0.5, 1263), (0.5, 1185), (0.5, 1065), (0.5, 945), (0.5, 903), (0.5, 938), (0.5, 411), (0.5, 943), (0.5, 904), (0.5, 1279), (0.5, 1064), (0.5, 928), (0.5, 973), (0.5, 1170), (0.5, 515), (0.5, 834), (0.5, 719), (0.5, 1006), (0.5, 931), (0.5, 1299), (0.5, 1088), (0.5, 1057), (0.5, 600), (0.5, 1267), (0.5, 1303), (0.5, 198), (0.5, 394), (0.5, 1161), (0.5, 240), (0.5, 1157), (0.5, 251), (0.5, 1087), (0.5, 1126), (0.5, 616), (0.5, 1078), (0.5, 1160), (0.5, 1073), (0.5, 844), (0.5, 1146), (0.5, 1097), (0.5, 1149), (0.5, 1052), (0.5, 927), (0.5, 941), (0.5, 735), (0.5, 1286), (0.5, 1019), (0.5, 86), (0.5, 1059), (0.5, 1037), (0.5, 753), (0.5, 957), (0.475, 1130), (0.475, 1080), (0.475, 967), (0.475, 964), (0.475, 842), (0.475, 841), (0.475, 839), (0.475, 962), (0.475, 966), (0.475, 965), (0.475, 843), (0.475, 970), (0.475, 840), (0.475, 734), (0.475, 253), (0.475, 517), (0.475, 733), (0.475, 732), (0.475, 45), (0.475, 529), (0.475, 1083), (0.475, 743), (0.475, 1081), (0.475, 628), (0.475, 627), (0.475, 969), (0.41666666666666663, 951), (0.41666666666666663, 1356), (0.41666666666666663, 174), (0.41666666666666663, 1245), (0.41666666666666663, 629), (0.41666666666666663, 1110), (0.41666666666666663, 1162), (0.41666666666666663, 211), (0.375, 1358), (0.375, 1348), (0.29166666666666663, 1268), (0.29166666666666663, 1315), (0.29166666666666663, 1338), (0.29166666666666663, 1331), (0.25, 1310), (0.25, 1342), (0.25, 1340), (0.25, 1309), (0.25, 1276), (0.25, 1306), (0.225, 1305), (0.16666666666666666, 1359), (0.16666666666666666, 1360), (0.16666666666666666, 1361), (0.125, 1350), (0.125, 1353), (0.125, 1362), (0.1, 1357), (0.1, 1364)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1344
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(* ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 1) (* (* 2 x) (* (* 1 x) x))))
 nr_nodes: 14]
(CANDIDATE)[id: 1121
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 1) (* (* 2 y) (* y (* 2 x)))))
 nr_nodes: 14]
(CANDIDATE)[id: 1084
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 (* (* x y) (* y 2))))))
 nr_nodes: 14]
(CANDIDATE)[id: 1325
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 y) (+ (+ y (+ (* x 1) x)) x)))
 nr_nodes: 14]
(CANDIDATE)[id: 1159
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`1`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 1 x) 1) (* (* 2 x) (* y 2))))
 nr_nodes: 14]
[Generation 11]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (+ (+ 1 (+ (* x 1) x)) x))

Process finished with exit code 0
