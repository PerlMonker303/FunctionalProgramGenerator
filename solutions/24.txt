D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* y (+ 1 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ y y)) (+ 1 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`1`#`#`(* ? ?)`(* ? ?)`y`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* 1 x) 1) (* (* y 1) (+ y x))))
 nr_nodes: 14]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (* y x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 1 y) (* x y)) (* (+ 1 y) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* 1 1)) (+ y (* x x))))
 nr_nodes: 12]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* 1 y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* (+ y y) (* x y))) 1))
 nr_nodes: 12]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ y (* 1 y))))
 nr_nodes: 8]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 y) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`y`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) (* y y)) (* x 1)))
 nr_nodes: 12]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 1 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* x y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 (* x x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(* ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (* 1 1) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ y 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y x) 1) y))
 nr_nodes: 8]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ 1 1) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ (* 1 y) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ x (+ 1 y))))
 nr_nodes: 8]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ (+ x x) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 1 1) x) (* (+ x (* y 1)) x)))
 nr_nodes: 14]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 1 x) y))
 nr_nodes: 6]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y (* x 1)))
 nr_nodes: 6]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) (* y (+ (* x x) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`y`#`#`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`y`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (+ y x) y) x) (* (+ 1 y) (+ x x))))
 nr_nodes: 16]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* y (+ 1 y))))
 nr_nodes: 8]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y y) (+ x (+ x x))) x))
 nr_nodes: 12]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* 1 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) (+ (+ 1 x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x x)))
 nr_nodes: 6]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 (* y y)) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ (* x y) (+ y 1)) y) y))
 nr_nodes: 12]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 y) 1) x))
 nr_nodes: 8]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(+ ? ?)`1`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (+ 1 (* 1 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) (+ 1 y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x x) x) (+ (+ y x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y x) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* y 1) 1)))
 nr_nodes: 8]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* y 1) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* x 1)) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`1`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ y (* x 1))) (* x y)))
 nr_nodes: 12]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 1 y))
 nr_nodes: 4]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`1`#`#`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 1) (+ 1 (* x x))))
 nr_nodes: 10]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (+ 1 (+ x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`(* ? ?)`(+ ? ?)`1`#`#`1`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ y (* (+ 1 1) (+ x x)))))
 nr_nodes: 12]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`1`#`#`(* ? ?)`(* ? ?)`1`#`#`1`#`#`1`#`#`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`(+ ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ 1 (* (* 1 1) 1)) (+ (* x x) (* (+ x 1) x))))
 nr_nodes: 18]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* 1 1)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* (* 1 x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* 1 (* x 1)) 1) (+ y (+ (* 1 y) (* x y)))))
 nr_nodes: 18]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (* 1 y) (+ y x))))
 nr_nodes: 10]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ 1 1)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x 1))
 nr_nodes: 4]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 1))
 nr_nodes: 4]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`x`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 x) x) 1))
 nr_nodes: 8]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ x x)) (+ x (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`x`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x x) (* x 1)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`1`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 1 1) y))
 nr_nodes: 6]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) (* 1 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ y 1))
 nr_nodes: 4]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 1) 1))
 nr_nodes: 6]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`(+ ? ?)`1`#`#`(+ ? ?)`y`#`#`x`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ (+ 1 (+ y x)) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`y`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (+ x (+ (* y 1) 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ 1 (* x (* y 1))))
 nr_nodes: 8]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x 1) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (+ y 1)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 1 x))
 nr_nodes: 4]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`1`#`#`#
 s_expr: (defun my_func (x y) 1)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`1`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 1 (+ x x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
[Generation 0]
[Computing fitness]
[(1.5, 217), (1.25, 154), (1.25, 162), (1.125, 10), (1.125, 147), (1.125, 203), (1.125, 235), (1.125, 268), (1.125, 287), (1.0, 205), (1.0, 283), (0.875, 84), (0.75, 0), (0.75, 35), (0.75, 45), (0.75, 47), (0.75, 52), (0.75, 71), (0.75, 107), (0.75, 144), (0.75, 159), (0.75, 167), (0.75, 275), (0.75, 288), (0.625, 30), (0.625, 31), (0.625, 41), (0.625, 51), (0.625, 63), (0.625, 67), (0.625, 80), (0.625, 81), (0.625, 86), (0.625, 94), (0.625, 109), (0.625, 124), (0.625, 138), (0.625, 156), (0.625, 160), (0.625, 178), (0.625, 179), (0.625, 200), (0.625, 229), (0.625, 245), (0.625, 260), (0.625, 264), (0.625, 291), (0.625, 293), (0.625, 298), (0.5416666666666666, 68), (0.5416666666666666, 113), (0.5416666666666666, 137), (0.5416666666666666, 161), (0.5416666666666666, 184), (0.5, 66), (0.5, 97), (0.5, 146), (0.5, 175), (0.5, 207), (0.5, 221), (0.5, 239), (0.41666666666666663, 79), (0.41666666666666663, 88), (0.41666666666666663, 100), (0.41666666666666663, 115), (0.41666666666666663, 129), (0.41666666666666663, 139), (0.41666666666666663, 174), (0.41666666666666663, 202), (0.41666666666666663, 226), (0.41666666666666663, 230), (0.41666666666666663, 237), (0.41666666666666663, 253), (0.41666666666666663, 262), (0.41666666666666663, 286), (0.375, 1), (0.375, 2), (0.375, 3), (0.375, 4), (0.375, 5), (0.375, 6), (0.375, 7), (0.375, 8), (0.375, 9), (0.375, 11), (0.375, 12), (0.375, 13), (0.375, 14), (0.375, 15), (0.375, 17), (0.375, 18), (0.375, 19), (0.375, 20), (0.375, 21), (0.375, 22), (0.375, 23), (0.375, 24), (0.375, 25), (0.375, 26), (0.375, 27), (0.375, 28), (0.375, 29), (0.375, 32), (0.375, 33), (0.375, 34), (0.375, 36), (0.375, 37), (0.375, 38), (0.375, 39), (0.375, 40), (0.375, 42), (0.375, 44), (0.375, 46), (0.375, 48), (0.375, 49), (0.375, 50), (0.375, 53), (0.375, 54), (0.375, 55), (0.375, 56), (0.375, 58), (0.375, 59), (0.375, 60), (0.375, 61), (0.375, 62), (0.375, 64), (0.375, 65), (0.375, 69), (0.375, 70), (0.375, 72), (0.375, 73), (0.375, 74), (0.375, 75), (0.375, 76), (0.375, 77), (0.375, 82), (0.375, 83), (0.375, 85), (0.375, 87), (0.375, 89), (0.375, 90), (0.375, 91), (0.375, 92), (0.375, 93), (0.375, 95), (0.375, 96), (0.375, 98), (0.375, 99), (0.375, 101), (0.375, 102), (0.375, 103), (0.375, 104), (0.375, 105), (0.375, 106), (0.375, 108), (0.375, 110), (0.375, 111), (0.375, 112), (0.375, 114), (0.375, 116), (0.375, 117), (0.375, 118), (0.375, 119), (0.375, 120), (0.375, 121), (0.375, 123), (0.375, 126), (0.375, 127), (0.375, 128), (0.375, 130), (0.375, 131), (0.375, 132), (0.375, 133), (0.375, 134), (0.375, 136), (0.375, 140), (0.375, 141), (0.375, 142), (0.375, 143), (0.375, 145), (0.375, 148), (0.375, 149), (0.375, 150), (0.375, 151), (0.375, 152), (0.375, 155), (0.375, 157), (0.375, 158), (0.375, 163), (0.375, 164), (0.375, 165), (0.375, 166), (0.375, 168), (0.375, 169), (0.375, 170), (0.375, 171), (0.375, 172), (0.375, 173), (0.375, 176), (0.375, 177), (0.375, 181), (0.375, 183), (0.375, 185), (0.375, 186), (0.375, 187), (0.375, 189), (0.375, 190), (0.375, 191), (0.375, 192), (0.375, 193), (0.375, 194), (0.375, 195), (0.375, 198), (0.375, 199), (0.375, 201), (0.375, 204), (0.375, 206), (0.375, 208), (0.375, 209), (0.375, 210), (0.375, 212), (0.375, 213), (0.375, 214), (0.375, 215), (0.375, 216), (0.375, 218), (0.375, 219), (0.375, 220), (0.375, 222), (0.375, 223), (0.375, 224), (0.375, 225), (0.375, 227), (0.375, 228), (0.375, 231), (0.375, 233), (0.375, 234), (0.375, 236), (0.375, 238), (0.375, 240), (0.375, 241), (0.375, 242), (0.375, 244), (0.375, 246), (0.375, 247), (0.375, 248), (0.375, 249), (0.375, 250), (0.375, 251), (0.375, 252), (0.375, 254), (0.375, 255), (0.375, 256), (0.375, 258), (0.375, 259), (0.375, 261), (0.375, 263), (0.375, 265), (0.375, 266), (0.375, 267), (0.375, 269), (0.375, 270), (0.375, 271), (0.375, 272), (0.375, 273), (0.375, 274), (0.375, 276), (0.375, 278), (0.375, 279), (0.375, 280), (0.375, 281), (0.375, 282), (0.375, 284), (0.375, 285), (0.375, 289), (0.375, 290), (0.375, 292), (0.375, 295), (0.375, 296), (0.375, 297), (0.29166666666666663, 16), (0.29166666666666663, 43), (0.29166666666666663, 57), (0.29166666666666663, 122), (0.29166666666666663, 125), (0.29166666666666663, 135), (0.29166666666666663, 153), (0.29166666666666663, 180), (0.29166666666666663, 182), (0.29166666666666663, 188), (0.29166666666666663, 196), (0.29166666666666663, 243), (0.29166666666666663, 277), (0.29166666666666663, 294), (0.29166666666666663, 299), (0.25, 78), (0.16666666666666666, 197), (0.16666666666666666, 257), (0.125, 211), (0.125, 232)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 (* y y)) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) (+ 1 y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ y y)) (+ 1 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) (+ (+ 1 x) y)))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 217), (1.25, 321), (1.25, 162), (1.25, 154), (1.125, 10), (1.125, 287), (1.125, 235), (1.125, 268), (1.125, 203), (1.125, 147), (1.125, 307), (1.125, 306), (1.0, 205), (1.0, 283), (0.875, 84), (0.75, 71), (0.75, 159), (0.75, 47), (0.75, 45), (0.75, 308), (0.75, 334), (0.75, 52), (0.75, 288), (0.75, 311), (0.75, 330), (0.75, 167), (0.75, 0), (0.75, 310), (0.75, 275), (0.75, 144), (0.75, 107), (0.75, 323), (0.75, 317), (0.75, 35), (0.625, 326), (0.625, 260), (0.625, 31), (0.625, 178), (0.625, 138), (0.625, 156), (0.625, 328), (0.625, 264), (0.625, 298), (0.625, 329), (0.625, 67), (0.625, 301), (0.625, 124), (0.625, 94), (0.625, 160), (0.625, 200), (0.625, 327), (0.625, 81), (0.625, 291), (0.625, 229), (0.625, 109), (0.625, 293), (0.625, 51), (0.625, 245), (0.625, 179), (0.625, 86), (0.625, 80), (0.625, 316), (0.625, 30), (0.625, 41), (0.625, 63), (0.5416666666666666, 331), (0.5416666666666666, 113), (0.5416666666666666, 68), (0.5416666666666666, 184), (0.5416666666666666, 161), (0.5416666666666666, 332), (0.5416666666666666, 137), (0.5, 97), (0.5, 319), (0.5, 333), (0.5, 175), (0.5, 207), (0.5, 146), (0.5, 66), (0.5, 239), (0.5, 221), (0.5, 312), (0.41666666666666663, 139), (0.41666666666666663, 340), (0.41666666666666663, 129), (0.41666666666666663, 202), (0.41666666666666663, 115), (0.41666666666666663, 338), (0.41666666666666663, 174), (0.41666666666666663, 226), (0.41666666666666663, 262), (0.41666666666666663, 341), (0.41666666666666663, 346), (0.41666666666666663, 237), (0.41666666666666663, 344), (0.41666666666666663, 324), (0.41666666666666663, 342), (0.41666666666666663, 339), (0.41666666666666663, 230), (0.41666666666666663, 253), (0.41666666666666663, 300), (0.41666666666666663, 100), (0.41666666666666663, 88), (0.41666666666666663, 286), (0.41666666666666663, 79), (0.375, 77), (0.375, 99), (0.375, 155), (0.375, 371), (0.375, 23), (0.375, 121), (0.375, 7), (0.375, 74), (0.375, 215), (0.375, 18), (0.375, 38), (0.375, 168), (0.375, 32), (0.375, 379), (0.375, 106), (0.375, 130), (0.375, 72), (0.375, 110), (0.375, 89), (0.375, 206), (0.375, 190), (0.375, 128), (0.375, 117), (0.375, 151), (0.375, 181), (0.375, 363), (0.375, 356), (0.375, 183), (0.375, 56), (0.375, 48), (0.375, 127), (0.375, 69), (0.375, 102), (0.375, 198), (0.375, 185), (0.375, 61), (0.375, 60), (0.375, 366), (0.375, 116), (0.375, 357), (0.375, 95), (0.375, 39), (0.375, 134), (0.375, 119), (0.375, 143), (0.375, 148), (0.375, 42), (0.375, 176), (0.375, 199), (0.375, 157), (0.375, 91), (0.375, 172), (0.375, 150), (0.375, 214), (0.375, 142), (0.375, 385), (0.375, 3), (0.375, 50), (0.375, 136), (0.375, 210), (0.375, 62), (0.375, 4), (0.375, 59), (0.375, 53), (0.375, 28), (0.375, 193), (0.375, 37), (0.375, 165), (0.375, 208), (0.375, 24), (0.375, 164), (0.375, 380), (0.375, 169), (0.375, 187), (0.375, 388), (0.375, 34), (0.375, 46), (0.375, 194), (0.375, 396), (0.375, 349), (0.375, 209), (0.375, 131), (0.375, 114), (0.375, 195), (0.375, 6), (0.375, 49), (0.375, 149), (0.375, 350), (0.375, 108), (0.375, 104), (0.375, 158), (0.375, 112), (0.375, 2), (0.375, 5), (0.375, 44), (0.375, 376), (0.375, 359), (0.375, 87), (0.375, 22), (0.375, 58), (0.375, 8), (0.375, 347), (0.375, 393), (0.375, 93), (0.375, 103), (0.375, 186), (0.375, 118), (0.375, 374), (0.375, 141), (0.375, 201), (0.375, 132), (0.375, 140), (0.375, 384), (0.375, 123), (0.375, 325), (0.375, 12), (0.375, 364), (0.375, 20), (0.375, 75), (0.375, 177), (0.375, 394), (0.375, 101), (0.375, 355), (0.375, 360), (0.375, 126), (0.375, 213), (0.375, 370), (0.375, 216), (0.375, 382), (0.375, 163), (0.375, 386), (0.375, 27), (0.375, 98), (0.375, 82), (0.375, 14), (0.375, 13), (0.375, 377), (0.375, 373), (0.375, 9), (0.375, 192), (0.375, 389), (0.375, 36), (0.375, 76), (0.375, 15), (0.375, 204), (0.375, 29), (0.375, 367), (0.375, 120), (0.375, 85), (0.375, 171), (0.375, 25), (0.375, 191), (0.375, 365), (0.375, 390), (0.375, 21), (0.375, 381), (0.375, 1), (0.375, 105), (0.375, 33), (0.375, 26), (0.375, 55), (0.375, 362), (0.375, 391), (0.375, 166), (0.375, 19), (0.375, 170), (0.375, 314), (0.375, 64), (0.375, 54), (0.375, 152), (0.375, 96), (0.375, 70), (0.375, 11), (0.375, 92), (0.375, 353), (0.375, 90), (0.375, 40), (0.375, 173), (0.375, 145), (0.375, 189), (0.375, 212), (0.375, 111), (0.375, 73), (0.375, 83), (0.375, 352), (0.375, 133), (0.375, 65), (0.375, 17), (0.375, 369), (0.29166666666666663, 335), (0.29166666666666663, 303), (0.29166666666666663, 309), (0.29166666666666663, 305), (0.25, 322), (0.16666666666666666, 336)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (+ (+ 1 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) (+ 1 y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 (* y y)) 1)))
 nr_nodes: 10]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ y y)) (+ 1 1)))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 217), (1.25, 321), (1.25, 412), (1.25, 162), (1.25, 154), (1.125, 235), (1.125, 287), (1.125, 147), (1.125, 422), (1.125, 307), (1.125, 10), (1.125, 203), (1.125, 306), (1.125, 268), (1.125, 413), (1.0, 406), (1.0, 283), (1.0, 446), (1.0, 205), (1.0, 399), (0.875, 84), (0.875, 407), (0.875, 424), (0.875, 435), (0.75, 288), (0.75, 434), (0.75, 317), (0.75, 159), (0.75, 0), (0.75, 310), (0.75, 52), (0.75, 330), (0.75, 311), (0.75, 275), (0.75, 308), (0.75, 323), (0.75, 449), (0.75, 334), (0.75, 144), (0.75, 167), (0.75, 47), (0.75, 71), (0.75, 35), (0.75, 45), (0.75, 107), (0.625, 86), (0.625, 293), (0.625, 316), (0.625, 426), (0.625, 427), (0.625, 401), (0.625, 109), (0.625, 229), (0.625, 418), (0.625, 200), (0.625, 328), (0.625, 138), (0.625, 432), (0.625, 67), (0.625, 436), (0.625, 398), (0.625, 179), (0.625, 327), (0.625, 63), (0.625, 301), (0.625, 41), (0.625, 51), (0.625, 433), (0.625, 124), (0.625, 411), (0.625, 94), (0.625, 156), (0.625, 245), (0.625, 430), (0.625, 423), (0.625, 81), (0.625, 260), (0.625, 329), (0.625, 160), (0.625, 298), (0.625, 421), (0.625, 264), (0.625, 291), (0.625, 31), (0.625, 403), (0.625, 80), (0.625, 178), (0.625, 326), (0.625, 30), (0.5416666666666666, 439), (0.5416666666666666, 161), (0.5416666666666666, 440), (0.5416666666666666, 331), (0.5416666666666666, 437), (0.5416666666666666, 442), (0.5416666666666666, 137), (0.5416666666666666, 184), (0.5416666666666666, 113), (0.5416666666666666, 68), (0.5416666666666666, 332), (0.5, 66), (0.5, 175), (0.5, 146), (0.5, 415), (0.5, 221), (0.5, 312), (0.5, 239), (0.5, 333), (0.5, 444), (0.5, 425), (0.5, 441), (0.5, 207), (0.5, 414), (0.5, 319), (0.5, 445), (0.5, 97), (0.41666666666666663, 346), (0.41666666666666663, 79), (0.41666666666666663, 429), (0.41666666666666663, 129), (0.41666666666666663, 230), (0.41666666666666663, 454), (0.41666666666666663, 410), (0.41666666666666663, 262), (0.41666666666666663, 324), (0.41666666666666663, 341), (0.41666666666666663, 451), (0.41666666666666663, 226), (0.41666666666666663, 115), (0.41666666666666663, 237), (0.41666666666666663, 300), (0.41666666666666663, 100), (0.41666666666666663, 344), (0.41666666666666663, 286), (0.41666666666666663, 457), (0.41666666666666663, 458), (0.41666666666666663, 88), (0.41666666666666663, 452), (0.41666666666666663, 174), (0.41666666666666663, 447), (0.41666666666666663, 253), (0.41666666666666663, 461), (0.41666666666666663, 139), (0.41666666666666663, 202), (0.41666666666666663, 459), (0.41666666666666663, 340), (0.41666666666666663, 408), (0.41666666666666663, 420), (0.41666666666666663, 338), (0.41666666666666663, 339), (0.41666666666666663, 342), (0.375, 77), (0.375, 464), (0.375, 127), (0.375, 350), (0.375, 5), (0.375, 38), (0.375, 23), (0.375, 183), (0.375, 466), (0.375, 208), (0.375, 489), (0.375, 142), (0.375, 87), (0.375, 396), (0.375, 470), (0.375, 349), (0.375, 490), (0.375, 150), (0.375, 176), (0.375, 364), (0.375, 99), (0.375, 374), (0.375, 419), (0.375, 149), (0.375, 214), (0.375, 93), (0.375, 165), (0.375, 151), (0.375, 379), (0.375, 42), (0.375, 181), (0.375, 143), (0.375, 155), (0.375, 130), (0.375, 102), (0.375, 371), (0.375, 60), (0.375, 462), (0.375, 103), (0.375, 3), (0.375, 119), (0.375, 108), (0.375, 194), (0.375, 199), (0.375, 50), (0.375, 487), (0.375, 39), (0.375, 491), (0.375, 32), (0.375, 177), (0.375, 2), (0.375, 106), (0.375, 128), (0.375, 62), (0.375, 481), (0.375, 56), (0.375, 347), (0.375, 357), (0.375, 206), (0.375, 483), (0.375, 8), (0.375, 480), (0.375, 164), (0.375, 12), (0.375, 4), (0.375, 37), (0.375, 385), (0.375, 492), (0.375, 91), (0.375, 134), (0.375, 190), (0.375, 376), (0.375, 58), (0.375, 131), (0.375, 140), (0.375, 478), (0.375, 486), (0.375, 325), (0.375, 123), (0.375, 476), (0.375, 195), (0.375, 114), (0.375, 388), (0.375, 209), (0.375, 380), (0.375, 384), (0.375, 117), (0.375, 59), (0.375, 53), (0.375, 69), (0.375, 110), (0.375, 34), (0.375, 74), (0.375, 468), (0.375, 474), (0.375, 485), (0.375, 46), (0.375, 89), (0.375, 366), (0.375, 359), (0.375, 7), (0.375, 18), (0.375, 471), (0.375, 22), (0.375, 28), (0.375, 187), (0.375, 185), (0.375, 393), (0.375, 356), (0.375, 158), (0.375, 482), (0.375, 61), (0.375, 141), (0.375, 148), (0.375, 201), (0.375, 48), (0.375, 95), (0.375, 475), (0.375, 168), (0.375, 186), (0.375, 104), (0.375, 198), (0.375, 484), (0.375, 49), (0.375, 20), (0.375, 472), (0.375, 132), (0.375, 193), (0.375, 72), (0.375, 210), (0.375, 215), (0.375, 169), (0.375, 6), (0.375, 363), (0.375, 116), (0.375, 157), (0.375, 121), (0.375, 44), (0.375, 24), (0.375, 136), (0.375, 118), (0.375, 172), (0.375, 112), (0.375, 75), (0.29166666666666663, 450), (0.29166666666666663, 402), (0.29166666666666663, 456), (0.29166666666666663, 417), (0.25, 405)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (+ (+ 1 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 412
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (* y 1))))
 nr_nodes: 10]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) (+ 1 y)) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 (* y y)) 1)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 217), (1.375, 504), (1.25, 524), (1.25, 509), (1.25, 154), (1.25, 494), (1.25, 412), (1.25, 162), (1.25, 321), (1.25, 567), (1.125, 514), (1.125, 307), (1.125, 522), (1.125, 10), (1.125, 498), (1.125, 422), (1.125, 287), (1.125, 268), (1.125, 235), (1.125, 147), (1.125, 496), (1.125, 413), (1.125, 203), (1.125, 306), (1.0, 502), (1.0, 503), (1.0, 446), (1.0, 406), (1.0, 399), (1.0, 283), (1.0, 205), (1.0, 528), (0.875, 84), (0.875, 506), (0.875, 407), (0.875, 424), (0.875, 505), (0.875, 435), (0.875, 511), (0.75, 107), (0.75, 45), (0.75, 317), (0.75, 47), (0.75, 334), (0.75, 434), (0.75, 323), (0.75, 0), (0.75, 513), (0.75, 275), (0.75, 144), (0.75, 311), (0.75, 159), (0.75, 510), (0.75, 71), (0.75, 330), (0.75, 310), (0.75, 449), (0.75, 167), (0.75, 35), (0.75, 52), (0.75, 507), (0.75, 308), (0.75, 532), (0.75, 288), (0.75, 542), (0.625, 418), (0.625, 80), (0.625, 51), (0.625, 497), (0.625, 544), (0.625, 421), (0.625, 536), (0.625, 329), (0.625, 30), (0.625, 260), (0.625, 301), (0.625, 293), (0.625, 124), (0.625, 518), (0.625, 138), (0.625, 264), (0.625, 327), (0.625, 178), (0.625, 403), (0.625, 63), (0.625, 538), (0.625, 328), (0.625, 423), (0.625, 81), (0.625, 526), (0.625, 86), (0.625, 541), (0.625, 291), (0.625, 298), (0.625, 200), (0.625, 94), (0.625, 426), (0.625, 430), (0.625, 569), (0.625, 539), (0.625, 41), (0.625, 411), (0.625, 517), (0.625, 245), (0.625, 179), (0.625, 534), (0.625, 160), (0.625, 543), (0.625, 436), (0.625, 512), (0.625, 109), (0.625, 433), (0.625, 432), (0.625, 316), (0.625, 520), (0.625, 545), (0.625, 501), (0.625, 525), (0.625, 326), (0.625, 229), (0.625, 67), (0.625, 156), (0.625, 401), (0.625, 398), (0.625, 530), (0.625, 31), (0.625, 427), (0.5416666666666666, 442), (0.5416666666666666, 68), (0.5416666666666666, 137), (0.5416666666666666, 547), (0.5416666666666666, 439), (0.5416666666666666, 331), (0.5416666666666666, 437), (0.5416666666666666, 549), (0.5416666666666666, 551), (0.5416666666666666, 332), (0.5416666666666666, 552), (0.5416666666666666, 440), (0.5416666666666666, 546), (0.5416666666666666, 113), (0.5416666666666666, 548), (0.5416666666666666, 184), (0.5416666666666666, 161), (0.5, 444), (0.5, 441), (0.5, 175), (0.5, 415), (0.5, 499), (0.5, 312), (0.5, 555), (0.5, 565), (0.5, 239), (0.5, 333), (0.5, 97), (0.5, 414), (0.5, 558), (0.5, 563), (0.5, 207), (0.5, 146), (0.5, 221), (0.5, 319), (0.5, 66), (0.5, 425), (0.5, 445), (0.41666666666666663, 429), (0.41666666666666663, 408), (0.41666666666666663, 338), (0.41666666666666663, 253), (0.41666666666666663, 571), (0.41666666666666663, 202), (0.41666666666666663, 262), (0.41666666666666663, 459), (0.41666666666666663, 566), (0.41666666666666663, 461), (0.41666666666666663, 346), (0.41666666666666663, 341), (0.41666666666666663, 88), (0.41666666666666663, 79), (0.41666666666666663, 577), (0.41666666666666663, 344), (0.41666666666666663, 576), (0.41666666666666663, 447), (0.41666666666666663, 574), (0.41666666666666663, 174), (0.41666666666666663, 420), (0.41666666666666663, 516), (0.41666666666666663, 495), (0.41666666666666663, 572), (0.41666666666666663, 300), (0.41666666666666663, 568), (0.41666666666666663, 100), (0.41666666666666663, 230), (0.41666666666666663, 410), (0.41666666666666663, 226), (0.41666666666666663, 579), (0.41666666666666663, 129), (0.41666666666666663, 575), (0.41666666666666663, 340), (0.41666666666666663, 139), (0.41666666666666663, 585), (0.41666666666666663, 454), (0.41666666666666663, 457), (0.41666666666666663, 339), (0.41666666666666663, 584), (0.41666666666666663, 578), (0.41666666666666663, 115), (0.41666666666666663, 452), (0.41666666666666663, 451), (0.41666666666666663, 458), (0.41666666666666663, 237), (0.41666666666666663, 286), (0.41666666666666663, 583), (0.41666666666666663, 342), (0.41666666666666663, 581), (0.41666666666666663, 324), (0.375, 93), (0.375, 102), (0.375, 142), (0.375, 62), (0.375, 42), (0.375, 91), (0.375, 99), (0.375, 521), (0.375, 56), (0.375, 119), (0.375, 32), (0.375, 419), (0.375, 374), (0.375, 131), (0.375, 483), (0.375, 108), (0.375, 470), (0.375, 58), (0.375, 38), (0.375, 8), (0.375, 77), (0.375, 60), (0.375, 190), (0.375, 4), (0.375, 164), (0.375, 490), (0.375, 155), (0.375, 357), (0.375, 540), (0.375, 489), (0.375, 379), (0.375, 3), (0.375, 560), (0.375, 347), (0.375, 151), (0.375, 23), (0.375, 12), (0.375, 396), (0.375, 183), (0.375, 150), (0.375, 103), (0.375, 214), (0.375, 364), (0.375, 143), (0.375, 50), (0.375, 385), (0.375, 208), (0.375, 487), (0.375, 481), (0.375, 462), (0.375, 165), (0.375, 87), (0.375, 350), (0.375, 199), (0.375, 466), (0.375, 106), (0.375, 149), (0.375, 491), (0.375, 492), (0.375, 464), (0.375, 181), (0.375, 130), (0.375, 376), (0.375, 5), (0.375, 206), (0.375, 127), (0.375, 349), (0.375, 176), (0.375, 371), (0.375, 194), (0.375, 128), (0.375, 39), (0.375, 2), (0.375, 37), (0.375, 519), (0.375, 177), (0.375, 134), (0.375, 480), (0.29166666666666663, 554), (0.29166666666666663, 523), (0.29166666666666663, 587), (0.29166666666666663, 561), (0.29166666666666663, 537), (0.25, 556)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 504
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 (* x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 524
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ y (* x 1))) 1))
 nr_nodes: 10]
(CANDIDATE)[id: 509
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`1`#`#`y`#`#`(* ? ?)`1`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 1 y) (* 1 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`y`#`#`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ 1 (* y y)) 1)))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 217), (1.375, 680), (1.375, 504), (1.25, 321), (1.25, 412), (1.25, 567), (1.25, 162), (1.25, 593), (1.25, 154), (1.25, 524), (1.25, 494), (1.25, 590), (1.25, 509), (1.125, 498), (1.125, 496), (1.125, 147), (1.125, 514), (1.125, 596), (1.125, 681), (1.125, 597), (1.125, 306), (1.125, 10), (1.125, 307), (1.125, 413), (1.125, 422), (1.125, 235), (1.125, 592), (1.125, 203), (1.125, 268), (1.125, 598), (1.125, 287), (1.125, 522), (1.0, 205), (1.0, 283), (1.0, 606), (1.0, 626), (1.0, 399), (1.0, 599), (1.0, 669), (1.0, 620), (1.0, 643), (1.0, 528), (1.0, 446), (1.0, 608), (1.0, 502), (1.0, 503), (1.0, 651), (1.0, 406), (1.0, 638), (1.0, 603), (0.875, 511), (0.875, 647), (0.875, 665), (0.875, 435), (0.875, 622), (0.875, 407), (0.875, 84), (0.875, 506), (0.875, 424), (0.875, 505), (0.75, 330), (0.75, 507), (0.75, 144), (0.75, 47), (0.75, 159), (0.75, 0), (0.75, 311), (0.75, 308), (0.75, 334), (0.75, 107), (0.75, 45), (0.75, 513), (0.75, 637), (0.75, 542), (0.75, 510), (0.75, 667), (0.75, 618), (0.75, 615), (0.75, 288), (0.75, 71), (0.75, 310), (0.75, 35), (0.75, 167), (0.75, 623), (0.75, 602), (0.75, 449), (0.75, 52), (0.75, 317), (0.75, 628), (0.75, 624), (0.75, 621), (0.75, 532), (0.75, 661), (0.75, 635), (0.75, 434), (0.75, 275), (0.75, 323), (0.625, 682), (0.625, 291), (0.625, 518), (0.625, 178), (0.625, 109), (0.625, 660), (0.625, 610), (0.625, 534), (0.625, 264), (0.625, 627), (0.625, 426), (0.625, 539), (0.625, 657), (0.625, 63), (0.625, 520), (0.625, 298), (0.625, 411), (0.625, 526), (0.625, 663), (0.625, 401), (0.625, 436), (0.625, 536), (0.625, 80), (0.625, 642), (0.625, 421), (0.625, 530), (0.625, 433), (0.625, 538), (0.625, 245), (0.625, 541), (0.625, 543), (0.625, 301), (0.625, 329), (0.625, 179), (0.625, 544), (0.625, 316), (0.625, 81), (0.625, 156), (0.625, 67), (0.625, 403), (0.625, 138), (0.625, 658), (0.625, 633), (0.625, 427), (0.625, 418), (0.625, 655), (0.625, 124), (0.625, 652), (0.625, 432), (0.625, 625), (0.625, 327), (0.625, 423), (0.625, 632), (0.625, 664), (0.625, 200), (0.625, 30), (0.625, 497), (0.625, 229), (0.625, 430), (0.625, 86), (0.625, 525), (0.625, 545), (0.625, 94), (0.625, 328), (0.625, 51), (0.625, 648), (0.625, 260), (0.625, 595), (0.625, 326), (0.625, 41), (0.625, 594), (0.625, 654), (0.625, 653), (0.625, 569), (0.625, 398), (0.625, 31), (0.625, 659), (0.625, 644), (0.625, 160), (0.625, 501), (0.625, 293), (0.625, 517), (0.625, 512), (0.5416666666666666, 672), (0.5416666666666666, 332), (0.5416666666666666, 161), (0.5416666666666666, 673), (0.5416666666666666, 671), (0.5416666666666666, 678), (0.5416666666666666, 439), (0.5416666666666666, 551), (0.5416666666666666, 670), (0.5416666666666666, 331), (0.5416666666666666, 552), (0.5416666666666666, 676), (0.5416666666666666, 546), (0.5416666666666666, 440), (0.5416666666666666, 137), (0.5416666666666666, 437), (0.5416666666666666, 184), (0.5416666666666666, 548), (0.5416666666666666, 113), (0.5416666666666666, 677), (0.5416666666666666, 442), (0.5416666666666666, 549), (0.5416666666666666, 68), (0.5416666666666666, 674), (0.5416666666666666, 547), (0.5, 239), (0.5, 555), (0.5, 445), (0.5, 415), (0.5, 97), (0.5, 221), (0.5, 444), (0.5, 617), (0.5, 563), (0.5, 333), (0.5, 414), (0.5, 565), (0.5, 499), (0.5, 425), (0.5, 441), (0.5, 604), (0.5, 319), (0.5, 175), (0.5, 639), (0.5, 66), (0.5, 558), (0.5, 312), (0.5, 612), (0.5, 207), (0.5, 146), (0.41666666666666663, 174), (0.41666666666666663, 88), (0.41666666666666663, 662), (0.41666666666666663, 495), (0.41666666666666663, 115), (0.41666666666666663, 262), (0.41666666666666663, 129), (0.41666666666666663, 576), (0.41666666666666663, 568), (0.41666666666666663, 459), (0.41666666666666663, 346), (0.41666666666666663, 429), (0.41666666666666663, 226), (0.41666666666666663, 230), (0.41666666666666663, 451), (0.41666666666666663, 341), (0.41666666666666663, 461), (0.41666666666666663, 579), (0.41666666666666663, 583), (0.41666666666666663, 344), (0.41666666666666663, 342), (0.41666666666666663, 338), (0.41666666666666663, 574), (0.41666666666666663, 516), (0.41666666666666663, 577), (0.41666666666666663, 100), (0.41666666666666663, 79), (0.41666666666666663, 286), (0.41666666666666663, 452), (0.41666666666666663, 457), (0.41666666666666663, 139), (0.41666666666666663, 202), (0.41666666666666663, 447), (0.41666666666666663, 300), (0.41666666666666663, 420), (0.41666666666666663, 339), (0.41666666666666663, 566), (0.41666666666666663, 584), (0.41666666666666663, 629), (0.41666666666666663, 408), (0.41666666666666663, 572), (0.41666666666666663, 410), (0.41666666666666663, 585), (0.41666666666666663, 237), (0.41666666666666663, 581), (0.41666666666666663, 324), (0.41666666666666663, 340), (0.41666666666666663, 578), (0.41666666666666663, 571), (0.41666666666666663, 253), (0.41666666666666663, 613), (0.41666666666666663, 454), (0.41666666666666663, 458), (0.41666666666666663, 575), (0.375, 62), (0.375, 630), (0.375, 521), (0.375, 99), (0.375, 650), (0.375, 645), (0.375, 102), (0.375, 42), (0.375, 640), (0.375, 91), (0.375, 93), (0.375, 56), (0.375, 142), (0.29166666666666663, 601), (0.29166666666666663, 588), (0.25, 666)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 680
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ y (* 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 504
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 (* x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (+ (+ 1 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 412
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (* y 1))))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 217), (1.375, 680), (1.375, 504), (1.25, 321), (1.25, 590), (1.25, 765), (1.25, 685), (1.25, 494), (1.25, 509), (1.25, 412), (1.25, 162), (1.25, 154), (1.25, 693), (1.25, 741), (1.25, 689), (1.25, 567), (1.25, 687), (1.25, 524), (1.25, 691), (1.25, 593), (1.125, 596), (1.125, 307), (1.125, 598), (1.125, 306), (1.125, 700), (1.125, 721), (1.125, 268), (1.125, 592), (1.125, 718), (1.125, 711), (1.125, 704), (1.125, 705), (1.125, 698), (1.125, 235), (1.125, 498), (1.125, 522), (1.125, 413), (1.125, 514), (1.125, 737), (1.125, 422), (1.125, 597), (1.125, 745), (1.125, 10), (1.125, 496), (1.125, 203), (1.125, 147), (1.125, 287), (1.125, 681), (1.0, 713), (1.0, 606), (1.0, 643), (1.0, 603), (1.0, 708), (1.0, 599), (1.0, 502), (1.0, 620), (1.0, 638), (1.0, 651), (1.0, 528), (1.0, 283), (1.0, 684), (1.0, 205), (1.0, 608), (1.0, 725), (1.0, 503), (1.0, 399), (1.0, 406), (1.0, 669), (1.0, 707), (1.0, 714), (1.0, 724), (1.0, 715), (1.0, 446), (1.0, 626), (0.875, 622), (0.875, 702), (0.875, 435), (0.875, 511), (0.875, 747), (0.875, 505), (0.875, 759), (0.875, 739), (0.875, 665), (0.875, 424), (0.875, 84), (0.875, 407), (0.875, 506), (0.875, 647), (0.75, 781), (0.75, 159), (0.75, 751), (0.75, 746), (0.75, 752), (0.75, 507), (0.75, 308), (0.75, 310), (0.75, 667), (0.75, 726), (0.75, 532), (0.75, 727), (0.75, 275), (0.75, 45), (0.75, 624), (0.75, 434), (0.75, 311), (0.75, 621), (0.75, 635), (0.75, 602), (0.75, 323), (0.75, 288), (0.75, 615), (0.75, 618), (0.75, 733), (0.75, 52), (0.75, 144), (0.75, 317), (0.75, 661), (0.75, 766), (0.75, 330), (0.75, 167), (0.75, 513), (0.75, 71), (0.75, 0), (0.75, 449), (0.75, 637), (0.75, 628), (0.75, 107), (0.75, 728), (0.75, 772), (0.75, 47), (0.75, 510), (0.75, 779), (0.75, 542), (0.75, 35), (0.75, 735), (0.75, 776), (0.75, 623), (0.75, 334), (0.625, 664), (0.625, 770), (0.625, 652), (0.625, 30), (0.625, 160), (0.625, 758), (0.625, 326), (0.625, 763), (0.625, 178), (0.625, 398), (0.625, 736), (0.625, 426), (0.625, 526), (0.625, 740), (0.625, 67), (0.625, 658), (0.625, 156), (0.625, 660), (0.625, 520), (0.625, 633), (0.625, 625), (0.625, 768), (0.625, 536), (0.625, 663), (0.625, 260), (0.625, 436), (0.625, 744), (0.625, 124), (0.625, 327), (0.625, 501), (0.625, 518), (0.625, 86), (0.625, 627), (0.625, 777), (0.625, 594), (0.625, 328), (0.625, 755), (0.625, 760), (0.625, 653), (0.625, 695), (0.625, 543), (0.625, 316), (0.625, 655), (0.625, 403), (0.625, 31), (0.625, 657), (0.625, 642), (0.625, 569), (0.625, 762), (0.625, 411), (0.625, 644), (0.625, 200), (0.625, 291), (0.625, 749), (0.625, 401), (0.625, 497), (0.625, 539), (0.625, 517), (0.625, 301), (0.625, 525), (0.625, 427), (0.625, 632), (0.625, 245), (0.625, 81), (0.625, 229), (0.625, 750), (0.625, 709), (0.625, 179), (0.625, 544), (0.625, 138), (0.625, 421), (0.625, 109), (0.625, 432), (0.625, 433), (0.625, 41), (0.625, 654), (0.625, 293), (0.625, 51), (0.625, 423), (0.625, 329), (0.625, 696), (0.625, 63), (0.625, 534), (0.625, 701), (0.625, 512), (0.625, 648), (0.625, 418), (0.625, 538), (0.625, 541), (0.625, 545), (0.625, 717), (0.625, 610), (0.625, 430), (0.625, 298), (0.625, 94), (0.625, 682), (0.625, 595), (0.625, 264), (0.625, 530), (0.625, 738), (0.625, 773), (0.625, 767), (0.625, 659), (0.625, 80), (0.5416666666666666, 674), (0.5416666666666666, 68), (0.5416666666666666, 331), (0.5416666666666666, 548), (0.5416666666666666, 549), (0.5416666666666666, 678), (0.5416666666666666, 440), (0.5416666666666666, 546), (0.5416666666666666, 551), (0.5416666666666666, 161), (0.5416666666666666, 676), (0.5416666666666666, 677), (0.5416666666666666, 552), (0.5416666666666666, 437), (0.5416666666666666, 137), (0.5416666666666666, 113), (0.5416666666666666, 332), (0.5416666666666666, 670), (0.5416666666666666, 439), (0.5416666666666666, 442), (0.5416666666666666, 672), (0.5416666666666666, 184), (0.5416666666666666, 673), (0.5416666666666666, 547), (0.5416666666666666, 671), (0.5, 720), (0.5, 729), (0.5, 617), (0.5, 743), (0.5, 604), (0.5, 694), (0.5, 444), (0.5, 639), (0.5, 445), (0.5, 239), (0.5, 565), (0.5, 555), (0.5, 221), (0.5, 414), (0.5, 723), (0.5, 425), (0.5, 175), (0.5, 66), (0.5, 319), (0.5, 761), (0.5, 499), (0.5, 333), (0.5, 415), (0.5, 563), (0.5, 441), (0.5, 774), (0.5, 97), (0.375, 731), (0.375, 742), (0.375, 683), (0.375, 754), (0.29166666666666663, 757), (0.25, 732)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 680
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ y (* 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 504
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 (* x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`1`#`#`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) (+ (+ 1 1) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 590
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`1`#`#`1`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ y (* x 1))) 1))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.5, 217), (1.5, 856), (1.375, 504), (1.375, 680), (1.375, 834), (1.25, 741), (1.25, 687), (1.25, 813), (1.25, 321), (1.25, 689), (1.25, 847), (1.25, 593), (1.25, 524), (1.25, 784), (1.25, 765), (1.25, 567), (1.25, 685), (1.25, 833), (1.25, 154), (1.25, 860), (1.25, 852), (1.25, 590), (1.25, 806), (1.25, 693), (1.25, 691), (1.25, 855), (1.25, 494), (1.25, 412), (1.25, 792), (1.25, 509), (1.25, 162), (1.25, 786), (1.25, 789), (1.125, 721), (1.125, 307), (1.125, 10), (1.125, 704), (1.125, 737), (1.125, 287), (1.125, 147), (1.125, 203), (1.125, 745), (1.125, 838), (1.125, 514), (1.125, 705), (1.125, 235), (1.125, 700), (1.125, 698), (1.125, 306), (1.125, 522), (1.125, 711), (1.125, 596), (1.125, 597), (1.125, 413), (1.125, 592), (1.125, 598), (1.125, 496), (1.125, 808), (1.125, 498), (1.125, 268), (1.125, 794), (1.125, 681), (1.125, 796), (1.125, 800), (1.125, 718), (1.125, 422), (1.0, 599), (1.0, 205), (1.0, 715), (1.0, 528), (1.0, 283), (1.0, 446), (1.0, 669), (1.0, 503), (1.0, 603), (1.0, 713), (1.0, 714), (1.0, 406), (1.0, 817), (1.0, 399), (1.0, 724), (1.0, 708), (1.0, 824), (1.0, 606), (1.0, 608), (1.0, 684), (1.0, 502), (1.0, 811), (1.0, 620), (1.0, 707), (1.0, 643), (1.0, 626), (1.0, 861), (1.0, 725), (1.0, 638), (1.0, 651), (0.875, 747), (0.875, 84), (0.875, 511), (0.875, 505), (0.875, 805), (0.875, 830), (0.875, 759), (0.875, 435), (0.875, 812), (0.875, 424), (0.875, 832), (0.875, 407), (0.875, 803), (0.875, 622), (0.875, 506), (0.875, 647), (0.875, 739), (0.875, 702), (0.875, 665), (0.75, 637), (0.75, 864), (0.75, 107), (0.75, 791), (0.75, 308), (0.75, 510), (0.75, 275), (0.75, 628), (0.75, 826), (0.75, 735), (0.75, 858), (0.75, 0), (0.75, 624), (0.75, 850), (0.75, 330), (0.75, 45), (0.75, 785), (0.75, 317), (0.75, 71), (0.75, 804), (0.75, 772), (0.75, 849), (0.75, 311), (0.75, 623), (0.75, 618), (0.75, 47), (0.75, 728), (0.75, 840), (0.75, 513), (0.75, 857), (0.75, 621), (0.75, 334), (0.75, 823), (0.75, 733), (0.75, 746), (0.75, 781), (0.75, 542), (0.75, 766), (0.75, 667), (0.75, 727), (0.75, 159), (0.75, 661), (0.75, 52), (0.75, 859), (0.75, 434), (0.75, 323), (0.75, 836), (0.75, 167), (0.75, 751), (0.75, 635), (0.75, 779), (0.75, 144), (0.75, 35), (0.75, 449), (0.75, 726), (0.75, 615), (0.75, 507), (0.75, 776), (0.75, 752), (0.75, 844), (0.75, 288), (0.75, 602), (0.75, 839), (0.75, 310), (0.75, 532), (0.6666666666666666, 843), (0.625, 539), (0.625, 51), (0.625, 423), (0.625, 327), (0.625, 31), (0.625, 744), (0.625, 326), (0.625, 178), (0.625, 709), (0.625, 179), (0.625, 801), (0.625, 534), (0.625, 701), (0.625, 86), (0.625, 695), (0.625, 760), (0.625, 418), (0.625, 411), (0.625, 740), (0.625, 755), (0.625, 750), (0.625, 657), (0.625, 497), (0.625, 160), (0.625, 627), (0.625, 658), (0.625, 401), (0.625, 837), (0.625, 245), (0.625, 777), (0.625, 518), (0.625, 809), (0.625, 870), (0.625, 825), (0.625, 654), (0.625, 544), (0.625, 768), (0.625, 30), (0.625, 109), (0.625, 433), (0.625, 696), (0.625, 819), (0.625, 660), (0.625, 229), (0.625, 427), (0.625, 328), (0.625, 501), (0.625, 655), (0.625, 664), (0.625, 863), (0.625, 200), (0.625, 868), (0.625, 652), (0.625, 291), (0.625, 293), (0.625, 41), (0.625, 810), (0.625, 536), (0.625, 517), (0.625, 138), (0.625, 329), (0.625, 827), (0.625, 63), (0.625, 594), (0.625, 569), (0.625, 758), (0.625, 632), (0.625, 301), (0.625, 749), (0.625, 421), (0.625, 525), (0.625, 736), (0.625, 520), (0.625, 403), (0.625, 156), (0.625, 81), (0.625, 644), (0.625, 663), (0.625, 633), (0.625, 770), (0.625, 316), (0.625, 512), (0.625, 526), (0.625, 762), (0.625, 432), (0.625, 426), (0.625, 436), (0.625, 653), (0.625, 802), (0.625, 67), (0.625, 124), (0.625, 828), (0.625, 763), (0.625, 625), (0.625, 648), (0.625, 543), (0.625, 398), (0.625, 642), (0.625, 260), (0.5, 821), (0.5, 807), (0.5, 842), (0.5, 829), (0.5, 867), (0.5, 815), (0.5, 814), (0.5, 835), (0.5, 851), (0.41666666666666663, 788), (0.41666666666666663, 787), (0.41666666666666663, 797), (0.375, 854), (0.375, 783), (0.375, 845), (0.29166666666666663, 790), (0.25, 866), (0.25, 816), (0.25, 793), (0.25, 798)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 504
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 (* x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 680
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ y (* 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 834
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x x)) (* y x)))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.5, 856), (1.5, 217), (1.375, 834), (1.375, 504), (1.375, 680), (1.375, 879), (1.25, 691), (1.25, 792), (1.25, 852), (1.25, 806), (1.25, 593), (1.25, 509), (1.25, 412), (1.25, 885), (1.25, 162), (1.25, 860), (1.25, 786), (1.25, 813), (1.25, 741), (1.25, 833), (1.25, 935), (1.25, 789), (1.25, 494), (1.25, 880), (1.25, 882), (1.25, 886), (1.25, 687), (1.25, 875), (1.25, 693), (1.25, 321), (1.25, 567), (1.25, 685), (1.25, 847), (1.25, 951), (1.25, 901), (1.25, 765), (1.25, 590), (1.25, 784), (1.25, 900), (1.25, 855), (1.25, 524), (1.25, 689), (1.25, 154), (1.125, 147), (1.125, 838), (1.125, 306), (1.125, 721), (1.125, 903), (1.125, 808), (1.125, 711), (1.125, 910), (1.125, 498), (1.125, 908), (1.125, 268), (1.125, 892), (1.125, 235), (1.125, 597), (1.125, 796), (1.125, 496), (1.125, 705), (1.125, 800), (1.125, 737), (1.125, 923), (1.125, 598), (1.125, 698), (1.125, 700), (1.125, 915), (1.125, 895), (1.125, 514), (1.125, 422), (1.125, 794), (1.125, 287), (1.125, 902), (1.125, 899), (1.125, 203), (1.125, 881), (1.125, 896), (1.125, 884), (1.125, 704), (1.125, 10), (1.125, 718), (1.125, 596), (1.125, 522), (1.125, 413), (1.125, 681), (1.125, 745), (1.125, 307), (1.125, 592), (1.125, 891), (1.0, 889), (1.0, 714), (1.0, 928), (1.0, 930), (1.0, 651), (1.0, 929), (1.0, 715), (1.0, 528), (1.0, 608), (1.0, 638), (1.0, 684), (1.0, 924), (1.0, 824), (1.0, 920), (1.0, 643), (1.0, 406), (1.0, 606), (1.0, 626), (1.0, 503), (1.0, 599), (1.0, 817), (1.0, 502), (1.0, 811), (1.0, 620), (1.0, 725), (1.0, 283), (1.0, 669), (1.0, 922), (1.0, 205), (1.0, 399), (1.0, 713), (1.0, 724), (1.0, 919), (1.0, 708), (1.0, 603), (1.0, 446), (1.0, 861), (1.0, 707), (0.875, 959), (0.875, 647), (0.875, 435), (0.875, 424), (0.875, 505), (0.875, 812), (0.875, 84), (0.875, 941), (0.875, 830), (0.875, 933), (0.875, 832), (0.875, 747), (0.875, 739), (0.875, 803), (0.875, 805), (0.875, 407), (0.875, 511), (0.875, 942), (0.875, 665), (0.875, 506), (0.875, 702), (0.875, 759), (0.875, 944), (0.875, 622), (0.75, 334), (0.75, 667), (0.75, 0), (0.75, 958), (0.75, 781), (0.75, 785), (0.75, 840), (0.75, 310), (0.75, 932), (0.75, 288), (0.75, 159), (0.75, 962), (0.75, 746), (0.75, 542), (0.75, 836), (0.75, 510), (0.75, 844), (0.75, 857), (0.75, 938), (0.75, 144), (0.75, 826), (0.75, 52), (0.75, 965), (0.75, 859), (0.75, 308), (0.75, 618), (0.75, 615), (0.75, 850), (0.75, 449), (0.75, 628), (0.75, 804), (0.75, 323), (0.75, 507), (0.75, 966), (0.75, 776), (0.75, 532), (0.75, 311), (0.75, 950), (0.75, 849), (0.75, 945), (0.75, 791), (0.75, 733), (0.75, 624), (0.75, 47), (0.75, 167), (0.75, 839), (0.75, 330), (0.75, 949), (0.75, 823), (0.75, 726), (0.75, 637), (0.75, 858), (0.75, 963), (0.75, 876), (0.75, 661), (0.75, 752), (0.75, 275), (0.75, 635), (0.75, 513), (0.75, 766), (0.75, 727), (0.75, 45), (0.75, 621), (0.75, 735), (0.75, 71), (0.75, 772), (0.75, 955), (0.75, 960), (0.75, 107), (0.75, 434), (0.75, 864), (0.75, 779), (0.75, 751), (0.75, 602), (0.75, 728), (0.75, 623), (0.75, 317), (0.75, 35), (0.6666666666666666, 843), (0.625, 433), (0.625, 837), (0.625, 957), (0.625, 30), (0.625, 658), (0.625, 696), (0.625, 660), (0.625, 777), (0.625, 709), (0.625, 695), (0.625, 943), (0.625, 740), (0.625, 229), (0.625, 497), (0.625, 750), (0.625, 921), (0.625, 401), (0.625, 755), (0.625, 627), (0.625, 534), (0.625, 179), (0.625, 801), (0.625, 953), (0.625, 917), (0.625, 946), (0.625, 245), (0.625, 423), (0.625, 654), (0.625, 898), (0.625, 539), (0.625, 544), (0.625, 870), (0.625, 825), (0.625, 701), (0.625, 327), (0.625, 418), (0.625, 178), (0.625, 86), (0.625, 744), (0.625, 760), (0.625, 768), (0.625, 160), (0.625, 927), (0.625, 31), (0.625, 914), (0.625, 918), (0.625, 947), (0.625, 411), (0.625, 326), (0.625, 916), (0.625, 925), (0.625, 109), (0.625, 51), (0.625, 518), (0.625, 657), (0.625, 819), (0.625, 809), (0.5, 907), (0.5, 873), (0.5, 905), (0.5, 940), (0.5, 937), (0.5, 948), (0.5, 912), (0.5, 888), (0.41666666666666663, 871), (0.41666666666666663, 956), (0.375, 931), (0.375, 877), (0.375, 893)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 834
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x x)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 504
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`1`#`#`(* ? ?)`x`#`#`1`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ 1 (* x 1)) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 680
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x x) (+ y (* 1 x))))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.5, 217), (1.5, 856), (1.5, 1044), (1.5, 968), (1.375, 834), (1.375, 504), (1.375, 879), (1.375, 680), (1.25, 901), (1.25, 412), (1.25, 951), (1.25, 880), (1.25, 741), (1.25, 593), (1.25, 813), (1.25, 885), (1.25, 689), (1.25, 860), (1.25, 984), (1.25, 162), (1.25, 1017), (1.25, 1029), (1.25, 980), (1.25, 806), (1.25, 993), (1.25, 786), (1.25, 494), (1.25, 1053), (1.25, 784), (1.25, 847), (1.25, 691), (1.25, 765), (1.25, 852), (1.25, 1014), (1.25, 590), (1.25, 997), (1.25, 524), (1.25, 991), (1.25, 875), (1.25, 935), (1.25, 1034), (1.25, 321), (1.25, 886), (1.25, 833), (1.25, 900), (1.25, 685), (1.25, 855), (1.25, 789), (1.25, 882), (1.25, 509), (1.25, 973), (1.25, 693), (1.25, 995), (1.25, 792), (1.25, 154), (1.25, 567), (1.25, 998), (1.25, 687), (1.25, 1056), (1.125, 992), (1.125, 974), (1.125, 899), (1.125, 896), (1.125, 306), (1.125, 1020), (1.125, 908), (1.125, 1016), (1.125, 1005), (1.125, 884), (1.125, 203), (1.125, 910), (1.125, 413), (1.125, 10), (1.125, 794), (1.125, 915), (1.125, 718), (1.125, 592), (1.125, 147), (1.125, 496), (1.125, 881), (1.125, 838), (1.125, 522), (1.125, 737), (1.125, 681), (1.125, 705), (1.125, 307), (1.125, 287), (1.125, 902), (1.125, 268), (1.125, 800), (1.125, 1013), (1.125, 1003), (1.125, 1009), (1.125, 1038), (1.125, 514), (1.125, 597), (1.125, 923), (1.125, 711), (1.125, 235), (1.125, 704), (1.125, 1011), (1.125, 700), (1.125, 891), (1.125, 987), (1.125, 596), (1.125, 498), (1.125, 745), (1.125, 698), (1.125, 892), (1.125, 796), (1.125, 598), (1.125, 999), (1.125, 808), (1.125, 1015), (1.125, 1006), (1.125, 422), (1.125, 903), (1.125, 895), (1.125, 721), (1.0, 1030), (1.0, 406), (1.0, 205), (1.0, 708), (1.0, 724), (1.0, 651), (1.0, 603), (1.0, 638), (1.0, 707), (1.0, 811), (1.0, 626), (1.0, 1037), (1.0, 1026), (1.0, 928), (1.0, 919), (1.0, 972), (1.0, 446), (1.0, 606), (1.0, 1042), (1.0, 608), (1.0, 528), (1.0, 922), (1.0, 930), (1.0, 502), (1.0, 924), (1.0, 714), (1.0, 684), (1.0, 929), (1.0, 669), (1.0, 713), (1.0, 824), (1.0, 1023), (1.0, 889), (1.0, 1036), (1.0, 920), (1.0, 1033), (1.0, 817), (1.0, 715), (1.0, 503), (1.0, 599), (1.0, 620), (1.0, 643), (1.0, 1027), (1.0, 1048), (1.0, 283), (1.0, 861), (1.0, 725), (1.0, 399), (0.875, 665), (0.875, 959), (0.875, 747), (0.875, 944), (0.875, 435), (0.875, 942), (0.875, 759), (0.875, 511), (0.875, 739), (0.875, 1055), (0.875, 812), (0.875, 933), (0.875, 647), (0.875, 1001), (0.875, 407), (0.875, 84), (0.875, 830), (0.875, 832), (0.875, 803), (0.875, 424), (0.875, 505), (0.875, 702), (0.875, 506), (0.875, 622), (0.875, 1052), (0.875, 1051), (0.875, 1054), (0.875, 805), (0.875, 941), (0.75, 876), (0.75, 308), (0.75, 949), (0.75, 167), (0.75, 766), (0.75, 71), (0.75, 945), (0.75, 962), (0.75, 864), (0.75, 844), (0.75, 637), (0.75, 840), (0.75, 960), (0.75, 52), (0.75, 667), (0.75, 966), (0.75, 330), (0.75, 857), (0.75, 334), (0.75, 781), (0.75, 938), (0.75, 823), (0.75, 726), (0.75, 779), (0.75, 733), (0.75, 323), (0.75, 971), (0.75, 513), (0.75, 615), (0.75, 804), (0.75, 618), (0.75, 288), (0.75, 932), (0.75, 772), (0.75, 735), (0.75, 635), (0.75, 752), (0.75, 826), (0.75, 958), (0.75, 144), (0.75, 950), (0.75, 776), (0.75, 602), (0.75, 955), (0.75, 785), (0.75, 661), (0.75, 159), (0.75, 45), (0.75, 449), (0.75, 275), (0.75, 963), (0.75, 621), (0.75, 858), (0.75, 542), (0.75, 849), (0.75, 628), (0.75, 836), (0.75, 507), (0.75, 859), (0.75, 47), (0.75, 839), (0.75, 965), (0.75, 510), (0.75, 310), (0.75, 624), (0.75, 791), (0.75, 532), (0.75, 311), (0.75, 1049), (0.75, 990), (0.75, 727), (0.75, 434), (0.75, 107), (0.75, 850), (0.75, 751), (0.75, 746), (0.75, 0), (0.75, 1025), (0.6666666666666666, 975), (0.6666666666666666, 977), (0.625, 1028), (0.625, 1058), (0.625, 1024), (0.625, 1032), (0.625, 1002), (0.625, 994), (0.625, 982), (0.625, 1045), (0.625, 1004), (0.625, 979), (0.625, 983), (0.5, 1040), (0.5, 988), (0.5, 986), (0.5, 970), (0.5, 1019), (0.5, 978), (0.5, 1031), (0.375, 1022), (0.375, 1057), (0.375, 1046), (0.25, 1007), (0.16666666666666666, 996), (0.16666666666666666, 1018)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1044
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 y) 1) (+ y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 968
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 834
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x x)) (* y x)))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
[(1.5, 1059), (1.5, 856), (1.5, 968), (1.5, 217), (1.5, 1060), (1.5, 1079), (1.5, 1044), (1.375, 1074), (1.375, 504), (1.375, 879), (1.375, 834), (1.375, 680), (1.25, 900), (1.25, 786), (1.25, 1056), (1.25, 885), (1.25, 984), (1.25, 412), (1.25, 789), (1.25, 509), (1.25, 321), (1.25, 951), (1.25, 1077), (1.25, 162), (1.25, 886), (1.25, 1101), (1.25, 567), (1.25, 494), (1.25, 524), (1.25, 693), (1.25, 1088), (1.25, 1105), (1.25, 1067), (1.25, 1034), (1.25, 590), (1.25, 1068), (1.25, 687), (1.25, 691), (1.25, 1069), (1.25, 784), (1.25, 901), (1.25, 154), (1.25, 689), (1.25, 1029), (1.25, 980), (1.25, 1092), (1.25, 1084), (1.25, 806), (1.25, 741), (1.25, 860), (1.25, 855), (1.25, 1053), (1.25, 1014), (1.25, 993), (1.25, 847), (1.25, 995), (1.25, 1083), (1.25, 765), (1.25, 813), (1.25, 973), (1.25, 685), (1.25, 998), (1.25, 1070), (1.25, 991), (1.25, 833), (1.25, 852), (1.25, 882), (1.25, 880), (1.25, 1081), (1.25, 593), (1.25, 1017), (1.25, 997), (1.25, 935), (1.25, 875), (1.25, 792), (1.125, 522), (1.125, 974), (1.125, 718), (1.125, 287), (1.125, 698), (1.125, 1009), (1.125, 681), (1.125, 1121), (1.125, 884), (1.125, 514), (1.125, 235), (1.125, 705), (1.125, 597), (1.125, 800), (1.125, 700), (1.125, 422), (1.125, 1003), (1.125, 598), (1.125, 1116), (1.125, 903), (1.125, 899), (1.125, 796), (1.125, 413), (1.125, 1020), (1.125, 1111), (1.125, 737), (1.125, 1099), (1.125, 498), (1.125, 1016), (1.125, 1119), (1.125, 1038), (1.125, 1089), (1.125, 721), (1.125, 1085), (1.125, 891), (1.125, 892), (1.125, 268), (1.125, 992), (1.125, 923), (1.125, 711), (1.125, 1011), (1.125, 881), (1.125, 908), (1.125, 596), (1.125, 987), (1.125, 592), (1.125, 1006), (1.125, 915), (1.125, 10), (1.125, 1130), (1.125, 704), (1.125, 902), (1.125, 1013), (1.125, 1072), (1.125, 496), (1.125, 1015), (1.125, 794), (1.125, 896), (1.125, 306), (1.125, 1122), (1.125, 147), (1.125, 999), (1.125, 808), (1.125, 838), (1.125, 1098), (1.125, 1112), (1.125, 1133), (1.125, 1097), (1.125, 1005), (1.125, 1080), (1.125, 203), (1.125, 307), (1.125, 1103), (1.125, 895), (1.125, 745), (1.125, 910), (1.0, 1036), (1.0, 1117), (1.0, 620), (1.0, 1134), (1.0, 669), (1.0, 406), (1.0, 861), (1.0, 707), (1.0, 1151), (1.0, 1149), (1.0, 283), (1.0, 924), (1.0, 922), (1.0, 651), (1.0, 684), (1.0, 1143), (1.0, 503), (1.0, 638), (1.0, 708), (1.0, 1123), (1.0, 920), (1.0, 930), (1.0, 205), (1.0, 1145), (1.0, 1037), (1.0, 626), (1.0, 399), (1.0, 643), (1.0, 824), (1.0, 1026), (1.0, 1147), (1.0, 889), (1.0, 928), (1.0, 1023), (1.0, 725), (1.0, 715), (1.0, 528), (1.0, 713), (1.0, 929), (1.0, 446), (1.0, 1139), (1.0, 1048), (1.0, 817), (1.0, 608), (1.0, 599), (1.0, 972), (1.0, 502), (1.0, 603), (1.0, 1033), (1.0, 1030), (1.0, 714), (1.0, 1042), (1.0, 724), (1.0, 811), (1.0, 1154), (1.0, 1137), (1.0, 1027), (1.0, 606), (1.0, 919), (0.875, 1106), (0.875, 84), (0.875, 941), (0.875, 435), (0.875, 1051), (0.875, 702), (0.875, 830), (0.875, 933), (0.875, 665), (0.875, 506), (0.875, 739), (0.875, 832), (0.875, 647), (0.875, 511), (0.875, 747), (0.875, 759), (0.875, 805), (0.875, 407), (0.875, 959), (0.875, 1054), (0.875, 1063), (0.875, 944), (0.875, 1001), (0.875, 803), (0.875, 1052), (0.875, 1055), (0.875, 622), (0.875, 942), (0.875, 1126), (0.875, 505), (0.875, 424), (0.875, 812), (0.75, 766), (0.75, 334), (0.75, 513), (0.75, 971), (0.75, 945), (0.75, 637), (0.75, 962), (0.75, 615), (0.75, 781), (0.75, 167), (0.75, 844), (0.75, 726), (0.75, 960), (0.75, 330), (0.75, 840), (0.75, 308), (0.75, 949), (0.75, 779), (0.75, 876), (0.75, 733), (0.75, 52), (0.75, 667), (0.75, 1100), (0.75, 1114), (0.75, 823), (0.75, 966), (0.75, 864), (0.75, 857), (0.75, 323), (0.75, 71), (0.75, 1064), (0.75, 938), (0.75, 1082), (0.625, 1094), (0.625, 1138), (0.625, 1086), (0.625, 1125), (0.625, 1062), (0.625, 1118), (0.625, 1141), (0.625, 1129), (0.625, 1076), (0.625, 1136), (0.625, 1090), (0.5, 1109), (0.5, 1135), (0.5, 1096), (0.41666666666666663, 1066), (0.375, 1073), (0.375, 1152), (0.375, 1128), (0.375, 1095), (0.375, 1071), (0.25, 1102), (0.25, 1132), (0.25, 1142), (0.25, 1110), (0.16666666666666666, 1108)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1059
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 968
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1060
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`1`#`#`y`#`#`1`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* 1 y) 1) (+ y x)))
 nr_nodes: 10]
[Generation 10]
[Computing fitness]
[(1.5, 1155), (1.5, 856), (1.5, 1156), (1.5, 968), (1.5, 217), (1.5, 1059), (1.5, 1245), (1.5, 1060), (1.5, 1044), (1.5, 1079), (1.375, 680), (1.375, 1248), (1.375, 504), (1.375, 879), (1.375, 1161), (1.375, 1202), (1.375, 834), (1.375, 1074), (1.25, 784), (1.25, 741), (1.25, 1197), (1.25, 509), (1.25, 1084), (1.25, 1174), (1.25, 154), (1.25, 1187), (1.25, 786), (1.25, 687), (1.25, 813), (1.25, 1228), (1.25, 412), (1.25, 689), (1.25, 885), (1.25, 1158), (1.25, 935), (1.25, 833), (1.25, 1177), (1.25, 1186), (1.25, 593), (1.25, 524), (1.25, 1069), (1.25, 875), (1.25, 494), (1.25, 693), (1.25, 1092), (1.25, 951), (1.25, 1083), (1.25, 1180), (1.25, 1101), (1.25, 880), (1.25, 973), (1.25, 1105), (1.25, 1029), (1.25, 886), (1.25, 1088), (1.25, 685), (1.25, 1056), (1.25, 1167), (1.25, 765), (1.25, 789), (1.25, 1169), (1.25, 900), (1.25, 1067), (1.25, 993), (1.25, 567), (1.25, 980), (1.25, 590), (1.25, 991), (1.25, 855), (1.25, 984), (1.25, 901), (1.25, 792), (1.25, 321), (1.25, 1053), (1.25, 162), (1.25, 1014), (1.25, 1070), (1.25, 860), (1.25, 882), (1.25, 691), (1.25, 847), (1.25, 997), (1.25, 1068), (1.25, 998), (1.25, 806), (1.25, 995), (1.25, 1159), (1.25, 1077), (1.25, 1034), (1.25, 1081), (1.25, 852), (1.25, 1017), (1.125, 899), (1.125, 413), (1.125, 1200), (1.125, 1244), (1.125, 592), (1.125, 915), (1.125, 1217), (1.125, 910), (1.125, 1006), (1.125, 1166), (1.125, 1038), (1.125, 718), (1.125, 1015), (1.125, 1121), (1.125, 514), (1.125, 1184), (1.125, 1226), (1.125, 1072), (1.125, 10), (1.125, 721), (1.125, 1238), (1.125, 203), (1.125, 1210), (1.125, 1085), (1.125, 1111), (1.125, 704), (1.125, 1009), (1.125, 498), (1.125, 1122), (1.125, 307), (1.125, 698), (1.125, 711), (1.125, 1133), (1.125, 1011), (1.125, 598), (1.125, 1232), (1.125, 892), (1.125, 1221), (1.125, 268), (1.125, 1172), (1.125, 1219), (1.125, 1020), (1.125, 496), (1.125, 987), (1.125, 422), (1.125, 1130), (1.125, 745), (1.125, 923), (1.125, 908), (1.125, 1005), (1.125, 1080), (1.125, 1003), (1.125, 147), (1.125, 800), (1.125, 1198), (1.125, 895), (1.125, 999), (1.125, 1193), (1.125, 596), (1.125, 1098), (1.125, 700), (1.125, 306), (1.125, 1203), (1.125, 1205), (1.125, 1116), (1.125, 705), (1.125, 838), (1.125, 1212), (1.125, 896), (1.125, 974), (1.125, 903), (1.125, 796), (1.125, 794), (1.125, 1016), (1.125, 1206), (1.125, 992), (1.125, 1119), (1.125, 287), (1.125, 1190), (1.125, 1013), (1.125, 884), (1.125, 1097), (1.125, 597), (1.125, 1237), (1.125, 1089), (1.125, 881), (1.125, 902), (1.125, 1103), (1.125, 891), (1.125, 808), (1.125, 1112), (1.125, 235), (1.125, 681), (1.125, 737), (1.125, 522), (1.125, 1099), (1.0, 651), (1.0, 922), (1.0, 1137), (1.0, 1037), (1.0, 1030), (1.0, 638), (1.0, 1139), (1.0, 626), (1.0, 599), (1.0, 603), (1.0, 1134), (1.0, 1154), (1.0, 1147), (1.0, 861), (1.0, 684), (1.0, 620), (1.0, 608), (1.0, 714), (1.0, 406), (1.0, 502), (1.0, 283), (1.0, 930), (1.0, 643), (1.0, 715), (1.0, 1026), (1.0, 446), (1.0, 824), (1.0, 1036), (1.0, 1145), (1.0, 503), (1.0, 1151), (1.0, 928), (1.0, 919), (1.0, 1117), (1.0, 1143), (1.0, 889), (1.0, 811), (1.0, 399), (1.0, 1123), (1.0, 528), (1.0, 606), (1.0, 1149), (1.0, 1048), (1.0, 972), (1.0, 713), (1.0, 1220), (1.0, 1023), (1.0, 817), (1.0, 707), (1.0, 924), (1.0, 669), (1.0, 708), (1.0, 1042), (1.0, 1033), (1.0, 205), (1.0, 1027), (1.0, 725), (1.0, 929), (1.0, 724), (1.0, 920), (0.875, 933), (0.875, 832), (0.875, 511), (0.875, 702), (0.875, 1051), (0.875, 506), (0.875, 830), (0.875, 739), (0.875, 1199), (0.875, 941), (0.875, 84), (0.875, 1196), (0.875, 647), (0.875, 1106), (0.875, 747), (0.875, 665), (0.875, 435), (0.875, 1175), (0.75, 1164), (0.75, 1213), (0.75, 1215), (0.75, 1192), (0.75, 1168), (0.75, 1194), (0.625, 1162), (0.625, 1178), (0.625, 1224), (0.625, 1183), (0.625, 1241), (0.625, 1235), (0.625, 1170), (0.625, 1171), (0.625, 1209), (0.625, 1189), (0.625, 1195), (0.5, 1222), (0.5, 1247), (0.5, 1234), (0.5, 1225), (0.5, 1218), (0.5, 1236), (0.5, 1207), (0.41666666666666663, 1242), (0.41666666666666663, 1240), (0.41666666666666663, 1243), (0.375, 1211), (0.375, 1181), (0.375, 1165), (0.375, 1182), (0.29166666666666663, 1201), (0.25, 1233), (0.16666666666666666, 1230)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1155
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1156
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 968
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
[Generation 11]
[Computing fitness]
[(1.5, 217), (1.5, 1250), (1.5, 1259), (1.5, 1245), (1.5, 856), (1.5, 1251), (1.5, 1044), (1.5, 1079), (1.5, 1060), (1.5, 1156), (1.5, 1155), (1.5, 968), (1.5, 1059), (1.5, 1252), (1.375, 504), (1.375, 834), (1.375, 680), (1.375, 1202), (1.375, 1258), (1.375, 1161), (1.375, 879), (1.375, 1074), (1.375, 1248), (1.25, 741), (1.25, 1017), (1.25, 900), (1.25, 847), (1.25, 792), (1.25, 1324), (1.25, 984), (1.25, 991), (1.25, 412), (1.25, 1260), (1.25, 1174), (1.25, 685), (1.25, 1070), (1.25, 494), (1.25, 852), (1.25, 1077), (1.25, 886), (1.25, 784), (1.25, 980), (1.25, 1088), (1.25, 162), (1.25, 1280), (1.25, 691), (1.25, 993), (1.25, 1294), (1.25, 1169), (1.25, 786), (1.25, 590), (1.25, 1056), (1.25, 1158), (1.25, 1180), (1.25, 973), (1.25, 1167), (1.25, 524), (1.25, 321), (1.25, 689), (1.25, 1092), (1.25, 693), (1.25, 1291), (1.25, 833), (1.25, 885), (1.25, 806), (1.25, 154), (1.25, 765), (1.25, 1034), (1.25, 1197), (1.25, 1081), (1.25, 901), (1.25, 935), (1.25, 789), (1.25, 1159), (1.25, 860), (1.25, 1177), (1.25, 1067), (1.25, 1101), (1.25, 1277), (1.25, 1186), (1.25, 1053), (1.25, 1029), (1.25, 1105), (1.25, 1187), (1.25, 1299), (1.25, 1014), (1.25, 1295), (1.25, 1276), (1.25, 1084), (1.25, 1287), (1.25, 875), (1.25, 813), (1.25, 1271), (1.25, 1303), (1.25, 997), (1.25, 1083), (1.25, 1263), (1.25, 995), (1.25, 880), (1.25, 951), (1.25, 1228), (1.25, 509), (1.25, 687), (1.25, 882), (1.25, 855), (1.25, 998), (1.25, 567), (1.25, 1069), (1.25, 1068), (1.25, 1275), (1.25, 593), (1.125, 698), (1.125, 910), (1.125, 1038), (1.125, 992), (1.125, 1200), (1.125, 891), (1.125, 413), (1.125, 1322), (1.125, 737), (1.125, 1003), (1.125, 1335), (1.125, 1281), (1.125, 1112), (1.125, 1097), (1.125, 1289), (1.125, 1121), (1.125, 796), (1.125, 892), (1.125, 1085), (1.125, 1184), (1.125, 1193), (1.125, 1005), (1.125, 1020), (1.125, 1203), (1.125, 1270), (1.125, 1337), (1.125, 1016), (1.125, 902), (1.125, 1332), (1.125, 1206), (1.125, 974), (1.125, 1221), (1.125, 711), (1.125, 1111), (1.125, 307), (1.125, 1232), (1.125, 1308), (1.125, 1314), (1.125, 203), (1.125, 1320), (1.125, 235), (1.125, 896), (1.125, 1172), (1.125, 1166), (1.125, 1133), (1.125, 903), (1.125, 597), (1.125, 908), (1.125, 1238), (1.125, 592), (1.125, 881), (1.125, 1122), (1.125, 1015), (1.125, 1098), (1.125, 1089), (1.125, 1219), (1.125, 800), (1.125, 1244), (1.125, 1103), (1.125, 721), (1.125, 306), (1.125, 899), (1.125, 1198), (1.125, 1130), (1.125, 1278), (1.125, 1011), (1.125, 704), (1.125, 1190), (1.125, 1330), (1.125, 923), (1.125, 705), (1.125, 1080), (1.125, 10), (1.125, 1272), (1.125, 498), (1.125, 522), (1.125, 1226), (1.125, 1210), (1.125, 1326), (1.125, 1285), (1.125, 1116), (1.125, 1217), (1.125, 895), (1.125, 1099), (1.125, 496), (1.125, 1006), (1.125, 808), (1.125, 147), (1.125, 422), (1.125, 838), (1.125, 745), (1.125, 1013), (1.125, 268), (1.125, 718), (1.125, 287), (1.125, 915), (1.125, 1205), (1.125, 1119), (1.125, 1237), (1.125, 1072), (1.125, 596), (1.125, 794), (1.125, 700), (1.125, 999), (1.125, 987), (1.125, 681), (1.125, 1009), (1.125, 1212), (1.125, 598), (1.125, 514), (1.125, 884), (1.0, 1145), (1.0, 1143), (1.0, 930), (1.0, 643), (1.0, 1151), (1.0, 684), (1.0, 502), (1.0, 603), (1.0, 1254), (1.0, 1329), (1.0, 1147), (1.0, 406), (1.0, 626), (1.0, 503), (1.0, 608), (1.0, 861), (1.0, 1026), (1.0, 620), (1.0, 824), (1.0, 1117), (1.0, 919), (1.0, 811), (1.0, 889), (1.0, 1134), (1.0, 1030), (1.0, 928), (1.0, 1274), (1.0, 1154), (1.0, 651), (1.0, 922), (1.0, 1137), (1.0, 446), (1.0, 715), (1.0, 1036), (1.0, 1139), (1.0, 283), (1.0, 599), (1.0, 1037), (1.0, 714), (1.0, 638), (0.875, 1288), (0.75, 1273), (0.75, 1262), (0.75, 1297), (0.75, 1253), (0.75, 1301), (0.625, 1334), (0.625, 1283), (0.625, 1265), (0.625, 1269), (0.625, 1255), (0.625, 1310), (0.625, 1338), (0.625, 1286), (0.625, 1321), (0.625, 1284), (0.625, 1298), (0.625, 1305), (0.625, 1261), (0.5, 1279), (0.5, 1341), (0.5, 1292), (0.5, 1266), (0.5, 1328), (0.5, 1315), (0.41666666666666663, 1267), (0.41666666666666663, 1256), (0.41666666666666663, 1311), (0.375, 1333), (0.375, 1307), (0.375, 1331), (0.375, 1339), (0.29166666666666663, 1313), (0.29166666666666663, 1342), (0.25, 1302), (0.25, 1317), (0.25, 1336), (0.16666666666666666, 1319)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1250
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`1`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x y) (+ 1 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 1259
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ x x)) (+ y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1245
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ (* y x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 856
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
[Generation 12]
[Computing fitness]
[(1.5, 1245), (1.5, 1259), (1.5, 1079), (1.5, 1156), (1.5, 1346), (1.5, 1250), (1.5, 1155), (1.5, 1044), (1.5, 1059), (1.5, 1252), (1.5, 1060), (1.5, 1251), (1.5, 1352), (1.5, 217), (1.5, 1351), (1.5, 968), (1.5, 1343), (1.5, 856), (1.375, 1248), (1.375, 680), (1.375, 1258), (1.375, 1202), (1.375, 1161), (1.375, 504), (1.375, 1394), (1.375, 1347), (1.375, 1377), (1.375, 879), (1.375, 834), (1.375, 1074), (1.25, 741), (1.25, 1056), (1.25, 792), (1.25, 1068), (1.25, 1291), (1.25, 882), (1.25, 1083), (1.25, 852), (1.25, 1389), (1.25, 935), (1.25, 1101), (1.25, 789), (1.25, 998), (1.25, 1263), (1.25, 1388), (1.25, 1408), (1.25, 875), (1.25, 567), (1.25, 1169), (1.25, 1367), (1.25, 1410), (1.25, 689), (1.25, 154), (1.25, 1277), (1.25, 1356), (1.25, 1070), (1.25, 1324), (1.25, 765), (1.25, 1271), (1.25, 1197), (1.25, 1280), (1.25, 855), (1.25, 1299), (1.25, 900), (1.25, 685), (1.25, 1177), (1.25, 1084), (1.25, 1069), (1.25, 1092), (1.25, 1276), (1.25, 1187), (1.25, 1158), (1.25, 1275), (1.25, 1159), (1.25, 1186), (1.25, 1167), (1.25, 880), (1.25, 833), (1.25, 1385), (1.25, 993), (1.25, 886), (1.25, 691), (1.25, 847), (1.25, 901), (1.25, 1180), (1.25, 1017), (1.25, 1378), (1.25, 860), (1.25, 997), (1.25, 1287), (1.25, 980), (1.25, 1034), (1.25, 951), (1.25, 885), (1.25, 1029), (1.25, 1303), (1.25, 1373), (1.25, 984), (1.25, 1295), (1.25, 590), (1.25, 1228), (1.25, 321), (1.25, 162), (1.25, 1067), (1.25, 1053), (1.25, 786), (1.25, 1420), (1.25, 1077), (1.25, 1174), (1.25, 1105), (1.25, 693), (1.25, 1014), (1.25, 995), (1.25, 412), (1.25, 1384), (1.25, 1260), (1.25, 687), (1.25, 784), (1.25, 1081), (1.25, 1088), (1.25, 593), (1.25, 991), (1.25, 973), (1.25, 813), (1.25, 806), (1.25, 494), (1.25, 509), (1.25, 524), (1.25, 1294), (1.25, 1359), (1.125, 306), (1.125, 598), (1.125, 1097), (1.125, 1166), (1.125, 1203), (1.125, 1320), (1.125, 1332), (1.125, 1314), (1.125, 1072), (1.125, 1425), (1.125, 1326), (1.125, 800), (1.125, 1006), (1.125, 881), (1.125, 496), (1.125, 1119), (1.125, 1122), (1.125, 592), (1.125, 235), (1.125, 1238), (1.125, 1391), (1.125, 1308), (1.125, 147), (1.125, 700), (1.125, 721), (1.125, 1272), (1.125, 681), (1.125, 1130), (1.125, 1221), (1.125, 1285), (1.125, 718), (1.125, 903), (1.125, 999), (1.125, 1190), (1.125, 908), (1.125, 698), (1.125, 1441), (1.125, 596), (1.125, 1330), (1.125, 1217), (1.125, 705), (1.125, 1430), (1.125, 1405), (1.125, 1085), (1.125, 992), (1.125, 1193), (1.125, 203), (1.125, 1198), (1.125, 923), (1.125, 1121), (1.125, 745), (1.125, 1038), (1.125, 1099), (1.125, 896), (1.125, 287), (1.125, 895), (1.125, 1003), (1.125, 1020), (1.125, 1133), (1.125, 522), (1.125, 1116), (1.125, 1172), (1.125, 1417), (1.125, 891), (1.125, 1390), (1.125, 1289), (1.125, 1011), (1.125, 1200), (1.125, 514), (1.125, 1080), (1.125, 413), (1.125, 838), (1.125, 1111), (1.125, 1335), (1.125, 1210), (1.125, 1427), (1.125, 1103), (1.125, 910), (1.125, 1015), (1.125, 1401), (1.125, 1009), (1.125, 1322), (1.125, 307), (1.125, 1205), (1.125, 498), (1.125, 902), (1.125, 1112), (1.125, 597), (1.125, 1278), (1.125, 711), (1.125, 268), (1.125, 704), (1.125, 10), (1.125, 1237), (1.125, 1244), (1.125, 1270), (1.125, 1226), (1.125, 1089), (1.125, 987), (1.125, 1337), (1.125, 974), (1.125, 1005), (1.125, 422), (1.125, 892), (1.125, 1232), (1.125, 1219), (1.125, 808), (1.125, 1013), (1.125, 796), (1.125, 1206), (1.125, 737), (1.125, 915), (1.125, 1184), (1.125, 1212), (1.125, 884), (1.125, 1442), (1.125, 899), (1.125, 1098), (1.125, 1016), (1.125, 1281), (1.125, 794), (1.0, 1143), (1.0, 1440), (1.0, 1433), (1.0, 1145), (1.0, 930), (0.875, 1357), (0.875, 1397), (0.875, 1345), (0.875, 1413), (0.875, 1387), (0.7916666666666666, 1404), (0.7916666666666666, 1368), (0.75, 1403), (0.75, 1431), (0.75, 1402), (0.75, 1362), (0.75, 1380), (0.75, 1349), (0.75, 1372), (0.75, 1371), (0.75, 1400), (0.75, 1416), (0.75, 1379), (0.625, 1360), (0.625, 1419), (0.625, 1411), (0.625, 1398), (0.625, 1354), (0.625, 1443), (0.5, 1437), (0.5, 1435), (0.5, 1393), (0.5, 1422), (0.5, 1353), (0.5, 1418), (0.41666666666666663, 1414), (0.41666666666666663, 1366), (0.41666666666666663, 1375), (0.41666666666666663, 1395), (0.41666666666666663, 1383), (0.375, 1364), (0.375, 1382), (0.375, 1370), (0.29166666666666663, 1439), (0.29166666666666663, 1429), (0.29166666666666663, 1407), (0.29166666666666663, 1438), (0.29166666666666663, 1376), (0.25, 1423)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 1245
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ (* y x) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 1259
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ x x)) (+ y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 1079
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x y) (* y (+ x y))))
 nr_nodes: 10]
(CANDIDATE)[id: 1156
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
(CANDIDATE)[id: 1346
 encoding: (defun my_func (x y) ?)`(* ? ?)`1`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`1`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 1 (* (+ y x) (+ 1 x))))
 nr_nodes: 10]
[Generation 13]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (* (+ (* x y) 1) (+ y x)))

Process finished with exit code 0
