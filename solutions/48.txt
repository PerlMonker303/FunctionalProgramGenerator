D:\Anaconda\envs\tf_gpu\python.exe D:/An2Sem1M/sweai/lab2/FunctionalProgramGenerator/main_tree.py
[Algorithm start]
[Initial pool]
(CANDIDATE)[id: 0
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`2`#`#`2`#`#`(+ ? ?)`y`#`#`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* 2 2) (+ y x)) x) y))
 nr_nodes: 12]
(CANDIDATE)[id: 1
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 2
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 3
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 4
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 5
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 6
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 7
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (* (* 2 x) (+ (+ x 2) x)) y)))
 nr_nodes: 14]
(CANDIDATE)[id: 8
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 9
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 10
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 11
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 12
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 13
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 14
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 15
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 16
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 17
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 18
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 19
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 20
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 21
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ x (* (* y y) 2)) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 22
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 23
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 24
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 25
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 26
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 27
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 28
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 29
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`(+ ? ?)`x`#`#`(+ ? ?)`2`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* y x) y) (+ x (+ 2 (* y y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 30
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 31
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 32
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 33
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 34
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 35
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 36
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 37
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 38
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 39
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 40
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 41
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 42
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 43
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 44
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 45
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 46
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 47
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 48
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 49
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 50
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y 2) (* (+ x y) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) (* x x)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 52
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 53
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 54
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 55
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 56
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ (* 2 x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 57
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 58
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 59
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 60
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 61
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 62
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* 2 x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 63
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ y y) (+ 2 x)))
 nr_nodes: 8]
(CANDIDATE)[id: 64
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 65
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ y (+ x 2))))
 nr_nodes: 8]
(CANDIDATE)[id: 66
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 67
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 68
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 69
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 70
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 71
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ y 2)) (* y x)))
 nr_nodes: 10]
(CANDIDATE)[id: 73
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 74
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 y) (+ y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 75
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 76
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 77
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 78
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 79
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 80
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 81
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* x 2) y))
 nr_nodes: 6]
(CANDIDATE)[id: 82
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 83
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 84
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 85
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x (* x y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 86
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 87
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`2`#`#`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* 2 2)) (+ x (+ y (* 2 2)))))
 nr_nodes: 14]
(CANDIDATE)[id: 88
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`(* ? ?)`(* ? ?)`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (* y x) y) (* (* 2 2) y)))
 nr_nodes: 12]
(CANDIDATE)[id: 89
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`y`#`#`(* ? ?)`2`#`#`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 x) (* y (* 2 (+ (* x y) y)))))
 nr_nodes: 14]
(CANDIDATE)[id: 90
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 91
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`(+ ? ?)`(* ? ?)`2`#`#`y`#`#`(* ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ x y)) (* (+ (* 2 y) (* x y)) (+ (+ 2 y) (+ x 2)))))
 nr_nodes: 22]
(CANDIDATE)[id: 92
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 93
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 94
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 95
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 96
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 97
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 98
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 99
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`(* ? ?)`x`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 x) (+ y (+ 2 (* x (* 2 y))))))
 nr_nodes: 14]
(CANDIDATE)[id: 100
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 101
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 102
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 103
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 104
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 105
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 106
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 107
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 108
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`y`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 2 (+ x x)) (* y 2)) x))
 nr_nodes: 12]
(CANDIDATE)[id: 109
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 110
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 111
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ x y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 112
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 113
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 114
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(* ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (* x y)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 115
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 116
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 117
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 118
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 119
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* x x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 120
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (+ 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 121
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 122
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 123
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 124
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`(* ? ?)`2`#`#`x`#`#`2`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* (* (+ (+ y y) (+ y x)) (* (* 2 x) 2)) (+ y y))))
 nr_nodes: 20]
(CANDIDATE)[id: 125
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 126
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 127
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 128
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (+ y 2) y)))
 nr_nodes: 8]
(CANDIDATE)[id: 129
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 130
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 131
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 132
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ x y)) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 133
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 134
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 135
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 136
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 137
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`(* ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* (* y y) (+ (+ y 2) y))))
 nr_nodes: 12]
(CANDIDATE)[id: 138
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 139
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 140
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 141
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 142
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 143
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 144
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 145
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 146
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 147
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 148
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* y (* y 2)) (+ (* y x) y))))
 nr_nodes: 14]
(CANDIDATE)[id: 149
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 150
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 151
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 152
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 153
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 154
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 155
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 156
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 158
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`x`#`#`2`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* x 2) x) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 159
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 160
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 161
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 162
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 163
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 164
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 165
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 y) (* y x)))
 nr_nodes: 8]
(CANDIDATE)[id: 166
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 167
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 168
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* 2 (+ 2 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 169
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 170
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 171
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ (* 2 2) 2) (* 2 y)) y))
 nr_nodes: 12]
(CANDIDATE)[id: 172
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 173
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 174
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ (+ 2 2) (+ (* 2 x) (+ (+ x x) (* 2 y))))))
 nr_nodes: 18]
(CANDIDATE)[id: 175
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ y y) x) y))
 nr_nodes: 8]
(CANDIDATE)[id: 176
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 177
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x x))
 nr_nodes: 4]
(CANDIDATE)[id: 178
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ 2 (+ 2 x))))
 nr_nodes: 8]
(CANDIDATE)[id: 179
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 180
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 181
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x x))
 nr_nodes: 4]
(CANDIDATE)[id: 182
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`(* ? ?)`2`#`#`(* ? ?)`y`#`#`x`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ (* 2 (* y x)) (* y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 183
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* x y) x))
 nr_nodes: 6]
(CANDIDATE)[id: 184
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 185
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 x) (* x x)))
 nr_nodes: 8]
(CANDIDATE)[id: 186
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 187
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 188
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 189
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`2`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x (* 2 2)) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 190
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x 2) x))
 nr_nodes: 6]
(CANDIDATE)[id: 191
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`x`#`#`(+ ? ?)`(+ ? ?)`y`#`#`2`#`#`y`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (+ (+ (* x 2) x) (+ (+ y 2) y))) (* y (+ 2 x))))
 nr_nodes: 20]
(CANDIDATE)[id: 192
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ y y)))
 nr_nodes: 8]
(CANDIDATE)[id: 193
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 194
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 195
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 196
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 197
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`y`#`#`(+ ? ?)`y`#`#`x`#`#`2`#`#`(* ? ?)`(* ? ?)`2`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* (+ 2 y) (+ y x)) 2) (* (* 2 2) x)))
 nr_nodes: 16]
(CANDIDATE)[id: 198
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`(+ ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x 2) (+ y y)) (* 2 (+ x x))))
 nr_nodes: 14]
(CANDIDATE)[id: 199
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 200
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 201
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 202
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 203
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 204
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 205
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) (+ (+ (+ 2 2) x) x)))
 nr_nodes: 12]
(CANDIDATE)[id: 206
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(* ? ?)`y`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (* y y)) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 207
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 208
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 209
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 210
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 211
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 212
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (* 2 y)) x))
 nr_nodes: 10]
(CANDIDATE)[id: 213
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 214
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 215
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 216
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`x`#`#`(* ? ?)`2`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ 2 2) x) (* 2 (* 2 y))))
 nr_nodes: 12]
(CANDIDATE)[id: 217
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 218
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`2`#`#`2`#`#`y`#`#`(+ ? ?)`y`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ 2 2) y) (+ y (+ y y))))
 nr_nodes: 12]
(CANDIDATE)[id: 219
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 220
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 221
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 222
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 223
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 224
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 225
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y (+ 2 x)) (* x x)))
 nr_nodes: 10]
(CANDIDATE)[id: 226
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* x (+ (+ x x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 227
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y 2))
 nr_nodes: 4]
(CANDIDATE)[id: 228
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 229
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 230
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 231
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 232
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 233
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ y y))
 nr_nodes: 4]
(CANDIDATE)[id: 234
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 235
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 236
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 237
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 238
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 239
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`(+ ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* (* 2 x) (+ y 2)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 240
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 241
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 242
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 243
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 244
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 245
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 246
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 247
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 248
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 249
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 250
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 251
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(* ? ?)`x`#`#`2`#`#`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (* x 2)) (+ (+ x (+ y (* y 2))) 2)))
 nr_nodes: 16]
(CANDIDATE)[id: 252
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`y`#`#`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`2`#`#`2`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 2 y) (* (* (* x 2) 2) y)) 2))
 nr_nodes: 14]
(CANDIDATE)[id: 253
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 254
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x x) y) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 255
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 256
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 257
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 258
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 259
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 260
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 261
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 262
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`(* ? ?)`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`2`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 (* (+ y 2) (* 2 2))) 2))
 nr_nodes: 12]
(CANDIDATE)[id: 263
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 264
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 265
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (+ x y)))
 nr_nodes: 6]
(CANDIDATE)[id: 266
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 267
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 268
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 269
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 270
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 271
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 272
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 273
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 274
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 275
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 276
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 278
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 279
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 280
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`x`#`#`y`#`#`(+ ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ (* (* 2 x) x) y) (+ x y)) (* x x)))
 nr_nodes: 16]
(CANDIDATE)[id: 281
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 282
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(* ? ?)`y`#`#`(* ? ?)`x`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y y) (* y (* x 2))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 283
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 284
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 285
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`y`#`#`2`#`#`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* y 2) (+ (* x 2) x)))
 nr_nodes: 10]
(CANDIDATE)[id: 286
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 287
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 288
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 289
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 290
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 291
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`2`#`#`y`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* (+ x (+ y 2)) (* 2 y)) (* y x)))
 nr_nodes: 14]
(CANDIDATE)[id: 292
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 293
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 294
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* y 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 295
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 (* 2 x)))
 nr_nodes: 6]
(CANDIDATE)[id: 296
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 297
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 298
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 299
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`x`#`#`(* ? ?)`2`#`#`x`#`#`y`#`#`(* ? ?)`2`#`#`(* ? ?)`2`#`#`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (+ (* x x) (* 2 x)) y) (* 2 (* 2 (+ x y)))) (+ x 2)))
 nr_nodes: 22]
(CANDIDATE)[id: 300
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ 2 x) x)))
 nr_nodes: 8]
(CANDIDATE)[id: 301
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 302
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 303
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 304
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ x y) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 305
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 306
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y x))
 nr_nodes: 4]
(CANDIDATE)[id: 307
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 308
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 309
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(* ? ?)`(* ? ?)`2`#`#`y`#`#`x`#`#`(+ ? ?)`(+ ? ?)`2`#`#`y`#`#`y`#`#`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`x`#`#`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (* (* 2 y) x) (+ (+ 2 y) y)) (* (+ (+ x x) (+ 2 x)) 2)))
 nr_nodes: 22]
(CANDIDATE)[id: 310
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 311
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x 2)))
 nr_nodes: 6]
(CANDIDATE)[id: 312
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`(+ ? ?)`2`#`#`x`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* (+ 2 x) (+ y y))))
 nr_nodes: 10]
(CANDIDATE)[id: 313
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (* 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 314
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 315
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 316
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 317
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 318
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`(+ ? ?)`2`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 (+ 2 x)) 2))
 nr_nodes: 8]
(CANDIDATE)[id: 319
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 320
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 321
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ x y))
 nr_nodes: 4]
(CANDIDATE)[id: 322
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 323
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 324
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 325
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`(* ? ?)`x`#`#`2`#`#`(* ? ?)`y`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (* (* x 2) (* y 2)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 326
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 327
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 328
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 329
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 330
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 331
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 332
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 333
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* (+ y x) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 334
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 335
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 336
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ 2 2) x) x))
 nr_nodes: 8]
(CANDIDATE)[id: 337
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 338
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 339
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 340
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* 2 x))
 nr_nodes: 4]
(CANDIDATE)[id: 341
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ x x)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 342
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (+ x 2) y) y))
 nr_nodes: 8]
(CANDIDATE)[id: 343
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`2`#`#`(+ ? ?)`(* ? ?)`(+ ? ?)`2`#`#`y`#`#`2`#`#`(+ ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (* (+ y 2) (+ (* (+ 2 y) 2) (+ y y)))))
 nr_nodes: 16]
(CANDIDATE)[id: 344
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 345
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 346
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 347
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x y)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 348
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x y))
 nr_nodes: 4]
(CANDIDATE)[id: 349
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 350
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 y) y))
 nr_nodes: 6]
(CANDIDATE)[id: 351
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y y))
 nr_nodes: 4]
(CANDIDATE)[id: 352
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* x 2))
 nr_nodes: 4]
(CANDIDATE)[id: 353
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 354
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 355
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 356
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ y (+ 2 2)) y))
 nr_nodes: 8]
(CANDIDATE)[id: 357
 encoding: (defun my_func (x y) ?)`(* ? ?)`2`#`#`(* ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (* 2 (* (* 2 2) 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 358
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (+ y x) 2)))
 nr_nodes: 8]
(CANDIDATE)[id: 359
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 360
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ 2 2))
 nr_nodes: 4]
(CANDIDATE)[id: 361
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 362
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 363
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 364
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 365
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 366
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 367
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(+ ? ?)`2`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (+ 2 (* (* y x) 2))) y))
 nr_nodes: 12]
(CANDIDATE)[id: 368
 encoding: (defun my_func (x y) ?)`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ 2 y))
 nr_nodes: 4]
(CANDIDATE)[id: 369
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 370
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`2`#`#`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`2`#`#`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(+ ? ?)`2`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ 2 (+ (+ (+ x y) 2) (+ (+ y x) (+ 2 2)))) y))
 nr_nodes: 18]
(CANDIDATE)[id: 371
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y x))
 nr_nodes: 4]
(CANDIDATE)[id: 372
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 373
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 374
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 375
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ y x)))
 nr_nodes: 6]
(CANDIDATE)[id: 376
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`x`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ x y) (+ x 2)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 377
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 378
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`x`#`#`2`#`#`(+ ? ?)`x`#`#`(* ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ x 2) (+ x (* 2 y))))
 nr_nodes: 10]
(CANDIDATE)[id: 379
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 380
 encoding: (defun my_func (x y) ?)`(* ? ?)`x`#`#`(+ ? ?)`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* x (+ 2 y)))
 nr_nodes: 6]
(CANDIDATE)[id: 381
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 382
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 384
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`2`#`#`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* 2 2) 2))
 nr_nodes: 6]
(CANDIDATE)[id: 385
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 386
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 387
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (+ x x)) x))
 nr_nodes: 8]
(CANDIDATE)[id: 388
 encoding: (defun my_func (x y) ?)`y`#`#`#
 s_expr: (defun my_func (x y) y)
 nr_nodes: 2]
(CANDIDATE)[id: 389
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 390
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 391
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 392
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 393
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 394
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 395
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`(* ? ?)`y`#`#`x`#`#`(* ? ?)`2`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ x (* (* y x) (* 2 2))))
 nr_nodes: 10]
(CANDIDATE)[id: 396
 encoding: (defun my_func (x y) ?)`(* ? ?)`(* ? ?)`2`#`#`x`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* (* 2 x) x))
 nr_nodes: 6]
(CANDIDATE)[id: 397
 encoding: (defun my_func (x y) ?)`x`#`#`#
 s_expr: (defun my_func (x y) x)
 nr_nodes: 2]
(CANDIDATE)[id: 398
 encoding: (defun my_func (x y) ?)`2`#`#`#
 s_expr: (defun my_func (x y) 2)
 nr_nodes: 2]
(CANDIDATE)[id: 399
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`x`#`#`y`#`#`(+ ? ?)`y`#`#`y`#`#`x`#`#`(+ ? ?)`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* (+ x y) (+ y y)) x) (+ x y)))
 nr_nodes: 14]
[Generation 0]
[Computing fitness]
[(1.5, 157), (1.5, 277), (1.5, 383), (1.25, 51), (1.25, 72), (1.25, 189), (1.25, 395), (1.125, 50), (1.125, 158), (1.125, 212), (1.125, 225), (1.125, 239), (1.125, 285), (1.125, 312), (1.125, 325), (1.125, 376), (1.125, 378), (1.0, 21), (1.0, 111), (1.0, 182), (1.0, 192), (1.0, 300), (1.0, 347), (1.0, 358), (0.75, 56), (0.75, 74), (0.75, 88), (0.75, 114), (0.75, 132), (0.75, 165), (0.75, 168), (0.75, 175), (0.75, 304), (0.75, 333), (0.75, 336), (0.75, 341), (0.75, 342), (0.75, 387), (0.625, 0), (0.625, 62), (0.625, 63), (0.625, 85), (0.625, 106), (0.625, 120), (0.625, 137), (0.625, 145), (0.625, 178), (0.625, 185), (0.625, 190), (0.625, 205), (0.625, 206), (0.625, 207), (0.625, 216), (0.625, 226), (0.625, 254), (0.625, 282), (0.625, 294), (0.625, 295), (0.625, 313), (0.625, 318), (0.625, 356), (0.625, 399), (0.5, 11), (0.5, 26), (0.5, 40), (0.5, 65), (0.5, 108), (0.5, 109), (0.5, 115), (0.5, 119), (0.5, 128), (0.5, 133), (0.5, 148), (0.5, 171), (0.5, 193), (0.5, 218), (0.5, 248), (0.5, 262), (0.5, 303), (0.5, 311), (0.5, 357), (0.5, 367), (0.5, 375), (0.5, 380), (0.5, 396), (0.41666666666666663, 10), (0.41666666666666663, 14), (0.41666666666666663, 30), (0.41666666666666663, 32), (0.41666666666666663, 47), (0.41666666666666663, 79), (0.41666666666666663, 80), (0.41666666666666663, 82), (0.41666666666666663, 97), (0.41666666666666663, 127), (0.41666666666666663, 149), (0.41666666666666663, 169), (0.41666666666666663, 177), (0.41666666666666663, 196), (0.41666666666666663, 201), (0.41666666666666663, 227), (0.41666666666666663, 233), (0.41666666666666663, 249), (0.41666666666666663, 264), (0.41666666666666663, 306), (0.41666666666666663, 321), (0.41666666666666663, 330), (0.41666666666666663, 337), (0.41666666666666663, 344), (0.375, 3), (0.375, 4), (0.375, 5), (0.375, 7), (0.375, 15), (0.375, 17), (0.375, 20), (0.375, 23), (0.375, 25), (0.375, 27), (0.375, 28), (0.375, 34), (0.375, 35), (0.375, 39), (0.375, 54), (0.375, 69), (0.375, 70), (0.375, 75), (0.375, 81), (0.375, 86), (0.375, 89), (0.375, 93), (0.375, 98), (0.375, 103), (0.375, 110), (0.375, 116), (0.375, 117), (0.375, 123), (0.375, 125), (0.375, 129), (0.375, 138), (0.375, 141), (0.375, 142), (0.375, 143), (0.375, 159), (0.375, 163), (0.375, 183), (0.375, 188), (0.375, 202), (0.375, 203), (0.375, 204), (0.375, 209), (0.375, 210), (0.375, 214), (0.375, 220), (0.375, 221), (0.375, 228), (0.375, 232), (0.375, 236), (0.375, 238), (0.375, 240), (0.375, 245), (0.375, 250), (0.375, 252), (0.375, 263), (0.375, 265), (0.375, 266), (0.375, 267), (0.375, 271), (0.375, 273), (0.375, 274), (0.375, 283), (0.375, 286), (0.375, 291), (0.375, 298), (0.375, 315), (0.375, 322), (0.375, 323), (0.375, 324), (0.375, 326), (0.375, 328), (0.375, 329), (0.375, 332), (0.375, 345), (0.375, 350), (0.375, 359), (0.375, 362), (0.375, 365), (0.375, 369), (0.375, 372), (0.375, 382), (0.375, 384), (0.375, 385), (0.375, 389), (0.375, 390), (0.375, 394), (0.375, 397), (0.29166666666666663, 6), (0.29166666666666663, 19), (0.29166666666666663, 57), (0.29166666666666663, 61), (0.29166666666666663, 64), (0.29166666666666663, 100), (0.29166666666666663, 107), (0.29166666666666663, 131), (0.29166666666666663, 135), (0.29166666666666663, 150), (0.29166666666666663, 155), (0.29166666666666663, 170), (0.29166666666666663, 172), (0.29166666666666663, 180), (0.29166666666666663, 181), (0.29166666666666663, 195), (0.29166666666666663, 208), (0.29166666666666663, 230), (0.29166666666666663, 234), (0.29166666666666663, 237), (0.29166666666666663, 241), (0.29166666666666663, 242), (0.29166666666666663, 251), (0.29166666666666663, 260), (0.29166666666666663, 261), (0.29166666666666663, 269), (0.29166666666666663, 275), (0.29166666666666663, 278), (0.29166666666666663, 280), (0.29166666666666663, 284), (0.29166666666666663, 287), (0.29166666666666663, 301), (0.29166666666666663, 319), (0.29166666666666663, 331), (0.29166666666666663, 335), (0.29166666666666663, 340), (0.29166666666666663, 343), (0.29166666666666663, 348), (0.29166666666666663, 351), (0.29166666666666663, 352), (0.29166666666666663, 360), (0.29166666666666663, 371), (0.25, 1), (0.25, 2), (0.25, 8), (0.25, 9), (0.25, 12), (0.25, 13), (0.25, 16), (0.25, 18), (0.25, 22), (0.25, 24), (0.25, 29), (0.25, 31), (0.25, 33), (0.25, 36), (0.25, 37), (0.25, 38), (0.25, 41), (0.25, 42), (0.25, 43), (0.25, 44), (0.25, 45), (0.25, 46), (0.25, 48), (0.25, 49), (0.25, 52), (0.25, 53), (0.25, 55), (0.25, 58), (0.25, 59), (0.25, 60), (0.25, 67), (0.25, 68), (0.25, 71), (0.25, 73), (0.25, 76), (0.25, 77), (0.25, 78), (0.25, 83), (0.25, 84), (0.25, 87), (0.25, 90), (0.25, 92), (0.25, 94), (0.25, 95), (0.25, 96), (0.25, 99), (0.25, 101), (0.25, 104), (0.25, 105), (0.25, 112), (0.25, 113), (0.25, 118), (0.25, 121), (0.25, 122), (0.25, 126), (0.25, 130), (0.25, 134), (0.25, 136), (0.25, 139), (0.25, 140), (0.25, 144), (0.25, 146), (0.25, 151), (0.25, 152), (0.25, 153), (0.25, 154), (0.25, 156), (0.25, 160), (0.25, 161), (0.25, 162), (0.25, 164), (0.25, 166), (0.25, 167), (0.25, 173), (0.25, 176), (0.25, 179), (0.25, 184), (0.25, 186), (0.25, 187), (0.25, 194), (0.25, 198), (0.25, 200), (0.25, 211), (0.25, 213), (0.25, 215), (0.25, 217), (0.25, 219), (0.25, 222), (0.25, 223), (0.25, 224), (0.25, 229), (0.25, 231), (0.25, 235), (0.25, 243), (0.25, 244), (0.25, 246), (0.25, 247), (0.25, 253), (0.25, 255), (0.25, 256), (0.25, 257), (0.25, 258), (0.25, 259), (0.25, 268), (0.25, 270), (0.25, 272), (0.25, 276), (0.25, 279), (0.25, 281), (0.25, 288), (0.25, 289), (0.25, 290), (0.25, 292), (0.25, 293), (0.25, 296), (0.25, 297), (0.25, 302), (0.25, 305), (0.25, 307), (0.25, 308), (0.25, 310), (0.25, 314), (0.25, 316), (0.25, 317), (0.25, 320), (0.25, 327), (0.25, 334), (0.25, 338), (0.25, 339), (0.25, 346), (0.25, 349), (0.25, 353), (0.25, 354), (0.25, 355), (0.25, 361), (0.25, 363), (0.25, 364), (0.25, 366), (0.25, 370), (0.25, 373), (0.25, 374), (0.25, 377), (0.25, 379), (0.25, 381), (0.25, 386), (0.25, 388), (0.25, 391), (0.25, 392), (0.25, 393), (0.25, 398), (0.225, 124), (0.225, 191), (0.20833333333333331, 91), (0.20833333333333331, 299), (0.16666666666666666, 66), (0.16666666666666666, 102), (0.16666666666666666, 147), (0.16666666666666666, 197), (0.16666666666666666, 199), (0.16666666666666666, 368), (0.125, 174), (0.08333333333333333, 309)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 51
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (* (+ y x) (* x x)) 2))
 nr_nodes: 10]
(CANDIDATE)[id: 72
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(* ? ?)`y`#`#`(+ ? ?)`y`#`#`2`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (* y (+ y 2)) (* y x)))
 nr_nodes: 10]
[Generation 1]
[Computing fitness]
[(1.5, 383), (1.5, 277), (1.5, 157), (1.25, 407), (1.25, 401), (1.25, 395), (1.25, 423), (1.25, 51), (1.25, 402), (1.25, 189), (1.25, 72), (1.25, 404), (1.125, 285), (1.125, 325), (1.125, 212), (1.125, 225), (1.125, 376), (1.125, 378), (1.125, 50), (1.125, 158), (1.125, 312), (1.125, 405), (1.125, 239), (1.0, 410), (1.0, 300), (1.0, 111), (1.0, 192), (1.0, 347), (1.0, 182), (1.0, 358), (1.0, 21), (0.75, 88), (0.75, 342), (0.75, 408), (0.75, 132), (0.75, 114), (0.75, 168), (0.75, 165), (0.75, 56), (0.75, 74), (0.75, 336), (0.75, 341), (0.75, 425), (0.75, 415), (0.75, 387), (0.75, 333), (0.75, 175), (0.75, 304), (0.75, 430), (0.625, 433), (0.625, 399), (0.625, 137), (0.625, 295), (0.625, 282), (0.625, 356), (0.625, 313), (0.625, 206), (0.625, 207), (0.625, 431), (0.625, 178), (0.625, 429), (0.625, 420), (0.625, 226), (0.625, 106), (0.625, 427), (0.625, 62), (0.625, 436), (0.625, 294), (0.625, 0), (0.625, 85), (0.625, 406), (0.625, 190), (0.625, 318), (0.625, 185), (0.625, 413), (0.625, 145), (0.625, 205), (0.625, 216), (0.625, 120), (0.625, 432), (0.625, 254), (0.625, 63), (0.5, 248), (0.5, 40), (0.5, 193), (0.5, 357), (0.5, 133), (0.5, 119), (0.5, 411), (0.5, 447), (0.5, 108), (0.5, 115), (0.5, 421), (0.5, 375), (0.5, 380), (0.5, 109), (0.5, 26), (0.5, 65), (0.5, 218), (0.5, 367), (0.5, 303), (0.5, 396), (0.5, 171), (0.5, 311), (0.5, 441), (0.5, 451), (0.5, 439), (0.5, 403), (0.5, 128), (0.5, 442), (0.5, 11), (0.5, 148), (0.5, 435), (0.5, 262), (0.5, 418), (0.41666666666666663, 82), (0.41666666666666663, 80), (0.41666666666666663, 306), (0.41666666666666663, 196), (0.41666666666666663, 177), (0.41666666666666663, 337), (0.41666666666666663, 249), (0.41666666666666663, 47), (0.41666666666666663, 464), (0.41666666666666663, 463), (0.41666666666666663, 465), (0.41666666666666663, 468), (0.41666666666666663, 467), (0.41666666666666663, 30), (0.41666666666666663, 169), (0.41666666666666663, 330), (0.41666666666666663, 264), (0.41666666666666663, 97), (0.41666666666666663, 400), (0.41666666666666663, 201), (0.41666666666666663, 344), (0.41666666666666663, 227), (0.41666666666666663, 233), (0.41666666666666663, 32), (0.41666666666666663, 321), (0.41666666666666663, 444), (0.41666666666666663, 14), (0.41666666666666663, 457), (0.41666666666666663, 127), (0.41666666666666663, 79), (0.41666666666666663, 149), (0.41666666666666663, 455), (0.41666666666666663, 10), (0.375, 426), (0.375, 385), (0.375, 267), (0.375, 350), (0.375, 27), (0.375, 490), (0.375, 322), (0.375, 5), (0.375, 143), (0.375, 470), (0.375, 210), (0.375, 252), (0.375, 484), (0.375, 323), (0.375, 125), (0.375, 438), (0.375, 23), (0.375, 382), (0.375, 54), (0.375, 209), (0.375, 372), (0.375, 86), (0.375, 232), (0.375, 245), (0.375, 141), (0.375, 117), (0.375, 183), (0.375, 332), (0.375, 328), (0.375, 3), (0.375, 188), (0.375, 34), (0.375, 238), (0.375, 240), (0.375, 236), (0.375, 481), (0.375, 397), (0.375, 329), (0.375, 271), (0.375, 362), (0.375, 489), (0.375, 81), (0.375, 480), (0.375, 25), (0.375, 265), (0.375, 39), (0.375, 163), (0.375, 69), (0.375, 116), (0.375, 478), (0.375, 203), (0.375, 315), (0.375, 75), (0.375, 324), (0.375, 476), (0.375, 475), (0.375, 221), (0.375, 469), (0.375, 129), (0.375, 17), (0.375, 28), (0.375, 250), (0.375, 326), (0.375, 142), (0.375, 214), (0.375, 4), (0.375, 138), (0.375, 291), (0.375, 389), (0.375, 472), (0.375, 202), (0.375, 15), (0.375, 471), (0.375, 273), (0.375, 448), (0.375, 7), (0.375, 424), (0.375, 345), (0.375, 369), (0.375, 263), (0.375, 93), (0.375, 274), (0.375, 474), (0.375, 422), (0.375, 365), (0.375, 496), (0.375, 446), (0.375, 384), (0.375, 159), (0.375, 283), (0.375, 35), (0.375, 204), (0.375, 394), (0.375, 298), (0.375, 228), (0.375, 20), (0.375, 473), (0.375, 487), (0.375, 359), (0.375, 494), (0.375, 390), (0.375, 98), (0.375, 266), (0.375, 482), (0.375, 497), (0.375, 220), (0.375, 103), (0.375, 110), (0.375, 486), (0.375, 89), (0.375, 123), (0.375, 70), (0.375, 492), (0.375, 417), (0.375, 286), (0.29166666666666663, 280), (0.29166666666666663, 462), (0.29166666666666663, 180), (0.29166666666666663, 275), (0.29166666666666663, 351), (0.29166666666666663, 237), (0.29166666666666663, 460), (0.29166666666666663, 181), (0.29166666666666663, 278), (0.29166666666666663, 440), (0.29166666666666663, 301), (0.29166666666666663, 437), (0.29166666666666663, 6), (0.29166666666666663, 100), (0.29166666666666663, 64), (0.29166666666666663, 319), (0.29166666666666663, 360), (0.29166666666666663, 19), (0.29166666666666663, 131), (0.29166666666666663, 260), (0.29166666666666663, 459), (0.29166666666666663, 251), (0.29166666666666663, 371), (0.29166666666666663, 57), (0.29166666666666663, 348), (0.29166666666666663, 335), (0.29166666666666663, 343), (0.29166666666666663, 172), (0.29166666666666663, 155), (0.29166666666666663, 331), (0.29166666666666663, 453), (0.29166666666666663, 241), (0.29166666666666663, 150), (0.29166666666666663, 242), (0.29166666666666663, 230), (0.29166666666666663, 284), (0.29166666666666663, 234), (0.29166666666666663, 352), (0.29166666666666663, 170), (0.29166666666666663, 61), (0.29166666666666663, 261), (0.29166666666666663, 287), (0.29166666666666663, 208), (0.29166666666666663, 107), (0.29166666666666663, 135), (0.29166666666666663, 195), (0.29166666666666663, 340), (0.29166666666666663, 269), (0.25, 36), (0.25, 219), (0.25, 184), (0.25, 59), (0.25, 211), (0.25, 144), (0.25, 95), (0.25, 112), (0.25, 105), (0.25, 22), (0.25, 130), (0.25, 166), (0.25, 46), (0.25, 213), (0.25, 9), (0.25, 84), (0.25, 58), (0.25, 140), (0.25, 42), (0.25, 87), (0.25, 78), (0.25, 160), (0.25, 198), (0.25, 53), (0.25, 2), (0.25, 12), (0.25, 156), (0.25, 13), (0.25, 68), (0.25, 179), (0.25, 52), (0.25, 154), (0.25, 90), (0.25, 38), (0.25, 139), (0.25, 43), (0.25, 60), (0.25, 217), (0.25, 173), (0.25, 77), (0.25, 151), (0.25, 152), (0.25, 113), (0.25, 122), (0.25, 126), (0.25, 162), (0.25, 73), (0.25, 45), (0.25, 31), (0.25, 18), (0.25, 24), (0.25, 194), (0.25, 167), (0.25, 44), (0.25, 76), (0.25, 48), (0.25, 8), (0.25, 67), (0.25, 1), (0.25, 55), (0.25, 118), (0.25, 99), (0.25, 92), (0.25, 16), (0.25, 71), (0.25, 215), (0.25, 161), (0.25, 136), (0.25, 94), (0.25, 200), (0.25, 153), (0.25, 49), (0.25, 96), (0.25, 121), (0.25, 186), (0.25, 134), (0.25, 37), (0.25, 33), (0.25, 83), (0.25, 187), (0.25, 104), (0.25, 146), (0.25, 176), (0.25, 164), (0.25, 41), (0.25, 101), (0.25, 29), (0.16666666666666666, 450), (0.16666666666666666, 458)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 407
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`y`#`#`(* ? ?)`x`#`#`2`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x y) (* x 2)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 401
 encoding: (defun my_func (x y) ?)`(+ ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
[Generation 2]
[Computing fitness]
[(1.5, 277), (1.5, 383), (1.5, 500), (1.5, 157), (1.5, 498), (1.25, 533), (1.25, 407), (1.25, 395), (1.25, 401), (1.25, 502), (1.25, 72), (1.25, 189), (1.25, 515), (1.25, 510), (1.25, 51), (1.25, 557), (1.25, 423), (1.25, 404), (1.25, 402), (1.125, 504), (1.125, 239), (1.125, 548), (1.125, 508), (1.125, 528), (1.125, 50), (1.125, 376), (1.125, 285), (1.125, 499), (1.125, 563), (1.125, 158), (1.125, 378), (1.125, 225), (1.125, 325), (1.125, 546), (1.125, 312), (1.125, 405), (1.125, 212), (1.0, 519), (1.0, 358), (1.0, 192), (1.0, 516), (1.0, 300), (1.0, 182), (1.0, 21), (1.0, 410), (1.0, 111), (1.0, 347), (1.0, 536), (0.875, 525), (0.75, 333), (0.75, 425), (0.75, 165), (0.75, 114), (0.75, 526), (0.75, 534), (0.75, 521), (0.75, 304), (0.75, 132), (0.75, 387), (0.75, 56), (0.75, 88), (0.75, 74), (0.75, 342), (0.75, 341), (0.75, 527), (0.75, 175), (0.75, 415), (0.75, 336), (0.75, 408), (0.75, 168), (0.75, 430), (0.75, 569), (0.625, 206), (0.625, 313), (0.625, 0), (0.625, 254), (0.625, 436), (0.625, 530), (0.625, 120), (0.625, 294), (0.625, 505), (0.625, 137), (0.625, 413), (0.625, 540), (0.625, 543), (0.625, 517), (0.625, 513), (0.625, 190), (0.625, 295), (0.625, 62), (0.625, 226), (0.625, 318), (0.625, 535), (0.625, 63), (0.625, 542), (0.625, 433), (0.625, 145), (0.625, 356), (0.625, 282), (0.625, 399), (0.625, 178), (0.625, 185), (0.625, 545), (0.625, 406), (0.625, 216), (0.625, 429), (0.625, 518), (0.625, 205), (0.625, 106), (0.625, 559), (0.625, 431), (0.625, 420), (0.625, 85), (0.625, 532), (0.625, 207), (0.625, 432), (0.625, 427), (0.5, 357), (0.5, 411), (0.5, 396), (0.5, 441), (0.5, 148), (0.5, 248), (0.5, 11), (0.5, 418), (0.5, 537), (0.5, 520), (0.5, 509), (0.5, 171), (0.5, 451), (0.5, 439), (0.5, 562), (0.5, 539), (0.5, 375), (0.5, 367), (0.5, 26), (0.5, 262), (0.5, 218), (0.5, 115), (0.5, 435), (0.5, 193), (0.5, 303), (0.5, 108), (0.5, 442), (0.5, 311), (0.5, 531), (0.5, 380), (0.5, 554), (0.5, 128), (0.5, 65), (0.5, 547), (0.5, 553), (0.5, 109), (0.5, 40), (0.5, 421), (0.5, 447), (0.5, 403), (0.5, 133), (0.5, 551), (0.5, 119), (0.41666666666666663, 14), (0.41666666666666663, 444), (0.41666666666666663, 467), (0.41666666666666663, 149), (0.41666666666666663, 572), (0.41666666666666663, 579), (0.41666666666666663, 581), (0.41666666666666663, 233), (0.41666666666666663, 127), (0.41666666666666663, 169), (0.41666666666666663, 97), (0.41666666666666663, 47), (0.41666666666666663, 80), (0.41666666666666663, 455), (0.41666666666666663, 463), (0.41666666666666663, 201), (0.41666666666666663, 337), (0.41666666666666663, 330), (0.41666666666666663, 32), (0.41666666666666663, 82), (0.41666666666666663, 400), (0.41666666666666663, 30), (0.41666666666666663, 556), (0.41666666666666663, 584), (0.41666666666666663, 227), (0.41666666666666663, 344), (0.41666666666666663, 79), (0.41666666666666663, 468), (0.41666666666666663, 464), (0.41666666666666663, 512), (0.41666666666666663, 570), (0.41666666666666663, 177), (0.41666666666666663, 514), (0.41666666666666663, 249), (0.41666666666666663, 585), (0.41666666666666663, 321), (0.41666666666666663, 306), (0.41666666666666663, 583), (0.41666666666666663, 10), (0.41666666666666663, 577), (0.41666666666666663, 587), (0.41666666666666663, 457), (0.41666666666666663, 550), (0.41666666666666663, 264), (0.41666666666666663, 574), (0.41666666666666663, 588), (0.41666666666666663, 465), (0.41666666666666663, 564), (0.41666666666666663, 196), (0.375, 385), (0.375, 417), (0.375, 474), (0.375, 163), (0.375, 291), (0.375, 365), (0.375, 470), (0.375, 507), (0.375, 359), (0.375, 23), (0.375, 54), (0.375, 323), (0.375, 110), (0.375, 15), (0.375, 236), (0.375, 484), (0.375, 5), (0.375, 446), (0.375, 98), (0.375, 438), (0.375, 332), (0.375, 221), (0.375, 389), (0.375, 473), (0.375, 345), (0.375, 20), (0.375, 266), (0.375, 350), (0.375, 209), (0.375, 362), (0.375, 141), (0.375, 524), (0.375, 202), (0.375, 250), (0.375, 369), (0.375, 426), (0.375, 382), (0.375, 142), (0.375, 566), (0.375, 28), (0.375, 274), (0.375, 183), (0.375, 220), (0.375, 397), (0.375, 298), (0.375, 228), (0.375, 27), (0.375, 103), (0.375, 324), (0.375, 138), (0.375, 476), (0.375, 329), (0.375, 480), (0.375, 265), (0.375, 271), (0.375, 232), (0.375, 478), (0.375, 35), (0.375, 3), (0.375, 7), (0.375, 492), (0.375, 424), (0.375, 263), (0.375, 489), (0.375, 203), (0.375, 496), (0.375, 75), (0.375, 328), (0.375, 490), (0.375, 93), (0.375, 86), (0.375, 214), (0.375, 322), (0.375, 315), (0.375, 129), (0.375, 394), (0.375, 475), (0.375, 4), (0.375, 482), (0.375, 204), (0.375, 472), (0.375, 592), (0.375, 188), (0.375, 123), (0.375, 70), (0.375, 69), (0.375, 494), (0.375, 17), (0.375, 283), (0.375, 422), (0.375, 273), (0.375, 240), (0.375, 481), (0.375, 245), (0.375, 34), (0.375, 469), (0.375, 384), (0.375, 267), (0.375, 238), (0.375, 252), (0.375, 81), (0.375, 210), (0.375, 25), (0.375, 486), (0.375, 487), (0.375, 143), (0.375, 116), (0.375, 448), (0.375, 471), (0.375, 159), (0.375, 390), (0.375, 117), (0.375, 125), (0.375, 39), (0.375, 372), (0.375, 326), (0.375, 497), (0.375, 89), (0.375, 286), (0.29166666666666663, 460), (0.29166666666666663, 578), (0.29166666666666663, 459), (0.29166666666666663, 237), (0.29166666666666663, 241), (0.29166666666666663, 170), (0.29166666666666663, 100), (0.29166666666666663, 335), (0.29166666666666663, 234), (0.29166666666666663, 575), (0.29166666666666663, 352), (0.29166666666666663, 19), (0.29166666666666663, 331), (0.29166666666666663, 340), (0.29166666666666663, 251), (0.29166666666666663, 590), (0.29166666666666663, 348), (0.29166666666666663, 208), (0.29166666666666663, 278), (0.29166666666666663, 242), (0.29166666666666663, 360), (0.29166666666666663, 275), (0.29166666666666663, 576), (0.29166666666666663, 150), (0.29166666666666663, 181), (0.29166666666666663, 301), (0.29166666666666663, 440), (0.29166666666666663, 343), (0.29166666666666663, 64), (0.29166666666666663, 155), (0.29166666666666663, 230), (0.29166666666666663, 351), (0.29166666666666663, 319), (0.29166666666666663, 195), (0.29166666666666663, 371), (0.29166666666666663, 453), (0.29166666666666663, 135), (0.29166666666666663, 269), (0.29166666666666663, 107), (0.29166666666666663, 287), (0.29166666666666663, 568), (0.29166666666666663, 6), (0.29166666666666663, 261), (0.29166666666666663, 180), (0.29166666666666663, 260), (0.29166666666666663, 437), (0.29166666666666663, 61), (0.29166666666666663, 561), (0.29166666666666663, 131), (0.29166666666666663, 57), (0.29166666666666663, 571), (0.29166666666666663, 172), (0.29166666666666663, 462), (0.29166666666666663, 280), (0.29166666666666663, 284), (0.25, 22), (0.25, 184), (0.25, 523), (0.25, 130), (0.25, 112), (0.25, 144), (0.25, 213), (0.25, 46), (0.25, 95), (0.25, 105), (0.25, 166), (0.25, 219), (0.25, 211), (0.25, 36), (0.25, 59), (0.16666666666666666, 558), (0.16666666666666666, 529)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
[Generation 3]
[Computing fitness]
[(1.5, 277), (1.5, 498), (1.5, 500), (1.5, 157), (1.5, 383), (1.375, 646), (1.25, 395), (1.25, 402), (1.25, 423), (1.25, 640), (1.25, 401), (1.25, 510), (1.25, 557), (1.25, 670), (1.25, 189), (1.25, 502), (1.25, 404), (1.25, 533), (1.25, 72), (1.25, 407), (1.25, 51), (1.25, 617), (1.25, 515), (1.25, 657), (1.25, 598), (1.125, 662), (1.125, 548), (1.125, 621), (1.125, 605), (1.125, 504), (1.125, 642), (1.125, 645), (1.125, 239), (1.125, 50), (1.125, 604), (1.125, 376), (1.125, 499), (1.125, 378), (1.125, 630), (1.125, 325), (1.125, 609), (1.125, 312), (1.125, 508), (1.125, 563), (1.125, 212), (1.125, 656), (1.125, 158), (1.125, 285), (1.125, 405), (1.125, 225), (1.125, 613), (1.125, 647), (1.125, 546), (1.125, 528), (1.125, 658), (1.125, 610), (1.0, 615), (1.0, 519), (1.0, 358), (1.0, 192), (1.0, 21), (1.0, 300), (1.0, 536), (1.0, 182), (1.0, 678), (1.0, 347), (1.0, 516), (1.0, 410), (1.0, 111), (0.875, 627), (0.875, 668), (0.875, 602), (0.875, 622), (0.875, 525), (0.875, 618), (0.75, 114), (0.75, 132), (0.75, 633), (0.75, 639), (0.75, 534), (0.75, 430), (0.75, 304), (0.75, 342), (0.75, 676), (0.75, 521), (0.75, 74), (0.75, 425), (0.75, 333), (0.75, 387), (0.75, 341), (0.75, 624), (0.75, 336), (0.75, 175), (0.75, 569), (0.75, 603), (0.75, 601), (0.75, 681), (0.75, 415), (0.75, 56), (0.75, 165), (0.75, 654), (0.75, 634), (0.75, 168), (0.75, 88), (0.75, 625), (0.75, 408), (0.75, 527), (0.75, 664), (0.75, 619), (0.75, 526), (0.625, 120), (0.625, 649), (0.625, 595), (0.625, 629), (0.625, 530), (0.625, 206), (0.625, 254), (0.625, 653), (0.625, 413), (0.625, 636), (0.625, 178), (0.625, 429), (0.625, 0), (0.625, 207), (0.625, 399), (0.625, 406), (0.625, 545), (0.625, 205), (0.625, 190), (0.625, 559), (0.625, 666), (0.625, 106), (0.625, 295), (0.625, 672), (0.625, 63), (0.625, 294), (0.625, 644), (0.625, 631), (0.625, 659), (0.625, 513), (0.625, 540), (0.625, 356), (0.625, 611), (0.625, 532), (0.625, 62), (0.625, 543), (0.625, 427), (0.625, 517), (0.625, 85), (0.625, 313), (0.625, 137), (0.625, 216), (0.625, 436), (0.625, 626), (0.625, 318), (0.625, 505), (0.625, 663), (0.625, 542), (0.625, 535), (0.625, 660), (0.625, 433), (0.625, 431), (0.625, 282), (0.625, 518), (0.625, 680), (0.625, 226), (0.625, 661), (0.625, 145), (0.625, 432), (0.625, 420), (0.625, 671), (0.625, 185), (0.5, 133), (0.5, 396), (0.5, 109), (0.5, 551), (0.5, 553), (0.5, 367), (0.5, 679), (0.5, 650), (0.5, 593), (0.5, 520), (0.5, 539), (0.5, 303), (0.5, 442), (0.5, 218), (0.5, 193), (0.5, 11), (0.5, 547), (0.5, 115), (0.5, 128), (0.5, 262), (0.5, 119), (0.5, 65), (0.5, 411), (0.5, 441), (0.5, 439), (0.5, 311), (0.5, 171), (0.5, 357), (0.5, 375), (0.5, 509), (0.5, 40), (0.5, 418), (0.5, 531), (0.5, 403), (0.5, 447), (0.5, 421), (0.5, 108), (0.5, 673), (0.5, 537), (0.5, 655), (0.5, 380), (0.5, 435), (0.5, 554), (0.5, 148), (0.5, 677), (0.5, 651), (0.5, 26), (0.5, 562), (0.5, 451), (0.5, 248), (0.41666666666666663, 306), (0.41666666666666663, 444), (0.41666666666666663, 465), (0.41666666666666663, 80), (0.41666666666666663, 620), (0.41666666666666663, 149), (0.41666666666666663, 330), (0.41666666666666663, 570), (0.41666666666666663, 584), (0.41666666666666663, 47), (0.41666666666666663, 556), (0.41666666666666663, 583), (0.41666666666666663, 464), (0.41666666666666663, 594), (0.41666666666666663, 177), (0.41666666666666663, 577), (0.41666666666666663, 321), (0.41666666666666663, 227), (0.41666666666666663, 550), (0.41666666666666663, 82), (0.41666666666666663, 587), (0.41666666666666663, 579), (0.41666666666666663, 14), (0.41666666666666663, 249), (0.41666666666666663, 463), (0.41666666666666663, 79), (0.41666666666666663, 32), (0.41666666666666663, 455), (0.41666666666666663, 233), (0.41666666666666663, 585), (0.41666666666666663, 468), (0.41666666666666663, 581), (0.41666666666666663, 30), (0.41666666666666663, 337), (0.41666666666666663, 467), (0.41666666666666663, 10), (0.41666666666666663, 201), (0.41666666666666663, 264), (0.41666666666666663, 127), (0.41666666666666663, 564), (0.41666666666666663, 588), (0.41666666666666663, 169), (0.41666666666666663, 572), (0.41666666666666663, 97), (0.41666666666666663, 400), (0.41666666666666663, 344), (0.41666666666666663, 514), (0.41666666666666663, 600), (0.41666666666666663, 196), (0.41666666666666663, 457), (0.41666666666666663, 512), (0.41666666666666663, 574), (0.375, 252), (0.375, 20), (0.375, 69), (0.375, 250), (0.375, 5), (0.375, 23), (0.375, 328), (0.375, 487), (0.375, 362), (0.375, 652), (0.375, 232), (0.375, 566), (0.375, 474), (0.375, 422), (0.375, 448), (0.375, 424), (0.375, 271), (0.375, 54), (0.375, 116), (0.375, 475), (0.375, 471), (0.375, 123), (0.375, 315), (0.375, 25), (0.375, 70), (0.375, 228), (0.375, 470), (0.375, 210), (0.375, 263), (0.375, 209), (0.375, 492), (0.375, 34), (0.375, 236), (0.375, 138), (0.375, 322), (0.375, 478), (0.375, 203), (0.375, 103), (0.375, 472), (0.375, 35), (0.375, 240), (0.375, 637), (0.375, 28), (0.375, 476), (0.375, 323), (0.375, 163), (0.375, 266), (0.375, 291), (0.375, 143), (0.375, 188), (0.375, 345), (0.375, 141), (0.375, 369), (0.375, 142), (0.375, 481), (0.375, 446), (0.375, 350), (0.375, 129), (0.375, 86), (0.375, 389), (0.375, 17), (0.375, 382), (0.375, 394), (0.375, 486), (0.375, 329), (0.375, 245), (0.375, 417), (0.375, 238), (0.375, 484), (0.375, 397), (0.375, 267), (0.375, 39), (0.375, 283), (0.375, 332), (0.375, 7), (0.375, 607), (0.375, 3), (0.375, 98), (0.375, 384), (0.375, 125), (0.375, 15), (0.375, 469), (0.375, 674), (0.375, 117), (0.375, 221), (0.375, 496), (0.375, 324), (0.375, 473), (0.375, 75), (0.375, 4), (0.375, 372), (0.375, 490), (0.375, 390), (0.375, 359), (0.375, 426), (0.375, 183), (0.375, 365), (0.375, 273), (0.375, 110), (0.375, 265), (0.375, 326), (0.375, 274), (0.375, 524), (0.375, 93), (0.375, 489), (0.375, 480), (0.375, 204), (0.375, 482), (0.375, 27), (0.375, 214), (0.375, 507), (0.375, 220), (0.375, 385), (0.375, 298), (0.375, 202), (0.375, 592), (0.375, 81), (0.375, 438), (0.375, 494), (0.375, 159), (0.29166666666666663, 614), (0.29166666666666663, 667), (0.29166666666666663, 606), (0.29166666666666663, 597), (0.25, 648), (0.125, 675)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
[Generation 4]
[Computing fitness]
[(1.5, 682), (1.5, 157), (1.5, 277), (1.5, 383), (1.5, 500), (1.5, 498), (1.375, 646), (1.25, 395), (1.25, 502), (1.25, 72), (1.25, 598), (1.25, 617), (1.25, 401), (1.25, 533), (1.25, 640), (1.25, 51), (1.25, 670), (1.25, 510), (1.25, 657), (1.25, 407), (1.25, 402), (1.25, 189), (1.25, 515), (1.25, 557), (1.25, 690), (1.25, 404), (1.25, 423), (1.125, 499), (1.125, 613), (1.125, 658), (1.125, 740), (1.125, 546), (1.125, 718), (1.125, 621), (1.125, 376), (1.125, 656), (1.125, 225), (1.125, 508), (1.125, 724), (1.125, 563), (1.125, 312), (1.125, 761), (1.125, 158), (1.125, 405), (1.125, 528), (1.125, 50), (1.125, 630), (1.125, 239), (1.125, 645), (1.125, 662), (1.125, 212), (1.125, 610), (1.125, 378), (1.125, 709), (1.125, 692), (1.125, 647), (1.125, 604), (1.125, 717), (1.125, 285), (1.125, 325), (1.125, 714), (1.125, 642), (1.125, 605), (1.125, 609), (1.125, 504), (1.125, 548), (1.0, 519), (1.0, 410), (1.0, 111), (1.0, 678), (1.0, 721), (1.0, 687), (1.0, 358), (1.0, 763), (1.0, 300), (1.0, 192), (1.0, 516), (1.0, 347), (1.0, 21), (1.0, 536), (1.0, 733), (1.0, 723), (1.0, 615), (1.0, 719), (1.0, 182), (1.0, 755), (0.875, 627), (0.875, 602), (0.875, 622), (0.875, 739), (0.875, 727), (0.875, 728), (0.875, 668), (0.875, 618), (0.875, 525), (0.75, 773), (0.75, 749), (0.75, 304), (0.75, 734), (0.75, 745), (0.75, 603), (0.75, 168), (0.75, 730), (0.75, 165), (0.75, 415), (0.75, 634), (0.75, 624), (0.75, 534), (0.75, 387), (0.75, 736), (0.75, 681), (0.75, 742), (0.75, 527), (0.75, 746), (0.75, 654), (0.75, 744), (0.75, 408), (0.75, 732), (0.75, 132), (0.75, 333), (0.75, 676), (0.75, 175), (0.75, 526), (0.75, 88), (0.75, 56), (0.75, 688), (0.75, 114), (0.75, 633), (0.75, 569), (0.75, 639), (0.75, 664), (0.75, 698), (0.75, 601), (0.75, 74), (0.75, 705), (0.75, 521), (0.75, 738), (0.75, 625), (0.75, 430), (0.75, 342), (0.75, 729), (0.75, 336), (0.75, 425), (0.75, 341), (0.75, 715), (0.75, 619), (0.625, 535), (0.625, 190), (0.625, 427), (0.625, 85), (0.625, 185), (0.625, 294), (0.625, 517), (0.625, 178), (0.625, 433), (0.625, 530), (0.625, 693), (0.625, 671), (0.625, 695), (0.625, 532), (0.625, 636), (0.625, 649), (0.625, 145), (0.625, 62), (0.625, 545), (0.625, 313), (0.625, 559), (0.625, 254), (0.625, 295), (0.625, 776), (0.625, 543), (0.625, 0), (0.625, 318), (0.625, 768), (0.625, 436), (0.625, 356), (0.625, 542), (0.625, 226), (0.625, 756), (0.625, 429), (0.625, 778), (0.625, 120), (0.625, 505), (0.625, 672), (0.625, 661), (0.625, 431), (0.625, 518), (0.625, 540), (0.625, 631), (0.625, 420), (0.625, 713), (0.625, 706), (0.625, 660), (0.625, 653), (0.625, 750), (0.625, 611), (0.625, 207), (0.625, 63), (0.625, 137), (0.625, 216), (0.625, 206), (0.625, 659), (0.625, 753), (0.625, 413), (0.625, 595), (0.625, 731), (0.625, 406), (0.625, 663), (0.625, 666), (0.625, 689), (0.625, 205), (0.625, 513), (0.625, 680), (0.625, 685), (0.625, 626), (0.625, 432), (0.625, 691), (0.625, 106), (0.625, 282), (0.625, 644), (0.625, 629), (0.625, 399), (0.5, 722), (0.5, 421), (0.5, 554), (0.5, 748), (0.5, 108), (0.5, 119), (0.5, 40), (0.5, 762), (0.5, 531), (0.5, 441), (0.5, 133), (0.5, 547), (0.5, 677), (0.5, 708), (0.5, 551), (0.5, 651), (0.5, 447), (0.5, 772), (0.5, 128), (0.5, 367), (0.5, 248), (0.5, 403), (0.5, 751), (0.5, 539), (0.5, 303), (0.5, 148), (0.5, 720), (0.5, 435), (0.5, 562), (0.5, 442), (0.5, 650), (0.5, 193), (0.5, 754), (0.5, 757), (0.5, 262), (0.5, 218), (0.5, 679), (0.5, 357), (0.5, 451), (0.5, 655), (0.5, 115), (0.5, 171), (0.5, 411), (0.5, 673), (0.5, 396), (0.5, 65), (0.5, 380), (0.5, 11), (0.5, 520), (0.5, 109), (0.5, 311), (0.5, 735), (0.5, 375), (0.5, 26), (0.5, 537), (0.5, 553), (0.5, 700), (0.5, 509), (0.5, 593), (0.5, 418), (0.5, 439), (0.5, 766), (0.41666666666666663, 594), (0.41666666666666663, 583), (0.41666666666666663, 30), (0.41666666666666663, 556), (0.41666666666666663, 127), (0.41666666666666663, 600), (0.41666666666666663, 10), (0.41666666666666663, 227), (0.41666666666666663, 400), (0.41666666666666663, 337), (0.41666666666666663, 465), (0.41666666666666663, 683), (0.41666666666666663, 47), (0.41666666666666663, 444), (0.41666666666666663, 169), (0.41666666666666663, 264), (0.41666666666666663, 306), (0.41666666666666663, 759), (0.41666666666666663, 587), (0.41666666666666663, 80), (0.41666666666666663, 514), (0.41666666666666663, 196), (0.41666666666666663, 588), (0.41666666666666663, 468), (0.41666666666666663, 249), (0.41666666666666663, 201), (0.41666666666666663, 702), (0.41666666666666663, 579), (0.41666666666666663, 14), (0.41666666666666663, 584), (0.41666666666666663, 79), (0.41666666666666663, 550), (0.41666666666666663, 457), (0.41666666666666663, 455), (0.41666666666666663, 512), (0.41666666666666663, 233), (0.41666666666666663, 581), (0.41666666666666663, 330), (0.41666666666666663, 467), (0.41666666666666663, 572), (0.41666666666666663, 564), (0.41666666666666663, 574), (0.41666666666666663, 32), (0.41666666666666663, 344), (0.41666666666666663, 177), (0.41666666666666663, 463), (0.41666666666666663, 620), (0.41666666666666663, 570), (0.41666666666666663, 321), (0.41666666666666663, 149), (0.41666666666666663, 97), (0.41666666666666663, 577), (0.41666666666666663, 464), (0.41666666666666663, 585), (0.41666666666666663, 82), (0.375, 470), (0.375, 424), (0.375, 770), (0.375, 726), (0.375, 328), (0.375, 471), (0.375, 322), (0.375, 203), (0.375, 478), (0.375, 210), (0.375, 684), (0.375, 345), (0.375, 250), (0.375, 20), (0.375, 712), (0.375, 476), (0.375, 703), (0.375, 103), (0.375, 188), (0.375, 5), (0.375, 240), (0.375, 637), (0.375, 163), (0.375, 315), (0.375, 472), (0.375, 143), (0.375, 228), (0.375, 492), (0.375, 737), (0.375, 271), (0.375, 209), (0.375, 774), (0.375, 422), (0.375, 25), (0.375, 652), (0.375, 566), (0.375, 291), (0.375, 28), (0.375, 232), (0.375, 448), (0.375, 323), (0.375, 70), (0.375, 263), (0.375, 236), (0.375, 69), (0.375, 116), (0.375, 34), (0.375, 138), (0.375, 266), (0.375, 123), (0.375, 697), (0.375, 474), (0.375, 23), (0.375, 362), (0.375, 35), (0.375, 710), (0.375, 252), (0.375, 54), (0.375, 475), (0.375, 487), (0.29166666666666663, 765)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
[Generation 5]
[Computing fitness]
[(1.5, 682), (1.5, 277), (1.5, 500), (1.5, 383), (1.5, 498), (1.5, 869), (1.5, 157), (1.5, 780), (1.375, 646), (1.375, 859), (1.25, 789), (1.25, 401), (1.25, 407), (1.25, 51), (1.25, 791), (1.25, 670), (1.25, 510), (1.25, 515), (1.25, 657), (1.25, 794), (1.25, 812), (1.25, 838), (1.25, 598), (1.25, 189), (1.25, 423), (1.25, 72), (1.25, 402), (1.25, 617), (1.25, 690), (1.25, 502), (1.25, 863), (1.25, 813), (1.25, 801), (1.25, 395), (1.25, 792), (1.25, 533), (1.25, 404), (1.25, 557), (1.25, 640), (1.125, 799), (1.125, 563), (1.125, 797), (1.125, 642), (1.125, 528), (1.125, 158), (1.125, 610), (1.125, 740), (1.125, 785), (1.125, 662), (1.125, 802), (1.125, 225), (1.125, 508), (1.125, 656), (1.125, 807), (1.125, 800), (1.125, 604), (1.125, 504), (1.125, 239), (1.125, 376), (1.125, 212), (1.125, 787), (1.125, 709), (1.125, 795), (1.125, 50), (1.125, 717), (1.125, 645), (1.125, 761), (1.125, 605), (1.125, 405), (1.125, 325), (1.125, 658), (1.125, 724), (1.125, 819), (1.125, 692), (1.125, 609), (1.125, 285), (1.125, 613), (1.125, 806), (1.125, 714), (1.125, 647), (1.125, 546), (1.125, 312), (1.125, 718), (1.125, 630), (1.125, 548), (1.125, 378), (1.125, 499), (1.125, 621), (1.0, 687), (1.0, 825), (1.0, 721), (1.0, 111), (1.0, 516), (1.0, 519), (1.0, 719), (1.0, 783), (1.0, 192), (1.0, 536), (1.0, 21), (1.0, 410), (1.0, 358), (1.0, 733), (1.0, 763), (1.0, 827), (1.0, 182), (1.0, 615), (1.0, 347), (1.0, 300), (1.0, 834), (1.0, 824), (1.0, 678), (1.0, 755), (1.0, 723), (1.0, 828), (0.875, 525), (0.875, 739), (0.875, 668), (0.875, 728), (0.875, 873), (0.875, 727), (0.875, 627), (0.875, 837), (0.875, 622), (0.875, 602), (0.875, 841), (0.875, 840), (0.875, 618), (0.75, 848), (0.75, 732), (0.75, 745), (0.75, 114), (0.75, 624), (0.75, 796), (0.75, 408), (0.75, 749), (0.75, 333), (0.75, 860), (0.75, 729), (0.75, 705), (0.75, 744), (0.75, 868), (0.75, 526), (0.75, 625), (0.75, 872), (0.75, 835), (0.75, 861), (0.75, 844), (0.75, 165), (0.75, 773), (0.75, 843), (0.75, 619), (0.75, 175), (0.75, 603), (0.75, 341), (0.75, 871), (0.75, 688), (0.75, 742), (0.75, 601), (0.75, 634), (0.75, 853), (0.75, 676), (0.75, 336), (0.75, 342), (0.75, 633), (0.75, 738), (0.75, 521), (0.75, 74), (0.75, 88), (0.75, 425), (0.75, 698), (0.75, 569), (0.75, 132), (0.75, 736), (0.75, 387), (0.75, 639), (0.75, 415), (0.75, 534), (0.75, 734), (0.75, 56), (0.75, 654), (0.75, 430), (0.75, 681), (0.75, 527), (0.75, 874), (0.75, 664), (0.75, 168), (0.75, 730), (0.75, 746), (0.75, 850), (0.75, 858), (0.75, 715), (0.75, 870), (0.75, 304), (0.625, 62), (0.625, 805), (0.625, 518), (0.625, 753), (0.625, 862), (0.625, 653), (0.625, 530), (0.625, 680), (0.625, 713), (0.625, 595), (0.625, 205), (0.625, 295), (0.625, 846), (0.625, 433), (0.625, 145), (0.625, 313), (0.625, 790), (0.625, 776), (0.625, 406), (0.625, 691), (0.625, 663), (0.625, 535), (0.625, 206), (0.625, 822), (0.625, 185), (0.625, 226), (0.625, 706), (0.625, 631), (0.625, 282), (0.625, 829), (0.625, 659), (0.625, 63), (0.625, 693), (0.625, 399), (0.625, 532), (0.625, 661), (0.625, 731), (0.625, 178), (0.625, 866), (0.625, 649), (0.625, 629), (0.625, 413), (0.625, 636), (0.625, 432), (0.625, 542), (0.625, 420), (0.625, 207), (0.625, 626), (0.625, 823), (0.625, 190), (0.625, 695), (0.625, 644), (0.625, 85), (0.625, 877), (0.625, 666), (0.625, 540), (0.625, 517), (0.625, 803), (0.625, 429), (0.625, 689), (0.625, 505), (0.625, 0), (0.625, 768), (0.625, 671), (0.625, 660), (0.625, 294), (0.625, 254), (0.625, 685), (0.625, 672), (0.625, 611), (0.625, 436), (0.625, 106), (0.625, 427), (0.625, 318), (0.625, 513), (0.625, 356), (0.625, 559), (0.625, 778), (0.625, 756), (0.625, 431), (0.625, 545), (0.625, 137), (0.625, 543), (0.625, 120), (0.625, 750), (0.625, 216), (0.5, 815), (0.5, 810), (0.5, 380), (0.5, 403), (0.5, 757), (0.5, 547), (0.5, 193), (0.5, 539), (0.5, 650), (0.5, 593), (0.5, 148), (0.5, 115), (0.5, 375), (0.5, 677), (0.5, 821), (0.5, 262), (0.5, 439), (0.5, 303), (0.5, 673), (0.5, 551), (0.5, 26), (0.5, 553), (0.5, 722), (0.5, 451), (0.5, 554), (0.5, 441), (0.5, 708), (0.5, 855), (0.5, 766), (0.5, 396), (0.5, 357), (0.5, 754), (0.5, 40), (0.5, 509), (0.5, 839), (0.5, 735), (0.5, 442), (0.5, 171), (0.5, 447), (0.5, 65), (0.5, 248), (0.5, 367), (0.5, 751), (0.5, 108), (0.5, 562), (0.5, 720), (0.5, 679), (0.5, 421), (0.5, 772), (0.5, 875), (0.5, 311), (0.5, 531), (0.5, 700), (0.5, 537), (0.5, 133), (0.5, 109), (0.5, 11), (0.5, 762), (0.5, 651), (0.5, 435), (0.5, 218), (0.5, 411), (0.5, 748), (0.5, 119), (0.5, 418), (0.5, 128), (0.5, 520), (0.5, 655), (0.41666666666666663, 588), (0.41666666666666663, 330), (0.41666666666666663, 306), (0.41666666666666663, 514), (0.41666666666666663, 465), (0.41666666666666663, 227), (0.41666666666666663, 467), (0.41666666666666663, 600), (0.41666666666666663, 572), (0.41666666666666663, 583), (0.41666666666666663, 80), (0.41666666666666663, 457), (0.41666666666666663, 264), (0.41666666666666663, 14), (0.41666666666666663, 584), (0.41666666666666663, 233), (0.41666666666666663, 169), (0.41666666666666663, 337), (0.41666666666666663, 127), (0.41666666666666663, 468), (0.41666666666666663, 249), (0.41666666666666663, 759), (0.41666666666666663, 587), (0.41666666666666663, 556), (0.41666666666666663, 512), (0.41666666666666663, 683), (0.41666666666666663, 579), (0.41666666666666663, 47), (0.41666666666666663, 581), (0.41666666666666663, 400), (0.41666666666666663, 550), (0.41666666666666663, 201), (0.41666666666666663, 444), (0.41666666666666663, 779), (0.41666666666666663, 564), (0.41666666666666663, 594), (0.41666666666666663, 455), (0.41666666666666663, 702), (0.41666666666666663, 196), (0.41666666666666663, 79), (0.41666666666666663, 10), (0.41666666666666663, 30), (0.375, 820), (0.375, 831), (0.375, 864), (0.375, 833), (0.29166666666666663, 782), (0.29166666666666663, 817), (0.29166666666666663, 857), (0.29166666666666663, 852), (0.29166666666666663, 830), (0.25, 808), (0.25, 876)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 498
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
[Generation 6]
[Computing fitness]
[(1.625, 895), (1.5, 878), (1.5, 157), (1.5, 948), (1.5, 277), (1.5, 915), (1.5, 780), (1.5, 869), (1.5, 498), (1.5, 383), (1.5, 682), (1.5, 500), (1.375, 859), (1.375, 886), (1.375, 646), (1.25, 640), (1.25, 892), (1.25, 898), (1.25, 402), (1.25, 423), (1.25, 51), (1.25, 407), (1.25, 791), (1.25, 670), (1.25, 401), (1.25, 657), (1.25, 907), (1.25, 510), (1.25, 515), (1.25, 792), (1.25, 914), (1.25, 598), (1.25, 533), (1.25, 905), (1.25, 404), (1.25, 863), (1.25, 502), (1.25, 557), (1.25, 801), (1.25, 690), (1.25, 789), (1.25, 883), (1.25, 72), (1.25, 813), (1.25, 617), (1.25, 812), (1.25, 896), (1.25, 838), (1.25, 794), (1.25, 189), (1.25, 395), (1.25, 887), (1.125, 908), (1.125, 658), (1.125, 604), (1.125, 405), (1.125, 546), (1.125, 740), (1.125, 630), (1.125, 797), (1.125, 718), (1.125, 613), (1.125, 563), (1.125, 225), (1.125, 239), (1.125, 924), (1.125, 802), (1.125, 158), (1.125, 937), (1.125, 508), (1.125, 943), (1.125, 890), (1.125, 717), (1.125, 692), (1.125, 528), (1.125, 819), (1.125, 325), (1.125, 378), (1.125, 761), (1.125, 709), (1.125, 885), (1.125, 806), (1.125, 918), (1.125, 647), (1.125, 787), (1.125, 548), (1.125, 879), (1.125, 904), (1.125, 504), (1.125, 621), (1.125, 642), (1.125, 807), (1.125, 911), (1.125, 285), (1.125, 499), (1.125, 930), (1.125, 50), (1.125, 800), (1.125, 724), (1.125, 656), (1.125, 312), (1.125, 965), (1.125, 714), (1.125, 917), (1.125, 605), (1.125, 785), (1.125, 662), (1.125, 925), (1.125, 376), (1.125, 645), (1.125, 609), (1.125, 610), (1.125, 795), (1.125, 212), (1.125, 799), (1.0, 300), (1.0, 519), (1.0, 733), (1.0, 347), (1.0, 723), (1.0, 824), (1.0, 827), (1.0, 763), (1.0, 825), (1.0, 928), (1.0, 536), (1.0, 944), (1.0, 111), (1.0, 947), (1.0, 678), (1.0, 783), (1.0, 192), (1.0, 755), (1.0, 687), (1.0, 880), (1.0, 21), (1.0, 358), (1.0, 719), (1.0, 721), (1.0, 410), (1.0, 182), (1.0, 828), (1.0, 516), (1.0, 615), (1.0, 834), (1.0, 931), (0.875, 668), (0.875, 622), (0.875, 952), (0.875, 727), (0.875, 739), (0.875, 728), (0.875, 525), (0.875, 953), (0.875, 889), (0.875, 891), (0.875, 602), (0.875, 841), (0.875, 840), (0.875, 618), (0.875, 837), (0.875, 950), (0.875, 873), (0.875, 627), (0.75, 336), (0.75, 698), (0.75, 664), (0.75, 633), (0.75, 569), (0.75, 88), (0.75, 848), (0.75, 732), (0.75, 746), (0.75, 749), (0.75, 74), (0.75, 387), (0.75, 894), (0.75, 738), (0.75, 601), (0.75, 603), (0.75, 861), (0.75, 963), (0.75, 870), (0.75, 425), (0.75, 342), (0.75, 844), (0.75, 970), (0.75, 853), (0.75, 858), (0.75, 639), (0.75, 916), (0.75, 688), (0.75, 745), (0.75, 850), (0.75, 729), (0.75, 619), (0.75, 899), (0.75, 868), (0.75, 534), (0.75, 634), (0.75, 773), (0.75, 333), (0.75, 901), (0.75, 967), (0.75, 415), (0.75, 56), (0.75, 744), (0.75, 874), (0.75, 526), (0.75, 681), (0.75, 521), (0.75, 923), (0.75, 114), (0.75, 132), (0.75, 730), (0.75, 624), (0.75, 964), (0.75, 527), (0.75, 705), (0.75, 835), (0.75, 736), (0.75, 304), (0.75, 676), (0.75, 175), (0.75, 796), (0.75, 742), (0.75, 961), (0.75, 408), (0.75, 715), (0.75, 860), (0.75, 165), (0.75, 430), (0.75, 872), (0.75, 871), (0.75, 625), (0.75, 168), (0.75, 843), (0.75, 734), (0.75, 654), (0.75, 341), (0.75, 940), (0.625, 190), (0.625, 644), (0.625, 685), (0.625, 295), (0.625, 145), (0.625, 517), (0.625, 706), (0.625, 803), (0.625, 866), (0.625, 313), (0.625, 399), (0.625, 542), (0.625, 689), (0.625, 356), (0.625, 611), (0.625, 778), (0.625, 768), (0.625, 756), (0.625, 660), (0.625, 649), (0.625, 532), (0.625, 530), (0.625, 631), (0.625, 955), (0.625, 178), (0.625, 902), (0.625, 936), (0.625, 960), (0.625, 629), (0.625, 543), (0.625, 420), (0.625, 545), (0.625, 226), (0.625, 695), (0.625, 693), (0.625, 909), (0.625, 626), (0.625, 731), (0.625, 63), (0.625, 910), (0.625, 432), (0.625, 691), (0.625, 805), (0.625, 829), (0.625, 559), (0.625, 518), (0.625, 966), (0.625, 433), (0.625, 822), (0.625, 846), (0.625, 713), (0.625, 935), (0.625, 406), (0.625, 671), (0.625, 505), (0.625, 431), (0.625, 413), (0.625, 595), (0.625, 62), (0.625, 216), (0.625, 535), (0.625, 877), (0.625, 294), (0.625, 663), (0.625, 776), (0.625, 429), (0.625, 790), (0.625, 318), (0.625, 659), (0.625, 207), (0.625, 823), (0.625, 85), (0.625, 436), (0.625, 106), (0.625, 513), (0.625, 933), (0.625, 636), (0.625, 185), (0.625, 672), (0.625, 862), (0.625, 205), (0.625, 753), (0.625, 661), (0.625, 750), (0.625, 206), (0.625, 945), (0.625, 137), (0.625, 680), (0.625, 0), (0.625, 653), (0.625, 666), (0.625, 540), (0.625, 120), (0.625, 254), (0.625, 282), (0.625, 427), (0.625, 929), (0.5, 553), (0.5, 26), (0.5, 539), (0.5, 810), (0.5, 451), (0.5, 722), (0.5, 65), (0.5, 839), (0.5, 262), (0.5, 396), (0.5, 821), (0.5, 551), (0.5, 171), (0.5, 855), (0.5, 554), (0.5, 815), (0.5, 380), (0.5, 720), (0.5, 897), (0.5, 357), (0.5, 108), (0.5, 754), (0.5, 403), (0.5, 367), (0.5, 673), (0.5, 375), (0.5, 441), (0.5, 148), (0.5, 193), (0.5, 650), (0.5, 447), (0.5, 442), (0.5, 115), (0.5, 677), (0.5, 303), (0.5, 562), (0.5, 926), (0.5, 757), (0.5, 893), (0.5, 735), (0.5, 547), (0.5, 949), (0.5, 439), (0.5, 509), (0.5, 248), (0.5, 40), (0.5, 708), (0.5, 766), (0.5, 593), (0.5, 751), (0.41666666666666663, 921), (0.41666666666666663, 968), (0.41666666666666663, 971), (0.41666666666666663, 957), (0.41666666666666663, 956), (0.375, 959), (0.375, 938), (0.375, 941), (0.375, 920), (0.375, 913), (0.29166666666666663, 881), (0.25, 903)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 878
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 157
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(* ? ?)`y`#`#`y`#`#`(* ? ?)`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (* y y) (* 2 y)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 948
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`2`#`#`(* ? ?)`y`#`#`2`#`#`#
 s_expr: (defun my_func (x y) (+ (+ x (* y 2)) (* y 2)))
 nr_nodes: 10]
(CANDIDATE)[id: 277
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
[Generation 7]
[Computing fitness]
[(1.625, 895), (1.5, 1020), (1.5, 682), (1.5, 500), (1.5, 869), (1.5, 277), (1.5, 878), (1.5, 780), (1.5, 383), (1.5, 157), (1.5, 1005), (1.5, 915), (1.5, 1003), (1.5, 948), (1.5, 498), (1.375, 1062), (1.375, 1047), (1.375, 859), (1.375, 886), (1.375, 646), (1.25, 557), (1.25, 515), (1.25, 404), (1.25, 189), (1.25, 996), (1.25, 794), (1.25, 989), (1.25, 883), (1.25, 533), (1.25, 657), (1.25, 1011), (1.25, 801), (1.25, 898), (1.25, 914), (1.25, 905), (1.25, 792), (1.25, 992), (1.25, 896), (1.25, 791), (1.25, 1001), (1.25, 1068), (1.25, 907), (1.25, 423), (1.25, 789), (1.25, 812), (1.25, 401), (1.25, 887), (1.25, 502), (1.25, 510), (1.25, 690), (1.25, 995), (1.25, 1028), (1.25, 72), (1.25, 402), (1.25, 617), (1.25, 395), (1.25, 407), (1.25, 838), (1.25, 640), (1.25, 892), (1.25, 863), (1.25, 51), (1.25, 598), (1.25, 670), (1.25, 1037), (1.25, 813), (1.125, 508), (1.125, 937), (1.125, 405), (1.125, 787), (1.125, 930), (1.125, 613), (1.125, 819), (1.125, 692), (1.125, 998), (1.125, 548), (1.125, 1015), (1.125, 917), (1.125, 546), (1.125, 925), (1.125, 609), (1.125, 785), (1.125, 795), (1.125, 604), (1.125, 879), (1.125, 1038), (1.125, 312), (1.125, 1012), (1.125, 376), (1.125, 630), (1.125, 988), (1.125, 504), (1.125, 714), (1.125, 158), (1.125, 1045), (1.125, 885), (1.125, 718), (1.125, 709), (1.125, 1066), (1.125, 658), (1.125, 799), (1.125, 761), (1.125, 1007), (1.125, 1034), (1.125, 717), (1.125, 225), (1.125, 924), (1.125, 325), (1.125, 378), (1.125, 807), (1.125, 724), (1.125, 610), (1.125, 1042), (1.125, 1048), (1.125, 986), (1.125, 656), (1.125, 802), (1.125, 1004), (1.125, 1016), (1.125, 621), (1.125, 239), (1.125, 647), (1.125, 642), (1.125, 1060), (1.125, 1026), (1.125, 50), (1.125, 943), (1.125, 965), (1.125, 285), (1.125, 499), (1.125, 645), (1.125, 908), (1.125, 1024), (1.125, 797), (1.125, 605), (1.125, 918), (1.125, 806), (1.125, 212), (1.125, 740), (1.125, 904), (1.125, 528), (1.125, 911), (1.125, 563), (1.125, 1022), (1.125, 1030), (1.125, 800), (1.125, 890), (1.125, 662), (1.0, 824), (1.0, 182), (1.0, 931), (1.0, 687), (1.0, 783), (1.0, 721), (1.0, 755), (1.0, 410), (1.0, 978), (1.0, 733), (1.0, 763), (1.0, 192), (1.0, 615), (1.0, 827), (1.0, 944), (1.0, 828), (1.0, 719), (1.0, 300), (1.0, 723), (1.0, 947), (1.0, 347), (1.0, 21), (1.0, 519), (1.0, 880), (1.0, 111), (1.0, 1051), (1.0, 825), (1.0, 516), (1.0, 1046), (1.0, 678), (1.0, 928), (1.0, 358), (1.0, 1056), (1.0, 536), (1.0, 834), (0.875, 727), (0.875, 873), (0.875, 952), (0.875, 728), (0.875, 602), (0.875, 837), (0.875, 953), (0.875, 891), (0.875, 618), (0.875, 950), (0.875, 622), (0.875, 525), (0.875, 668), (0.875, 841), (0.875, 627), (0.875, 889), (0.875, 739), (0.875, 1072), (0.875, 985), (0.875, 840), (0.75, 899), (0.75, 742), (0.75, 1069), (0.75, 796), (0.75, 601), (0.75, 425), (0.75, 526), (0.75, 341), (0.75, 634), (0.75, 744), (0.75, 773), (0.75, 983), (0.75, 874), (0.75, 738), (0.75, 415), (0.75, 527), (0.75, 1043), (0.75, 844), (0.75, 1041), (0.75, 168), (0.75, 625), (0.75, 963), (0.75, 736), (0.75, 970), (0.75, 521), (0.75, 304), (0.75, 848), (0.75, 387), (0.75, 633), (0.75, 916), (0.75, 730), (0.75, 1055), (0.75, 1006), (0.75, 603), (0.75, 569), (0.75, 534), (0.75, 745), (0.75, 861), (0.75, 654), (0.75, 961), (0.75, 688), (0.75, 698), (0.75, 676), (0.75, 664), (0.75, 681), (0.75, 619), (0.75, 749), (0.75, 940), (0.75, 430), (0.75, 1063), (0.75, 964), (0.75, 1033), (0.75, 88), (0.75, 732), (0.75, 746), (0.75, 1057), (0.75, 872), (0.75, 734), (0.75, 894), (0.75, 132), (0.75, 336), (0.75, 333), (0.75, 729), (0.75, 74), (0.75, 868), (0.75, 871), (0.75, 901), (0.75, 858), (0.75, 56), (0.75, 835), (0.75, 923), (0.75, 1040), (0.75, 715), (0.75, 860), (0.75, 342), (0.75, 624), (0.75, 639), (0.75, 408), (0.75, 165), (0.75, 843), (0.75, 705), (0.75, 175), (0.75, 850), (0.75, 853), (0.75, 870), (0.75, 967), (0.75, 114), (0.625, 530), (0.625, 671), (0.625, 413), (0.625, 190), (0.625, 823), (0.625, 429), (0.625, 1009), (0.625, 685), (0.625, 660), (0.625, 313), (0.625, 294), (0.625, 975), (0.625, 226), (0.625, 185), (0.625, 910), (0.625, 1014), (0.625, 205), (0.625, 672), (0.625, 432), (0.625, 805), (0.625, 513), (0.625, 982), (0.625, 216), (0.625, 178), (0.625, 661), (0.625, 649), (0.625, 866), (0.625, 1036), (0.625, 629), (0.625, 207), (0.625, 695), (0.625, 356), (0.625, 936), (0.625, 768), (0.625, 790), (0.625, 406), (0.625, 433), (0.625, 750), (0.625, 933), (0.625, 862), (0.625, 631), (0.625, 145), (0.625, 1039), (0.625, 902), (0.625, 693), (0.625, 545), (0.625, 994), (0.625, 803), (0.625, 753), (0.625, 626), (0.625, 518), (0.625, 877), (0.625, 778), (0.625, 756), (0.625, 1029), (0.625, 62), (0.625, 663), (0.625, 644), (0.625, 532), (0.625, 63), (0.625, 517), (0.625, 955), (0.625, 731), (0.625, 611), (0.625, 542), (0.625, 636), (0.625, 691), (0.625, 431), (0.625, 713), (0.625, 106), (0.625, 295), (0.625, 318), (0.625, 935), (0.625, 706), (0.625, 399), (0.625, 543), (0.625, 1052), (0.625, 85), (0.625, 535), (0.625, 829), (0.625, 420), (0.625, 689), (0.625, 776), (0.625, 909), (0.625, 505), (0.625, 559), (0.625, 822), (0.625, 1058), (0.625, 960), (0.625, 1031), (0.625, 659), (0.625, 595), (0.625, 846), (0.625, 436), (0.625, 966), (0.5, 1008), (0.5, 991), (0.5, 1049), (0.5, 987), (0.5, 1018), (0.5, 1050), (0.5, 1053), (0.375, 977), (0.375, 1071), (0.375, 980), (0.375, 1065), (0.29166666666666663, 973), (0.29166666666666663, 1000), (0.25, 1027), (0.16666666666666666, 1025)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 1020
 encoding: (defun my_func (x y) ?)`(* ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`2`#`#`(* ? ?)`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* (+ (* x 2) 2) (* y y)))
 nr_nodes: 10]
(CANDIDATE)[id: 682
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 869
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`y`#`#`(+ ? ?)`(+ ? ?)`x`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y y) (+ (+ x y) y)))
 nr_nodes: 10]
[Generation 8]
[Computing fitness]
[(1.625, 895), (1.5, 500), (1.5, 878), (1.5, 383), (1.5, 1110), (1.5, 915), (1.5, 277), (1.5, 780), (1.5, 498), (1.5, 1005), (1.5, 948), (1.5, 869), (1.5, 157), (1.5, 1020), (1.5, 1003), (1.5, 682), (1.375, 646), (1.375, 859), (1.375, 1092), (1.375, 1047), (1.375, 886), (1.375, 1062), (1.25, 907), (1.25, 1011), (1.25, 905), (1.25, 1090), (1.25, 1074), (1.25, 896), (1.25, 789), (1.25, 792), (1.25, 657), (1.25, 1121), (1.25, 72), (1.25, 1001), (1.25, 1129), (1.25, 1037), (1.25, 887), (1.25, 992), (1.25, 801), (1.25, 502), (1.25, 1114), (1.25, 404), (1.25, 1080), (1.25, 996), (1.25, 51), (1.25, 690), (1.25, 1144), (1.25, 189), (1.25, 1068), (1.25, 1098), (1.25, 640), (1.25, 1164), (1.25, 407), (1.25, 510), (1.25, 883), (1.25, 1117), (1.25, 423), (1.25, 402), (1.25, 557), (1.25, 617), (1.25, 1108), (1.25, 395), (1.25, 995), (1.25, 670), (1.25, 863), (1.25, 598), (1.25, 812), (1.25, 813), (1.25, 898), (1.25, 1112), (1.25, 401), (1.25, 914), (1.25, 892), (1.25, 1101), (1.25, 791), (1.25, 515), (1.25, 1028), (1.25, 989), (1.25, 794), (1.25, 533), (1.25, 838), (1.125, 604), (1.125, 1026), (1.125, 499), (1.125, 924), (1.125, 911), (1.125, 504), (1.125, 1034), (1.125, 986), (1.125, 1012), (1.125, 937), (1.125, 1007), (1.125, 1111), (1.125, 1160), (1.125, 610), (1.125, 692), (1.125, 795), (1.125, 662), (1.125, 1066), (1.125, 802), (1.125, 528), (1.125, 630), (1.125, 546), (1.125, 740), (1.125, 1155), (1.125, 158), (1.125, 563), (1.125, 1126), (1.125, 658), (1.125, 376), (1.125, 819), (1.125, 312), (1.125, 1097), (1.125, 548), (1.125, 718), (1.125, 1015), (1.125, 325), (1.125, 717), (1.125, 904), (1.125, 917), (1.125, 1119), (1.125, 1109), (1.125, 1045), (1.125, 785), (1.125, 930), (1.125, 787), (1.125, 890), (1.125, 1174), (1.125, 405), (1.125, 709), (1.125, 1022), (1.125, 1150), (1.125, 724), (1.125, 1016), (1.125, 1141), (1.125, 1158), (1.125, 1157), (1.125, 925), (1.125, 1004), (1.125, 879), (1.125, 50), (1.125, 1038), (1.125, 1030), (1.125, 1024), (1.125, 918), (1.125, 239), (1.125, 885), (1.125, 613), (1.125, 647), (1.125, 943), (1.125, 1138), (1.125, 1060), (1.125, 807), (1.125, 800), (1.125, 998), (1.125, 988), (1.125, 1094), (1.125, 1042), (1.125, 965), (1.125, 212), (1.125, 806), (1.125, 508), (1.125, 605), (1.125, 285), (1.125, 645), (1.125, 621), (1.125, 761), (1.125, 656), (1.125, 1048), (1.125, 642), (1.125, 799), (1.125, 378), (1.125, 714), (1.125, 797), (1.125, 908), (1.125, 609), (1.125, 225), (1.0, 1145), (1.0, 1046), (1.0, 763), (1.0, 755), (1.0, 516), (1.0, 1172), (1.0, 410), (1.0, 723), (1.0, 678), (1.0, 615), (1.0, 944), (1.0, 182), (1.0, 824), (1.0, 519), (1.0, 1176), (1.0, 347), (1.0, 947), (1.0, 192), (1.0, 1056), (1.0, 928), (1.0, 880), (1.0, 783), (1.0, 111), (1.0, 536), (1.0, 828), (1.0, 719), (1.0, 21), (1.0, 300), (1.0, 733), (1.0, 827), (1.0, 721), (1.0, 834), (1.0, 978), (1.0, 825), (1.0, 358), (1.0, 1051), (1.0, 1077), (1.0, 931), (1.0, 687), (0.875, 953), (0.875, 1072), (0.875, 952), (0.875, 950), (0.875, 891), (0.875, 668), (0.875, 841), (0.875, 727), (0.875, 889), (0.875, 602), (0.875, 837), (0.875, 525), (0.875, 728), (0.875, 622), (0.875, 618), (0.875, 739), (0.875, 840), (0.875, 627), (0.875, 873), (0.875, 985), (0.75, 1096), (0.75, 705), (0.75, 688), (0.75, 1103), (0.75, 304), (0.75, 744), (0.75, 796), (0.75, 1033), (0.75, 715), (0.75, 899), (0.75, 746), (0.75, 624), (0.75, 901), (0.75, 835), (0.75, 1143), (0.75, 853), (0.75, 970), (0.75, 88), (0.75, 734), (0.75, 868), (0.75, 940), (0.75, 534), (0.75, 408), (0.75, 874), (0.75, 736), (0.75, 872), (0.75, 1063), (0.75, 923), (0.75, 983), (0.75, 860), (0.75, 1167), (0.75, 634), (0.75, 1088), (0.75, 664), (0.75, 1170), (0.75, 1057), (0.75, 619), (0.75, 964), (0.75, 342), (0.75, 175), (0.75, 742), (0.75, 681), (0.75, 698), (0.75, 341), (0.75, 1041), (0.75, 425), (0.75, 967), (0.75, 639), (0.75, 729), (0.75, 526), (0.75, 963), (0.75, 916), (0.75, 1147), (0.75, 569), (0.75, 773), (0.75, 1131), (0.75, 625), (0.75, 730), (0.75, 601), (0.75, 894), (0.75, 1040), (0.75, 848), (0.75, 861), (0.75, 114), (0.75, 168), (0.75, 1093), (0.75, 1006), (0.75, 165), (0.75, 961), (0.75, 521), (0.75, 333), (0.75, 745), (0.75, 732), (0.75, 74), (0.75, 871), (0.75, 336), (0.75, 132), (0.75, 738), (0.75, 1102), (0.75, 633), (0.75, 1134), (0.75, 387), (0.75, 844), (0.75, 843), (0.75, 415), (0.75, 56), (0.75, 858), (0.75, 676), (0.75, 1055), (0.75, 603), (0.75, 850), (0.75, 430), (0.75, 749), (0.75, 527), (0.75, 1069), (0.75, 1043), (0.75, 870), (0.75, 654), (0.625, 413), (0.625, 768), (0.625, 226), (0.625, 207), (0.625, 178), (0.625, 1148), (0.625, 313), (0.625, 1083), (0.625, 216), (0.625, 695), (0.625, 356), (0.625, 1128), (0.625, 530), (0.625, 982), (0.625, 805), (0.625, 1120), (0.625, 1166), (0.625, 205), (0.625, 1086), (0.625, 1132), (0.625, 513), (0.625, 294), (0.625, 432), (0.625, 1125), (0.625, 1091), (0.625, 672), (0.625, 671), (0.625, 429), (0.625, 790), (0.625, 1106), (0.625, 685), (0.625, 910), (0.625, 661), (0.625, 649), (0.625, 1079), (0.625, 190), (0.625, 1100), (0.625, 1014), (0.625, 866), (0.625, 1136), (0.625, 975), (0.625, 1118), (0.625, 629), (0.625, 1036), (0.625, 823), (0.625, 1151), (0.625, 936), (0.625, 660), (0.625, 1154), (0.625, 1009), (0.625, 185), (0.5, 1140), (0.5, 1169), (0.5, 1082), (0.5, 1084), (0.41666666666666663, 1153), (0.41666666666666663, 1123), (0.375, 1161), (0.375, 1104), (0.375, 1133), (0.375, 1115), (0.375, 1162), (0.375, 1076), (0.375, 1165), (0.29166666666666663, 1156), (0.25, 1116)]
[Cross-over]
Top 5 candidates:
(CANDIDATE)[id: 895
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`(+ ? ?)`y`#`#`x`#`#`(* ? ?)`x`#`#`x`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (+ (+ (+ y x) (* x x)) y))
 nr_nodes: 10]
(CANDIDATE)[id: 500
 encoding: (defun my_func (x y) ?)`(+ ? ?)`x`#`#`(* ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ x (* x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 878
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`(+ ? ?)`(* ? ?)`x`#`#`2`#`#`y`#`#`y`#`#`#
 s_expr: (defun my_func (x y) (* y (+ (+ (* x 2) y) y)))
 nr_nodes: 10]
(CANDIDATE)[id: 383
 encoding: (defun my_func (x y) ?)`(* ? ?)`y`#`#`(+ ? ?)`x`#`#`(* ? ?)`y`#`#`(+ ? ?)`2`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (* y (+ x (* y (+ 2 x)))))
 nr_nodes: 10]
(CANDIDATE)[id: 1110
 encoding: (defun my_func (x y) ?)`(+ ? ?)`(+ ? ?)`y`#`#`(* ? ?)`y`#`#`2`#`#`(* ? ?)`y`#`#`x`#`#`#
 s_expr: (defun my_func (x y) (+ (+ y (* y 2)) (* y x)))
 nr_nodes: 10]
[Generation 9]
[Computing fitness]
Found ideal candidate: (defun my_func (x y) (+ x (* y (+ 2 x))))

Process finished with exit code 0
